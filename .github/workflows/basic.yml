# Based on https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml

on: [pull_request]

name: Basic Checks

# Ensures that only a single workflow per PR will run at a time.
# Cancels in-progress jobs if new commit is pushed.
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

env:
    GO_VERSION: 1.21

# TODO: perform other tests on wasi examples
jobs:
  # build-local-ic:
  #   runs-on: ubuntu-latest
  #   name: build
  #   steps:
  #     - name: Checkout interchaintest
  #       uses: actions/checkout@v4
  #       with:
  #           repository: strangelove-ventures/interchaintest
  #           path: interchaintest

  #     - name: Setup go ${{ env.GO_VERSION }}
  #       uses: actions/setup-go@v5
  #       with:
  #           go-version: ${{ env.GO_VERSION }}

  #     - name: build local-interchain
  #       run: cd interchaintest/local-interchain && make install

  #     - name: Upload localic artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: local-ic
  #         path: ~/go/bin/local-ic

  test:
    name: Wavs Test Suite
    runs-on: linux-8-core
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.83.0
          #   target: wasm32-unknown-unknown
          override: true

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-

      # - name: Download local-ic Artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: local-ic
      #     path: /tmp

      # - name: Make local-ic executable
      #   run: chmod +x /tmp/local-ic

      # - name: Set local-ic env
      #   run: echo "WAVS_LOCAL_IC_BIN_PATH=\"/tmp/local-ic\"" >> $GITHUB_ENV

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Set env
        run: echo "WAVS_SUBMISSION_MNEMONIC=\"test test test test test test test test test test test junk\"" >> $GITHUB_ENV

      - name: Set env
        run: echo "WAVS_CLI_ETH_MNEMONIC=\"test test test test test test test test test test test junk\"" >> $GITHUB_ENV

      - name: Set env
        run: echo "WAVS_AGGREGATOR_MNEMONIC=\"test test test test test test test test test test test junk\"" >> $GITHUB_ENV

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          toolchain: 1.83.0
          command: test
          args: --workspace --locked -- --nocapture
        env:
          RUST_BACKTRACE: 1
          WAVS_LOCAL_IC_BIN_PATH: /tmp/local-ic

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.83.0
          override: true
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-lint-

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: 1.83.0
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          toolchain: 1.83.0
          command: clippy
          args: --all-targets -- -D warnings
