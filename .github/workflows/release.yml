name: Push Docker Image

# TODO: make this on tag
on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lay3rlabs/wasmatic

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        # uses: docker/login-action
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

      # jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         platform:
#           - linux/amd64
#           - linux/arm64
#     steps:
#       - name: Prepare
#         run: |
#           platform=${{ matrix.platform }}
#           echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV          
      
#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY_IMAGE }}
      
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ vars.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       - name: Build and push by digest
#         id: build
#         uses: docker/build-push-action@v6
#         with:
#           platforms: ${{ matrix.platform }}
#           labels: ${{ steps.meta.outputs.labels }}
#           outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      
#       - name: Export digest
#         run: |
#           mkdir -p /tmp/digests
#           digest="${{ steps.build.outputs.digest }}"
#           touch "/tmp/digests/${digest#sha256:}"          
      
#       - name: Upload digest
#         uses: actions/upload-artifact@v4
#         with:
#           name: digests-${{ env.PLATFORM_PAIR }}
#           path: /tmp/digests/*
#           if-no-files-found: error
#           retention-days: 1

#   merge:
#     runs-on: ubuntu-latest
#     needs:
#       - build
#     steps:
#       - name: Download digests
#         uses: actions/download-artifact@v4
#         with:
#           path: /tmp/digests
#           pattern: digests-*
#           merge-multiple: true
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY_IMAGE }}
      
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ vars.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       - name: Create manifest list and push
#         working-directory: /tmp/digests
#         run: |
#           docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#             $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      
#       - name: Inspect image
#         run: |
#           docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }} 