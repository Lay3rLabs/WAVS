{"id":"4da08d2b8e2706ab3774a68c2406664f","source_id_to_path":{"0":"contracts/HelloWorldServiceManager.sol","1":"contracts/IHelloWorldServiceManager.sol","2":"contracts/LayerToken.sol","3":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol","4":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","5":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","6":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","7":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","8":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol","9":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol","10":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","11":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol","12":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol","13":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol","14":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol","15":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol","16":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol","17":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol","18":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol","19":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol","20":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol","21":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol","22":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol","23":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol","24":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol","25":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol","26":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","27":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol","28":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol","29":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","30":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol","31":"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol","32":"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol","33":"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol","34":"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol","35":"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol","36":"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol","37":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol","38":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol"},"language":"Solidity","_format":"ethers-rs-sol-build-info-1","input":{"version":"0.8.28","language":"Solidity","sources":{"contracts/HelloWorldServiceManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ECDSAServiceManagerBase} from \"@eigenlayer/middleware/src/unaudited/ECDSAServiceManagerBase.sol\";\nimport {ECDSAStakeRegistry} from \"@eigenlayer/middleware/src/unaudited/ECDSAStakeRegistry.sol\";\nimport {IServiceManager} from \"@eigenlayer/middleware/src/interfaces/IServiceManager.sol\";\nimport {ECDSAUpgradeable} from \"@openzeppelin-upgrades/contracts/utils/cryptography/ECDSAUpgradeable.sol\";\nimport {IERC1271Upgradeable} from \"@openzeppelin-upgrades/contracts/interfaces/IERC1271Upgradeable.sol\";\nimport {IHelloWorldServiceManager} from \"./IHelloWorldServiceManager.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@eigenlayer/contracts/interfaces/IRewardsCoordinator.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\n/**\n * @title Primary entrypoint for procuring services from HelloWorld.\n * @author Eigen Labs, Inc.\n */\ncontract HelloWorldServiceManager is\n    ECDSAServiceManagerBase,\n    IHelloWorldServiceManager\n{\n    using ECDSAUpgradeable for bytes32;\n\n    uint32 public latestTaskNum;\n\n    // mapping of task indices to all tasks hashes\n    // when a task is created, task hash is stored here,\n    // and responses need to pass the actual task,\n    // which is hashed onchain and checked against this mapping\n    mapping(uint32 => bytes32) public allTaskHashes;\n\n    // mapping of task indices to hash of abi.encode(taskResponse, taskResponseMetadata)\n    mapping(address => mapping(uint32 => bytes)) public allTaskResponses;\n\n    modifier onlyOperator() {\n        require(\n            ECDSAStakeRegistry(stakeRegistry).operatorRegistered(msg.sender),\n            \"Operator must be the caller\"\n        );\n        _;\n    }\n\n    constructor(\n        address _avsDirectory,\n        address _stakeRegistry,\n        address _rewardsCoordinator,\n        address _delegationManager\n    )\n        ECDSAServiceManagerBase(\n            _avsDirectory,\n            _stakeRegistry,\n            _rewardsCoordinator,\n            _delegationManager\n        )\n    {}\n\n    /* FUNCTIONS */\n    // NOTE: this function creates new task, assigns it a taskId\n    function createNewTask(string memory name) external returns (Task memory) {\n        // create a new task struct\n        Task memory newTask;\n        newTask.name = name;\n        newTask.taskCreatedBlock = uint32(block.number);\n\n        // store hash of task onchain, emit event, and increase taskNum\n        allTaskHashes[latestTaskNum] = keccak256(abi.encode(newTask));\n        emit NewTaskCreated(latestTaskNum, newTask);\n        latestTaskNum = latestTaskNum + 1;\n\n        return newTask;\n    }\n\n    function respondToTask(\n        Task calldata task,\n        uint32 referenceTaskIndex,\n        bytes memory signature\n    ) external {\n        // check that the task is valid, hasn't been responsed yet, and is being responded in time\n        require(\n            keccak256(abi.encode(task)) == allTaskHashes[referenceTaskIndex],\n            \"supplied task does not match the one recorded in the contract\"\n        );\n        require(\n            allTaskResponses[msg.sender][referenceTaskIndex].length == 0,\n            \"Operator has already responded to the task\"\n        );\n\n        // The message that was signed\n        bytes32 messageHash = keccak256(abi.encodePacked(\"Hello, \", task.name));\n        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\n        // TODO console log that later and verify\n        bytes4 magicValue = IERC1271Upgradeable.isValidSignature.selector;\n\n        if (\n            !(magicValue ==\n                ECDSAStakeRegistry(stakeRegistry).isValidSignature(\n                    ethSignedMessageHash,\n                    signature\n                ))\n        ) {\n            revert();\n        }\n\n        // updating the storage with task responses\n        allTaskResponses[msg.sender][referenceTaskIndex] = signature;\n\n        // emitting event\n        emit TaskResponded(referenceTaskIndex, task, msg.sender);\n    }\n}\n"},"contracts/IHelloWorldServiceManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ninterface IHelloWorldServiceManager {\n    event NewTaskCreated(uint32 indexed taskIndex, Task task);\n\n    event TaskResponded(uint32 indexed taskIndex, Task task, address operator);\n\n    struct Task {\n        string name;\n        uint32 taskCreatedBlock;\n    }\n\n    function latestTaskNum() external view returns (uint32);\n\n    function allTaskHashes(uint32 taskIndex) external view returns (bytes32);\n\n    function allTaskResponses(\n        address operator,\n        uint32 taskIndex\n    ) external view returns (bytes memory);\n\n    function createNewTask(string memory name) external returns (Task memory);\n\n    function respondToTask(\n        Task calldata task,\n        uint32 referenceTaskIndex,\n        bytes calldata signature\n    ) external;\n}\n"},"contracts/LayerToken.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract LayerToken is Context, IERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    uint256 initSupply = type(uint88).max;\n\n    constructor() {\n        _mint(msg.sender, initSupply);\n    }\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external pure returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function mint(address /*to*/, uint256 amount) public virtual {\n        address owner = _msgSender();\n        _mint(owner, amount);\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address /*spender*/,\n        uint256 /*amount*/\n    ) public virtual override returns (bool) {\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        _mint(from, amount);\n        unchecked {\n            _balances[from] = _balances[from] - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./ISignatureUtils.sol\";\n\ninterface IAVSDirectory is ISignatureUtils {\n    /// @notice Enum representing the status of an operator's registration with an AVS\n    enum OperatorAVSRegistrationStatus {\n        UNREGISTERED, // Operator not registered to AVS\n        REGISTERED // Operator registered to AVS\n\n    }\n\n    /**\n     * @notice Emitted when @param avs indicates that they are updating their MetadataURI string\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n     */\n    event AVSMetadataURIUpdated(address indexed avs, string metadataURI);\n\n    /// @notice Emitted when an operator's registration status for an AVS is updated\n    event OperatorAVSRegistrationStatusUpdated(\n        address indexed operator, address indexed avs, OperatorAVSRegistrationStatus status\n    );\n\n    /**\n     * @notice Called by the AVS's service manager contract to register an operator with the avs.\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n     */\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external;\n\n    /**\n     * @notice Called by an avs to deregister an operator with the avs.\n     * @param operator The address of the operator to deregister.\n     */\n    function deregisterOperatorFromAVS(address operator) external;\n\n    /**\n     * @notice Called by an AVS to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\n     * @param metadataURI The URI for metadata associated with an AVS\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `AVSMetadataURIUpdated` event\n     */\n    function updateAVSMetadataURI(string calldata metadataURI) external;\n\n    /**\n     * @notice Returns whether or not the salt has already been used by the operator.\n     * @dev Salts is used in the `registerOperatorToAVS` function.\n     */\n    function operatorSaltIsSpent(address operator, bytes32 salt) external view returns (bool);\n\n    /**\n     * @notice Calculates the digest hash to be signed by an operator to register with an AVS\n     * @param operator The account registering as an operator\n     * @param avs The address of the service manager contract for the AVS that the operator is registering to\n     * @param salt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateOperatorAVSRegistrationDigestHash(\n        address operator,\n        address avs,\n        bytes32 salt,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the Registration struct used by the contract\n    function OPERATOR_AVS_REGISTRATION_TYPEHASH() external view returns (bytes32);\n\n    /**\n     * @notice Called by an operator to cancel a salt that has been used to register with an AVS.\n     * @param salt A unique and single use value associated with the approver signature.\n     */\n    function cancelSalt(bytes32 salt) external;\n\n    /**\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\n     *\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n     * for more detailed information please read EIP-712.\n     */\n    function domainSeparator() external view returns (bytes32);\n}\n"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"./IStrategy.sol\";\nimport \"./ISignatureUtils.sol\";\n\n/**\n * @title DelegationManager\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\n * - enabling anyone to register as an operator in EigenLayer\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ninterface IDelegationManager is ISignatureUtils {\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\n    struct OperatorDetails {\n        /// @notice DEPRECATED -- this field is no longer used, payments are handled in PaymentCoordinator.sol\n        address __deprecated_earningsReceiver;\n        /**\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n         * @dev Signature verification follows these rules:\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n         */\n        address delegationApprover;\n        /**\n         * @notice A minimum delay -- measured in blocks -- enforced between:\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\n         * and\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\n         * then they are only allowed to either increase this value or keep it the same.\n         */\n        uint32 stakerOptOutWindowBlocks;\n    }\n\n    /**\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\n     */\n    struct StakerDelegation {\n        // the staker who is delegating\n        address staker;\n        // the operator being delegated to\n        address operator;\n        // the staker's nonce\n        uint256 nonce;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /**\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n     */\n    struct DelegationApproval {\n        // the staker who is delegating\n        address staker;\n        // the operator being delegated to\n        address operator;\n        // the operator's provided salt\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /**\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\n     */\n    struct Withdrawal {\n        // The address that originated the Withdrawal\n        address staker;\n        // The address that the staker was delegated to at the time that the Withdrawal was created\n        address delegatedTo;\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\n        address withdrawer;\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\n        uint256 nonce;\n        // Block number when the Withdrawal was created\n        uint32 startBlock;\n        // Array of strategies that the Withdrawal contains\n        IStrategy[] strategies;\n        // Array containing the amount of shares in each Strategy in the `strategies` array\n        uint256[] shares;\n    }\n\n    struct QueuedWithdrawalParams {\n        // Array of strategies that the QueuedWithdrawal contains\n        IStrategy[] strategies;\n        // Array containing the amount of shares in each Strategy in the `strategies` array\n        uint256[] shares;\n        // The address of the withdrawer\n        address withdrawer;\n    }\n\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\n\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\n\n    /**\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n     */\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when @param staker delegates to @param operator.\n    event StakerDelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker undelegates from @param operator.\n    event StakerUndelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n    /**\n     * @notice Emitted when a new withdrawal is queued.\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\n     * @param withdrawal Is the withdrawal itself.\n     */\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\n\n    /// @notice Emitted when a queued withdrawal is completed\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\n\n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\n\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\n    event StrategyWithdrawalDelayBlocksSet(IStrategy strategy, uint256 previousValue, uint256 newValue);\n\n    /**\n     * @notice Registers the caller as an operator in EigenLayer.\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n     *\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n     * @dev This function will revert if the caller is already delegated to an operator.\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function registerAsOperator(\n        OperatorDetails calldata registeringOperatorDetails,\n        string calldata metadataURI\n    ) external;\n\n    /**\n     * @notice Updates an operator's stored `OperatorDetails`.\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n     *\n     * @dev The caller must have previously registered as an operator in EigenLayer.\n     */\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\n\n    /**\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n     * @param metadataURI The URI for metadata associated with an operator\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\n\n    /**\n     * @notice Caller delegates their stake to an operator.\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n     * @param approverSalt A unique single use value tied to an individual signature.\n     * @dev The approverSignatureAndExpiry is used in the event that:\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\n     *                  AND\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateTo(\n        address operator,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external;\n\n    /**\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n     * @param staker The account delegating stake to an `operator` account\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n     *\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n     * is the `msg.sender`, then approval is assumed.\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateToBySignature(\n        address staker,\n        address operator,\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external;\n\n    /**\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of the EigenPodManager\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\n     * @param staker The account to be undelegated.\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n     *\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n     * @dev Reverts if the `staker` is already undelegated.\n     */\n    function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\n\n    /**\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n     * their operator.\n     *\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n     */\n    function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams)\n        external\n        returns (bytes32[] memory);\n\n    /**\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n     * @param withdrawal The Withdrawal to complete.\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n     * will simply be transferred to the caller directly.\n     * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n     * any other strategies, which will be transferred to the withdrawer.\n     */\n    function completeQueuedWithdrawal(\n        Withdrawal calldata withdrawal,\n        IERC20[] calldata tokens,\n        uint256 middlewareTimesIndex,\n        bool receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n     * @param withdrawals The Withdrawals to complete.\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\n     */\n    function completeQueuedWithdrawals(\n        Withdrawal[] calldata withdrawals,\n        IERC20[][] calldata tokens,\n        uint256[] calldata middlewareTimesIndexes,\n        bool[] calldata receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Increases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to increase the delegated shares.\n     * @param shares The number of shares to increase.\n     *\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n    /**\n     * @notice Decreases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to decrease the delegated shares.\n     * @param shares The number of shares to decrease.\n     *\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\n\n    /**\n     * @notice Owner-only function for modifying the value of the `minWithdrawalDelayBlocks` variable.\n     * @param newMinWithdrawalDelayBlocks new value of `minWithdrawalDelayBlocks`.\n     */\n    function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external; \n\n    /**\n     * @notice Called by owner to set the minimum withdrawal delay blocks for each passed in strategy\n     * Note that the min number of blocks to complete a withdrawal of a strategy is\n     * MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\n     * @param strategies The strategies to set the minimum withdrawal delay blocks for\n     * @param withdrawalDelayBlocks The minimum withdrawal delay blocks to set for each strategy\n     */\n    function setStrategyWithdrawalDelayBlocks(IStrategy[] calldata strategies, uint256[] calldata withdrawalDelayBlocks) external;\n\n    /**\n     * @notice returns the address of the operator that `staker` is delegated to.\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n     */\n    function delegatedTo(address staker) external view returns (address);\n\n    /**\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\n     */\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\n\n    /**\n     * @notice Returns the delegationApprover account for an operator\n     */\n    function delegationApprover(address operator) external view returns (address);\n\n    /**\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\n     */\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\n\n    /**\n     * @notice Given array of strategies, returns array of shares for the operator\n     */\n    function getOperatorShares(\n        address operator,\n        IStrategy[] memory strategies\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\n     * @param strategies The strategies to check withdrawal delays for\n     */\n    function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\n\n    /**\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n     * @dev By design, the following invariant should hold for each Strategy:\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n     * = sum (delegateable shares of all stakers delegated to the operator)\n     */\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\n\n\n    /**\n     * @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n     * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n     */\n    function getDelegatableShares(address staker) external view returns (IStrategy[] memory, uint256[] memory);\n\n    /**\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n     */\n    function isDelegated(address staker) external view returns (bool);\n\n    /**\n     * @notice Returns true is an operator has previously registered for delegation.\n     */\n    function isOperator(address operator) external view returns (bool);\n\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\n    function stakerNonce(address staker) external view returns (uint256);\n\n    /**\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n     */\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n    /**\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\n     */\n    function minWithdrawalDelayBlocks() external view returns (uint256);\n\n    /**\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n     */\n    function strategyWithdrawalDelayBlocks(IStrategy strategy) external view returns (uint256);\n\n    /// @notice return address of the beaconChainETHStrategy\n    function beaconChainETHStrategy() external view returns (IStrategy);\n\n    /**\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n     * @param staker The signing staker\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateCurrentStakerDelegationDigestHash(\n        address staker,\n        address operator,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /**\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n     * @param staker The signing staker\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateStakerDelegationDigestHash(\n        address staker,\n        uint256 _stakerNonce,\n        address operator,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /**\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n     * @param staker The account delegating their stake\n     * @param operator The account receiving delegated stake\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n     * @param approverSalt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateDelegationApprovalDigestHash(\n        address staker,\n        address operator,\n        address _delegationApprover,\n        bytes32 approverSalt,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n\n    /**\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\n     *\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n     * for more detailed information please read EIP-712.\n     */\n    function domainSeparator() external view returns (bytes32);\n\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n    function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\n\n    /// @notice Returns the keccak256 hash of `withdrawal`.\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\n}\n"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IStrategy.sol\";\n\n/**\n * @title Interface for the `IRewardsCoordinator` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Allows AVSs to make \"Rewards Submissions\", which get distributed amongst the AVSs' confirmed\n * Operators and the Stakers delegated to those Operators.\n * Calculations are performed based on the completed RewardsSubmission, with the results posted in\n * a Merkle root against which Stakers & Operators can make claims.\n */\ninterface IRewardsCoordinator {\n    /// STRUCTS ///\n    /**\n     * @notice A linear combination of strategies and multipliers for AVSs to weigh\n     * EigenLayer strategies.\n     * @param strategy The EigenLayer strategy to be used for the rewards submission\n     * @param multiplier The weight of the strategy in the rewards submission\n     */\n    struct StrategyAndMultiplier {\n        IStrategy strategy;\n        uint96 multiplier;\n    }\n\n    /**\n     * @notice A reward struct for an operator\n     * @param operator The operator to be rewarded\n     * @param amount The reward amount for the operator\n     */\n    struct OperatorReward {\n        address operator;\n        uint256 amount;\n    }\n\n    /**\n     * @notice A split struct for an Operator\n     * @param oldSplitBips The old split in basis points. This is the split that is active if `block.timestamp < activatedAt`\n     * @param newSplitBips The new split in basis points. This is the split that is active if `block.timestamp >= activatedAt`\n     * @param activatedAt The timestamp at which the split will be activated\n     */\n    struct OperatorSplit {\n        uint16 oldSplitBips;\n        uint16 newSplitBips;\n        uint32 activatedAt;\n    }\n\n    /**\n     * Sliding Window for valid RewardsSubmission startTimestamp\n     *\n     * Scenario A: GENESIS_REWARDS_TIMESTAMP IS WITHIN RANGE\n     *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n     *             <--------------------valid range for startTimestamp------------------------>\n     *             ^\n     *         GENESIS_REWARDS_TIMESTAMP\n     *\n     *\n     * Scenario B: GENESIS_REWARDS_TIMESTAMP IS OUT OF RANGE\n     *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n     *         <------------------------valid range for startTimestamp------------------------>\n     *     ^\n     * GENESIS_REWARDS_TIMESTAMP\n     * @notice RewardsSubmission struct submitted by AVSs when making rewards for their operators and stakers\n     * RewardsSubmission can be for a time range within the valid window for startTimestamp and must be within max duration.\n     * See `createAVSRewardsSubmission()` for more details.\n     * @param strategiesAndMultipliers The strategies and their relative weights\n     * cannot have duplicate strategies and need to be sorted in ascending address order\n     * @param token The rewards token to be distributed\n     * @param amount The total amount of tokens to be distributed\n     * @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution\n     * could start in the past or in the future but within a valid range. See the diagram above.\n     * @param duration The duration of the submission range in seconds. Must be <= MAX_REWARDS_DURATION\n     */\n    struct RewardsSubmission {\n        StrategyAndMultiplier[] strategiesAndMultipliers;\n        IERC20 token;\n        uint256 amount;\n        uint32 startTimestamp;\n        uint32 duration;\n    }\n\n    /**\n     * @notice OperatorDirectedRewardsSubmission struct submitted by AVSs when making operator-directed rewards for their operators and stakers.\n     * @param strategiesAndMultipliers The strategies and their relative weights.\n     * @param token The rewards token to be distributed.\n     * @param operatorRewards The rewards for the operators.\n     * @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution.\n     * @param duration The duration of the submission range in seconds.\n     * @param description Describes what the rewards submission is for.\n     */\n    struct OperatorDirectedRewardsSubmission {\n        StrategyAndMultiplier[] strategiesAndMultipliers;\n        IERC20 token;\n        OperatorReward[] operatorRewards;\n        uint32 startTimestamp;\n        uint32 duration;\n        string description;\n    }\n\n    /**\n     * @notice A distribution root is a merkle root of the distribution of earnings for a given period.\n     * The RewardsCoordinator stores all historical distribution roots so that earners can claim their earnings against older roots\n     * if they wish but the merkle tree contains the cumulative earnings of all earners and tokens for a given period so earners (or their claimers if set)\n     * only need to claim against the latest root to claim all available earnings.\n     * @param root The merkle root of the distribution\n     * @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n     * @param activatedAt The timestamp (seconds) at which the root can be claimed against\n     */\n    struct DistributionRoot {\n        bytes32 root;\n        uint32 rewardsCalculationEndTimestamp;\n        uint32 activatedAt;\n        bool disabled;\n    }\n\n    /**\n     * @notice Internal leaf in the merkle tree for the earner's account leaf\n     * @param earner The address of the earner\n     * @param earnerTokenRoot The merkle root of the earner's token subtree\n     * Each leaf in the earner's token subtree is a TokenTreeMerkleLeaf\n     */\n    struct EarnerTreeMerkleLeaf {\n        address earner;\n        bytes32 earnerTokenRoot;\n    }\n\n    /**\n     * @notice The actual leaves in the distribution merkle tree specifying the token earnings\n     * for the respective earner's subtree. Each leaf is a claimable amount of a token for an earner.\n     * @param token The token for which the earnings are being claimed\n     * @param cumulativeEarnings The cumulative earnings of the earner for the token\n     */\n    struct TokenTreeMerkleLeaf {\n        IERC20 token;\n        uint256 cumulativeEarnings;\n    }\n\n    /**\n     * @notice A claim against a distribution root called by an\n     * earners claimer (could be the earner themselves). Each token claim will claim the difference\n     * between the cumulativeEarnings of the earner and the cumulativeClaimed of the claimer.\n     * Each claim can specify which of the earner's earned tokens they want to claim.\n     * See `processClaim()` for more details.\n     * @param rootIndex The index of the root in the list of DistributionRoots\n     * @param earnerIndex The index of the earner's account root in the merkle tree\n     * @param earnerTreeProof The proof of the earner's EarnerTreeMerkleLeaf against the merkle root\n     * @param earnerLeaf The earner's EarnerTreeMerkleLeaf struct, providing the earner address and earnerTokenRoot\n     * @param tokenIndices The indices of the token leaves in the earner's subtree\n     * @param tokenTreeProofs The proofs of the token leaves against the earner's earnerTokenRoot\n     * @param tokenLeaves The token leaves to be claimed\n     * @dev The merkle tree is structured with the merkle root at the top and EarnerTreeMerkleLeaf as internal leaves\n     * in the tree. Each earner leaf has its own subtree with TokenTreeMerkleLeaf as leaves in the subtree.\n     * To prove a claim against a specified rootIndex(which specifies the distributionRoot being used),\n     * the claim will first verify inclusion of the earner leaf in the tree against _distributionRoots[rootIndex].root.\n     * Then for each token, it will verify inclusion of the token leaf in the earner's subtree against the earner's earnerTokenRoot.\n     */\n    struct RewardsMerkleClaim {\n        uint32 rootIndex;\n        uint32 earnerIndex;\n        bytes earnerTreeProof;\n        EarnerTreeMerkleLeaf earnerLeaf;\n        uint32[] tokenIndices;\n        bytes[] tokenTreeProofs;\n        TokenTreeMerkleLeaf[] tokenLeaves;\n    }\n\n    /// EVENTS ///\n\n    /// @notice emitted when an AVS creates a valid RewardsSubmission\n    event AVSRewardsSubmissionCreated(\n        address indexed avs,\n        uint256 indexed submissionNonce,\n        bytes32 indexed rewardsSubmissionHash,\n        RewardsSubmission rewardsSubmission\n    );\n    /// @notice emitted when a valid RewardsSubmission is created for all stakers by a valid submitter\n    event RewardsSubmissionForAllCreated(\n        address indexed submitter,\n        uint256 indexed submissionNonce,\n        bytes32 indexed rewardsSubmissionHash,\n        RewardsSubmission rewardsSubmission\n    );\n    /// @notice emitted when a valid RewardsSubmission is created when rewardAllStakersAndOperators is called\n    event RewardsSubmissionForAllEarnersCreated(\n        address indexed tokenHopper,\n        uint256 indexed submissionNonce,\n        bytes32 indexed rewardsSubmissionHash,\n        RewardsSubmission rewardsSubmission\n    );\n\n    /**\n     * @notice Emitted when an AVS creates a valid `OperatorDirectedRewardsSubmission`\n     * @param caller The address calling `createOperatorDirectedAVSRewardsSubmission`.\n     * @param avs The avs on behalf of which the operator-directed rewards are being submitted.\n     * @param operatorDirectedRewardsSubmissionHash Keccak256 hash of (`avs`, `submissionNonce` and `operatorDirectedRewardsSubmission`).\n     * @param submissionNonce Current nonce of the avs. Used to generate a unique submission hash.\n     * @param operatorDirectedRewardsSubmission The Operator-Directed Rewards Submission. Contains the token, start timestamp, duration, operator rewards, description and, strategy and multipliers.\n     */\n    event OperatorDirectedAVSRewardsSubmissionCreated(\n        address indexed caller,\n        address indexed avs,\n        bytes32 indexed operatorDirectedRewardsSubmissionHash,\n        uint256 submissionNonce,\n        OperatorDirectedRewardsSubmission operatorDirectedRewardsSubmission\n    );\n\n    /// @notice rewardsUpdater is responsible for submiting DistributionRoots, only owner can set rewardsUpdater\n    event RewardsUpdaterSet(address indexed oldRewardsUpdater, address indexed newRewardsUpdater);\n    event RewardsForAllSubmitterSet(\n        address indexed rewardsForAllSubmitter,\n        bool indexed oldValue,\n        bool indexed newValue\n    );\n    event ActivationDelaySet(uint32 oldActivationDelay, uint32 newActivationDelay);\n    event DefaultOperatorSplitBipsSet(uint16 oldDefaultOperatorSplitBips, uint16 newDefaultOperatorSplitBips);\n\n    /**\n     * @notice Emitted when the operator split for an AVS is set.\n     * @param caller The address calling `setOperatorAVSSplit`.\n     * @param operator The operator on behalf of which the split is being set.\n     * @param avs The avs for which the split is being set by the operator.\n     * @param activatedAt The timestamp at which the split will be activated.\n     * @param oldOperatorAVSSplitBips The old split for the operator for the AVS.\n     * @param newOperatorAVSSplitBips The new split for the operator for the AVS.\n     */\n    event OperatorAVSSplitBipsSet(\n        address indexed caller,\n        address indexed operator,\n        address indexed avs,\n        uint32 activatedAt,\n        uint16 oldOperatorAVSSplitBips,\n        uint16 newOperatorAVSSplitBips\n    );\n\n    /**\n     * @notice Emitted when the operator split for Programmatic Incentives is set.\n     * @param caller The address calling `setOperatorPISplit`.\n     * @param operator The operator on behalf of which the split is being set.\n     * @param activatedAt The timestamp at which the split will be activated.\n     * @param oldOperatorPISplitBips The old split for the operator for Programmatic Incentives.\n     * @param newOperatorPISplitBips The new split for the operator for Programmatic Incentives.\n     */\n    event OperatorPISplitBipsSet(\n        address indexed caller,\n        address indexed operator,\n        uint32 activatedAt,\n        uint16 oldOperatorPISplitBips,\n        uint16 newOperatorPISplitBips\n    );\n\n    event ClaimerForSet(address indexed earner, address indexed oldClaimer, address indexed claimer);\n    /// @notice rootIndex is the specific array index of the newly created root in the storage array\n    event DistributionRootSubmitted(\n        uint32 indexed rootIndex,\n        bytes32 indexed root,\n        uint32 indexed rewardsCalculationEndTimestamp,\n        uint32 activatedAt\n    );\n    event DistributionRootDisabled(uint32 indexed rootIndex);\n    /// @notice root is one of the submitted distribution roots that was claimed against\n    event RewardsClaimed(\n        bytes32 root,\n        address indexed earner,\n        address indexed claimer,\n        address indexed recipient,\n        IERC20 token,\n        uint256 claimedAmount\n    );\n\n    /**\n     *\n     *                         VIEW FUNCTIONS\n     *\n     */\n\n    /// @notice The address of the entity that can update the contract with new merkle roots\n    function rewardsUpdater() external view returns (address);\n\n    /**\n     * @notice The interval in seconds at which the calculation for a RewardsSubmission distribution is done.\n     * @dev Rewards Submission durations must be multiples of this interval.\n     */\n    function CALCULATION_INTERVAL_SECONDS() external view returns (uint32);\n\n    /// @notice The maximum amount of time (seconds) that a RewardsSubmission can span over\n    function MAX_REWARDS_DURATION() external view returns (uint32);\n\n    /// @notice max amount of time (seconds) that a submission can start in the past\n    function MAX_RETROACTIVE_LENGTH() external view returns (uint32);\n\n    /// @notice max amount of time (seconds) that a submission can start in the future\n    function MAX_FUTURE_LENGTH() external view returns (uint32);\n\n    /// @notice absolute min timestamp (seconds) that a submission can start at\n    function GENESIS_REWARDS_TIMESTAMP() external view returns (uint32);\n\n    /// @notice Delay in timestamp (seconds) before a posted root can be claimed against\n    function activationDelay() external view returns (uint32);\n\n    /// @notice Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner\n    function claimerFor(address earner) external view returns (address);\n\n    /// @notice Mapping: claimer => token => total amount claimed\n    function cumulativeClaimed(address claimer, IERC20 token) external view returns (uint256);\n\n    /// @notice the defautl split for all operators across all avss\n    function defaultOperatorSplitBips() external view returns (uint16);\n\n    /// @notice the split for a specific `operator` for a specific `avs`\n    function getOperatorAVSSplit(address operator, address avs) external view returns (uint16);\n\n    /// @notice the split for a specific `operator` for Programmatic Incentives\n    function getOperatorPISplit(address operator) external view returns (uint16);\n\n    /// @notice return the hash of the earner's leaf\n    function calculateEarnerLeafHash(EarnerTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n    /// @notice returns the hash of the earner's token leaf\n    function calculateTokenLeafHash(TokenTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n    /// @notice returns 'true' if the claim would currently pass the check in `processClaims`\n    /// but will revert if not valid\n    function checkClaim(RewardsMerkleClaim calldata claim) external view returns (bool);\n\n    /// @notice The timestamp until which RewardsSubmissions have been calculated\n    function currRewardsCalculationEndTimestamp() external view returns (uint32);\n\n    /// @notice returns the number of distribution roots posted\n    function getDistributionRootsLength() external view returns (uint256);\n\n    /// @notice returns the distributionRoot at the specified index\n    function getDistributionRootAtIndex(uint256 index) external view returns (DistributionRoot memory);\n\n    /// @notice returns the current distributionRoot\n    function getCurrentDistributionRoot() external view returns (DistributionRoot memory);\n\n    /// @notice loop through the distribution roots from reverse and get latest root that is not disabled and activated\n    /// i.e. a root that can be claimed against\n    function getCurrentClaimableDistributionRoot() external view returns (DistributionRoot memory);\n\n    /// @notice loop through distribution roots from reverse and return index from hash\n    function getRootIndexFromHash(bytes32 rootHash) external view returns (uint32);\n\n    /**\n     *\n     *                         EXTERNAL FUNCTIONS\n     *\n     */\n\n    /**\n     * @notice Creates a new rewards submission on behalf of an AVS, to be split amongst the\n     * set of stakers delegated to operators who are registered to the `avs`\n     * @param rewardsSubmissions The rewards submissions being created\n     * @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev This function will revert if the `rewardsSubmission` is malformed,\n     * e.g. if the `strategies` and `weights` arrays are of non-equal lengths\n     */\n    function createAVSRewardsSubmission(RewardsSubmission[] calldata rewardsSubmissions) external;\n\n    /**\n     * @notice similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers\n     * rather than just those delegated to operators who are registered to a single avs and is\n     * a permissioned call based on isRewardsForAllSubmitter mapping.\n     * @param rewardsSubmission The rewards submission being created\n     */\n    function createRewardsForAllSubmission(RewardsSubmission[] calldata rewardsSubmission) external;\n\n    /**\n     * @notice Creates a new rewards submission for all earners across all AVSs.\n     * Earners in this case indicating all operators and their delegated stakers. Undelegated stake\n     * is not rewarded from this RewardsSubmission. This interface is only callable\n     * by the token hopper contract from the Eigen Foundation\n     * @param rewardsSubmissions The rewards submissions being created\n     */\n    function createRewardsForAllEarners(RewardsSubmission[] calldata rewardsSubmissions) external;\n\n    /**\n     * @notice Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and\n     * set of stakers delegated to operators who are registered to the `avs`.\n     * @param avs The AVS on behalf of which the reward is being submitted\n     * @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created\n     * @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev The `RewardsCoordinator` contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev Operators must be in ascending order of addresses to check for duplicates.\n     * @dev This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\n     */\n    function createOperatorDirectedAVSRewardsSubmission(\n        address avs,\n        OperatorDirectedRewardsSubmission[] calldata operatorDirectedRewardsSubmissions\n    ) external;\n\n    /**\n     * @notice Claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n     * Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n     * they can simply claim against the latest root and the contract will calculate the difference between\n     * their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n     * @param claim The RewardsMerkleClaim to be processed.\n     * Contains the root index, earner, token leaves, and required proofs\n     * @param recipient The address recipient that receives the ERC20 rewards\n     * @dev only callable by the valid claimer, that is\n     * if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n     * claimerFor[claim.earner] can claim the rewards.\n     */\n    function processClaim(RewardsMerkleClaim calldata claim, address recipient) external;\n\n    /**\n     * @notice Batch claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n     * Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n     * they can simply claim against the latest root and the contract will calculate the difference between\n     * their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n     * @param claims The RewardsMerkleClaims to be processed.\n     * Contains the root index, earner, token leaves, and required proofs\n     * @param recipient The address recipient that receives the ERC20 rewards\n     * @dev only callable by the valid claimer, that is\n     * if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n     * claimerFor[claim.earner] can claim the rewards.\n     */\n    function processClaims(RewardsMerkleClaim[] calldata claims, address recipient) external;\n\n    /**\n     * @notice Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\n     * @param root The merkle root of the distribution\n     * @param rewardsCalculationEndTimestamp The timestamp until which rewards have been calculated\n     * @dev Only callable by the rewardsUpdater\n     */\n    function submitRoot(bytes32 root, uint32 rewardsCalculationEndTimestamp) external;\n\n    /**\n     * @notice allow the rewardsUpdater to disable/cancel a pending root submission in case of an error\n     * @param rootIndex The index of the root to be disabled\n     */\n    function disableRoot(uint32 rootIndex) external;\n\n    /**\n     * @notice Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\n     * @param claimer The address of the entity that can call `processClaim` on behalf of the earner\n     * @dev Only callable by the `earner`\n     */\n    function setClaimerFor(address claimer) external;\n\n    /**\n     * @notice Sets the delay in timestamp before a posted root can be claimed against\n     * @dev Only callable by the contract owner\n     * @param _activationDelay The new value for activationDelay\n     */\n    function setActivationDelay(uint32 _activationDelay) external;\n\n    /**\n     * @notice Sets the default split for all operators across all avss.\n     * @param split The default split for all operators across all avss in bips.\n     * @dev Only callable by the contract owner.\n     */\n    function setDefaultOperatorSplit(uint16 split) external;\n\n    /**\n     * @notice Sets the split for a specific operator for a specific avs\n     * @param operator The operator who is setting the split\n     * @param avs The avs for which the split is being set by the operator\n     * @param split The split for the operator for the specific avs in bips.\n     * @dev Only callable by the operator\n     * @dev Split has to be between 0 and 10000 bips (inclusive)\n     * @dev The split will be activated after the activation delay\n     */\n    function setOperatorAVSSplit(address operator, address avs, uint16 split) external;\n\n    /**\n     * @notice Sets the split for a specific operator for Programmatic Incentives.\n     * @param operator The operator on behalf of which the split is being set.\n     * @param split The split for the operator for Programmatic Incentives in bips.\n     * @dev Only callable by the operator\n     * @dev Split has to be between 0 and 10000 bips (inclusive)\n     * @dev The split will be activated after the activation delay\n     */\n    function setOperatorPISplit(address operator, uint16 split) external;\n\n    /**\n     * @notice Sets the permissioned `rewardsUpdater` address which can post new roots\n     * @dev Only callable by the contract owner\n     * @param _rewardsUpdater The address of the new rewardsUpdater\n     */\n    function setRewardsUpdater(address _rewardsUpdater) external;\n\n    /**\n     * @notice Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\n     * @dev Only callable by the contract owner\n     * @param _submitter The address of the rewardsForAllSubmitter\n     * @param _newValue The new value for isRewardsForAllSubmitter\n     */\n    function setRewardsForAllSubmitter(address _submitter, bool _newValue) external;\n\n    /**\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\n     *\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n     * for more detailed information please read EIP-712.\n     */\n    function domainSeparator() external view returns (bytes32);\n}\n"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\n/**\n * @title The interface for common signature utilities.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface ISignatureUtils {\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\n    struct SignatureWithExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\n    struct SignatureWithSaltAndExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the salt used to generate the signature\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n}\n"},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Minimal interface for an `Strategy` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\n */\ninterface IStrategy {\n    /**\n     * @notice Used to emit an event for the exchange rate between 1 share and underlying token in a strategy contract\n     * @param rate is the exchange rate in wad 18 decimals\n     * @dev Tokens that do not have 18 decimals must have offchain services scale the exchange rate by the proper magnitude\n     */\n    event ExchangeRateEmitted(uint256 rate);\n\n    /**\n     * Used to emit the underlying token and its decimals on strategy creation\n     * @notice token\n     * @param token is the ERC20 token of the strategy\n     * @param decimals are the decimals of the ERC20 token in the strategy\n     */\n    event StrategyTokenSet(IERC20 token, uint8 decimals);\n\n    /**\n     * @notice Used to deposit tokens into this Strategy\n     * @param token is the ERC20 token being deposited\n     * @param amount is the amount of token being deposited\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n     * @return newShares is the number of new shares issued at the current exchange ratio.\n     */\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\n\n    /**\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n     * @param recipient is the address to receive the withdrawn funds\n     * @param token is the ERC20 token being transferred out\n     * @param amountShares is the amount of shares being withdrawn\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * other functions, and individual share balances are recorded in the strategyManager as well.\n     */\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\n     */\n    function userUnderlying(address user) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\n     * querying the `strategyManager` contract\n     */\n    function shares(address user) external view returns (uint256);\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of shares corresponding to the input `amountUnderlying`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of shares corresponding to the input `amountUnderlying`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\n     */\n    function userUnderlyingView(address user) external view returns (uint256);\n\n    /// @notice The underlying token for shares in this Strategy\n    function underlyingToken() external view returns (IERC20);\n\n    /// @notice The total number of extant shares in this Strategy\n    function totalShares() external view returns (uint256);\n\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\n    function explanation() external view returns (string memory);\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Checkpoints.sol)\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SafeCastUpgradeable.sol\";\n\n/**\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n *\n * _Available since v4.5._\n */\nlibrary CheckpointsUpgradeable {\n    struct Checkpoint {\n        uint32 _blockNumber;\n        uint224 _value;\n    }\n\n    struct History {\n        Checkpoint[] _checkpoints;\n    }\n\n    /**\n     * @dev Returns the value in the latest checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(History storage self) internal view returns (uint256) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : self._checkpoints[pos - 1]._value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise.\n     */\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n\n        uint256 high = self._checkpoints.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (self._checkpoints[mid]._blockNumber > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high == 0 ? 0 : self._checkpoints[high - 1]._value;\n    }\n\n    /**\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n     *\n     * Returns previous value and new value.\n     */\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\n        uint256 pos = self._checkpoints.length;\n        uint256 old = latest(self);\n        if (pos > 0 && self._checkpoints[pos - 1]._blockNumber == block.number) {\n            self._checkpoints[pos - 1]._value = SafeCastUpgradeable.toUint224(value);\n        } else {\n            self._checkpoints.push(\n                Checkpoint({_blockNumber: SafeCastUpgradeable.toUint32(block.number), _value: SafeCastUpgradeable.toUint224(value)})\n            );\n        }\n        return (old, value);\n    }\n\n    /**\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n     * be set to `op(latest, delta)`.\n     *\n     * Returns previous value and new value.\n     */\n    function push(\n        History storage self,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) internal returns (uint256, uint256) {\n        return push(self, op(latest(self), delta));\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../AddressUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"},"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport {IStrategy} from \"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\";\n\nstruct StrategyParams {\n    IStrategy strategy; // The strategy contract reference\n    uint96 multiplier; // The multiplier applied to the strategy\n}\n\nstruct Quorum {\n    StrategyParams[] strategies; // An array of strategy parameters to define the quorum\n}\n\ninterface ECDSAStakeRegistryEventsAndErrors {\n    /// @notice Emitted when the system registers an operator\n    /// @param _operator The address of the registered operator\n    /// @param _avs The address of the associated AVS\n    event OperatorRegistered(address indexed _operator, address indexed _avs);\n\n    /// @notice Emitted when the system deregisters an operator\n    /// @param _operator The address of the deregistered operator\n    /// @param _avs The address of the associated AVS\n    event OperatorDeregistered(address indexed _operator, address indexed _avs);\n\n    /// @notice Emitted when the system updates the quorum\n    /// @param _old The previous quorum configuration\n    /// @param _new The new quorum configuration\n    event QuorumUpdated(Quorum _old, Quorum _new);\n\n    /// @notice Emitted when the weight to join the operator set updates\n    /// @param _old The previous minimum weight\n    /// @param _new The new minimumWeight\n    event MinimumWeightUpdated(uint256 _old, uint256 _new);\n\n    /// @notice Emitted when the weight required to be an operator changes\n    /// @param oldMinimumWeight The previous weight\n    /// @param newMinimumWeight The updated weight\n    event UpdateMinimumWeight(\n        uint256 oldMinimumWeight,\n        uint256 newMinimumWeight\n    );\n\n    /// @notice Emitted when the system updates an operator's weight\n    /// @param _operator The address of the operator updated\n    /// @param oldWeight The operator's weight before the update\n    /// @param newWeight The operator's weight after the update\n    event OperatorWeightUpdated(\n        address indexed _operator,\n        uint256 oldWeight,\n        uint256 newWeight\n    );\n\n    /// @notice Emitted when the system updates the total weight\n    /// @param oldTotalWeight The total weight before the update\n    /// @param newTotalWeight The total weight after the update\n    event TotalWeightUpdated(uint256 oldTotalWeight, uint256 newTotalWeight);\n\n    /// @notice Emits when setting a new threshold weight.\n    event ThresholdWeightUpdated(uint256 _thresholdWeight);\n\n    /// @notice Emitted when an operator's signing key is updated\n    /// @param operator The address of the operator whose signing key was updated\n    /// @param updateBlock The block number at which the signing key was updated\n    /// @param newSigningKey The operator's signing key after the update\n    /// @param oldSigningKey The operator's signing key before the update\n    event SigningKeyUpdate(\n        address indexed operator,\n        uint256 indexed updateBlock,\n        address indexed newSigningKey,\n        address oldSigningKey\n    );\n    /// @notice Indicates when the lengths of the signers array and signatures array do not match.\n    error LengthMismatch();\n\n    /// @notice Indicates encountering an invalid length for the signers or signatures array.\n    error InvalidLength();\n\n    /// @notice Indicates encountering an invalid signature.\n    error InvalidSignature();\n\n    /// @notice Thrown when the threshold update is greater than BPS\n    error InvalidThreshold();\n\n    /// @notice Thrown when missing operators in an update\n    error MustUpdateAllOperators();\n\n    /// @notice Reference blocks must be for blocks that have already been confirmed\n    error InvalidReferenceBlock();\n\n    /// @notice Indicates operator weights were out of sync and the signed weight exceed the total\n    error InvalidSignedWeight();\n\n    /// @notice Indicates the total signed stake fails to meet the required threshold.\n    error InsufficientSignedStake();\n\n    /// @notice Indicates an individual signer's weight fails to meet the required threshold.\n    error InsufficientWeight();\n\n    /// @notice Indicates the quorum is invalid\n    error InvalidQuorum();\n\n    /// @notice Indicates the system finds a list of items unsorted\n    error NotSorted();\n\n    /// @notice Thrown when registering an already registered operator\n    error OperatorAlreadyRegistered();\n\n    /// @notice Thrown when de-registering or updating the stake for an unregisted operator\n    error OperatorNotRegistered();\n}\n"},"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\n/**\n * @title Minimal interface for a `Registry`-type contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Functions related to the registration process itself have been intentionally excluded\n * because their function signatures may vary significantly.\n */\ninterface IRegistry {\n    function registryCoordinator() external view returns (address);\n}\n"},"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport {IRewardsCoordinator} from \"eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\";\nimport {IServiceManagerUI} from \"./IServiceManagerUI.sol\";\n\n/**\n * @title Minimal interface for a ServiceManager-type contract that forms the single point for an AVS to push updates to EigenLayer\n * @author Layr Labs, Inc.\n */\ninterface IServiceManager is IServiceManagerUI {\n    /**\n     * @notice Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the\n     * set of stakers delegated to operators who are registered to this `avs`\n     * @param rewardsSubmissions The rewards submissions being created\n     * @dev Only callabe by the permissioned rewardsInitiator address\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev This function will revert if the `rewardsSubmission` is malformed,\n     * e.g. if the `strategies` and `weights` arrays are of non-equal lengths\n     */\n    function createAVSRewardsSubmission(\n        IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions\n    ) external;\n\n    /**\n     * @notice Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and\n     * set of stakers delegated to operators who are registered to the `avs`.\n     * @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created\n     * @dev Only callabe by the permissioned rewardsInitiator address\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev This contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev Operators must be in ascending order of addresses to check for duplicates.\n     * @dev This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\n     */\n    function createOperatorDirectedAVSRewardsSubmission(\n        IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\n            calldata operatorDirectedRewardsSubmissions\n    ) external;\n\n    /**\n     * @notice Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\n     * @param claimer The address of the entity that can call `processClaim` on behalf of the earner\n     * @dev Only callabe by the owner.\n     */\n    function setClaimerFor(address claimer) external;\n\n    // EVENTS\n    event RewardsInitiatorUpdated(\n        address prevRewardsInitiator,\n        address newRewardsInitiator\n    );\n}\n"},"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport {ISignatureUtils} from \"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\";\n\n/**\n * @title Minimal interface for a ServiceManager-type contract that AVS ServiceManager contracts must implement\n * for eigenlabs to be able to index their data on the AVS marketplace frontend.\n * @author Layr Labs, Inc.\n */\ninterface IServiceManagerUI {\n    /**\n     * Metadata should follow the format outlined by this example.\n        {\n            \"name\": \"EigenLabs AVS 1\",\n            \"website\": \"https://www.eigenlayer.xyz/\",\n            \"description\": \"This is my 1st AVS\",\n            \"logo\": \"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\",\n            \"twitter\": \"https://twitter.com/eigenlayer\"\n        }\n     * @notice Updates the metadata URI for the AVS\n     * @param _metadataURI is the metadata URI for the AVS\n     */\n    function updateAVSMetadataURI(string memory _metadataURI) external;\n\n    /**\n     * @notice Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n     */\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external;\n\n    /**\n     * @notice Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\n     * @param operator The address of the operator to deregister.\n     */\n    function deregisterOperatorFromAVS(address operator) external;\n\n    /**\n     * @notice Returns the list of strategies that the operator has potentially restaked on the AVS\n     * @param operator The address of the operator to get restaked strategies for\n     * @dev This function is intended to be called off-chain\n     * @dev No guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness \n     *      of each element in the returned array. The off-chain service should do that validation separately\n     */\n    function getOperatorRestakedStrategies(address operator) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the list of strategies that the AVS supports for restaking\n     * @dev This function is intended to be called off-chain\n     * @dev No guarantee is made on uniqueness of each element in the returned array. \n     *      The off-chain service should do that validation separately\n     */\n    function getRestakeableStrategies() external view returns (address[] memory);\n\n    /// @notice Returns the EigenLayer AVSDirectory contract.\n    function avsDirectory() external view returns (address);\n}\n"},"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.12;\n\nimport {IDelegationManager} from \"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\";\nimport {IStrategy} from \"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\";\n\nimport {IRegistry} from \"./IRegistry.sol\";\n\n/**\n * @title Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\n * @author Layr Labs, Inc.\n */\ninterface IStakeRegistry is IRegistry {\n    \n    // DATA STRUCTURES\n\n    /// @notice struct used to store the stakes of an individual operator or the sum of all operators' stakes, for storage\n    struct StakeUpdate {\n        // the block number at which the stake amounts were updated and stored\n        uint32 updateBlockNumber;\n        // the block number at which the *next update* occurred.\n        /// @notice This entry has the value **0** until another update takes place.\n        uint32 nextUpdateBlockNumber;\n        // stake weight for the quorum\n        uint96 stake;\n    }\n\n    /**\n     * @notice In weighing a particular strategy, the amount of underlying asset for that strategy is\n     * multiplied by its multiplier, then divided by WEIGHTING_DIVISOR\n     */\n    struct StrategyParams {\n        IStrategy strategy;\n        uint96 multiplier;\n    }\n\n    // EVENTS\n\n    /// @notice emitted whenever the stake of `operator` is updated\n    event OperatorStakeUpdate(\n        bytes32 indexed operatorId,\n        uint8 quorumNumber,\n        uint96 stake\n    );\n    /// @notice emitted when the minimum stake for a quorum is updated\n    event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake);\n    /// @notice emitted when a new quorum is created\n    event QuorumCreated(uint8 indexed quorumNumber);\n    /// @notice emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\n    event StrategyAddedToQuorum(uint8 indexed quorumNumber, IStrategy strategy);\n    /// @notice emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\n    event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, IStrategy strategy);\n    /// @notice emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\n    event StrategyMultiplierUpdated(uint8 indexed quorumNumber, IStrategy strategy, uint256 multiplier);\n\n    /**\n     * @notice Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\n     * @param operator The address of the operator to register.\n     * @param operatorId The id of the operator to register.\n     * @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\n     * @return The operator's current stake for each quorum, and the total stake for each quorum\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already registered\n     */\n    function registerOperator(\n        address operator, \n        bytes32 operatorId, \n        bytes memory quorumNumbers\n    ) external returns (uint96[] memory, uint96[] memory);\n\n    /**\n     * @notice Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\n     * @param operatorId The id of the operator to deregister.\n     * @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already deregistered\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\n     */\n    function deregisterOperator(bytes32 operatorId, bytes memory quorumNumbers) external;\n\n    /**\n     * @notice Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\n     */\n    function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, StrategyParams[] memory strategyParams) external;\n\n    /// @notice Adds new strategies and the associated multipliers to the @param quorumNumber.\n    function addStrategies(\n        uint8 quorumNumber,\n        StrategyParams[] memory strategyParams\n    ) external;\n\n    /**\n     * @notice This function is used for removing strategies and their associated weights from the\n     * mapping strategyParams for a specific @param quorumNumber.\n     * @dev higher indices should be *first* in the list of @param indicesToRemove, since otherwise\n     * the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\n     */\n    function removeStrategies(uint8 quorumNumber, uint256[] calldata indicesToRemove) external;\n\n    /**\n     * @notice This function is used for modifying the weights of strategies that are already in the\n     * mapping strategyParams for a specific\n     * @param quorumNumber is the quorum number to change the strategy for\n     * @param strategyIndices are the indices of the strategies to change\n     * @param newMultipliers are the new multipliers for the strategies\n     */\n    function modifyStrategyParams(\n        uint8 quorumNumber,\n        uint256[] calldata strategyIndices,\n        uint96[] calldata newMultipliers\n    ) external;\n\n    /// @notice Constant used as a divisor in calculating weights.\n    function WEIGHTING_DIVISOR() external pure returns (uint256);\n\n    /// @notice Returns the EigenLayer delegation manager contract.\n    function delegation() external view returns (IDelegationManager);\n\n    /// @notice In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\n    function minimumStakeForQuorum(uint8 quorumNumber) external view returns (uint96);\n\n    /// @notice Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\n    function strategyParamsLength(uint8 quorumNumber) external view returns (uint256);\n\n    /// @notice Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\n    function strategyParamsByIndex(\n        uint8 quorumNumber,\n        uint256 index\n    ) external view returns (StrategyParams memory);\n\n    /**\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\n     * @dev reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\n     */\n    function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) external view returns (uint96);\n\n    /**\n     * @notice Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n     * @param operatorId The id of the operator of interest.\n     * @param quorumNumber The quorum number to get the stake for.\n     */\n    function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate[] memory);\n\n    function getTotalStakeHistoryLength(uint8 quorumNumber) external view returns (uint256);\n\n    /**\n     * @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\n     */\n    function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) external view returns (StakeUpdate memory);\n\n    /// @notice Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\n    function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\n        external\n        view\n        returns (uint32);\n\n    /// @notice Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\n    function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes calldata quorumNumbers) external view returns(uint32[] memory) ;\n\n    /**\n     * @notice Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param operatorId The id of the operator of interest.\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n     * @dev Function will revert if `index` is out-of-bounds.\n     */\n    function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index)\n        external\n        view\n        returns (StakeUpdate memory);\n\n    /**\n     * @notice Returns the most recent stake weight for the `operatorId` for a certain quorum\n     * @dev Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\n     */\n    function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate memory);\n\n    /**\n     * @notice Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the\n     * `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry \n     * corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param operatorId The id of the operator of interest.\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n     * @param blockNumber Block number to make sure the stake is from.\n     * @dev Function will revert if `index` is out-of-bounds.\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\n     */\n    function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index)\n        external\n        view\n        returns (uint96);\n\n    /**\n     * @notice Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the \n     * `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`. \n     * Reverts otherwise.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\n     * @param blockNumber Block number to make sure the stake is from.\n     * @dev Function will revert if `index` is out-of-bounds.\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\n     */\n    function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) external view returns (uint96);\n\n    /**\n     * @notice Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\n     * @dev Function returns weight of **0** in the event that the operator has no stake history\n     */\n    function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) external view returns (uint96);\n\n    /// @notice Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\n    function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\n        external\n        view\n        returns (uint96);\n\n    /**\n     * @notice Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\n     * @dev Will revert if `_totalStakeHistory[quorumNumber]` is empty.\n     */\n    function getCurrentTotalStake(uint8 quorumNumber) external view returns (uint96);\n\n    /**\n     * @notice Called by the registry coordinator to update an operator's stake for one\n     * or more quorums.\n     *\n     * If the operator no longer has the minimum stake required for a quorum, they are\n     * added to the\n     * @return A bitmap of quorums where the operator no longer meets the minimum stake\n     * and should be deregistered.\n     */\n    function updateOperatorStake(\n        address operator, \n        bytes32 operatorId, \n        bytes calldata quorumNumbers\n    ) external returns (uint192);\n}\n"},"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.12;\n\nimport {OwnableUpgradeable} from \"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\";\nimport {ISignatureUtils} from \"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\";\nimport {IAVSDirectory} from \"eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\";\nimport {IServiceManager} from \"../interfaces/IServiceManager.sol\";\nimport {IServiceManagerUI} from \"../interfaces/IServiceManagerUI.sol\";\nimport {IDelegationManager} from \"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\";\nimport {IStrategy} from \"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\";\nimport {IStakeRegistry} from \"../interfaces/IStakeRegistry.sol\";\nimport {IRewardsCoordinator} from \"eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\";\nimport {Quorum} from \"../interfaces/IECDSAStakeRegistryEventsAndErrors.sol\";\nimport {ECDSAStakeRegistry} from \"../unaudited/ECDSAStakeRegistry.sol\";\n\nabstract contract ECDSAServiceManagerBase is\n    IServiceManager,\n    OwnableUpgradeable\n{\n    /// @notice Address of the stake registry contract, which manages registration and stake recording.\n    address public immutable stakeRegistry;\n\n    /// @notice Address of the AVS directory contract, which manages AVS-related data for registered operators.\n    address public immutable avsDirectory;\n\n    /// @notice Address of the rewards coordinator contract, which handles rewards distributions.\n    address internal immutable rewardsCoordinator;\n\n    /// @notice Address of the delegation manager contract, which manages staker delegations to operators.\n    address internal immutable delegationManager;\n\n    /// @notice Address of the rewards initiator, which is allowed to create AVS rewards submissions.\n    address public rewardsInitiator;\n\n    /**\n     * @dev Ensures that the function is only callable by the `stakeRegistry` contract.\n     * This is used to restrict certain registration and deregistration functionality to the `stakeRegistry`\n     */\n    modifier onlyStakeRegistry() {\n        require(\n            msg.sender == stakeRegistry,\n            \"ECDSAServiceManagerBase.onlyStakeRegistry: caller is not the stakeRegistry\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Ensures that the function is only callable by the `rewardsInitiator`.\n     */\n    modifier onlyRewardsInitiator() {\n        _checkRewardsInitiator();\n        _;\n    }\n\n    function _checkRewardsInitiator() internal view {\n        require(\n            msg.sender == rewardsInitiator,\n            \"ECDSAServiceManagerBase.onlyRewardsInitiator: caller is not the rewards initiator\"\n        );\n    }\n\n    /**\n     * @dev Constructor for ECDSAServiceManagerBase, initializing immutable contract addresses and disabling initializers.\n     * @param _avsDirectory The address of the AVS directory contract, managing AVS-related data for registered operators.\n     * @param _stakeRegistry The address of the stake registry contract, managing registration and stake recording.\n     * @param _rewardsCoordinator The address of the rewards coordinator contract, handling rewards distributions.\n     * @param _delegationManager The address of the delegation manager contract, managing staker delegations to operators.\n     */\n    constructor(\n        address _avsDirectory,\n        address _stakeRegistry,\n        address _rewardsCoordinator,\n        address _delegationManager\n    ) {\n        avsDirectory = _avsDirectory;\n        stakeRegistry = _stakeRegistry;\n        rewardsCoordinator = _rewardsCoordinator;\n        delegationManager = _delegationManager;\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initializes the base service manager by transferring ownership to the initial owner.\n     * @param initialOwner The address to which the ownership of the contract will be transferred.\n     * @param _rewardsInitiator The address which is allowed to create AVS rewards submissions.\n     */\n    function __ServiceManagerBase_init(\n        address initialOwner,\n        address _rewardsInitiator\n    ) internal virtual onlyInitializing {\n        _transferOwnership(initialOwner);\n        _setRewardsInitiator(_rewardsInitiator);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function updateAVSMetadataURI(\n        string memory _metadataURI\n    ) external virtual onlyOwner {\n        _updateAVSMetadataURI(_metadataURI);\n    }\n\n    /// @inheritdoc IServiceManager\n    function createAVSRewardsSubmission(\n        IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions\n    ) external virtual onlyRewardsInitiator {\n        _createAVSRewardsSubmission(rewardsSubmissions);\n    }\n\n    /// @inheritdoc IServiceManager\n    function createOperatorDirectedAVSRewardsSubmission(\n        IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\n            calldata operatorDirectedRewardsSubmissions\n    ) external virtual onlyRewardsInitiator {\n        _createOperatorDirectedAVSRewardsSubmission(\n            operatorDirectedRewardsSubmissions\n        );\n    }\n\n    /// @inheritdoc IServiceManager\n    function setClaimerFor(address claimer) external virtual onlyOwner {\n        _setClaimerFor(claimer);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external virtual onlyStakeRegistry {\n        _registerOperatorToAVS(operator, operatorSignature);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function deregisterOperatorFromAVS(\n        address operator\n    ) external virtual onlyStakeRegistry {\n        _deregisterOperatorFromAVS(operator);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function getRestakeableStrategies()\n        external\n        view\n        virtual\n        returns (address[] memory)\n    {\n        return _getRestakeableStrategies();\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function getOperatorRestakedStrategies(\n        address _operator\n    ) external view virtual returns (address[] memory) {\n        return _getOperatorRestakedStrategies(_operator);\n    }\n\n    /**\n     * @notice Forwards the call to update AVS metadata URI in the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `updateAVSMetadataURI` function of the AVSDirectory contract.\n     * @param _metadataURI The new metadata URI to be set.\n     */\n    function _updateAVSMetadataURI(\n        string memory _metadataURI\n    ) internal virtual {\n        IAVSDirectory(avsDirectory).updateAVSMetadataURI(_metadataURI);\n    }\n\n    /**\n     * @notice Forwards the call to register an operator in the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `registerOperatorToAVS` function of the AVSDirectory contract.\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry details of the operator's registration.\n     */\n    function _registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) internal virtual {\n        IAVSDirectory(avsDirectory).registerOperatorToAVS(\n            operator,\n            operatorSignature\n        );\n    }\n\n    /**\n     * @notice Forwards the call to deregister an operator from the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `deregisterOperatorFromAVS` function of the AVSDirectory contract.\n     * @param operator The address of the operator to deregister.\n     */\n    function _deregisterOperatorFromAVS(address operator) internal virtual {\n        IAVSDirectory(avsDirectory).deregisterOperatorFromAVS(operator);\n    }\n\n    /**\n     * @notice Processes a batch of rewards submissions by transferring the specified amounts from the sender to this contract and then approving the RewardsCoordinator to use these amounts.\n     * @dev This function handles the transfer and approval of tokens necessary for rewards submissions. It then delegates the actual rewards logic to the RewardsCoordinator contract.\n     * @param rewardsSubmissions An array of `RewardsSubmission` structs, each representing rewards for a specific range.\n     */\n    function _createAVSRewardsSubmission(\n        IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions\n    ) internal virtual {\n        for (uint256 i = 0; i < rewardsSubmissions.length; ++i) {\n            rewardsSubmissions[i].token.transferFrom(\n                msg.sender,\n                address(this),\n                rewardsSubmissions[i].amount\n            );\n            uint256 allowance = rewardsSubmissions[i].token.allowance(\n                address(this),\n                rewardsCoordinator\n            );\n            rewardsSubmissions[i].token.approve(\n                rewardsCoordinator,\n                rewardsSubmissions[i].amount + allowance\n            );\n        }\n\n        IRewardsCoordinator(rewardsCoordinator).createAVSRewardsSubmission(\n            rewardsSubmissions\n        );\n    }\n\n    /**\n     * @notice Creates a new operator-directed rewards submission, to be split amongst the operators and\n     * set of stakers delegated to operators who are registered to this `avs`.\n     * @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created.\n     */\n    function _createOperatorDirectedAVSRewardsSubmission(\n        IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\n            calldata operatorDirectedRewardsSubmissions\n    ) internal virtual {\n        for (\n            uint256 i = 0;\n            i < operatorDirectedRewardsSubmissions.length;\n            ++i\n        ) {\n            // Calculate total amount of token to transfer\n            uint256 totalAmount = 0;\n            for (\n                uint256 j = 0;\n                j <\n                operatorDirectedRewardsSubmissions[i].operatorRewards.length;\n                ++j\n            ) {\n                totalAmount += operatorDirectedRewardsSubmissions[i]\n                    .operatorRewards[j]\n                    .amount;\n            }\n\n            // Transfer token to ServiceManager and approve RewardsCoordinator to transfer again\n            // in createOperatorDirectedAVSRewardsSubmission() call\n            operatorDirectedRewardsSubmissions[i].token.transferFrom(\n                msg.sender,\n                address(this),\n                totalAmount\n            );\n            uint256 allowance = operatorDirectedRewardsSubmissions[i]\n                .token\n                .allowance(address(this), rewardsCoordinator);\n            operatorDirectedRewardsSubmissions[i].token.approve(\n                rewardsCoordinator,\n                totalAmount + allowance\n            );\n        }\n\n        IRewardsCoordinator(rewardsCoordinator)\n            .createOperatorDirectedAVSRewardsSubmission(\n                address(this),\n                operatorDirectedRewardsSubmissions\n            );\n    }\n\n    /**\n     * @notice Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\n     * @param claimer The address of the entity that can call `processClaim` on behalf of the earner.\n     */\n    function _setClaimerFor(address claimer) internal virtual {\n        IRewardsCoordinator(rewardsCoordinator).setClaimerFor(claimer);\n    }\n\n    /**\n     * @notice Retrieves the addresses of all strategies that are part of the current quorum.\n     * @dev Fetches the quorum configuration from the ECDSAStakeRegistry and extracts the strategy addresses.\n     * @return strategies An array of addresses representing the strategies in the current quorum.\n     */\n    function _getRestakeableStrategies()\n        internal\n        view\n        virtual\n        returns (address[] memory)\n    {\n        Quorum memory quorum = ECDSAStakeRegistry(stakeRegistry).quorum();\n        address[] memory strategies = new address[](quorum.strategies.length);\n        for (uint256 i = 0; i < quorum.strategies.length; i++) {\n            strategies[i] = address(quorum.strategies[i].strategy);\n        }\n        return strategies;\n    }\n\n    /**\n     * @notice Retrieves the addresses of strategies where the operator has restaked.\n     * @dev This function fetches the quorum details from the ECDSAStakeRegistry, retrieves the operator's shares for each strategy,\n     * and filters out strategies with non-zero shares indicating active restaking by the operator.\n     * @param _operator The address of the operator whose restaked strategies are to be retrieved.\n     * @return restakedStrategies An array of addresses of strategies where the operator has active restakes.\n     */\n    function _getOperatorRestakedStrategies(\n        address _operator\n    ) internal view virtual returns (address[] memory) {\n        Quorum memory quorum = ECDSAStakeRegistry(stakeRegistry).quorum();\n        uint256 count = quorum.strategies.length;\n        IStrategy[] memory strategies = new IStrategy[](count);\n        for (uint256 i; i < count; i++) {\n            strategies[i] = quorum.strategies[i].strategy;\n        }\n        uint256[] memory shares = IDelegationManager(delegationManager)\n            .getOperatorShares(_operator, strategies);\n\n        uint256 activeCount;\n        for (uint256 i; i < count; i++) {\n            if (shares[i] > 0) {\n                activeCount++;\n            }\n        }\n\n        // Resize the array to fit only the active strategies\n        address[] memory restakedStrategies = new address[](activeCount);\n        uint256 index;\n        for (uint256 j = 0; j < count; j++) {\n            if (shares[j] > 0) {\n                restakedStrategies[index] = address(strategies[j]);\n                index++;\n            }\n        }\n\n        return restakedStrategies;\n    }\n\n    /**\n     * @notice Sets the rewards initiator address.\n     * @param newRewardsInitiator The new rewards initiator address.\n     * @dev Only callable by the owner.\n     */\n    function setRewardsInitiator(\n        address newRewardsInitiator\n    ) external onlyOwner {\n        _setRewardsInitiator(newRewardsInitiator);\n    }\n\n    function _setRewardsInitiator(address newRewardsInitiator) internal {\n        emit RewardsInitiatorUpdated(rewardsInitiator, newRewardsInitiator);\n        rewardsInitiator = newRewardsInitiator;\n    }\n\n    // storage gap for upgradeability\n    // slither-disable-next-line shadowing-state\n    uint256[49] private __GAP;\n}\n"},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport {ECDSAStakeRegistryStorage, Quorum, StrategyParams} from \"./ECDSAStakeRegistryStorage.sol\";\nimport {IStrategy} from \"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\";\nimport {IDelegationManager} from \"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\";\nimport {ISignatureUtils} from \"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\";\nimport {IServiceManager} from \"../interfaces/IServiceManager.sol\";\n\nimport {OwnableUpgradeable} from \"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\";\nimport {CheckpointsUpgradeable} from \"@openzeppelin-upgrades/contracts/utils/CheckpointsUpgradeable.sol\";\nimport {SignatureCheckerUpgradeable} from \"@openzeppelin-upgrades/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\";\nimport {IERC1271Upgradeable} from \"@openzeppelin-upgrades/contracts/interfaces/IERC1271Upgradeable.sol\";\n\n/// @title ECDSA Stake Registry\n/// @dev THIS CONTRACT IS NOT AUDITED\n/// @notice Manages operator registration and quorum updates for an AVS using ECDSA signatures.\ncontract ECDSAStakeRegistry is\n    IERC1271Upgradeable,\n    OwnableUpgradeable,\n    ECDSAStakeRegistryStorage\n{\n    using SignatureCheckerUpgradeable for address;\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\n\n    /// @dev Constructor to create ECDSAStakeRegistry.\n    /// @param _delegationManager Address of the DelegationManager contract that this registry interacts with.\n    constructor(\n        IDelegationManager _delegationManager\n    ) ECDSAStakeRegistryStorage(_delegationManager) {\n        // _disableInitializers();\n    }\n\n    /// @notice Initializes the contract with the given parameters.\n    /// @param _serviceManager The address of the service manager.\n    /// @param _thresholdWeight The threshold weight in basis points.\n    /// @param _quorum The quorum struct containing the details of the quorum thresholds.\n    function initialize(\n        address _serviceManager,\n        uint256 _thresholdWeight,\n        Quorum memory _quorum\n    ) external initializer {\n        __ECDSAStakeRegistry_init(_serviceManager, _thresholdWeight, _quorum);\n    }\n\n    /// @notice Registers a new operator using a provided signature and signing key\n    /// @param _operatorSignature Contains the operator's signature, salt, and expiry\n    /// @param _signingKey The signing key to add to the operator's history\n    function registerOperatorWithSignature(\n        ISignatureUtils.SignatureWithSaltAndExpiry memory _operatorSignature,\n        address _signingKey\n    ) external {\n        _registerOperatorWithSig(msg.sender, _operatorSignature, _signingKey);\n    }\n\n    /// @notice Deregisters an existing operator\n    function deregisterOperator() external {\n        _deregisterOperator(msg.sender);\n    }\n\n    /**\n     * @notice Updates the signing key for an operator\n     * @dev Only callable by the operator themselves\n     * @param _newSigningKey The new signing key to set for the operator\n     */\n    function updateOperatorSigningKey(address _newSigningKey) external {\n        if (!_operatorRegistered[msg.sender]) {\n            revert OperatorNotRegistered();\n        }\n        _updateOperatorSigningKey(msg.sender, _newSigningKey);\n    }\n\n    /**\n     * @notice Updates the StakeRegistry's view of one or more operators' stakes adding a new entry in their history of stake checkpoints,\n     * @dev Queries stakes from the Eigenlayer core DelegationManager contract\n     * @param _operators A list of operator addresses to update\n     */\n    function updateOperators(address[] memory _operators) external {\n        _updateOperators(_operators);\n    }\n\n    /**\n     * @notice Updates the quorum configuration and the set of operators\n     * @dev Only callable by the contract owner.\n     * It first updates the quorum configuration and then updates the list of operators.\n     * @param _quorum The new quorum configuration, including strategies and their new weights\n     * @param _operators The list of operator addresses to update stakes for\n     */\n    function updateQuorumConfig(\n        Quorum memory _quorum,\n        address[] memory _operators\n    ) external onlyOwner {\n        _updateQuorumConfig(_quorum);\n        _updateOperators(_operators);\n    }\n\n    /// @notice Updates the weight an operator must have to join the operator set\n    /// @dev Access controlled to the contract owner\n    /// @param _newMinimumWeight The new weight an operator must have to join the operator set\n    function updateMinimumWeight(\n        uint256 _newMinimumWeight,\n        address[] memory _operators\n    ) external onlyOwner {\n        _updateMinimumWeight(_newMinimumWeight);\n        _updateOperators(_operators);\n    }\n\n    /**\n     * @notice Sets a new cumulative threshold weight for message validation by operator set signatures.\n     * @dev This function can only be invoked by the owner of the contract. It delegates the update to\n     * an internal function `_updateStakeThreshold`.\n     * @param _thresholdWeight The updated threshold weight required to validate a message. This is the\n     * cumulative weight that must be met or exceeded by the sum of the stakes of the signatories for\n     * a message to be deemed valid.\n     */\n    function updateStakeThreshold(uint256 _thresholdWeight) external onlyOwner {\n        _updateStakeThreshold(_thresholdWeight);\n    }\n\n    /// @notice Verifies if the provided signature data is valid for the given data hash.\n    /// @param _dataHash The hash of the data that was signed.\n    /// @param _signatureData Encoded signature data consisting of an array of operators, an array of signatures, and a reference block number.\n    /// @return The function selector that indicates the signature is valid according to ERC1271 standard.\n    function isValidSignature(\n        bytes32 _dataHash,\n        bytes memory _signatureData\n    ) external view returns (bytes4) {\n        (\n            address[] memory operators,\n            bytes[] memory signatures,\n            uint32 referenceBlock\n        ) = abi.decode(_signatureData, (address[], bytes[], uint32));\n        _checkSignatures(_dataHash, operators, signatures, referenceBlock);\n        return IERC1271Upgradeable.isValidSignature.selector;\n    }\n\n    /// @notice Retrieves the current stake quorum details.\n    /// @return Quorum - The current quorum of strategies and weights\n    function quorum() external view returns (Quorum memory) {\n        return _quorum;\n    }\n\n    /**\n     * @notice Retrieves the latest signing key for a given operator.\n     * @param _operator The address of the operator.\n     * @return The latest signing key of the operator.\n     */\n    function getLastestOperatorSigningKey(\n        address _operator\n    ) external view returns (address) {\n        return address(uint160(_operatorSigningKeyHistory[_operator].latest()));\n    }\n\n    /**\n     * @notice Retrieves the latest signing key for a given operator at a specific block number.\n     * @param _operator The address of the operator.\n     * @param _blockNumber The block number to get the operator's signing key.\n     * @return The signing key of the operator at the given block.\n     */\n    function getOperatorSigningKeyAtBlock(\n        address _operator,\n        uint256 _blockNumber\n    ) external view returns (address) {\n        return\n            address(\n                uint160(\n                    _operatorSigningKeyHistory[_operator].getAtBlock(\n                        _blockNumber\n                    )\n                )\n            );\n    }\n\n    /// @notice Retrieves the last recorded weight for a given operator.\n    /// @param _operator The address of the operator.\n    /// @return uint256 - The latest weight of the operator.\n    function getLastCheckpointOperatorWeight(\n        address _operator\n    ) external view returns (uint256) {\n        return _operatorWeightHistory[_operator].latest();\n    }\n\n    /// @notice Retrieves the last recorded total weight across all operators.\n    /// @return uint256 - The latest total weight.\n    function getLastCheckpointTotalWeight() external view returns (uint256) {\n        return _totalWeightHistory.latest();\n    }\n\n    /// @notice Retrieves the last recorded threshold weight\n    /// @return uint256 - The latest threshold weight.\n    function getLastCheckpointThresholdWeight()\n        external\n        view\n        returns (uint256)\n    {\n        return _thresholdWeightHistory.latest();\n    }\n\n    /// @notice Retrieves the operator's weight at a specific block number.\n    /// @param _operator The address of the operator.\n    /// @param _blockNumber The block number to get the operator weight for the quorum\n    /// @return uint256 - The weight of the operator at the given block.\n    function getOperatorWeightAtBlock(\n        address _operator,\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _operatorWeightHistory[_operator].getAtBlock(_blockNumber);\n    }\n\n    /// @notice Retrieves the total weight at a specific block number.\n    /// @param _blockNumber The block number to get the total weight for the quorum\n    /// @return uint256 - The total weight at the given block.\n    function getLastCheckpointTotalWeightAtBlock(\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _totalWeightHistory.getAtBlock(_blockNumber);\n    }\n\n    /// @notice Retrieves the threshold weight at a specific block number.\n    /// @param _blockNumber The block number to get the threshold weight for the quorum\n    /// @return uint256 - The threshold weight the given block.\n    function getLastCheckpointThresholdWeightAtBlock(\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _thresholdWeightHistory.getAtBlock(_blockNumber);\n    }\n\n    function operatorRegistered(\n        address _operator\n    ) external view returns (bool) {\n        return _operatorRegistered[_operator];\n    }\n\n    /// @notice Returns the weight an operator must have to contribute to validating an AVS\n    function minimumWeight() external view returns (uint256) {\n        return _minimumWeight;\n    }\n\n    /// @notice Calculates the current weight of an operator based on their delegated stake in the strategies considered in the quorum\n    /// @param _operator The address of the operator.\n    /// @return uint256 - The current weight of the operator; returns 0 if below the threshold.\n    function getOperatorWeight(\n        address _operator\n    ) public view returns (uint256) {\n        StrategyParams[] memory strategyParams = _quorum.strategies;\n        uint256 weight;\n        IStrategy[] memory strategies = new IStrategy[](strategyParams.length);\n        for (uint256 i; i < strategyParams.length; i++) {\n            strategies[i] = strategyParams[i].strategy;\n        }\n        uint256[] memory shares = DELEGATION_MANAGER.getOperatorShares(\n            _operator,\n            strategies\n        );\n        for (uint256 i; i < strategyParams.length; i++) {\n            weight += shares[i] * strategyParams[i].multiplier;\n        }\n        weight = weight / BPS;\n\n        if (weight >= _minimumWeight) {\n            return weight;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice Initializes state for the StakeRegistry\n    /// @param _serviceManagerAddr The AVS' ServiceManager contract's address\n    function __ECDSAStakeRegistry_init(\n        address _serviceManagerAddr,\n        uint256 _thresholdWeight,\n        Quorum memory _quorum\n    ) internal onlyInitializing {\n        _serviceManager = _serviceManagerAddr;\n        _updateStakeThreshold(_thresholdWeight);\n        _updateQuorumConfig(_quorum);\n        __Ownable_init();\n    }\n\n    /// @notice Updates the set of operators for the first quorum.\n    /// @param operatorsPerQuorum An array of operator address arrays, one for each quorum.\n    /// @dev This interface maintains compatibility with avs-sync which handles multiquorums while this registry has a single quorum\n    function updateOperatorsForQuorum(\n        address[][] memory operatorsPerQuorum,\n        bytes memory\n    ) external {\n        _updateAllOperators(operatorsPerQuorum[0]);\n    }\n\n    /// @dev Updates the list of operators if the provided list has the correct number of operators.\n    /// Reverts if the provided list of operators does not match the expected total count of operators.\n    /// @param _operators The list of operator addresses to update.\n    function _updateAllOperators(address[] memory _operators) internal {\n        if (_operators.length != _totalOperators) {\n            revert MustUpdateAllOperators();\n        }\n        _updateOperators(_operators);\n    }\n\n    /// @dev Updates the weights for a given list of operator addresses.\n    /// When passing an operator that isn't registered, then 0 is added to their history\n    /// @param _operators An array of addresses for which to update the weights.\n    function _updateOperators(address[] memory _operators) internal {\n        int256 delta;\n        for (uint256 i; i < _operators.length; i++) {\n            delta += _updateOperatorWeight(_operators[i]);\n        }\n        _updateTotalWeight(delta);\n    }\n\n    /// @dev Updates the stake threshold weight and records the history.\n    /// @param _thresholdWeight The new threshold weight to set and record in the history.\n    function _updateStakeThreshold(uint256 _thresholdWeight) internal {\n        _thresholdWeightHistory.push(_thresholdWeight);\n        emit ThresholdWeightUpdated(_thresholdWeight);\n    }\n\n    /// @dev Updates the weight an operator must have to join the operator set\n    /// @param _newMinimumWeight The new weight an operator must have to join the operator set\n    function _updateMinimumWeight(uint256 _newMinimumWeight) internal {\n        uint256 oldMinimumWeight = _minimumWeight;\n        _minimumWeight = _newMinimumWeight;\n        emit MinimumWeightUpdated(oldMinimumWeight, _newMinimumWeight);\n    }\n\n    /// @notice Updates the quorum configuration\n    /// @dev Replaces the current quorum configuration with `_newQuorum` if valid.\n    /// Reverts with `InvalidQuorum` if the new quorum configuration is not valid.\n    /// Emits `QuorumUpdated` event with the old and new quorum configurations.\n    /// @param _newQuorum The new quorum configuration to set.\n    function _updateQuorumConfig(Quorum memory _newQuorum) internal {\n        if (!_isValidQuorum(_newQuorum)) {\n            revert InvalidQuorum();\n        }\n        Quorum memory oldQuorum = _quorum;\n        delete _quorum;\n        for (uint256 i; i < _newQuorum.strategies.length; i++) {\n            _quorum.strategies.push(_newQuorum.strategies[i]);\n        }\n        emit QuorumUpdated(oldQuorum, _newQuorum);\n    }\n\n    /// @dev Internal function to deregister an operator\n    /// @param _operator The operator's address to deregister\n    function _deregisterOperator(address _operator) internal {\n        if (!_operatorRegistered[_operator]) {\n            revert OperatorNotRegistered();\n        }\n        _totalOperators--;\n        delete _operatorRegistered[_operator];\n        int256 delta = _updateOperatorWeight(_operator);\n        _updateTotalWeight(delta);\n        IServiceManager(_serviceManager).deregisterOperatorFromAVS(_operator);\n        emit OperatorDeregistered(_operator, address(_serviceManager));\n    }\n\n    /// @dev registers an operator through a provided signature\n    /// @param _operatorSignature Contains the operator's signature, salt, and expiry\n    /// @param _signingKey The signing key to add to the operator's history\n    function _registerOperatorWithSig(\n        address _operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory _operatorSignature,\n        address _signingKey\n    ) internal virtual {\n        if (_operatorRegistered[_operator]) {\n            revert OperatorAlreadyRegistered();\n        }\n        _totalOperators++;\n        _operatorRegistered[_operator] = true;\n        int256 delta = _updateOperatorWeight(_operator);\n        _updateTotalWeight(delta);\n        _updateOperatorSigningKey(_operator, _signingKey);\n        IServiceManager(_serviceManager).registerOperatorToAVS(\n            _operator,\n            _operatorSignature\n        );\n        emit OperatorRegistered(_operator, _serviceManager);\n    }\n\n    /// @dev Internal function to update an operator's signing key\n    /// @param _operator The address of the operator to update the signing key for\n    /// @param _newSigningKey The new signing key to set for the operator\n    function _updateOperatorSigningKey(\n        address _operator,\n        address _newSigningKey\n    ) internal {\n        address oldSigningKey = address(\n            uint160(_operatorSigningKeyHistory[_operator].latest())\n        );\n        if (_newSigningKey == oldSigningKey) {\n            return;\n        }\n        _operatorSigningKeyHistory[_operator].push(uint160(_newSigningKey));\n        emit SigningKeyUpdate(\n            _operator,\n            block.number,\n            _newSigningKey,\n            oldSigningKey\n        );\n    }\n\n    /// @notice Updates the weight of an operator and returns the previous and current weights.\n    /// @param _operator The address of the operator to update the weight of.\n    function _updateOperatorWeight(\n        address _operator\n    ) internal virtual returns (int256) {\n        int256 delta;\n        uint256 newWeight;\n        uint256 oldWeight = _operatorWeightHistory[_operator].latest();\n        if (!_operatorRegistered[_operator]) {\n            delta -= int256(oldWeight);\n            if (delta == 0) {\n                return delta;\n            }\n            _operatorWeightHistory[_operator].push(0);\n        } else {\n            newWeight = getOperatorWeight(_operator);\n            delta = int256(newWeight) - int256(oldWeight);\n            if (delta == 0) {\n                return delta;\n            }\n            _operatorWeightHistory[_operator].push(newWeight);\n        }\n        emit OperatorWeightUpdated(_operator, oldWeight, newWeight);\n        return delta;\n    }\n\n    /// @dev Internal function to update the total weight of the stake\n    /// @param delta The change in stake applied last total weight\n    /// @return oldTotalWeight The weight before the update\n    /// @return newTotalWeight The updated weight after applying the delta\n    function _updateTotalWeight(\n        int256 delta\n    ) internal returns (uint256 oldTotalWeight, uint256 newTotalWeight) {\n        oldTotalWeight = _totalWeightHistory.latest();\n        int256 newWeight = int256(oldTotalWeight) + delta;\n        newTotalWeight = uint256(newWeight);\n        _totalWeightHistory.push(newTotalWeight);\n        emit TotalWeightUpdated(oldTotalWeight, newTotalWeight);\n    }\n\n    /**\n     * @dev Verifies that a specified quorum configuration is valid. A valid quorum has:\n     *      1. Weights that sum to exactly 10,000 basis points, ensuring proportional representation.\n     *      2. Unique strategies without duplicates to maintain quorum integrity.\n     * @param _quorum The quorum configuration to be validated.\n     * @return bool True if the quorum configuration is valid, otherwise false.\n     */\n    function _isValidQuorum(\n        Quorum memory _quorum\n    ) internal pure returns (bool) {\n        StrategyParams[] memory strategies = _quorum.strategies;\n        address lastStrategy;\n        address currentStrategy;\n        uint256 totalMultiplier;\n        for (uint256 i; i < strategies.length; i++) {\n            currentStrategy = address(strategies[i].strategy);\n            if (lastStrategy >= currentStrategy) revert NotSorted();\n            lastStrategy = currentStrategy;\n            totalMultiplier += strategies[i].multiplier;\n        }\n        if (totalMultiplier != BPS) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @notice Common logic to verify a batch of ECDSA signatures against a hash, using either last stake weight or at a specific block.\n     * @param _dataHash The hash of the data the signers endorsed.\n     * @param _operators A collection of addresses that endorsed the data hash.\n     * @param _signatures A collection of signatures matching the signers.\n     * @param _referenceBlock The block number for evaluating stake weight; use max uint32 for latest weight.\n     */\n    function _checkSignatures(\n        bytes32 _dataHash,\n        address[] memory _operators,\n        bytes[] memory _signatures,\n        uint32 _referenceBlock\n    ) internal view {\n        uint256 signersLength = _operators.length;\n        address currentOperator;\n        address lastOperator;\n        address signer;\n        uint256 signedWeight;\n\n        _validateSignaturesLength(signersLength, _signatures.length);\n        for (uint256 i; i < signersLength; i++) {\n            currentOperator = _operators[i];\n            signer = _getOperatorSigningKey(currentOperator, _referenceBlock);\n\n            _validateSortedSigners(lastOperator, currentOperator);\n            _validateSignature(signer, _dataHash, _signatures[i]);\n\n            lastOperator = currentOperator;\n            uint256 operatorWeight = _getOperatorWeight(\n                currentOperator,\n                _referenceBlock\n            );\n            signedWeight += operatorWeight;\n        }\n\n        _validateThresholdStake(signedWeight, _referenceBlock);\n    }\n\n    /// @notice Validates that the number of signers equals the number of signatures, and neither is zero.\n    /// @param _signersLength The number of signers.\n    /// @param _signaturesLength The number of signatures.\n    function _validateSignaturesLength(\n        uint256 _signersLength,\n        uint256 _signaturesLength\n    ) internal pure {\n        if (_signersLength != _signaturesLength) {\n            revert LengthMismatch();\n        }\n        if (_signersLength == 0) {\n            revert InvalidLength();\n        }\n    }\n\n    /// @notice Ensures that signers are sorted in ascending order by address.\n    /// @param _lastSigner The address of the last signer.\n    /// @param _currentSigner The address of the current signer.\n    function _validateSortedSigners(\n        address _lastSigner,\n        address _currentSigner\n    ) internal pure {\n        if (_lastSigner >= _currentSigner) {\n            revert NotSorted();\n        }\n    }\n\n    /// @notice Validates a given signature against the signer's address and data hash.\n    /// @param _signer The address of the signer to validate.\n    /// @param _dataHash The hash of the data that is signed.\n    /// @param _signature The signature to validate.\n    function _validateSignature(\n        address _signer,\n        bytes32 _dataHash,\n        bytes memory _signature\n    ) internal view {\n        if (!_signer.isValidSignatureNow(_dataHash, _signature)) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n    /// @param _operator The operator to query their signing key history for\n    /// @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n    /// @return The weight of the operator.\n    function _getOperatorSigningKey(\n        address _operator,\n        uint32 _referenceBlock\n    ) internal view returns (address) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return\n            address(\n                uint160(\n                    _operatorSigningKeyHistory[_operator].getAtBlock(\n                        _referenceBlock\n                    )\n                )\n            );\n    }\n\n    /// @notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n    /// @param _signer The address of the signer whose weight is returned.\n    /// @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n    /// @return The weight of the operator.\n    function _getOperatorWeight(\n        address _signer,\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _operatorWeightHistory[_signer].getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Retrieve the total stake weight at a specific block or the latest if not specified.\n    /// @dev If the `_referenceBlock` is the maximum value for uint32, the latest total weight is returned.\n    /// @param _referenceBlock The block number to retrieve the total stake weight from.\n    /// @return The total stake weight at the given block or the latest if the given block is the max uint32 value.\n    function _getTotalWeight(\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _totalWeightHistory.getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Retrieves the threshold stake for a given reference block.\n    /// @param _referenceBlock The block number to query the threshold stake for.\n    /// If set to the maximum uint32 value, it retrieves the latest threshold stake.\n    /// @return The threshold stake in basis points for the reference block.\n    function _getThresholdStake(\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _thresholdWeightHistory.getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Validates that the cumulative stake of signed messages meets or exceeds the required threshold.\n    /// @param _signedWeight The cumulative weight of the signers that have signed the message.\n    /// @param _referenceBlock The block number to verify the stake threshold for\n    function _validateThresholdStake(\n        uint256 _signedWeight,\n        uint32 _referenceBlock\n    ) internal view {\n        uint256 totalWeight = _getTotalWeight(_referenceBlock);\n        if (_signedWeight > totalWeight) {\n            revert InvalidSignedWeight();\n        }\n        uint256 thresholdStake = _getThresholdStake(_referenceBlock);\n        if (thresholdStake > _signedWeight) {\n            revert InsufficientSignedStake();\n        }\n    }\n}\n"},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport {IDelegationManager} from \"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\";\nimport {CheckpointsUpgradeable} from \"@openzeppelin-upgrades/contracts/utils/CheckpointsUpgradeable.sol\";\nimport {ECDSAStakeRegistryEventsAndErrors, Quorum, StrategyParams} from \"../interfaces/IECDSAStakeRegistryEventsAndErrors.sol\";\n\nabstract contract ECDSAStakeRegistryStorage is\n    ECDSAStakeRegistryEventsAndErrors\n{\n    /// @notice Manages staking delegations through the DelegationManager interface\n    IDelegationManager internal immutable DELEGATION_MANAGER;\n\n    /// @dev The total amount of multipliers to weigh stakes\n    uint256 internal constant BPS = 10_000;\n\n    /// @notice The size of the current operator set\n    uint256 internal _totalOperators;\n\n    /// @notice Stores the current quorum configuration\n    Quorum internal _quorum;\n\n    /// @notice Specifies the weight required to become an operator\n    uint256 internal _minimumWeight;\n\n    /// @notice Holds the address of the service manager\n    address internal _serviceManager;\n\n    /// @notice Defines the duration after which the stake's weight expires.\n    uint256 internal _stakeExpiry;\n\n    /// @notice Maps an operator to their signing key history using checkpoints\n    mapping(address => CheckpointsUpgradeable.History)\n        internal _operatorSigningKeyHistory;\n\n    /// @notice Tracks the total stake history over time using checkpoints\n    CheckpointsUpgradeable.History internal _totalWeightHistory;\n\n    /// @notice Tracks the threshold bps history using checkpoints\n    CheckpointsUpgradeable.History internal _thresholdWeightHistory;\n\n    /// @notice Maps operator addresses to their respective stake histories using checkpoints\n    mapping(address => CheckpointsUpgradeable.History)\n        internal _operatorWeightHistory;\n\n    /// @notice Maps an operator to their registration status\n    mapping(address => bool) internal _operatorRegistered;\n\n    /// @param _delegationManager Connects this registry with the DelegationManager\n    constructor(IDelegationManager _delegationManager) {\n        DELEGATION_MANAGER = _delegationManager;\n    }\n\n    // slither-disable-next-line shadowing-state\n    /// @dev Reserves storage slots for future upgrades\n    // solhint-disable-next-line\n    uint256[40] private __gap;\n}\n"}},"settings":{"remappings":["@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/","@eigenlayer/middleware/=lib/eigenlayer-middleware/","@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/","@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/","erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/","zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"contracts/HelloWorldServiceManager.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"contracts/IHelloWorldServiceManager.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"contracts/LayerToken.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}},"allowPaths":["/home/buckram/wasmatic/wasmatic","/home/buckram/wasmatic/wasmatic/lib","/home/buckram/wasmatic/wasmatic/lib/eigenlayer-middleware/lib"],"basePath":"/home/buckram/wasmatic/wasmatic","includePaths":["/home/buckram/wasmatic/wasmatic"]},"output":{"contracts":{"contracts/HelloWorldServiceManager.sol":{"HelloWorldServiceManager":{"abi":[{"type":"constructor","inputs":[{"name":"_avsDirectory","type":"address","internalType":"address"},{"name":"_stakeRegistry","type":"address","internalType":"address"},{"name":"_rewardsCoordinator","type":"address","internalType":"address"},{"name":"_delegationManager","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"allTaskHashes","inputs":[{"name":"","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allTaskResponses","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"avsDirectory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createAVSRewardsSubmission","inputs":[{"name":"rewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createNewTask","inputs":[{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]}],"stateMutability":"nonpayable"},{"type":"function","name":"createOperatorDirectedAVSRewardsSubmission","inputs":[{"name":"operatorDirectedRewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"operatorRewards","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorReward[]","components":[{"name":"operator","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"},{"name":"description","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperatorFromAVS","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getOperatorRestakedStrategies","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getRestakeableStrategies","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"latestTaskNum","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"registerOperatorToAVS","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"respondToTask","inputs":[{"name":"task","type":"tuple","internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]},{"name":"referenceTaskIndex","type":"uint32","internalType":"uint32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rewardsInitiator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setClaimerFor","inputs":[{"name":"claimer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsInitiator","inputs":[{"name":"newRewardsInitiator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stakeRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAVSMetadataURI","inputs":[{"name":"_metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"NewTaskCreated","inputs":[{"name":"taskIndex","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"task","type":"tuple","indexed":false,"internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RewardsInitiatorUpdated","inputs":[{"name":"prevRewardsInitiator","type":"address","indexed":false,"internalType":"address"},{"name":"newRewardsInitiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TaskResponded","inputs":[{"name":"taskIndex","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"task","type":"tuple","indexed":false,"internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]},{"name":"operator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avsDirectory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"}],\"name\":\"NewTaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevRewardsInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardsInitiator\",\"type\":\"address\"}],\"name\":\"RewardsInitiatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TaskResponded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"allTaskHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"allTaskResponses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avsDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createNewTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorReward[]\",\"name\":\"operatorRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\",\"name\":\"operatorDirectedRewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createOperatorDirectedAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorRestakedStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakeableStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTaskNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"operatorSignature\",\"type\":\"tuple\"}],\"name\":\"registerOperatorToAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTaskIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"respondToTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardsInitiator\",\"type\":\"address\"}],\"name\":\"setRewardsInitiator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateAVSMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eigen Labs, Inc.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractStrategies must be in ascending order of addresses to check for duplicatesThis function will revert if the `rewardsSubmission` is malformed, e.g. if the `strategies` and `weights` arrays are of non-equal lengths\",\"params\":{\"rewardsSubmissions\":\"The rewards submissions being created\"}},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractThis contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.Strategies must be in ascending order of addresses to check for duplicatesOperators must be in ascending order of addresses to check for duplicates.This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\",\"params\":{\"operatorDirectedRewardsSubmissions\":\"The operator-directed rewards submissions being created\"}},\"deregisterOperatorFromAVS(address)\":{\"params\":{\"operator\":\"The address of the operator to deregister.\"}},\"getOperatorRestakedStrategies(address)\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness       of each element in the returned array. The off-chain service should do that validation separately\",\"params\":{\"operator\":\"The address of the operator to get restaked strategies for\"}},\"getRestakeableStrategies()\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on uniqueness of each element in the returned array.       The off-chain service should do that validation separately\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorSignature\":\"The signature, salt, and expiry of the operator's signature.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setClaimerFor(address)\":{\"details\":\"Only callabe by the owner.\",\"params\":{\"claimer\":\"The address of the entity that can call `processClaim` on behalf of the earner\"}},\"setRewardsInitiator(address)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"newRewardsInitiator\":\"The new rewards initiator address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAVSMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"is the metadata URI for the AVS\"}}},\"title\":\"Primary entrypoint for procuring services from HelloWorld.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avsDirectory()\":{\"notice\":\"Address of the AVS directory contract, which manages AVS-related data for registered operators.\"},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the set of stakers delegated to operators who are registered to this `avs`\"},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"notice\":\"Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and set of stakers delegated to operators who are registered to the `avs`.\"},\"deregisterOperatorFromAVS(address)\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\"},\"getOperatorRestakedStrategies(address)\":{\"notice\":\"Returns the list of strategies that the operator has potentially restaked on the AVS\"},\"getRestakeableStrategies()\":{\"notice\":\"Returns the list of strategies that the AVS supports for restaking\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\"},\"rewardsInitiator()\":{\"notice\":\"Address of the rewards initiator, which is allowed to create AVS rewards submissions.\"},\"setClaimerFor(address)\":{\"notice\":\"Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\"},\"setRewardsInitiator(address)\":{\"notice\":\"Sets the rewards initiator address.\"},\"stakeRegistry()\":{\"notice\":\"Address of the stake registry contract, which manages registration and stake recording.\"},\"updateAVSMetadataURI(string)\":{\"notice\":\"Metadata should follow the format outlined by this example. { \\\"name\\\": \\\"EigenLabs AVS 1\\\", \\\"website\\\": \\\"https://www.eigenlayer.xyz/\\\", \\\"description\\\": \\\"This is my 1st AVS\\\", \\\"logo\\\": \\\"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\\\", \\\"twitter\\\": \\\"https://twitter.com/eigenlayer\\\" }Updates the metadata URI for the AVS\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HelloWorldServiceManager.sol\":\"HelloWorldServiceManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"contracts/HelloWorldServiceManager.sol\":{\"keccak256\":\"0x8a961e510d7c5a55829a1cdfc430494805f4f1eba5c93bd66f97759dfab64978\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://a747bd5d577c8d2be69ff1043141b83a2a9228ef9dee5acabbf4b09eb2e4f3d3\",\"dweb:/ipfs/QmTgivtsK2D2sN2K55cMBy1Jo9xZEv2hh8z544WN3mmHxX\"]},\"contracts/IHelloWorldServiceManager.sol\":{\"keccak256\":\"0xdd6bf0f78ad150c6a25bac97fef9d8e207c4f1a05176e4b344127d45e90cdebd\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd14602be3eb7a87556e01cf495cb2755ebde8d3b1d18dce52a78b93d899d7d6\",\"dweb:/ipfs/Qma12dyKsn3GPeCWipszxq5dvkrHbDmrBbePCL7kqoRFpR\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\":{\"keccak256\":\"0x19e6056ed89c88687576965f58dfa642276174a5037d6dc0c58a44cabcae6665\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ee010c1f73b3cf85fe7c67d21f83845cc5a86d56017fc2c00862799b45fe998b\",\"dweb:/ipfs/Qmch2rmrHQgtKSwe78JWtPw3xK2km1aY52UxNyCV7xc1cv\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":{\"keccak256\":\"0x39529942c9f3bab419e0570e3c51c27b49803fb0b3821a0fd06f47ab8835ed81\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://da46171725cfe3dd23c0a4f58abf2565eb7db619495fa4fb8bab55aaff9d9c7a\",\"dweb:/ipfs/QmeEVMVWF4peGBEK72rcedp6sWwhuYcVj8q728zrnTzZ6A\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":{\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d92614db0b346b756af8ba9bd0098db81b031026361635fb4f55a420254637d\",\"dweb:/ipfs/QmVviVD57zX54ny1zvVsksfYF9RantBwVyJBTdHqPywFuP\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":{\"keccak256\":\"0x7fb4716864bc9693785f07ce15f325a44413ad5d2d5685852a9e6112927abd60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2abe805bc615c15daea179f3ff3e3b890f9c0d5ec18d0bb8fad03ab128157ee3\",\"dweb:/ipfs/Qma4UizH7DhTeDfGfkhFFKLnU6p8U9cmodTbgTdRzeFoXX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a459d8907c5fe73d70b4c522e48127b13b9aaa29a223670e928a2a5e5e4c8f8\",\"dweb:/ipfs/QmcwBnMVrajEBgj2i1saNXnQ6ytHQdnpQF978E86EuhvtX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"keccak256\":\"0xb19a57535ad6c6d773f61c1e8f8cc190fa35e12bfadf3743092537c7695fd96a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79811c8c7aabd4fae5ff3021ae67688fc6f6a820f784676bf4b8e41c0c71577d\",\"dweb:/ipfs/QmSo7DdJSzx4U5xvLPnCLNn2SFBPin8dHxYnJrrwxEYQje\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5\",\"dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89c2a0f70157c13845be5cb49b078a6374fee3a78fa950052a3af26190255da8\",\"dweb:/ipfs/QmUcvMEQH1oMM2pUyMuDiBUKdvvnTz1NRB8bmPHrVq8725\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472\",\"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6c4477d480bac20d681ade0e712b77ad828acf530a1d5c0abc5fb78068a05a1\",\"dweb:/ipfs/QmdBqsK8CcUceTeWzhHwFDEvKMoHimwtV96Lbim7ZBtCb8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4\",\"dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":{\"keccak256\":\"0x87d62369932af21f32ea3c66d3238e6b65fd90a00bfb537a639189f4d8ceb7dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6951c38bc040fdb1f35e117390a1936543974e062fcc519300365a68c800c88d\",\"dweb:/ipfs/QmVPjxkL1bLaA6EtthcoerTaMjAmJx8Lv1hchALEkNMfDH\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\":{\"keccak256\":\"0x5e07f7bdcdf5baaadd43d86fee80036edffbe893f3396cb762eaae3f56f4cb89\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d990a5a16e8f0cfb313784e21583d0fd7cf05f5fe73796571aad30889baf27c\",\"dweb:/ipfs/QmPHQ3cTNVD7NxSiZ5xjSuLAkZyczFhckSuhwW9UNNgr6i\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":{\"keccak256\":\"0x6c66bc2b0b2f5aabd2b90ca02d5b6696fc02d75a53567b16d8d81dd956fd7b1b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://284f9cc3f8eade3b022ab8c527aaa35bdd5e0355607abf6d5ef66fb2c9ce90cd\",\"dweb:/ipfs/QmYi856BQNY6G2FTqAGY9qzWPp27QmiytwnfNtfwPN7Cqm\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0x1b8b4d757c1b804bc4cf6fbbf8bf8f89ebdeb30a31014751fe7d01deb9d513d4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://984bf2777b898ed187d28997f9783f5c293a1a1848e3e9aa470ce9183d454c97\",\"dweb:/ipfs/Qme3aTpBrkLu8wYHFMZbCfhXHoZ1M6SpXkeC237T9BuU5B\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol\":{\"keccak256\":\"0x74c528692828aba3a9e37b0058e04b6d9042b21f4cc8753e0250a777a35ca4a4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1ccd0f176f12248be5fa44d100a4fb3d3040df498ca042a16946c619ec942d68\",\"dweb:/ipfs/QmY5mcJU6m94EuFNjkp7XogyvVyn35YpMJu4uhYMsNA1pu\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol\":{\"keccak256\":\"0x41a94f5a3e38c0907c9b47da511db1d9a545b0175e79a302c15723118db1db07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c875b9516f4dd56a74cb2808c04826769cdccb8e25e01a77227e4fdcc494500b\",\"dweb:/ipfs/QmdyQdsCYyHPxquAY5kcVGdm5AcfX483YSvyYdLGCfWfuq\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\":{\"keccak256\":\"0xd78e86c73c9b5b588281ac78051e97b5c32f766383575750c9245f4fec1b547c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c917f123adc35cd48a60a768abea19c7c99487c82260429571ae093235e902a\",\"dweb:/ipfs/QmaiLzxQ1GxPk9oxcgVXPtBBviSW9dVEsmC4xZgvWLxko8\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":434,"id":null,"parameterSlots":1,"returnSlots":1}},"object":"6101003461019a57601f61216738819003918201601f19168301916001600160401b0383118484101761019e5780849260809460405283398101031261019a57610048816101b2565b90610055602082016101b2565b61006d6060610066604085016101b2565b93016101b2565b9260a05260805260c05260e0525f5460ff8160081c166101455760ff8082161061010b575b604051611fa090816101c7823960805181818161057f015281816107db01528181610d74015281816110460152818161128b0152611593015260a0518181816107490152818161080b01528181610d9d0152611002015260c051818181610137015281816108b10152610c6d015260e051816116590152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f610092565b60405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b038216820361019a5756fe6080806040526004361015610012575f80fd5b5f905f3560e01c9081632d89f6fc146118345750806333cfb7b7146115665780633415a49c146110f45780633bc28c8c1461107557806368304835146110315780636b3aa72e14610fed578063715018a614610f9257806385edf87414610ea55780638b00ce7c14610e825780638da5cb5b14610e5a5780639926ee7d14610cd5578063a0169ddd14610c48578063a20b99bf14610873578063a364f4da146107ba578063a98fb3551461072f578063c20bab7f14610630578063e481af9d1461055a578063f2fde38b14610491578063fc299dee146104685763fce36c7d146100fa575f80fd5b346101d75760203660031901126101d7576004356001600160401b0381116104645761012a903690600401611a22565b610135929192611d87565b7f0000000000000000000000000000000000000000000000000000000000000000825b82811061028257506001600160a01b031690813b1561027e576040519363fce36c7d60e01b8552816024860160206004880152526044850160448360051b87010192828690609e19813603015b8383106101e55788808b8181808c0381838f5af180156101da576101c65750f35b816101d091611914565b6101d75780f35b80fd5b6040513d84823e3d90fd5b9091929394956043198a820301865286358281121561027a5760206001928582930190608063ffffffff6102688261022e6102208780611eb0565b60a0885260a0880191611ee4565b95898060a01b036102408983016118a3565b1688870152604081013560408701528361025c6060830161187c565b1660608701520161187c565b169101529801960194930191906101a5565b8980fd5b8280fd5b8360206102e36001600160a01b036102a58361029f878a8d611f48565b01611e84565b1660406102b386898c611f48565b6040516323b872dd60e01b8152336004820152306024820152910135604482015293849283919082906064820190565b03925af1801561040157610448575b506001600160a01b0361030b602061029f84878a611f48565b604051636eb1769f60e11b81523060048201526001600160a01b03851660248201529160209183916044918391165afa9081156104015785918791839161040c575b506020916103b89161038590604061037e888b6001600160a01b036103778a61029f85858c611f48565b1696611f48565b0135611e77565b60405163095ea7b360e01b81526001600160a01b0388166004820152602481019190915293849283919082906044820190565b03925af180156104015790600192916103d3575b5001610158565b6103f39060203d81116103fa575b6103eb8183611914565b810190611e98565b505f6103cc565b503d6103e1565b6040513d87823e3d90fd5b925050506020813d8211610440575b8161042860209383611914565b8101031261043c575184908690602061034d565b5f80fd5b3d915061041b565b61045f9060203d81116103fa576103eb8183611914565b6102f2565b5080fd5b50346101d757806003193601126101d7576065546040516001600160a01b039091168152602090f35b50346101d75760203660031901126101d7576104ab61188d565b6104b3611d2f565b6001600160a01b0316801561050657603380546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101d757806003193601126101d7576040516302e0740360e31b815281816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101da57829161060e575b506105c3815151611cfd565b915b815180518210156105fc57600191906001600160a01b03906105e8908390611cc7565b5151166105f58286611cc7565b52016105c5565b6040518061060a86826118b7565b0390f35b61062a91503d8084833e6106228183611914565b810190611bc5565b5f6105b7565b50346101d75760403660031901126101d75761064a61188d565b610652611869565b9060018060a01b03168252609960205263ffffffff6040832091165f5260205260405f2090604051918181549161068883611a52565b808652926001811690811561070557506001146106c4575b61060a856106b081870382611914565b6040519182916020835260208301906119d3565b815260208120939250905b8082106106eb575090915081016020016106b08261060a6106a0565b9192600181602092548385880101520191019092916106cf565b86955061060a969350602092506106b094915060ff191682840152151560051b82010192936106a0565b50346101d7578061073f36611998565b610747611d2f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156107b65760405163a98fb35560e01b81526020600482015291839183918290849082906107a59060248301906119d3565b03925af180156101da576101c65750f35b5050fd5b50346101d75760203660031901126101d757806107d561188d565b610809337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156107b6576040516351b27a6d60e11b81526001600160a01b0390911660048201529082908290602490829084905af180156101da576101c65750f35b50346101d75760203660031901126101d7576004356001600160401b038111610464576108a4903690600401611a22565b6108af929192611d87565b7f0000000000000000000000000000000000000000000000000000000000000000825b828110610a605750919283926001600160a01b031690813b15610a5b57935060405191634e5cd2fd60e11b835280604484013060048601526040602486015252606483019060648160051b850101958092869160be19813603015b84841061094e578880898181808f0381838e5af180156101da576101c65750f35b878a0360631901835285358181121561027a5782019961097f6109718c80611eb0565b60c0845260c0840191611ee4565b9a6001600160a01b03610994602083016118a3565b16602083015260206109a96040830183611eb0565b848f036040860152808f529d9091019c8c5b818110610a2a575050506020610a1a8c9d600194610a0c8563ffffffff6109e5606088990161187c565b16606084015263ffffffff6109fc6080830161187c565b16608084015260a0810190611a8a565b9160a0818503910152611abb565b980194019401939295995061092d565b90919d60408f60019260208392858060a01b03610a46826118a3565b16835201356020820152019f019291016109bb565b505050fd5b909291829483955b610a80610a76858585611e20565b6040810190611e42565b9050871015610ad057610a97610a76858585611e20565b881015610abc576001916020610ab4928a60061b01013590611e77565b960195610a68565b634e487b7160e01b86526032600452602486fd5b909550929390929091906001600160a01b03610af2602061029f85888b611e20565b6040516323b872dd60e01b81523360048201523060248201526044810184905291602091839160649183918b91165af18015610c2157610c2c575b506001600160a01b03610b46602061029f85888b611e20565b604051636eb1769f60e11b81523060048201526001600160a01b03861660248201529160209183916044918391165afa908115610c2157908692918391610bea575b50602091610385610bb1928a610baa8661029f8a8d60018060a01b0395611e20565b1692611e77565b03925af18015610401579060019291610bcc575b50016108d2565b610be39060203d81116103fa576103eb8183611914565b505f610bc5565b9250506020823d8211610c19575b81610c0560209383611914565b8101031261043c5790518591906020610b88565b3d9150610bf8565b6040513d88823e3d90fd5b610c439060203d81116103fa576103eb8183611914565b610b2d565b50346101d75760203660031901126101d75780610c6361188d565b610c6b611d2f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156107b65760405163a0169ddd60e01b81526001600160a01b0390911660048201529082908290602490829084905af180156101da576101c65750f35b503461043c57604036600319011261043c57610cef61188d565b602435906001600160401b03821161043c576060600319833603011261043c5760405190606082018281106001600160401b03821117610e465760405282600401356001600160401b03811161043c57610d4f906004369186010161197a565b82526020820191602484013583526044604082019401358452610d9b60018060a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611b29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561043c575f610e0e93819560405197889687958694639926ee7d60e01b865260018060a01b0316600486015260406024860152516060604486015260a48501906119d3565b9151606484015251608483015203925af18015610e3b57610e2d575080f35b610e3991505f90611914565b005b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b3461043c575f36600319011261043c576033546040516001600160a01b039091168152602090f35b3461043c575f36600319011261043c57602063ffffffff60975416604051908152f35b3461043c57610eb336611998565b610ebb611b10565b50610ec4611b10565b90815263ffffffff431660208201526040516020810190610ef781610ee985856119f7565b03601f198101835282611914565b51902063ffffffff609754165f52609860205260405f205560975490600163ffffffff8316807f58180a6a0403a63c2b5ce4b85d129d46a80d37851b2216bd0a98b59e7309b84760405180610f4c87826119f7565b0390a2019163ffffffff8311610f7e5763ffffffff61060a93169063ffffffff191617609755604051918291826119f7565b634e487b7160e01b5f52601160045260245ffd5b3461043c575f36600319011261043c57610faa611d2f565b603380546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461043c575f36600319011261043c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461043c575f36600319011261043c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461043c57602036600319011261043c5761108e61188d565b611096611d2f565b606554604080516001600160a01b038084168252841660208201529192917fe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e39190a16001600160a01b03166001600160a01b03199190911617606555005b3461043c57606036600319011261043c576004356001600160401b03811161043c573681900360048201604060031983011261043c57611132611869565b916044356001600160401b03811161043c5761115290369060040161197a565b9363ffffffff60405160208101906020825261117581610ee96040820189611adb565b519020941693845f52609860205260405f2054036114fb57335f52609960205260405f20845f526020526111ac60405f2054611a52565b6114a3578235916022190182121561043c57016004810135906001600160401b03821161043c5760240190803603821361043c57611217602760405183819460208301966602432b6363796160cd1b88528484013781015f838201520301601f198101835282611914565b51902060405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c8152611259605c82611914565b51902060405190630b135d3f60e11b82526004820152604060248201526020818061128760448201886119d3565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610e3b575f91611460575b506001600160e01b031916630b135d3f60e11b0361043c57335f52609960205260405f20825f5260205260405f2083516001600160401b038111610e465761130b8254611a52565b601f811161141b575b506020601f821160011461139257908061137c9493927f8eb2d2fcccf5801e10ff58cd73e8781ba923122963789378771f03c1148b023e96975f92611387575b50508160011b915f199060031b1c19161790555b604051918291604083526040830190611adb565b3360208301520390a2005b015190508780611354565b601f19821695835f52815f20965f5b818110611403575096600192849261137c9796957f8eb2d2fcccf5801e10ff58cd73e8781ba923122963789378771f03c1148b023e999a106113eb575b505050811b019055611368565b01515f1960f88460031b161c191690558780806113de565b838301518955600190980197602093840193016113a1565b825f5260205f20601f830160051c81019160208410611456575b601f0160051c01905b81811061144b5750611314565b5f815560010161143e565b9091508190611435565b90506020813d60201161149b575b8161147b60209383611914565b8101031261043c57516001600160e01b03198116810361043c57846112c3565b3d915061146e565b60405162461bcd60e51b815260206004820152602a60248201527f4f70657261746f722068617320616c726561647920726573706f6e64656420746044820152696f20746865207461736b60b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152603d60248201527f737570706c696564207461736b20646f6573206e6f74206d617463682074686560448201527f206f6e65207265636f7264656420696e2074686520636f6e74726163740000006064820152608490fd5b3461043c57602036600319011261043c5761157f61188d565b6040516302e0740360e31b81525f816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610e3b575f9161181a575b5090815151906115da82611bae565b906115e86040519283611914565b8282526115f483611bae565b602083019490601f19013686375f5b8481106117ec57505060408051639004134760e01b81526001600160a01b0390921660048301526024820152815160448201819052909384916064830191905f5b8181106117ca57505f939283900391508290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610e3b575f93611738575b505f5f5b83811061170c57506116a690611cfd565b925f905f5b8481106116c0576040518061060a88826118b7565b6116ca8183611cc7565b516116d8575b6001016116ab565b91600190611704906001600160a01b036116f28688611cc7565b51166116fe828a611cc7565b52611cef565b9290506116d0565b6117168186611cc7565b51611724575b600101611695565b90611730600191611cef565b91905061171c565b9092503d805f833e61174a8183611914565b81019060208183031261043c578051906001600160401b03821161043c57019080601f8301121561043c57815161178081611bae565b9261178e6040519485611914565b81845260208085019260051b82010192831161043c57602001905b8282106117ba575050509183611691565b81518152602091820191016117a9565b82516001600160a01b0316845287945060209384019390920191600101611644565b600190818060a09895981b03611803828551611cc7565b5151166118108287611cc7565b5201949194611603565b61182e91503d805f833e6106228183611914565b826115cb565b3461043c57602036600319011261043c576004359063ffffffff821680920361043c576020915f526098825260405f20548152f35b6024359063ffffffff8216820361043c57565b359063ffffffff8216820361043c57565b600435906001600160a01b038216820361043c57565b35906001600160a01b038216820361043c57565b60206040818301928281528451809452019201905f5b8181106118da5750505090565b82516001600160a01b03168452602093840193909201916001016118cd565b604081019081106001600160401b03821117610e4657604052565b90601f801991011681019081106001600160401b03821117610e4657604052565b9291926001600160401b038211610e46576040519161195e601f8201601f191660200184611914565b82948184528183011161043c578281602093845f960137010152565b9080601f8301121561043c5781602061199593359101611935565b90565b602060031982011261043c57600435906001600160401b03821161043c578060238301121561043c5781602461199593600401359101611935565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60208152604063ffffffff6020611a188551848387015260608601906119d3565b9401511691015290565b9181601f8401121561043c578235916001600160401b03831161043c576020808501948460051b01011161043c57565b90600182811c92168015611a80575b6020831014611a6c57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611a61565b9035601e198236030181121561043c5701602081359101916001600160401b03821161043c57813603831361043c57565b908060209392818452848401375f828201840152601f01601f1916010190565b90602063ffffffff611b0982611b02611af48780611a8a565b604088526040880191611abb565b950161187c565b1691015290565b60405190611b1d826118f9565b5f602083606081520152565b15611b3057565b60405162461bcd60e51b815260206004820152604a60248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795374616b60448201527f6552656769737472793a2063616c6c6572206973206e6f7420746865207374616064820152696b65526567697374727960b01b608482015260a490fd5b6001600160401b038111610e465760051b60200190565b60208183031261043c578051906001600160401b03821161043c57019060208282031261043c5760405191602083018381106001600160401b03821117610e46576040528051906001600160401b03821161043c570181601f8201121561043c57805190611c3282611bae565b92611c406040519485611914565b82845260208085019360061b8301019181831161043c57602001925b828410611c6c5750505050815290565b60408483031261043c5760405190611c83826118f9565b84516001600160a01b038116810361043c5782526020850151906bffffffffffffffffffffffff8216820361043c5782602092836040950152815201930192611c5c565b8051821015611cdb5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b5f198114610f7e5760010190565b90611d0782611bae565b611d146040519182611914565b8281528092611d25601f1991611bae565b0190602036910137565b6033546001600160a01b03163303611d4357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6065546001600160a01b03163303611d9b57565b60405162461bcd60e51b815260206004820152605160248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795265776160448201527f726473496e69746961746f723a2063616c6c6572206973206e6f7420746865206064820152703932bbb0b932399034b734ba34b0ba37b960791b608482015260a490fd5b9190811015611cdb5760051b8101359060be198136030182121561043c570190565b903590601e198136030182121561043c57018035906001600160401b03821161043c57602001918160061b3603831361043c57565b91908201809211610f7e57565b356001600160a01b038116810361043c5790565b9081602091031261043c5751801515810361043c5790565b9035601e198236030181121561043c5701602081359101916001600160401b03821161043c578160061b3603831361043c57565b916020908281520191905f905b808210611efe5750505090565b909192833560018060a01b03811680910361043c5781526020840135906bffffffffffffffffffffffff821680920361043c57604081600193602083940152019401920190611ef1565b9190811015611cdb5760051b81013590609e198136030182121561043c57019056fea26469706673582212203c65beb6daf4c28636f5af44744162881676248dc378d4007b91bcfeff110d4b64736f6c634300081c0033","opcodes":"PUSH2 0x100 CALLVALUE PUSH2 0x19A JUMPI PUSH1 0x1F PUSH2 0x2167 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x19E JUMPI DUP1 DUP5 SWAP3 PUSH1 0x80 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x19A JUMPI PUSH2 0x48 DUP2 PUSH2 0x1B2 JUMP JUMPDEST SWAP1 PUSH2 0x55 PUSH1 0x20 DUP3 ADD PUSH2 0x1B2 JUMP JUMPDEST PUSH2 0x6D PUSH1 0x60 PUSH2 0x66 PUSH1 0x40 DUP6 ADD PUSH2 0x1B2 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1B2 JUMP JUMPDEST SWAP3 PUSH1 0xA0 MSTORE PUSH1 0x80 MSTORE PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE PUSH0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND PUSH2 0x145 JUMPI PUSH1 0xFF DUP1 DUP3 AND LT PUSH2 0x10B JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FA0 SWAP1 DUP2 PUSH2 0x1C7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x57F ADD MSTORE DUP2 DUP2 PUSH2 0x7DB ADD MSTORE DUP2 DUP2 PUSH2 0xD74 ADD MSTORE DUP2 DUP2 PUSH2 0x1046 ADD MSTORE DUP2 DUP2 PUSH2 0x128B ADD MSTORE PUSH2 0x1593 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x749 ADD MSTORE DUP2 DUP2 PUSH2 0x80B ADD MSTORE DUP2 DUP2 PUSH2 0xD9D ADD MSTORE PUSH2 0x1002 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x137 ADD MSTORE DUP2 DUP2 PUSH2 0x8B1 ADD MSTORE PUSH2 0xC6D ADD MSTORE PUSH1 0xE0 MLOAD DUP2 PUSH2 0x1659 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 PUSH0 PUSH2 0x92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x19A JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x2D89F6FC EQ PUSH2 0x1834 JUMPI POP DUP1 PUSH4 0x33CFB7B7 EQ PUSH2 0x1566 JUMPI DUP1 PUSH4 0x3415A49C EQ PUSH2 0x10F4 JUMPI DUP1 PUSH4 0x3BC28C8C EQ PUSH2 0x1075 JUMPI DUP1 PUSH4 0x68304835 EQ PUSH2 0x1031 JUMPI DUP1 PUSH4 0x6B3AA72E EQ PUSH2 0xFED JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xF92 JUMPI DUP1 PUSH4 0x85EDF874 EQ PUSH2 0xEA5 JUMPI DUP1 PUSH4 0x8B00CE7C EQ PUSH2 0xE82 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE5A JUMPI DUP1 PUSH4 0x9926EE7D EQ PUSH2 0xCD5 JUMPI DUP1 PUSH4 0xA0169DDD EQ PUSH2 0xC48 JUMPI DUP1 PUSH4 0xA20B99BF EQ PUSH2 0x873 JUMPI DUP1 PUSH4 0xA364F4DA EQ PUSH2 0x7BA JUMPI DUP1 PUSH4 0xA98FB355 EQ PUSH2 0x72F JUMPI DUP1 PUSH4 0xC20BAB7F EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0xE481AF9D EQ PUSH2 0x55A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xFC299DEE EQ PUSH2 0x468 JUMPI PUSH4 0xFCE36C7D EQ PUSH2 0xFA JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x464 JUMPI PUSH2 0x12A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x135 SWAP3 SWAP2 SWAP3 PUSH2 0x1D87 JUMP JUMPDEST PUSH32 0x0 DUP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x282 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x27E JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH4 0xFCE36C7D PUSH1 0xE0 SHL DUP6 MSTORE DUP2 PUSH1 0x24 DUP7 ADD PUSH1 0x20 PUSH1 0x4 DUP9 ADD MSTORE MSTORE PUSH1 0x44 DUP6 ADD PUSH1 0x44 DUP4 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 DUP3 DUP7 SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD JUMPDEST DUP4 DUP4 LT PUSH2 0x1E5 JUMPI DUP9 DUP1 DUP12 DUP2 DUP2 DUP1 DUP13 SUB DUP2 DUP4 DUP16 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST DUP2 PUSH2 0x1D0 SWAP2 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x1D7 JUMPI DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH1 0x43 NOT DUP11 DUP3 SUB ADD DUP7 MSTORE DUP7 CALLDATALOAD DUP3 DUP2 SLT ISZERO PUSH2 0x27A JUMPI PUSH1 0x20 PUSH1 0x1 SWAP3 DUP6 DUP3 SWAP4 ADD SWAP1 PUSH1 0x80 PUSH4 0xFFFFFFFF PUSH2 0x268 DUP3 PUSH2 0x22E PUSH2 0x220 DUP8 DUP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0xA0 DUP9 MSTORE PUSH1 0xA0 DUP9 ADD SWAP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP6 DUP10 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x240 DUP10 DUP4 ADD PUSH2 0x18A3 JUMP JUMPDEST AND DUP9 DUP8 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP8 ADD MSTORE DUP4 PUSH2 0x25C PUSH1 0x60 DUP4 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x60 DUP8 ADD MSTORE ADD PUSH2 0x187C JUMP JUMPDEST AND SWAP2 ADD MSTORE SWAP9 ADD SWAP7 ADD SWAP5 SWAP4 ADD SWAP2 SWAP1 PUSH2 0x1A5 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 PUSH2 0x2E3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2A5 DUP4 PUSH2 0x29F DUP8 DUP11 DUP14 PUSH2 0x1F48 JUMP JUMPDEST ADD PUSH2 0x1E84 JUMP JUMPDEST AND PUSH1 0x40 PUSH2 0x2B3 DUP7 DUP10 DUP13 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI PUSH2 0x448 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x30B PUSH1 0x20 PUSH2 0x29F DUP5 DUP8 DUP11 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x401 JUMPI DUP6 SWAP2 DUP8 SWAP2 DUP4 SWAP2 PUSH2 0x40C JUMPI JUMPDEST POP PUSH1 0x20 SWAP2 PUSH2 0x3B8 SWAP2 PUSH2 0x385 SWAP1 PUSH1 0x40 PUSH2 0x37E DUP9 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x377 DUP11 PUSH2 0x29F DUP6 DUP6 DUP13 PUSH2 0x1F48 JUMP JUMPDEST AND SWAP7 PUSH2 0x1F48 JUMP JUMPDEST ADD CALLDATALOAD PUSH2 0x1E77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI SWAP1 PUSH1 0x1 SWAP3 SWAP2 PUSH2 0x3D3 JUMPI JUMPDEST POP ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0x3F3 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI JUMPDEST PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E98 JUMP JUMPDEST POP PUSH0 PUSH2 0x3CC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 POP POP POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x440 JUMPI JUMPDEST DUP2 PUSH2 0x428 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH1 0x20 PUSH2 0x34D JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x41B JUMP JUMPDEST PUSH2 0x45F SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x2F2 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH2 0x4AB PUSH2 0x188D JUMP JUMPDEST PUSH2 0x4B3 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x506 JUMPI PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E07403 PUSH1 0xE3 SHL DUP2 MSTORE DUP2 DUP2 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1DA JUMPI DUP3 SWAP2 PUSH2 0x60E JUMPI JUMPDEST POP PUSH2 0x5C3 DUP2 MLOAD MLOAD PUSH2 0x1CFD JUMP JUMPDEST SWAP2 JUMPDEST DUP2 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x5E8 SWAP1 DUP4 SWAP1 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x5F5 DUP3 DUP7 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE ADD PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x60A DUP7 DUP3 PUSH2 0x18B7 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x62A SWAP2 POP RETURNDATASIZE DUP1 DUP5 DUP4 RETURNDATACOPY PUSH2 0x622 DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH0 PUSH2 0x5B7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH2 0x64A PUSH2 0x188D JUMP JUMPDEST PUSH2 0x652 PUSH2 0x1869 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP2 SLOAD SWAP2 PUSH2 0x688 DUP4 PUSH2 0x1A52 JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x705 JUMPI POP PUSH1 0x1 EQ PUSH2 0x6C4 JUMPI JUMPDEST PUSH2 0x60A DUP6 PUSH2 0x6B0 DUP2 DUP8 SUB DUP3 PUSH2 0x1914 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x6EB JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x6B0 DUP3 PUSH2 0x60A PUSH2 0x6A0 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x6CF JUMP JUMPDEST DUP7 SWAP6 POP PUSH2 0x60A SWAP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6B0 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 SWAP4 PUSH2 0x6A0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH2 0x73F CALLDATASIZE PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x747 PUSH2 0x1D2F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA98FB355 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x7A5 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI DUP1 PUSH2 0x7D5 PUSH2 0x188D JUMP JUMPDEST PUSH2 0x809 CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1B29 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51B27A6D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x464 JUMPI PUSH2 0x8A4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x8AF SWAP3 SWAP2 SWAP3 PUSH2 0x1D87 JUMP JUMPDEST PUSH32 0x0 DUP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xA60 JUMPI POP SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0xA5B JUMPI SWAP4 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x4E5CD2FD PUSH1 0xE1 SHL DUP4 MSTORE DUP1 PUSH1 0x44 DUP5 ADD ADDRESS PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH1 0x64 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD SWAP6 DUP1 SWAP3 DUP7 SWAP2 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x94E JUMPI DUP9 DUP1 DUP10 DUP2 DUP2 DUP1 DUP16 SUB DUP2 DUP4 DUP15 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST DUP8 DUP11 SUB PUSH1 0x63 NOT ADD DUP4 MSTORE DUP6 CALLDATALOAD DUP2 DUP2 SLT ISZERO PUSH2 0x27A JUMPI DUP3 ADD SWAP10 PUSH2 0x97F PUSH2 0x971 DUP13 DUP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0xC0 DUP5 MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x994 PUSH1 0x20 DUP4 ADD PUSH2 0x18A3 JUMP JUMPDEST AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 PUSH2 0x9A9 PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x1EB0 JUMP JUMPDEST DUP5 DUP16 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP1 DUP16 MSTORE SWAP14 SWAP1 SWAP2 ADD SWAP13 DUP13 JUMPDEST DUP2 DUP2 LT PUSH2 0xA2A JUMPI POP POP POP PUSH1 0x20 PUSH2 0xA1A DUP13 SWAP14 PUSH1 0x1 SWAP5 PUSH2 0xA0C DUP6 PUSH4 0xFFFFFFFF PUSH2 0x9E5 PUSH1 0x60 DUP9 SWAP10 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE PUSH4 0xFFFFFFFF PUSH2 0x9FC PUSH1 0x80 DUP4 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1A8A JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x1ABB JUMP JUMPDEST SWAP9 ADD SWAP5 ADD SWAP5 ADD SWAP4 SWAP3 SWAP6 SWAP10 POP PUSH2 0x92D JUMP JUMPDEST SWAP1 SWAP2 SWAP14 PUSH1 0x40 DUP16 PUSH1 0x1 SWAP3 PUSH1 0x20 DUP4 SWAP3 DUP6 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0xA46 DUP3 PUSH2 0x18A3 JUMP JUMPDEST AND DUP4 MSTORE ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP16 ADD SWAP3 SWAP2 ADD PUSH2 0x9BB JUMP JUMPDEST POP POP POP REVERT JUMPDEST SWAP1 SWAP3 SWAP2 DUP3 SWAP5 DUP4 SWAP6 JUMPDEST PUSH2 0xA80 PUSH2 0xA76 DUP6 DUP6 DUP6 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x1E42 JUMP JUMPDEST SWAP1 POP DUP8 LT ISZERO PUSH2 0xAD0 JUMPI PUSH2 0xA97 PUSH2 0xA76 DUP6 DUP6 DUP6 PUSH2 0x1E20 JUMP JUMPDEST DUP9 LT ISZERO PUSH2 0xABC JUMPI PUSH1 0x1 SWAP2 PUSH1 0x20 PUSH2 0xAB4 SWAP3 DUP11 PUSH1 0x6 SHL ADD ADD CALLDATALOAD SWAP1 PUSH2 0x1E77 JUMP JUMPDEST SWAP7 ADD SWAP6 PUSH2 0xA68 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 SWAP6 POP SWAP3 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAF2 PUSH1 0x20 PUSH2 0x29F DUP6 DUP9 DUP12 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 DUP12 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0xC21 JUMPI PUSH2 0xC2C JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB46 PUSH1 0x20 PUSH2 0x29F DUP6 DUP9 DUP12 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xC21 JUMPI SWAP1 DUP7 SWAP3 SWAP2 DUP4 SWAP2 PUSH2 0xBEA JUMPI JUMPDEST POP PUSH1 0x20 SWAP2 PUSH2 0x385 PUSH2 0xBB1 SWAP3 DUP11 PUSH2 0xBAA DUP7 PUSH2 0x29F DUP11 DUP14 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x1E20 JUMP JUMPDEST AND SWAP3 PUSH2 0x1E77 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI SWAP1 PUSH1 0x1 SWAP3 SWAP2 PUSH2 0xBCC JUMPI JUMPDEST POP ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST POP PUSH0 PUSH2 0xBC5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0xC19 JUMPI JUMPDEST DUP2 PUSH2 0xC05 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI SWAP1 MLOAD DUP6 SWAP2 SWAP1 PUSH1 0x20 PUSH2 0xB88 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xBF8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xC43 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0xB2D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI DUP1 PUSH2 0xC63 PUSH2 0x188D JUMP JUMPDEST PUSH2 0xC6B PUSH2 0x1D2F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA0169DDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0xCEF PUSH2 0x188D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x60 PUSH1 0x3 NOT DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI PUSH2 0xD4F SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP7 ADD ADD PUSH2 0x197A JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x24 DUP5 ADD CALLDATALOAD DUP4 MSTORE PUSH1 0x44 PUSH1 0x40 DUP3 ADD SWAP5 ADD CALLDATALOAD DUP5 MSTORE PUSH2 0xD9B PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER EQ PUSH2 0x1B29 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x43C JUMPI PUSH0 PUSH2 0xE0E SWAP4 DUP2 SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x9926EE7D PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MLOAD PUSH1 0x60 PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE3B JUMPI PUSH2 0xE2D JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0xE39 SWAP2 POP PUSH0 SWAP1 PUSH2 0x1914 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0x97 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH2 0xEB3 CALLDATASIZE PUSH2 0x1998 JUMP JUMPDEST PUSH2 0xEBB PUSH2 0x1B10 JUMP JUMPDEST POP PUSH2 0xEC4 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH4 0xFFFFFFFF NUMBER AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xEF7 DUP2 PUSH2 0xEE9 DUP6 DUP6 PUSH2 0x19F7 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x97 SLOAD AND PUSH0 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x97 SLOAD SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF DUP4 AND DUP1 PUSH32 0x58180A6A0403A63C2B5CE4B85D129D46A80D37851B2216BD0A98B59E7309B847 PUSH1 0x40 MLOAD DUP1 PUSH2 0xF4C DUP8 DUP3 PUSH2 0x19F7 JUMP JUMPDEST SUB SWAP1 LOG2 ADD SWAP2 PUSH4 0xFFFFFFFF DUP4 GT PUSH2 0xF7E JUMPI PUSH4 0xFFFFFFFF PUSH2 0x60A SWAP4 AND SWAP1 PUSH4 0xFFFFFFFF NOT AND OR PUSH1 0x97 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19F7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0xFAA PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0x108E PUSH2 0x188D JUMP JUMPDEST PUSH2 0x1096 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xE11CDDF1816A43318CA175BBC52CD0185436E9CBEAD7C83ACC54A73E461717E3 SWAP2 SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x65 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI CALLDATASIZE DUP2 SWAP1 SUB PUSH1 0x4 DUP3 ADD PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x43C JUMPI PUSH2 0x1132 PUSH2 0x1869 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI PUSH2 0x1152 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x197A JUMP JUMPDEST SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1175 DUP2 PUSH2 0xEE9 PUSH1 0x40 DUP3 ADD DUP10 PUSH2 0x1ADB JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SUB PUSH2 0x14FB JUMPI CALLER PUSH0 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x11AC PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x14A3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x22 NOT ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x24 ADD SWAP1 DUP1 CALLDATASIZE SUB DUP3 SGT PUSH2 0x43C JUMPI PUSH2 0x1217 PUSH1 0x27 PUSH1 0x40 MLOAD DUP4 DUP2 SWAP5 PUSH1 0x20 DUP4 ADD SWAP7 PUSH7 0x2432B63637961 PUSH1 0xCD SHL DUP9 MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 ADD PUSH0 DUP4 DUP3 ADD MSTORE SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP4 MSTORE PUSH1 0x3C DUP3 ADD MSTORE PUSH1 0x3C DUP2 MSTORE PUSH2 0x1259 PUSH1 0x5C DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 DUP1 PUSH2 0x1287 PUSH1 0x44 DUP3 ADD DUP9 PUSH2 0x19D3 JUMP JUMPDEST SUB DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP2 PUSH2 0x1460 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xB135D3F PUSH1 0xE1 SHL SUB PUSH2 0x43C JUMPI CALLER PUSH0 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE46 JUMPI PUSH2 0x130B DUP3 SLOAD PUSH2 0x1A52 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x141B JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x1392 JUMPI SWAP1 DUP1 PUSH2 0x137C SWAP5 SWAP4 SWAP3 PUSH32 0x8EB2D2FCCCF5801E10FF58CD73E8781BA923122963789378771F03C1148B023E SWAP7 SWAP8 PUSH0 SWAP3 PUSH2 0x1387 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x1ADB JUMP JUMPDEST CALLER PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG2 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x1354 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 DUP4 PUSH0 MSTORE DUP2 PUSH0 KECCAK256 SWAP7 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1403 JUMPI POP SWAP7 PUSH1 0x1 SWAP3 DUP5 SWAP3 PUSH2 0x137C SWAP8 SWAP7 SWAP6 PUSH32 0x8EB2D2FCCCF5801E10FF58CD73E8781BA923122963789378771F03C1148B023E SWAP10 SWAP11 LT PUSH2 0x13EB JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x1368 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x13DE JUMP JUMPDEST DUP4 DUP4 ADD MLOAD DUP10 SSTORE PUSH1 0x1 SWAP1 SWAP9 ADD SWAP8 PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x13A1 JUMP JUMPDEST DUP3 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x1456 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x144B JUMPI POP PUSH2 0x1314 JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x143E JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1435 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x149B JUMPI JUMPDEST DUP2 PUSH2 0x147B PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI DUP5 PUSH2 0x12C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x146E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F70657261746F722068617320616C726561647920726573706F6E6465642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F20746865207461736B PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x737570706C696564207461736B20646F6573206E6F74206D6174636820746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206F6E65207265636F7264656420696E2074686520636F6E7472616374000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0x157F PUSH2 0x188D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E07403 PUSH1 0xE3 SHL DUP2 MSTORE PUSH0 DUP2 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP2 PUSH2 0x181A JUMPI JUMPDEST POP SWAP1 DUP2 MLOAD MLOAD SWAP1 PUSH2 0x15DA DUP3 PUSH2 0x1BAE JUMP JUMPDEST SWAP1 PUSH2 0x15E8 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH2 0x15F4 DUP4 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP7 CALLDATACOPY PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x17EC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x90041347 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x44 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 DUP5 SWAP2 PUSH1 0x64 DUP4 ADD SWAP2 SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x17CA JUMPI POP PUSH0 SWAP4 SWAP3 DUP4 SWAP1 SUB SWAP2 POP DUP3 SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP4 PUSH2 0x1738 JUMPI JUMPDEST POP PUSH0 PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0x170C JUMPI POP PUSH2 0x16A6 SWAP1 PUSH2 0x1CFD JUMP JUMPDEST SWAP3 PUSH0 SWAP1 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x16C0 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0x60A DUP9 DUP3 PUSH2 0x18B7 JUMP JUMPDEST PUSH2 0x16CA DUP2 DUP4 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD PUSH2 0x16D8 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x16AB JUMP JUMPDEST SWAP2 PUSH1 0x1 SWAP1 PUSH2 0x1704 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x16F2 DUP7 DUP9 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD AND PUSH2 0x16FE DUP3 DUP11 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE PUSH2 0x1CEF JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x1716 DUP2 DUP7 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD PUSH2 0x1724 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x1695 JUMP JUMPDEST SWAP1 PUSH2 0x1730 PUSH1 0x1 SWAP2 PUSH2 0x1CEF JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x171C JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x174A DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 MLOAD PUSH2 0x1780 DUP2 PUSH2 0x1BAE JUMP JUMPDEST SWAP3 PUSH2 0x178E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1914 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x17BA JUMPI POP POP POP SWAP2 DUP4 PUSH2 0x1691 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x17A9 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP8 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1644 JUMP JUMPDEST PUSH1 0x1 SWAP1 DUP2 DUP1 PUSH1 0xA0 SWAP9 SWAP6 SWAP9 SHL SUB PUSH2 0x1803 DUP3 DUP6 MLOAD PUSH2 0x1CC7 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x1810 DUP3 DUP8 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE ADD SWAP5 SWAP2 SWAP5 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x182E SWAP2 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x622 DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP3 PUSH2 0x15CB JUMP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x43C JUMPI PUSH1 0x20 SWAP2 PUSH0 MSTORE PUSH1 0x98 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x18DA JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x195E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x43C JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 PUSH1 0x20 PUSH2 0x1995 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x1935 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 PUSH1 0x24 PUSH2 0x1995 SWAP4 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x1935 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x40 PUSH4 0xFFFFFFFF PUSH1 0x20 PUSH2 0x1A18 DUP6 MLOAD DUP5 DUP4 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SWAP5 ADD MLOAD AND SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1A80 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1A6C JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1A61 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH2 0x1B09 DUP3 PUSH2 0x1B02 PUSH2 0x1AF4 DUP8 DUP1 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 DUP9 MSTORE PUSH1 0x40 DUP9 ADD SWAP2 PUSH2 0x1ABB JUMP JUMPDEST SWAP6 ADD PUSH2 0x187C JUMP JUMPDEST AND SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B1D DUP3 PUSH2 0x18F9 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 PUSH1 0x60 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1B30 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4543445341536572766963654D616E61676572426173652E6F6E6C795374616B PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6552656769737472793A2063616C6C6572206973206E6F742074686520737461 PUSH1 0x64 DUP3 ADD MSTORE PUSH10 0x6B655265676973747279 PUSH1 0xB0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE46 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH2 0x1C32 DUP3 PUSH2 0x1BAE JUMP JUMPDEST SWAP3 PUSH2 0x1C40 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 DUP2 DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x1C6C JUMPI POP POP POP POP DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP5 DUP4 SUB SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1C83 DUP3 PUSH2 0x18F9 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI DUP3 MSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x40 SWAP6 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x1C5C JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0xF7E JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D07 DUP3 PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0x1D14 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1D25 PUSH1 0x1F NOT SWAP2 PUSH2 0x1BAE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1D43 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1D9B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x51 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4543445341536572766963654D616E61676572426173652E6F6E6C7952657761 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726473496E69746961746F723A2063616C6C6572206973206E6F742074686520 PUSH1 0x64 DUP3 ADD MSTORE PUSH17 0x3932BBB0B932399034B734BA34B0BA37B9 PUSH1 0x79 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP2 DUP2 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xF7E JUMPI JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x43C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x43C JUMPI SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP2 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP1 DUP3 DUP2 MSTORE ADD SWAP2 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x1EFE JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 DUP4 CALLDATALOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x43C JUMPI DUP2 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x43C JUMPI PUSH1 0x40 DUP2 PUSH1 0x1 SWAP4 PUSH1 0x20 DUP4 SWAP5 ADD MSTORE ADD SWAP5 ADD SWAP3 ADD SWAP1 PUSH2 0x1EF1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY PUSH6 0xBEB6DAF4C286 CALLDATASIZE CREATE2 0xAF PREVRANDAO PUSH21 0x4162881676248DC378D4007B91BCFEFF110D4B6473 PUSH16 0x6C634300081C00330000000000000000 ","sourceMap":"988:3096:0:-:0;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;3477:28:36;;;988:3096:0;3515:30:36;3555:40;;3605:38;;-1:-1:-1;988:3096:0;;;;;;;;;;;;5527:30:10;5523:138;;-1:-1:-1;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3477:28:36;988:3096:0;;;;;;;;;;;;;;;;;;;;3555:40:36;988:3096:0;;;;;;;;;;;;;;;3605:38:36;988:3096:0;;;;;;5523:138:10;988:3096:0;;;;;;-1:-1:-1;988:3096:0;5622:28:10;988:3096:0;;;;;;5622:28:10;5523:138;;;988:3096:0;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;-1:-1:-1;988:3096:0;;;;;;-1:-1:-1;988:3096:0;;;;;-1:-1:-1;988:3096:0;;;;-1:-1:-1;;;;;988:3096:0;;;;;;:::o","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":6307,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_address_21511":{"entryPoint":6285,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_struct_OperatorDirectedRewardsSubmission_calldata_dyn_calldata":{"entryPoint":6690,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_bytes":{"entryPoint":6453,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":7832,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string":{"entryPoint":6552,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_struct_Quorum_fromMemory":{"entryPoint":7109,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint32":{"entryPoint":6268,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint32_21512":{"entryPoint":6249,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_address":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_address_dyn":{"entryPoint":6327,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_StrategyAndMultiplier_calldata_dyn_calldata":{"entryPoint":7908,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":6611,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":6843,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_struct_Task":{"entryPoint":6647,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Task_calldata":{"entryPoint":6875,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_array_struct_OperatorReward_calldata_dyn_calldata":{"entryPoint":7746,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_and_zero_memory_array_array_address_dyn":{"entryPoint":7421,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_and_zero_memory_struct_struct_Task":{"entryPoint":6928,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_StrategyParams_dyn":{"entryPoint":7086,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_access_array_struct_StrategyAndMultiplier_calldata_dyn_calldata":{"entryPoint":7856,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_string_calldata":{"entryPoint":6794,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_array_index_access_struct_OperatorDirectedRewardsSubmission_calldata_dyn_calldata":{"entryPoint":7712,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_access_struct_RewardsSubmission_calldata_dyn_calldata":{"entryPoint":8008,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":7799,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":6738,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6420,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_21543":{"entryPoint":6393,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkOwner":{"entryPoint":7471,"id":2074,"parameterSlots":0,"returnSlots":0},"fun_checkRewardsInitiator":{"entryPoint":7559,"id":7781,"parameterSlots":0,"returnSlots":0},"increment_uint256":{"entryPoint":7407,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_struct_StrategyParams_dyn":{"entryPoint":7367,"id":null,"parameterSlots":2,"returnSlots":1},"read_from_calldatat_contract_IERC20":{"entryPoint":7812,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral_1c56":{"entryPoint":6953,"id":null,"parameterSlots":1,"returnSlots":0}},"object":"6080806040526004361015610012575f80fd5b5f905f3560e01c9081632d89f6fc146118345750806333cfb7b7146115665780633415a49c146110f45780633bc28c8c1461107557806368304835146110315780636b3aa72e14610fed578063715018a614610f9257806385edf87414610ea55780638b00ce7c14610e825780638da5cb5b14610e5a5780639926ee7d14610cd5578063a0169ddd14610c48578063a20b99bf14610873578063a364f4da146107ba578063a98fb3551461072f578063c20bab7f14610630578063e481af9d1461055a578063f2fde38b14610491578063fc299dee146104685763fce36c7d146100fa575f80fd5b346101d75760203660031901126101d7576004356001600160401b0381116104645761012a903690600401611a22565b610135929192611d87565b7f0000000000000000000000000000000000000000000000000000000000000000825b82811061028257506001600160a01b031690813b1561027e576040519363fce36c7d60e01b8552816024860160206004880152526044850160448360051b87010192828690609e19813603015b8383106101e55788808b8181808c0381838f5af180156101da576101c65750f35b816101d091611914565b6101d75780f35b80fd5b6040513d84823e3d90fd5b9091929394956043198a820301865286358281121561027a5760206001928582930190608063ffffffff6102688261022e6102208780611eb0565b60a0885260a0880191611ee4565b95898060a01b036102408983016118a3565b1688870152604081013560408701528361025c6060830161187c565b1660608701520161187c565b169101529801960194930191906101a5565b8980fd5b8280fd5b8360206102e36001600160a01b036102a58361029f878a8d611f48565b01611e84565b1660406102b386898c611f48565b6040516323b872dd60e01b8152336004820152306024820152910135604482015293849283919082906064820190565b03925af1801561040157610448575b506001600160a01b0361030b602061029f84878a611f48565b604051636eb1769f60e11b81523060048201526001600160a01b03851660248201529160209183916044918391165afa9081156104015785918791839161040c575b506020916103b89161038590604061037e888b6001600160a01b036103778a61029f85858c611f48565b1696611f48565b0135611e77565b60405163095ea7b360e01b81526001600160a01b0388166004820152602481019190915293849283919082906044820190565b03925af180156104015790600192916103d3575b5001610158565b6103f39060203d81116103fa575b6103eb8183611914565b810190611e98565b505f6103cc565b503d6103e1565b6040513d87823e3d90fd5b925050506020813d8211610440575b8161042860209383611914565b8101031261043c575184908690602061034d565b5f80fd5b3d915061041b565b61045f9060203d81116103fa576103eb8183611914565b6102f2565b5080fd5b50346101d757806003193601126101d7576065546040516001600160a01b039091168152602090f35b50346101d75760203660031901126101d7576104ab61188d565b6104b3611d2f565b6001600160a01b0316801561050657603380546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101d757806003193601126101d7576040516302e0740360e31b815281816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101da57829161060e575b506105c3815151611cfd565b915b815180518210156105fc57600191906001600160a01b03906105e8908390611cc7565b5151166105f58286611cc7565b52016105c5565b6040518061060a86826118b7565b0390f35b61062a91503d8084833e6106228183611914565b810190611bc5565b5f6105b7565b50346101d75760403660031901126101d75761064a61188d565b610652611869565b9060018060a01b03168252609960205263ffffffff6040832091165f5260205260405f2090604051918181549161068883611a52565b808652926001811690811561070557506001146106c4575b61060a856106b081870382611914565b6040519182916020835260208301906119d3565b815260208120939250905b8082106106eb575090915081016020016106b08261060a6106a0565b9192600181602092548385880101520191019092916106cf565b86955061060a969350602092506106b094915060ff191682840152151560051b82010192936106a0565b50346101d7578061073f36611998565b610747611d2f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156107b65760405163a98fb35560e01b81526020600482015291839183918290849082906107a59060248301906119d3565b03925af180156101da576101c65750f35b5050fd5b50346101d75760203660031901126101d757806107d561188d565b610809337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156107b6576040516351b27a6d60e11b81526001600160a01b0390911660048201529082908290602490829084905af180156101da576101c65750f35b50346101d75760203660031901126101d7576004356001600160401b038111610464576108a4903690600401611a22565b6108af929192611d87565b7f0000000000000000000000000000000000000000000000000000000000000000825b828110610a605750919283926001600160a01b031690813b15610a5b57935060405191634e5cd2fd60e11b835280604484013060048601526040602486015252606483019060648160051b850101958092869160be19813603015b84841061094e578880898181808f0381838e5af180156101da576101c65750f35b878a0360631901835285358181121561027a5782019961097f6109718c80611eb0565b60c0845260c0840191611ee4565b9a6001600160a01b03610994602083016118a3565b16602083015260206109a96040830183611eb0565b848f036040860152808f529d9091019c8c5b818110610a2a575050506020610a1a8c9d600194610a0c8563ffffffff6109e5606088990161187c565b16606084015263ffffffff6109fc6080830161187c565b16608084015260a0810190611a8a565b9160a0818503910152611abb565b980194019401939295995061092d565b90919d60408f60019260208392858060a01b03610a46826118a3565b16835201356020820152019f019291016109bb565b505050fd5b909291829483955b610a80610a76858585611e20565b6040810190611e42565b9050871015610ad057610a97610a76858585611e20565b881015610abc576001916020610ab4928a60061b01013590611e77565b960195610a68565b634e487b7160e01b86526032600452602486fd5b909550929390929091906001600160a01b03610af2602061029f85888b611e20565b6040516323b872dd60e01b81523360048201523060248201526044810184905291602091839160649183918b91165af18015610c2157610c2c575b506001600160a01b03610b46602061029f85888b611e20565b604051636eb1769f60e11b81523060048201526001600160a01b03861660248201529160209183916044918391165afa908115610c2157908692918391610bea575b50602091610385610bb1928a610baa8661029f8a8d60018060a01b0395611e20565b1692611e77565b03925af18015610401579060019291610bcc575b50016108d2565b610be39060203d81116103fa576103eb8183611914565b505f610bc5565b9250506020823d8211610c19575b81610c0560209383611914565b8101031261043c5790518591906020610b88565b3d9150610bf8565b6040513d88823e3d90fd5b610c439060203d81116103fa576103eb8183611914565b610b2d565b50346101d75760203660031901126101d75780610c6361188d565b610c6b611d2f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156107b65760405163a0169ddd60e01b81526001600160a01b0390911660048201529082908290602490829084905af180156101da576101c65750f35b503461043c57604036600319011261043c57610cef61188d565b602435906001600160401b03821161043c576060600319833603011261043c5760405190606082018281106001600160401b03821117610e465760405282600401356001600160401b03811161043c57610d4f906004369186010161197a565b82526020820191602484013583526044604082019401358452610d9b60018060a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611b29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561043c575f610e0e93819560405197889687958694639926ee7d60e01b865260018060a01b0316600486015260406024860152516060604486015260a48501906119d3565b9151606484015251608483015203925af18015610e3b57610e2d575080f35b610e3991505f90611914565b005b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b3461043c575f36600319011261043c576033546040516001600160a01b039091168152602090f35b3461043c575f36600319011261043c57602063ffffffff60975416604051908152f35b3461043c57610eb336611998565b610ebb611b10565b50610ec4611b10565b90815263ffffffff431660208201526040516020810190610ef781610ee985856119f7565b03601f198101835282611914565b51902063ffffffff609754165f52609860205260405f205560975490600163ffffffff8316807f58180a6a0403a63c2b5ce4b85d129d46a80d37851b2216bd0a98b59e7309b84760405180610f4c87826119f7565b0390a2019163ffffffff8311610f7e5763ffffffff61060a93169063ffffffff191617609755604051918291826119f7565b634e487b7160e01b5f52601160045260245ffd5b3461043c575f36600319011261043c57610faa611d2f565b603380546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461043c575f36600319011261043c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461043c575f36600319011261043c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461043c57602036600319011261043c5761108e61188d565b611096611d2f565b606554604080516001600160a01b038084168252841660208201529192917fe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e39190a16001600160a01b03166001600160a01b03199190911617606555005b3461043c57606036600319011261043c576004356001600160401b03811161043c573681900360048201604060031983011261043c57611132611869565b916044356001600160401b03811161043c5761115290369060040161197a565b9363ffffffff60405160208101906020825261117581610ee96040820189611adb565b519020941693845f52609860205260405f2054036114fb57335f52609960205260405f20845f526020526111ac60405f2054611a52565b6114a3578235916022190182121561043c57016004810135906001600160401b03821161043c5760240190803603821361043c57611217602760405183819460208301966602432b6363796160cd1b88528484013781015f838201520301601f198101835282611914565b51902060405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c8152611259605c82611914565b51902060405190630b135d3f60e11b82526004820152604060248201526020818061128760448201886119d3565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610e3b575f91611460575b506001600160e01b031916630b135d3f60e11b0361043c57335f52609960205260405f20825f5260205260405f2083516001600160401b038111610e465761130b8254611a52565b601f811161141b575b506020601f821160011461139257908061137c9493927f8eb2d2fcccf5801e10ff58cd73e8781ba923122963789378771f03c1148b023e96975f92611387575b50508160011b915f199060031b1c19161790555b604051918291604083526040830190611adb565b3360208301520390a2005b015190508780611354565b601f19821695835f52815f20965f5b818110611403575096600192849261137c9796957f8eb2d2fcccf5801e10ff58cd73e8781ba923122963789378771f03c1148b023e999a106113eb575b505050811b019055611368565b01515f1960f88460031b161c191690558780806113de565b838301518955600190980197602093840193016113a1565b825f5260205f20601f830160051c81019160208410611456575b601f0160051c01905b81811061144b5750611314565b5f815560010161143e565b9091508190611435565b90506020813d60201161149b575b8161147b60209383611914565b8101031261043c57516001600160e01b03198116810361043c57846112c3565b3d915061146e565b60405162461bcd60e51b815260206004820152602a60248201527f4f70657261746f722068617320616c726561647920726573706f6e64656420746044820152696f20746865207461736b60b01b6064820152608490fd5b60405162461bcd60e51b815260206004820152603d60248201527f737570706c696564207461736b20646f6573206e6f74206d617463682074686560448201527f206f6e65207265636f7264656420696e2074686520636f6e74726163740000006064820152608490fd5b3461043c57602036600319011261043c5761157f61188d565b6040516302e0740360e31b81525f816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610e3b575f9161181a575b5090815151906115da82611bae565b906115e86040519283611914565b8282526115f483611bae565b602083019490601f19013686375f5b8481106117ec57505060408051639004134760e01b81526001600160a01b0390921660048301526024820152815160448201819052909384916064830191905f5b8181106117ca57505f939283900391508290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610e3b575f93611738575b505f5f5b83811061170c57506116a690611cfd565b925f905f5b8481106116c0576040518061060a88826118b7565b6116ca8183611cc7565b516116d8575b6001016116ab565b91600190611704906001600160a01b036116f28688611cc7565b51166116fe828a611cc7565b52611cef565b9290506116d0565b6117168186611cc7565b51611724575b600101611695565b90611730600191611cef565b91905061171c565b9092503d805f833e61174a8183611914565b81019060208183031261043c578051906001600160401b03821161043c57019080601f8301121561043c57815161178081611bae565b9261178e6040519485611914565b81845260208085019260051b82010192831161043c57602001905b8282106117ba575050509183611691565b81518152602091820191016117a9565b82516001600160a01b0316845287945060209384019390920191600101611644565b600190818060a09895981b03611803828551611cc7565b5151166118108287611cc7565b5201949194611603565b61182e91503d805f833e6106228183611914565b826115cb565b3461043c57602036600319011261043c576004359063ffffffff821680920361043c576020915f526098825260405f20548152f35b6024359063ffffffff8216820361043c57565b359063ffffffff8216820361043c57565b600435906001600160a01b038216820361043c57565b35906001600160a01b038216820361043c57565b60206040818301928281528451809452019201905f5b8181106118da5750505090565b82516001600160a01b03168452602093840193909201916001016118cd565b604081019081106001600160401b03821117610e4657604052565b90601f801991011681019081106001600160401b03821117610e4657604052565b9291926001600160401b038211610e46576040519161195e601f8201601f191660200184611914565b82948184528183011161043c578281602093845f960137010152565b9080601f8301121561043c5781602061199593359101611935565b90565b602060031982011261043c57600435906001600160401b03821161043c578060238301121561043c5781602461199593600401359101611935565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60208152604063ffffffff6020611a188551848387015260608601906119d3565b9401511691015290565b9181601f8401121561043c578235916001600160401b03831161043c576020808501948460051b01011161043c57565b90600182811c92168015611a80575b6020831014611a6c57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611a61565b9035601e198236030181121561043c5701602081359101916001600160401b03821161043c57813603831361043c57565b908060209392818452848401375f828201840152601f01601f1916010190565b90602063ffffffff611b0982611b02611af48780611a8a565b604088526040880191611abb565b950161187c565b1691015290565b60405190611b1d826118f9565b5f602083606081520152565b15611b3057565b60405162461bcd60e51b815260206004820152604a60248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795374616b60448201527f6552656769737472793a2063616c6c6572206973206e6f7420746865207374616064820152696b65526567697374727960b01b608482015260a490fd5b6001600160401b038111610e465760051b60200190565b60208183031261043c578051906001600160401b03821161043c57019060208282031261043c5760405191602083018381106001600160401b03821117610e46576040528051906001600160401b03821161043c570181601f8201121561043c57805190611c3282611bae565b92611c406040519485611914565b82845260208085019360061b8301019181831161043c57602001925b828410611c6c5750505050815290565b60408483031261043c5760405190611c83826118f9565b84516001600160a01b038116810361043c5782526020850151906bffffffffffffffffffffffff8216820361043c5782602092836040950152815201930192611c5c565b8051821015611cdb5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b5f198114610f7e5760010190565b90611d0782611bae565b611d146040519182611914565b8281528092611d25601f1991611bae565b0190602036910137565b6033546001600160a01b03163303611d4357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6065546001600160a01b03163303611d9b57565b60405162461bcd60e51b815260206004820152605160248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795265776160448201527f726473496e69746961746f723a2063616c6c6572206973206e6f7420746865206064820152703932bbb0b932399034b734ba34b0ba37b960791b608482015260a490fd5b9190811015611cdb5760051b8101359060be198136030182121561043c570190565b903590601e198136030182121561043c57018035906001600160401b03821161043c57602001918160061b3603831361043c57565b91908201809211610f7e57565b356001600160a01b038116810361043c5790565b9081602091031261043c5751801515810361043c5790565b9035601e198236030181121561043c5701602081359101916001600160401b03821161043c578160061b3603831361043c57565b916020908281520191905f905b808210611efe5750505090565b909192833560018060a01b03811680910361043c5781526020840135906bffffffffffffffffffffffff821680920361043c57604081600193602083940152019401920190611ef1565b9190811015611cdb5760051b81013590609e198136030182121561043c57019056fea26469706673582212203c65beb6daf4c28636f5af44744162881676248dc378d4007b91bcfeff110d4b64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x2D89F6FC EQ PUSH2 0x1834 JUMPI POP DUP1 PUSH4 0x33CFB7B7 EQ PUSH2 0x1566 JUMPI DUP1 PUSH4 0x3415A49C EQ PUSH2 0x10F4 JUMPI DUP1 PUSH4 0x3BC28C8C EQ PUSH2 0x1075 JUMPI DUP1 PUSH4 0x68304835 EQ PUSH2 0x1031 JUMPI DUP1 PUSH4 0x6B3AA72E EQ PUSH2 0xFED JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xF92 JUMPI DUP1 PUSH4 0x85EDF874 EQ PUSH2 0xEA5 JUMPI DUP1 PUSH4 0x8B00CE7C EQ PUSH2 0xE82 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE5A JUMPI DUP1 PUSH4 0x9926EE7D EQ PUSH2 0xCD5 JUMPI DUP1 PUSH4 0xA0169DDD EQ PUSH2 0xC48 JUMPI DUP1 PUSH4 0xA20B99BF EQ PUSH2 0x873 JUMPI DUP1 PUSH4 0xA364F4DA EQ PUSH2 0x7BA JUMPI DUP1 PUSH4 0xA98FB355 EQ PUSH2 0x72F JUMPI DUP1 PUSH4 0xC20BAB7F EQ PUSH2 0x630 JUMPI DUP1 PUSH4 0xE481AF9D EQ PUSH2 0x55A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xFC299DEE EQ PUSH2 0x468 JUMPI PUSH4 0xFCE36C7D EQ PUSH2 0xFA JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x464 JUMPI PUSH2 0x12A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x135 SWAP3 SWAP2 SWAP3 PUSH2 0x1D87 JUMP JUMPDEST PUSH32 0x0 DUP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x282 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x27E JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH4 0xFCE36C7D PUSH1 0xE0 SHL DUP6 MSTORE DUP2 PUSH1 0x24 DUP7 ADD PUSH1 0x20 PUSH1 0x4 DUP9 ADD MSTORE MSTORE PUSH1 0x44 DUP6 ADD PUSH1 0x44 DUP4 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 DUP3 DUP7 SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD JUMPDEST DUP4 DUP4 LT PUSH2 0x1E5 JUMPI DUP9 DUP1 DUP12 DUP2 DUP2 DUP1 DUP13 SUB DUP2 DUP4 DUP16 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST DUP2 PUSH2 0x1D0 SWAP2 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x1D7 JUMPI DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH1 0x43 NOT DUP11 DUP3 SUB ADD DUP7 MSTORE DUP7 CALLDATALOAD DUP3 DUP2 SLT ISZERO PUSH2 0x27A JUMPI PUSH1 0x20 PUSH1 0x1 SWAP3 DUP6 DUP3 SWAP4 ADD SWAP1 PUSH1 0x80 PUSH4 0xFFFFFFFF PUSH2 0x268 DUP3 PUSH2 0x22E PUSH2 0x220 DUP8 DUP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0xA0 DUP9 MSTORE PUSH1 0xA0 DUP9 ADD SWAP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP6 DUP10 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x240 DUP10 DUP4 ADD PUSH2 0x18A3 JUMP JUMPDEST AND DUP9 DUP8 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP8 ADD MSTORE DUP4 PUSH2 0x25C PUSH1 0x60 DUP4 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x60 DUP8 ADD MSTORE ADD PUSH2 0x187C JUMP JUMPDEST AND SWAP2 ADD MSTORE SWAP9 ADD SWAP7 ADD SWAP5 SWAP4 ADD SWAP2 SWAP1 PUSH2 0x1A5 JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 PUSH2 0x2E3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2A5 DUP4 PUSH2 0x29F DUP8 DUP11 DUP14 PUSH2 0x1F48 JUMP JUMPDEST ADD PUSH2 0x1E84 JUMP JUMPDEST AND PUSH1 0x40 PUSH2 0x2B3 DUP7 DUP10 DUP13 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP2 ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI PUSH2 0x448 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x30B PUSH1 0x20 PUSH2 0x29F DUP5 DUP8 DUP11 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x401 JUMPI DUP6 SWAP2 DUP8 SWAP2 DUP4 SWAP2 PUSH2 0x40C JUMPI JUMPDEST POP PUSH1 0x20 SWAP2 PUSH2 0x3B8 SWAP2 PUSH2 0x385 SWAP1 PUSH1 0x40 PUSH2 0x37E DUP9 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x377 DUP11 PUSH2 0x29F DUP6 DUP6 DUP13 PUSH2 0x1F48 JUMP JUMPDEST AND SWAP7 PUSH2 0x1F48 JUMP JUMPDEST ADD CALLDATALOAD PUSH2 0x1E77 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI SWAP1 PUSH1 0x1 SWAP3 SWAP2 PUSH2 0x3D3 JUMPI JUMPDEST POP ADD PUSH2 0x158 JUMP JUMPDEST PUSH2 0x3F3 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI JUMPDEST PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1E98 JUMP JUMPDEST POP PUSH0 PUSH2 0x3CC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 POP POP POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x440 JUMPI JUMPDEST DUP2 PUSH2 0x428 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI MLOAD DUP5 SWAP1 DUP7 SWAP1 PUSH1 0x20 PUSH2 0x34D JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x41B JUMP JUMPDEST PUSH2 0x45F SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0x2F2 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH2 0x4AB PUSH2 0x188D JUMP JUMPDEST PUSH2 0x4B3 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x506 JUMPI PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E07403 PUSH1 0xE3 SHL DUP2 MSTORE DUP2 DUP2 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1DA JUMPI DUP3 SWAP2 PUSH2 0x60E JUMPI JUMPDEST POP PUSH2 0x5C3 DUP2 MLOAD MLOAD PUSH2 0x1CFD JUMP JUMPDEST SWAP2 JUMPDEST DUP2 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x5FC JUMPI PUSH1 0x1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x5E8 SWAP1 DUP4 SWAP1 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x5F5 DUP3 DUP7 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE ADD PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x60A DUP7 DUP3 PUSH2 0x18B7 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x62A SWAP2 POP RETURNDATASIZE DUP1 DUP5 DUP4 RETURNDATACOPY PUSH2 0x622 DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH0 PUSH2 0x5B7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH2 0x64A PUSH2 0x188D JUMP JUMPDEST PUSH2 0x652 PUSH2 0x1869 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP2 SLOAD SWAP2 PUSH2 0x688 DUP4 PUSH2 0x1A52 JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP3 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x705 JUMPI POP PUSH1 0x1 EQ PUSH2 0x6C4 JUMPI JUMPDEST PUSH2 0x60A DUP6 PUSH2 0x6B0 DUP2 DUP8 SUB DUP3 PUSH2 0x1914 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x6EB JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x6B0 DUP3 PUSH2 0x60A PUSH2 0x6A0 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x6CF JUMP JUMPDEST DUP7 SWAP6 POP PUSH2 0x60A SWAP7 SWAP4 POP PUSH1 0x20 SWAP3 POP PUSH2 0x6B0 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 SWAP4 PUSH2 0x6A0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI DUP1 PUSH2 0x73F CALLDATASIZE PUSH2 0x1998 JUMP JUMPDEST PUSH2 0x747 PUSH2 0x1D2F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA98FB355 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x7A5 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP POP REVERT JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI DUP1 PUSH2 0x7D5 PUSH2 0x188D JUMP JUMPDEST PUSH2 0x809 CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1B29 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51B27A6D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x464 JUMPI PUSH2 0x8A4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1A22 JUMP JUMPDEST PUSH2 0x8AF SWAP3 SWAP2 SWAP3 PUSH2 0x1D87 JUMP JUMPDEST PUSH32 0x0 DUP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xA60 JUMPI POP SWAP2 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0xA5B JUMPI SWAP4 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x4E5CD2FD PUSH1 0xE1 SHL DUP4 MSTORE DUP1 PUSH1 0x44 DUP5 ADD ADDRESS PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH1 0x64 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD SWAP6 DUP1 SWAP3 DUP7 SWAP2 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD JUMPDEST DUP5 DUP5 LT PUSH2 0x94E JUMPI DUP9 DUP1 DUP10 DUP2 DUP2 DUP1 DUP16 SUB DUP2 DUP4 DUP15 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST DUP8 DUP11 SUB PUSH1 0x63 NOT ADD DUP4 MSTORE DUP6 CALLDATALOAD DUP2 DUP2 SLT ISZERO PUSH2 0x27A JUMPI DUP3 ADD SWAP10 PUSH2 0x97F PUSH2 0x971 DUP13 DUP1 PUSH2 0x1EB0 JUMP JUMPDEST PUSH1 0xC0 DUP5 MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x994 PUSH1 0x20 DUP4 ADD PUSH2 0x18A3 JUMP JUMPDEST AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 PUSH2 0x9A9 PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x1EB0 JUMP JUMPDEST DUP5 DUP16 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP1 DUP16 MSTORE SWAP14 SWAP1 SWAP2 ADD SWAP13 DUP13 JUMPDEST DUP2 DUP2 LT PUSH2 0xA2A JUMPI POP POP POP PUSH1 0x20 PUSH2 0xA1A DUP13 SWAP14 PUSH1 0x1 SWAP5 PUSH2 0xA0C DUP6 PUSH4 0xFFFFFFFF PUSH2 0x9E5 PUSH1 0x60 DUP9 SWAP10 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE PUSH4 0xFFFFFFFF PUSH2 0x9FC PUSH1 0x80 DUP4 ADD PUSH2 0x187C JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1A8A JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x1ABB JUMP JUMPDEST SWAP9 ADD SWAP5 ADD SWAP5 ADD SWAP4 SWAP3 SWAP6 SWAP10 POP PUSH2 0x92D JUMP JUMPDEST SWAP1 SWAP2 SWAP14 PUSH1 0x40 DUP16 PUSH1 0x1 SWAP3 PUSH1 0x20 DUP4 SWAP3 DUP6 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0xA46 DUP3 PUSH2 0x18A3 JUMP JUMPDEST AND DUP4 MSTORE ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP16 ADD SWAP3 SWAP2 ADD PUSH2 0x9BB JUMP JUMPDEST POP POP POP REVERT JUMPDEST SWAP1 SWAP3 SWAP2 DUP3 SWAP5 DUP4 SWAP6 JUMPDEST PUSH2 0xA80 PUSH2 0xA76 DUP6 DUP6 DUP6 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x1E42 JUMP JUMPDEST SWAP1 POP DUP8 LT ISZERO PUSH2 0xAD0 JUMPI PUSH2 0xA97 PUSH2 0xA76 DUP6 DUP6 DUP6 PUSH2 0x1E20 JUMP JUMPDEST DUP9 LT ISZERO PUSH2 0xABC JUMPI PUSH1 0x1 SWAP2 PUSH1 0x20 PUSH2 0xAB4 SWAP3 DUP11 PUSH1 0x6 SHL ADD ADD CALLDATALOAD SWAP1 PUSH2 0x1E77 JUMP JUMPDEST SWAP7 ADD SWAP6 PUSH2 0xA68 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 SWAP6 POP SWAP3 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAF2 PUSH1 0x20 PUSH2 0x29F DUP6 DUP9 DUP12 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 DUP12 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0xC21 JUMPI PUSH2 0xC2C JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB46 PUSH1 0x20 PUSH2 0x29F DUP6 DUP9 DUP12 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xC21 JUMPI SWAP1 DUP7 SWAP3 SWAP2 DUP4 SWAP2 PUSH2 0xBEA JUMPI JUMPDEST POP PUSH1 0x20 SWAP2 PUSH2 0x385 PUSH2 0xBB1 SWAP3 DUP11 PUSH2 0xBAA DUP7 PUSH2 0x29F DUP11 DUP14 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x1E20 JUMP JUMPDEST AND SWAP3 PUSH2 0x1E77 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x401 JUMPI SWAP1 PUSH1 0x1 SWAP3 SWAP2 PUSH2 0xBCC JUMPI JUMPDEST POP ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST POP PUSH0 PUSH2 0xBC5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0xC19 JUMPI JUMPDEST DUP2 PUSH2 0xC05 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI SWAP1 MLOAD DUP6 SWAP2 SWAP1 PUSH1 0x20 PUSH2 0xB88 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xBF8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xC43 SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x3EB DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST PUSH2 0xB2D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1D7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1D7 JUMPI DUP1 PUSH2 0xC63 PUSH2 0x188D JUMP JUMPDEST PUSH2 0xC6B PUSH2 0x1D2F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA0169DDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH2 0x1C6 JUMPI POP RETURN JUMPDEST POP CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0xCEF PUSH2 0x188D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x60 PUSH1 0x3 NOT DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI PUSH2 0xD4F SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP7 ADD ADD PUSH2 0x197A JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x24 DUP5 ADD CALLDATALOAD DUP4 MSTORE PUSH1 0x44 PUSH1 0x40 DUP3 ADD SWAP5 ADD CALLDATALOAD DUP5 MSTORE PUSH2 0xD9B PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER EQ PUSH2 0x1B29 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x43C JUMPI PUSH0 PUSH2 0xE0E SWAP4 DUP2 SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0x9926EE7D PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MLOAD PUSH1 0x60 PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE3B JUMPI PUSH2 0xE2D JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0xE39 SWAP2 POP PUSH0 SWAP1 PUSH2 0x1914 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0x97 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH2 0xEB3 CALLDATASIZE PUSH2 0x1998 JUMP JUMPDEST PUSH2 0xEBB PUSH2 0x1B10 JUMP JUMPDEST POP PUSH2 0xEC4 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH4 0xFFFFFFFF NUMBER AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xEF7 DUP2 PUSH2 0xEE9 DUP6 DUP6 PUSH2 0x19F7 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH4 0xFFFFFFFF PUSH1 0x97 SLOAD AND PUSH0 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x97 SLOAD SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF DUP4 AND DUP1 PUSH32 0x58180A6A0403A63C2B5CE4B85D129D46A80D37851B2216BD0A98B59E7309B847 PUSH1 0x40 MLOAD DUP1 PUSH2 0xF4C DUP8 DUP3 PUSH2 0x19F7 JUMP JUMPDEST SUB SWAP1 LOG2 ADD SWAP2 PUSH4 0xFFFFFFFF DUP4 GT PUSH2 0xF7E JUMPI PUSH4 0xFFFFFFFF PUSH2 0x60A SWAP4 AND SWAP1 PUSH4 0xFFFFFFFF NOT AND OR PUSH1 0x97 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19F7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0xFAA PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0x108E PUSH2 0x188D JUMP JUMPDEST PUSH2 0x1096 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xE11CDDF1816A43318CA175BBC52CD0185436E9CBEAD7C83ACC54A73E461717E3 SWAP2 SWAP1 LOG1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x65 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI CALLDATASIZE DUP2 SWAP1 SUB PUSH1 0x4 DUP3 ADD PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x43C JUMPI PUSH2 0x1132 PUSH2 0x1869 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x43C JUMPI PUSH2 0x1152 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x197A JUMP JUMPDEST SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1175 DUP2 PUSH2 0xEE9 PUSH1 0x40 DUP3 ADD DUP10 PUSH2 0x1ADB JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x98 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SUB PUSH2 0x14FB JUMPI CALLER PUSH0 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP5 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x11AC PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x14A3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x22 NOT ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x4 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x24 ADD SWAP1 DUP1 CALLDATASIZE SUB DUP3 SGT PUSH2 0x43C JUMPI PUSH2 0x1217 PUSH1 0x27 PUSH1 0x40 MLOAD DUP4 DUP2 SWAP5 PUSH1 0x20 DUP4 ADD SWAP7 PUSH7 0x2432B63637961 PUSH1 0xCD SHL DUP9 MSTORE DUP5 DUP5 ADD CALLDATACOPY DUP2 ADD PUSH0 DUP4 DUP3 ADD MSTORE SUB ADD PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP4 MSTORE PUSH1 0x3C DUP3 ADD MSTORE PUSH1 0x3C DUP2 MSTORE PUSH2 0x1259 PUSH1 0x5C DUP3 PUSH2 0x1914 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 DUP1 PUSH2 0x1287 PUSH1 0x44 DUP3 ADD DUP9 PUSH2 0x19D3 JUMP JUMPDEST SUB DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP2 PUSH2 0x1460 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xB135D3F PUSH1 0xE1 SHL SUB PUSH2 0x43C JUMPI CALLER PUSH0 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE46 JUMPI PUSH2 0x130B DUP3 SLOAD PUSH2 0x1A52 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x141B JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x1392 JUMPI SWAP1 DUP1 PUSH2 0x137C SWAP5 SWAP4 SWAP3 PUSH32 0x8EB2D2FCCCF5801E10FF58CD73E8781BA923122963789378771F03C1148B023E SWAP7 SWAP8 PUSH0 SWAP3 PUSH2 0x1387 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x1ADB JUMP JUMPDEST CALLER PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG2 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x1354 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 DUP4 PUSH0 MSTORE DUP2 PUSH0 KECCAK256 SWAP7 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1403 JUMPI POP SWAP7 PUSH1 0x1 SWAP3 DUP5 SWAP3 PUSH2 0x137C SWAP8 SWAP7 SWAP6 PUSH32 0x8EB2D2FCCCF5801E10FF58CD73E8781BA923122963789378771F03C1148B023E SWAP10 SWAP11 LT PUSH2 0x13EB JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x1368 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x13DE JUMP JUMPDEST DUP4 DUP4 ADD MLOAD DUP10 SSTORE PUSH1 0x1 SWAP1 SWAP9 ADD SWAP8 PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x13A1 JUMP JUMPDEST DUP3 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x1456 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x144B JUMPI POP PUSH2 0x1314 JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x143E JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1435 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x149B JUMPI JUMPDEST DUP2 PUSH2 0x147B PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x43C JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI DUP5 PUSH2 0x12C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x146E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F70657261746F722068617320616C726561647920726573706F6E6465642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F20746865207461736B PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x737570706C696564207461736B20646F6573206E6F74206D6174636820746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206F6E65207265636F7264656420696E2074686520636F6E7472616374000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH2 0x157F PUSH2 0x188D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E07403 PUSH1 0xE3 SHL DUP2 MSTORE PUSH0 DUP2 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP2 PUSH2 0x181A JUMPI JUMPDEST POP SWAP1 DUP2 MLOAD MLOAD SWAP1 PUSH2 0x15DA DUP3 PUSH2 0x1BAE JUMP JUMPDEST SWAP1 PUSH2 0x15E8 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH2 0x15F4 DUP4 PUSH2 0x1BAE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP7 CALLDATACOPY PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x17EC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x90041347 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x44 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 DUP5 SWAP2 PUSH1 0x64 DUP4 ADD SWAP2 SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x17CA JUMPI POP PUSH0 SWAP4 SWAP3 DUP4 SWAP1 SUB SWAP2 POP DUP3 SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE3B JUMPI PUSH0 SWAP4 PUSH2 0x1738 JUMPI JUMPDEST POP PUSH0 PUSH0 JUMPDEST DUP4 DUP2 LT PUSH2 0x170C JUMPI POP PUSH2 0x16A6 SWAP1 PUSH2 0x1CFD JUMP JUMPDEST SWAP3 PUSH0 SWAP1 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x16C0 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH2 0x60A DUP9 DUP3 PUSH2 0x18B7 JUMP JUMPDEST PUSH2 0x16CA DUP2 DUP4 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD PUSH2 0x16D8 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x16AB JUMP JUMPDEST SWAP2 PUSH1 0x1 SWAP1 PUSH2 0x1704 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x16F2 DUP7 DUP9 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD AND PUSH2 0x16FE DUP3 DUP11 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE PUSH2 0x1CEF JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x16D0 JUMP JUMPDEST PUSH2 0x1716 DUP2 DUP7 PUSH2 0x1CC7 JUMP JUMPDEST MLOAD PUSH2 0x1724 JUMPI JUMPDEST PUSH1 0x1 ADD PUSH2 0x1695 JUMP JUMPDEST SWAP1 PUSH2 0x1730 PUSH1 0x1 SWAP2 PUSH2 0x1CEF JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x171C JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x174A DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 MLOAD PUSH2 0x1780 DUP2 PUSH2 0x1BAE JUMP JUMPDEST SWAP3 PUSH2 0x178E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1914 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x17BA JUMPI POP POP POP SWAP2 DUP4 PUSH2 0x1691 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x17A9 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP8 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1644 JUMP JUMPDEST PUSH1 0x1 SWAP1 DUP2 DUP1 PUSH1 0xA0 SWAP9 SWAP6 SWAP9 SHL SUB PUSH2 0x1803 DUP3 DUP6 MLOAD PUSH2 0x1CC7 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x1810 DUP3 DUP8 PUSH2 0x1CC7 JUMP JUMPDEST MSTORE ADD SWAP5 SWAP2 SWAP5 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x182E SWAP2 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x622 DUP2 DUP4 PUSH2 0x1914 JUMP JUMPDEST DUP3 PUSH2 0x15CB JUMP JUMPDEST CALLVALUE PUSH2 0x43C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x43C JUMPI PUSH1 0x20 SWAP2 PUSH0 MSTORE PUSH1 0x98 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x18DA JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x195E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x43C JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 PUSH1 0x20 PUSH2 0x1995 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x1935 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x43C JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP2 PUSH1 0x24 PUSH2 0x1995 SWAP4 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x1935 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x40 PUSH4 0xFFFFFFFF PUSH1 0x20 PUSH2 0x1A18 DUP6 MLOAD DUP5 DUP4 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x19D3 JUMP JUMPDEST SWAP5 ADD MLOAD AND SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1A80 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1A6C JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1A61 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH2 0x1B09 DUP3 PUSH2 0x1B02 PUSH2 0x1AF4 DUP8 DUP1 PUSH2 0x1A8A JUMP JUMPDEST PUSH1 0x40 DUP9 MSTORE PUSH1 0x40 DUP9 ADD SWAP2 PUSH2 0x1ABB JUMP JUMPDEST SWAP6 ADD PUSH2 0x187C JUMP JUMPDEST AND SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1B1D DUP3 PUSH2 0x18F9 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 PUSH1 0x60 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x1B30 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4543445341536572766963654D616E61676572426173652E6F6E6C795374616B PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6552656769737472793A2063616C6C6572206973206E6F742074686520737461 PUSH1 0x64 DUP3 ADD MSTORE PUSH10 0x6B655265676973747279 PUSH1 0xB0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xE46 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE46 JUMPI PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x43C JUMPI DUP1 MLOAD SWAP1 PUSH2 0x1C32 DUP3 PUSH2 0x1BAE JUMP JUMPDEST SWAP3 PUSH2 0x1C40 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 DUP2 DUP4 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x1C6C JUMPI POP POP POP POP DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP5 DUP4 SUB SLT PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1C83 DUP3 PUSH2 0x18F9 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI DUP3 MSTORE PUSH1 0x20 DUP6 ADD MLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x43C JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x40 SWAP6 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x1C5C JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0xF7E JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D07 DUP3 PUSH2 0x1BAE JUMP JUMPDEST PUSH2 0x1D14 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x1914 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1D25 PUSH1 0x1F NOT SWAP2 PUSH2 0x1BAE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1D43 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1D9B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x51 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4543445341536572766963654D616E61676572426173652E6F6E6C7952657761 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x726473496E69746961746F723A2063616C6C6572206973206E6F742074686520 PUSH1 0x64 DUP3 ADD MSTORE PUSH17 0x3932BBB0B932399034B734BA34B0BA37B9 PUSH1 0x79 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xBE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI PUSH1 0x20 ADD SWAP2 DUP2 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xF7E JUMPI JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x43C JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x43C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x43C JUMPI SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1E NOT DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x43C JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x43C JUMPI DUP2 PUSH1 0x6 SHL CALLDATASIZE SUB DUP4 SGT PUSH2 0x43C JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP1 DUP3 DUP2 MSTORE ADD SWAP2 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x1EFE JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 DUP4 CALLDATALOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x43C JUMPI DUP2 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x43C JUMPI PUSH1 0x40 DUP2 PUSH1 0x1 SWAP4 PUSH1 0x20 DUP4 SWAP5 ADD MSTORE ADD SWAP5 ADD SWAP3 ADD SWAP1 PUSH2 0x1EF1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1CDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x9E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x43C JUMPI ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY PUSH6 0xBEB6DAF4C286 CALLDATASIZE CREATE2 0xAF PREVRANDAO PUSH21 0x4162881676248DC378D4007B91BCFEFF110D4B6473 PUSH16 0x6C634300081C00330000000000000000 ","sourceMap":"988:3096:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;:::i;:::-;2378:84:36;;;;;:::i;:::-;8750:18;8406:13;8421:29;;;;;;-1:-1:-1;;;;;;988:3096:0;;8960:108:36;;;;;988:3096:0;;;;;;8960:108:36;;988:3096:0;;;;;;8960:108:36;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;8960:108:36;;;;;;;;;;;;;;;;;;;988:3096:0;;8960:108:36;;;;;:::i;:::-;988:3096:0;;8960:108:36;988:3096:0;;;;8960:108:36;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;8960:108:36;988:3096:0;;;8452:3:36;988:3096:0;;8471:159:36;-1:-1:-1;;;;;8471:27:36;988:3096:0;8471:21:36;;;;;:::i;:::-;:27;;:::i;:::-;988:3096:0;;8588:21:36;;;;;:::i;:::-;988:3096:0;;-1:-1:-1;;;8471:159:36;;8529:10;988:3096:0;8471:159:36;;988:3096:0;8565:4:36;988:3096:0;;;;8588:28:36;;988:3096:0;;;;;;;;;;;;;;;;;;8471:159:36;;;;;;;;;;;8452:3;-1:-1:-1;;;;;;8664:27:36;988:3096:0;8664:21:36;;;;;:::i;:27::-;988:3096:0;;-1:-1:-1;;;8664:118:36;;8565:4;988:3096:0;8664:118:36;;988:3096:0;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;8664:118:36;;;;;;;;;;;;;;;8452:3;-1:-1:-1;988:3096:0;;8796:143:36;;8885:40;;988:3096:0;8885:21:36;988:3096:0;;-1:-1:-1;;;;;8796:27:36;988:3096:0;8796:21:36;988:3096:0;;;8796:21:36;:::i;:27::-;988:3096:0;8885:21:36;;:::i;:::-;:28;988:3096:0;8885:40:36;:::i;:::-;988:3096:0;;-1:-1:-1;;;8796:143:36;;-1:-1:-1;;;;;988:3096:0;;;8796:143:36;;988:3096:0;;;;;;;;;;;;;;;;;;;;;8796:143:36;;;;;;;;;;988:3096:0;8796:143:36;;;;8452:3;;988:3096:0;8406:13:36;;8796:143;;;988:3096:0;8796:143:36;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;988:3096:0;;;;;;;;;8664:118:36;;;;;988:3096:0;8664:118:36;;;;;;;;;988:3096:0;8664:118:36;;;:::i;:::-;;;988:3096:0;;;;;;;;;;8664:118:36;;988:3096:0;-1:-1:-1;988:3096:0;;8664:118:36;;;-1:-1:-1;8664:118:36;;8471:159;;;988:3096:0;8471:159:36;;;;;;;;;:::i;:::-;;;988:3096:0;;;;;;;;;;;;;;;;;1818:31:36;988:3096:0;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;:::i;:::-;1303:62:8;;:::i;:::-;-1:-1:-1;;;;;988:3096:0;2409:22:8;;988:3096:0;;2765:6:8;988:3096:0;;-1:-1:-1;;;;;;988:3096:0;;;;;;;-1:-1:-1;;;;;988:3096:0;2813:40:8;;;;988:3096:0;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11919:42:36;;988:3096:0;;;;11938:13:36;-1:-1:-1;;;;;988:3096:0;11919:42:36;;;;;;;;;;;988:3096:0;12015:17:36;12001:39;12015:17;;988:3096:0;12001:39:36;:::i;:::-;12055:13;12100:3;12074:17;;988:3096:0;;12070:28:36;;;;;988:3096:0;;;-1:-1:-1;;;;;988:3096:0;12143:20:36;;988:3096:0;;12143:20:36;:::i;:::-;;988:3096:0;;12119:54:36;;;;:::i;:::-;988:3096:0;;12055:13:36;;12070:28;988:3096:0;;;;12070:28:36;988:3096:0;;:::i;:::-;;;;11919:42:36;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;988:3096:0;;;;;;;-1:-1:-1;;988:3096:0;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;1531:68;988:3096;;;;;;1531:68;988:3096;-1:-1:-1;988:3096:0;;;;-1:-1:-1;988:3096:0;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;988:3096:0;;;;;;;-1:-1:-1;988:3096:0;;-1:-1:-1;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1303:62:8;;:::i;:::-;6550:12:36;-1:-1:-1;;;;;988:3096:0;6536:62:36;;;;;988:3096:0;;-1:-1:-1;;;6536:62:36;;988:3096:0;;6536:62:36;;988:3096:0;;;;;;;;;;;;;;;;;;;:::i;:::-;6536:62:36;;;;;;;;;;988:3096:0;;6536:62:36;988:3096:0;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;;:::i;:::-;2108:148:36;2129:10;2143:13;-1:-1:-1;;;;;988:3096:0;2129:27:36;2108:148;:::i;:::-;7679:12;-1:-1:-1;;;;;988:3096:0;;7665:63:36;;;;;988:3096:0;;-1:-1:-1;;;7665:63:36;;-1:-1:-1;;;;;988:3096:0;;;;7665:63:36;;988:3096:0;;;;;;7665:63:36;;988:3096:0;;;;7665:63:36;;;;;;;;988:3096:0;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;:::i;:::-;2378:84:36;;;;;:::i;:::-;10618:18;9612:13;9639:45;;;;;;-1:-1:-1;988:3096:0;;;;-1:-1:-1;;;;;988:3096:0;;10814:192:36;;;;;988:3096:0;;;;;;;;10814:192:36;;988:3096:0;;;;10433:4:36;988:3096:0;10814:192:36;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10814:192:36;;;;;;;;;;;;;;;;;;;988:3096:0;;;;;;-1:-1:-1;;988:3096:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;988:3096:0;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;10814:192:36;988:3096:0;;;;9698:3:36;9785:23;;;;9844:13;;9822:322;9973:3;9895:53;:37;;;;;:::i;:::-;988:3096:0;9895:53:36;;;;:::i;:::-;9875:80;;;;;;;10024:74;:37;;;;;:::i;:74::-;988:3096:0;;;;;;;;10009:120:36;988:3096:0;;;;;10024:105:36;988:3096:0;10009:120:36;;:::i;:::-;9973:3;988:3096:0;9844:13:36;;;988:3096:0;-1:-1:-1;;;988:3096:0;;;;;;;;9875:80:36;;;-1:-1:-1;9875:80:36;;;;;;;-1:-1:-1;;;;;10323:43:36;988:3096:0;10323:37:36;9875:80;;;10323:37;:::i;:43::-;988:3096:0;;-1:-1:-1;;;10323:158:36;;10397:10;988:3096:0;10323:158:36;;988:3096:0;10433:4:36;988:3096:0;;;;;;;;;;;;;;;;;;;10433:4:36;;988:3096:0;10323:158:36;;;;;;;;9822:322;-1:-1:-1;;;;;;10515:60:36;988:3096:0;10515:37:36;;;;;:::i;:60::-;988:3096:0;;-1:-1:-1;;;10515:122:36;;10433:4;988:3096:0;10515:122:36;;988:3096:0;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;10515:122:36;;;;;;;;;;;;;;;9822:322;988:3096:0;;;10756:23:36;10651:142;988:3096:0;;10651:43:36;988:3096:0;10651:37:36;988:3096:0;;;;;;;10651:37:36;;:::i;:43::-;988:3096:0;10756:23:36;;:::i;10651:142::-;;;;;;;;;;988:3096:0;10651:142:36;;;;9822:322;9698:3;988:3096:0;9612:13:36;;10651:142;;;988:3096:0;10651:142:36;;;;;;;;;:::i;:::-;;;;;10515:122;;;;988:3096:0;10515:122:36;;;;;;;;;988:3096:0;10515:122:36;;;:::i;:::-;;;988:3096:0;;;;;;;;;;10515:122:36;;;;;-1:-1:-1;10515:122:36;;;988:3096:0;;;;;;;;;10323:158:36;;;988:3096:0;10323:158:36;;;;;;;;;:::i;:::-;;;988:3096:0;;;;;;;-1:-1:-1;;988:3096:0;;;;;;;:::i;:::-;1303:62:8;;:::i;:::-;11390:18:36;-1:-1:-1;;;;;988:3096:0;;11370:62:36;;;;;988:3096:0;;-1:-1:-1;;;11370:62:36;;-1:-1:-1;;;;;988:3096:0;;;;11370:62:36;;988:3096:0;;;;;;11370:62:36;;988:3096:0;;;;11370:62:36;;;;;;;;988:3096:0;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;2108:148:36;988:3096:0;;;;;2143:13:36;988:3096:0;2129:10:36;:27;2108:148;:::i;:::-;7180:12;-1:-1:-1;;;;;988:3096:0;;7166:112:36;;;;;988:3096:0;;;;;;;;;;;;;;;;;7166:112:36;;988:3096:0;;;;;;;7166:112:36;;988:3096:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;7166:112:36;;;;;;;;;;988:3096:0;;;7166:112:36;;;;988:3096:0;7166:112:36;;:::i;:::-;988:3096:0;7166:112:36;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;1513:6:8;988:3096:0;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;1131:27;988:3096;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;2364:19;;;988:3096;2427:12;988:3096;2393:24;;;988:3096;;;2393:24;2564:19;;;;;;;;;:::i;:::-;;988:3096;;2564:19;;;;;;:::i;:::-;988:3096;2554:30;;988:3096;2537:13;988:3096;;;;2523:13;2393:24;988:3096;;;;;2537:13;988:3096;;2679:1;988:3096;;;;2599:38;988:3096;;2599:38;;;;;:::i;:::-;;;;988:3096;;;;;;;;;;;;;;;;2537:13;988:3096;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;1303:62:8;;:::i;:::-;2765:6;988:3096:0;;-1:-1:-1;;;;;;988:3096:0;;;;;;;-1:-1:-1;;;;;988:3096:0;2813:40:8;988:3096:0;;2813:40:8;988:3096:0;;;;;;;-1:-1:-1;;988:3096:0;;;;;;1364:37:36;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;1207:38:36;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;:::i;:::-;1303:62:8;;:::i;:::-;14319:16:36;988:3096:0;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;14295:62:36;;988:3096:0;14295:62:36;-1:-1:-1;;;;;988:3096:0;-1:-1:-1;;;;;;988:3096:0;;;;;14319:16:36;988:3096:0;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;:::i;:::-;;;;;;2991:16;;988:3096;;;;2991:16;988:3096;;;;;;;:::i;2991:16::-;988:3096;2981:27;;988:3096;;;;;;3012:13;988:3096;;;;;;2981:64;988:3096;;3180:10;988:3096;;3163:16;988:3096;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;988:3096:0;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;3373:38;988:3096;;;3373:38;;;988:3096;3373:38;;988:3096;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;3373:38;;988:3096;;3373:38;;;;;;:::i;:::-;988:3096;3363:49;;988:3096;;;8327:58:15;;988:3096:0;;;;;;;;;8327:58:15;;;;;;:::i;:::-;988:3096:0;8317:69:15;;988:3096:0;;;;;;3674:141;;988:3096;3674:141;;988:3096;;;;;;;;;;;;;;;:::i;:::-;3674:141;988:3096;3693:13;-1:-1:-1;;;;;988:3096:0;3674:141;;;;;;;988:3096;3674:141;;;988:3096;-1:-1:-1;;;;;;;988:3096:0;-1:-1:-1;;;3644:171:0;3625:235;;3180:10;988:3096;;3163:16;988:3096;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;4024:51;988:3096;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3180:10;988:3096;;;;4024:51;;;988:3096;;;;;-1:-1:-1;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4024:51;988:3096;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;988:3096:0;;;;3674:141;;;988:3096;3674:141;;988:3096;3674:141;;;;;;988:3096;3674:141;;;:::i;:::-;;;988:3096;;;;;-1:-1:-1;;;;;;988:3096:0;;;;;;3674:141;;;;;;-1:-1:-1;3674:141:0;;988:3096;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;:::i;:::-;;;-1:-1:-1;;;12922:42:36;;988:3096:0;;;;12941:13:36;-1:-1:-1;;;;;988:3096:0;12922:42:36;;;;;;;988:3096:0;12922:42:36;;;988:3096:0;12990:17:36;;;;988:3096:0;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;988:3096:0;;;;;13104:9:36;;;;;;-1:-1:-1;;988:3096:0;;;-1:-1:-1;;;13225:91:36;;-1:-1:-1;;;;;988:3096:0;;;;13225:91:36;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;988:3096:0;;;;;;-1:-1:-1;988:3096:0;;13225:91:36;;;;;-1:-1:-1;13225:91:36;;-1:-1:-1;13244:17:36;-1:-1:-1;;;;;988:3096:0;13225:91:36;;;;;;;988:3096:0;13225:91:36;;;988:3096:0;13327:19:36;988:3096:0;;13372:9:36;;;;;;13587:26;;;;:::i;:::-;13623:13;988:3096:0;13651:13:36;988:3096:0;13666:9:36;;;;;;988:3096:0;;;;;;;:::i;13677:3:36:-;13700:9;;;;:::i;:::-;988:3096:0;13696:127:36;;13677:3;988:3096:0;;13651:13:36;;13696:127;988:3096:0;;;13801:7:36;;-1:-1:-1;;;;;13769:13:36;988:3096:0;13769:13:36;;:::i;:::-;988:3096:0;;13733:50:36;;;;:::i;:::-;988:3096:0;13801:7:36;:::i;:::-;13696:127;;;;;13383:3;13406:9;;;;:::i;:::-;988:3096:0;13402:65:36;;13383:3;988:3096:0;;13361:9:36;;13402:65;13439:13;;988:3096:0;13439:13:36;;:::i;:::-;13402:65;;;;;13225:91;;;;;;988:3096:0;13225:91:36;;;;;;:::i;:::-;;;988:3096:0;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;13225:91:36;;;;;;;988:3096:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;-1:-1:-1;988:3096:0;;;;;;;;;;;;;13115:3:36;988:3096:0;;;;;;;;;;13150:20:36;:17;;;:20;:::i;:::-;;988:3096:0;;13134:45:36;;;;:::i;:::-;988:3096:0;;13093:9:36;;;;;12922:42;;;;;;988:3096:0;12922:42:36;;;;;;:::i;:::-;;;;988:3096:0;;;;;;-1:-1:-1;;988:3096:0;;;;;;;;;;;;;;;;;;;1388:47;988:3096;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;988:3096:0;;;;;;:::o;:::-;;;-1:-1:-1;;;;;988:3096:0;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;988:3096:0;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;-1:-1:-1;;988:3096:0;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;988:3096:0;;;;;;;;-1:-1:-1;;988:3096:0;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;988:3096:0;;;;;;;;-1:-1:-1;;988:3096:0;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;:::i;:::-;-1:-1:-1;988:3096:0;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;988:3096:0;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;1599:130:8:-;1513:6;988:3096:0;-1:-1:-1;;;;;988:3096:0;929:10:13;1662:23:8;988:3096:0;;1599:130:8:o;988:3096:0:-;;;;;;;;;;;;;;;;;;;;;;;;;2468:223:36;2561:16;988:3096:0;-1:-1:-1;;;;;988:3096:0;2547:10:36;:30;988:3096:0;;2468:223:36:o;988:3096:0:-;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;988:3096:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;988:3096:0;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;988:3096:0;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;988:3096:0;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o","linkReferences":{},"immutableReferences":{"7736":[{"start":1407,"length":32},{"start":2011,"length":32},{"start":3444,"length":32},{"start":4166,"length":32},{"start":4747,"length":32},{"start":5523,"length":32}],"7739":[{"start":1865,"length":32},{"start":2059,"length":32},{"start":3485,"length":32},{"start":4098,"length":32}],"7742":[{"start":311,"length":32},{"start":2225,"length":32},{"start":3181,"length":32}],"7745":[{"start":5721,"length":32}]}},"methodIdentifiers":{"allTaskHashes(uint32)":"2d89f6fc","allTaskResponses(address,uint32)":"c20bab7f","avsDirectory()":"6b3aa72e","createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])":"fce36c7d","createNewTask(string)":"85edf874","createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])":"a20b99bf","deregisterOperatorFromAVS(address)":"a364f4da","getOperatorRestakedStrategies(address)":"33cfb7b7","getRestakeableStrategies()":"e481af9d","latestTaskNum()":"8b00ce7c","owner()":"8da5cb5b","registerOperatorToAVS(address,(bytes,bytes32,uint256))":"9926ee7d","renounceOwnership()":"715018a6","respondToTask((string,uint32),uint32,bytes)":"3415a49c","rewardsInitiator()":"fc299dee","setClaimerFor(address)":"a0169ddd","setRewardsInitiator(address)":"3bc28c8c","stakeRegistry()":"68304835","transferOwnership(address)":"f2fde38b","updateAVSMetadataURI(string)":"a98fb355"}}}},"contracts/IHelloWorldServiceManager.sol":{"IHelloWorldServiceManager":{"abi":[{"type":"function","name":"allTaskHashes","inputs":[{"name":"taskIndex","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allTaskResponses","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"taskIndex","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"createNewTask","inputs":[{"name":"name","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]}],"stateMutability":"nonpayable"},{"type":"function","name":"latestTaskNum","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"respondToTask","inputs":[{"name":"task","type":"tuple","internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]},{"name":"referenceTaskIndex","type":"uint32","internalType":"uint32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"NewTaskCreated","inputs":[{"name":"taskIndex","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"task","type":"tuple","indexed":false,"internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"TaskResponded","inputs":[{"name":"taskIndex","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"task","type":"tuple","indexed":false,"internalType":"struct IHelloWorldServiceManager.Task","components":[{"name":"name","type":"string","internalType":"string"},{"name":"taskCreatedBlock","type":"uint32","internalType":"uint32"}]},{"name":"operator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"}],\"name\":\"NewTaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TaskResponded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"}],\"name\":\"allTaskHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"taskIndex\",\"type\":\"uint32\"}],\"name\":\"allTaskResponses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createNewTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTaskNum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"}],\"internalType\":\"struct IHelloWorldServiceManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"referenceTaskIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"respondToTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IHelloWorldServiceManager.sol\":\"IHelloWorldServiceManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"contracts/IHelloWorldServiceManager.sol\":{\"keccak256\":\"0xdd6bf0f78ad150c6a25bac97fef9d8e207c4f1a05176e4b344127d45e90cdebd\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd14602be3eb7a87556e01cf495cb2755ebde8d3b1d18dce52a78b93d899d7d6\",\"dweb:/ipfs/Qma12dyKsn3GPeCWipszxq5dvkrHbDmrBbePCL7kqoRFpR\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allTaskHashes(uint32)":"2d89f6fc","allTaskResponses(address,uint32)":"c20bab7f","createNewTask(string)":"85edf874","latestTaskNum()":"8b00ce7c","respondToTask((string,uint32),uint32,bytes)":"3415a49c"}}}},"contracts/LayerToken.sol":{"LayerToken":{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"pure"},{"type":"function","name":"mint","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LayerToken.sol\":\"LayerToken\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"contracts/LayerToken.sol\":{\"keccak256\":\"0x084267739649f395af65a97aa689af9060dfd3c0374a5af5172c8221b392143b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b222fd29bb6bf9e87a617a2ca54a6335fed6d8c734db98e23ef647827cd7701f\",\"dweb:/ipfs/QmYmmrxbDgVMgN3jonTN3NSRFWMPpcAt9nazhC2McTzkRQ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2900536cdadec954ced8789a9d1ed4b5e640029e1424e91fd5b88026486f4d45\",\"dweb:/ipfs/QmUMUX7CuYoiHvFkhifqtXGaciw2wnm4t9sAoPzETZ3Gbq\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460dc576001600160581b036003553315609a576002546001600160581b038101908110608657600255335f8181526020818152604080832080546001600160581b0390810190915590519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a360405161042090816100e18239f35b634e487b7160e01b5f52601160045260245ffd5b62461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c908163095ea7b3146101bd5750806318160ddd146101a057806323b872dd14610173578063313ce5671461015857806340c10f191461013057806370a08231146100f9578063a9059cbb146100c85763dd62ed3e14610074575f80fd5b346100c45760403660031901126100c45761008d6101e0565b6100956101f6565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b346100c45760403660031901126100c4576100ee6100e46101e0565b602435903361020c565b602060405160018152f35b346100c45760203660031901126100c4576001600160a01b0361011a6101e0565b165f525f602052602060405f2054604051908152f35b346100c45760403660031901126100c4576101496101e0565b5061015660243533610331565b005b346100c4575f3660031901126100c457602060405160128152f35b346100c45760603660031901126100c4576100ee61018f6101e0565b6101976101f6565b6044359161020c565b346100c4575f3660031901126100c4576020600254604051908152f35b346100c45760403660031901126100c4576020906101d96101e0565b5060018152f35b600435906001600160a01b03821682036100c457565b602435906001600160a01b03821682036100c457565b916001600160a01b0383169182156102de576001600160a01b031692831561028d578161025c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93602093610331565b835f525f82528060405f205403845f525f835260405f2055845f525f825260405f20818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03169081156103a557600254908082018092116103915760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a3565b634e487b7160e01b5f52601160045260245ffd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fdfea26469706673582212208ebfc48befa1387342575fef975c996b573ae1428639944fb1d8ed5e0970fbd364736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0xDC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB PUSH1 0x3 SSTORE CALLER ISZERO PUSH1 0x9A JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP2 ADD SWAP1 DUP2 LT PUSH1 0x86 JUMPI PUSH1 0x2 SSTORE CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 SWAP1 LOG3 PUSH1 0x40 MLOAD PUSH2 0x420 SWAP1 DUP2 PUSH2 0xE1 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x1BD JUMPI POP DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xC8 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x74 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0x8D PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0xEE PUSH2 0xE4 PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x20C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x11A PUSH2 0x1E0 JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0x149 PUSH2 0x1E0 JUMP JUMPDEST POP PUSH2 0x156 PUSH1 0x24 CALLDATALOAD CALLER PUSH2 0x331 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0xEE PUSH2 0x18F PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x20C JUMP JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1D9 PUSH2 0x1E0 JUMP JUMPDEST POP PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC4 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC4 JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP3 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0x28D JUMPI DUP2 PUSH2 0x25C PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH1 0x20 SWAP4 PUSH2 0x331 JUMP JUMPDEST DUP4 PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SLOAD SUB DUP5 PUSH0 MSTORE PUSH0 DUP4 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x2 SLOAD SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x391 JUMPI PUSH1 0x20 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH0 SWAP4 PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xBF 0xC4 DUP12 0xEF LOG1 CODESIZE PUSH20 0x42575FEF975C996B573AE1428639944FB1D8ED5E MULMOD PUSH17 0xFBD364736F6C634300081C003300000000 ","sourceMap":"1542:8534:2:-:0;;;;;;;-1:-1:-1;;;;;1769:16:2;1542:8534;1822:10;5895:21;1542:8534;;5963:22;1542:8534;-1:-1:-1;;;;;1542:8534:2;;;;-1:-1:-1;1542:8534:2;;5963:22;1542:8534;1822:10;-1:-1:-1;1542:8534:2;;;;;;;;;;;;;-1:-1:-1;;;;;1542:8534:2;;;;;;;;;;;6184:37;;1542:8534;6184:37;1542:8534;;;;;;;;;;;;;-1:-1:-1;1542:8534:2;;;;;-1:-1:-1;1542:8534:2;;-1:-1:-1;;;1542:8534:2;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":502,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_1967":{"entryPoint":480,"id":null,"parameterSlots":0,"returnSlots":1},"fun_mint":{"entryPoint":817,"id":558,"parameterSlots":2,"returnSlots":0},"fun_transfer":{"entryPoint":524,"id":519,"parameterSlots":3,"returnSlots":0}},"object":"6080806040526004361015610012575f80fd5b5f3560e01c908163095ea7b3146101bd5750806318160ddd146101a057806323b872dd14610173578063313ce5671461015857806340c10f191461013057806370a08231146100f9578063a9059cbb146100c85763dd62ed3e14610074575f80fd5b346100c45760403660031901126100c45761008d6101e0565b6100956101f6565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b346100c45760403660031901126100c4576100ee6100e46101e0565b602435903361020c565b602060405160018152f35b346100c45760203660031901126100c4576001600160a01b0361011a6101e0565b165f525f602052602060405f2054604051908152f35b346100c45760403660031901126100c4576101496101e0565b5061015660243533610331565b005b346100c4575f3660031901126100c457602060405160128152f35b346100c45760603660031901126100c4576100ee61018f6101e0565b6101976101f6565b6044359161020c565b346100c4575f3660031901126100c4576020600254604051908152f35b346100c45760403660031901126100c4576020906101d96101e0565b5060018152f35b600435906001600160a01b03821682036100c457565b602435906001600160a01b03821682036100c457565b916001600160a01b0383169182156102de576001600160a01b031692831561028d578161025c7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93602093610331565b835f525f82528060405f205403845f525f835260405f2055845f525f825260405f20818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03169081156103a557600254908082018092116103915760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a3565b634e487b7160e01b5f52601160045260245ffd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fdfea26469706673582212208ebfc48befa1387342575fef975c996b573ae1428639944fb1d8ed5e0970fbd364736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x1BD JUMPI POP DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xC8 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x74 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0x8D PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0xEE PUSH2 0xE4 PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x20C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x11A PUSH2 0x1E0 JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0x149 PUSH2 0x1E0 JUMP JUMPDEST POP PUSH2 0x156 PUSH1 0x24 CALLDATALOAD CALLER PUSH2 0x331 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH2 0xEE PUSH2 0x18F PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x20C JUMP JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xC4 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xC4 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1D9 PUSH2 0x1E0 JUMP JUMPDEST POP PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC4 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC4 JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP3 ISZERO PUSH2 0x2DE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0x28D JUMPI DUP2 PUSH2 0x25C PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH1 0x20 SWAP4 PUSH2 0x331 JUMP JUMPDEST DUP4 PUSH0 MSTORE PUSH0 DUP3 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SLOAD SUB DUP5 PUSH0 MSTORE PUSH0 DUP4 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x2 SLOAD SWAP1 DUP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x391 JUMPI PUSH1 0x20 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH0 SWAP4 PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xBF 0xC4 DUP12 0xEF LOG1 CODESIZE PUSH20 0x42575FEF975C996B573AE1428639944FB1D8ED5E MULMOD PUSH17 0xFBD364736F6C634300081C003300000000 ","sourceMap":"1542:8534:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1542:8534:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;2739:6;1542:8534;;:::i;:::-;;;719:10:28;;2739:6:2;:::i;:::-;1542:8534;;;;;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;-1:-1:-1;;;;;1542:8534:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;;;:::i;:::-;;3131:6;1542:8534;;719:10:28;3131:6:2;:::i;:::-;1542:8534;;;;;;;-1:-1:-1;;1542:8534:2;;;;;;;1995:2;1542:8534;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;4325:6;1542:8534;;:::i;:::-;;;:::i;:::-;;;4325:6;;:::i;1542:8534::-;;;;;;-1:-1:-1;;1542:8534:2;;;;;2151:12;1542:8534;;;;;;;;;;;;;-1:-1:-1;;1542:8534:2;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;1542:8534:2;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1542:8534:2;;;;;;:::o;4814:722::-;;-1:-1:-1;;;;;1542:8534:2;;;4940:18;;1542:8534;;-1:-1:-1;;;;;1542:8534:2;;5018:16;;1542:8534;;5146:6;;5455:26;5146:6;1542:8534;5146:6;;:::i;:::-;1542:8534;4956:1;1542:8534;4956:1;1542:8534;;;;4956:1;1542:8534;;;;4956:1;1542:8534;4956:1;1542:8534;;;4956:1;1542:8534;;;4956:1;1542:8534;4956:1;1542:8534;;;4956:1;1542:8534;;;;;;;;;;;;5455:26;4814:722::o;1542:8534::-;;;-1:-1:-1;;;1542:8534:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1542:8534:2;;;;;;;;;;-1:-1:-1;;;1542:8534:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;1542:8534:2;;;;;;;5812:416;-1:-1:-1;;;;;1542:8534:2;;5895:21;;1542:8534;;5963:22;1542:8534;;;;;;;;;;;6184:37;1542:8534;5914:1;1542:8534;5963:22;1542:8534;;;;;;;;;;;;;;;;;;;;;6184:37;5812:416::o;1542:8534::-;;;;5914:1;1542:8534;;;;;5914:1;1542:8534;;;;-1:-1:-1;;;1542:8534:2;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}}}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol":{"IAVSDirectory":{"abi":[{"type":"function","name":"OPERATOR_AVS_REGISTRATION_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculateOperatorAVSRegistrationDigestHash","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"cancelSalt","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperatorFromAVS","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"domainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"operatorSaltIsSpent","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"registerOperatorToAVS","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAVSMetadataURI","inputs":[{"name":"metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AVSMetadataURIUpdated","inputs":[{"name":"avs","type":"address","indexed":true,"internalType":"address"},{"name":"metadataURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"OperatorAVSRegistrationStatusUpdated","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"avs","type":"address","indexed":true,"internalType":"address"},{"name":"status","type":"uint8","indexed":false,"internalType":"enum IAVSDirectory.OperatorAVSRegistrationStatus"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"AVSMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IAVSDirectory.OperatorAVSRegistrationStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"OperatorAVSRegistrationStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_AVS_REGISTRATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateOperatorAVSRegistrationDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"cancelSalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"operatorSaltIsSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"operatorSignature\",\"type\":\"tuple\"}],\"name\":\"registerOperatorToAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateAVSMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AVSMetadataURIUpdated(address,string)\":{\"details\":\"Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\"}},\"kind\":\"dev\",\"methods\":{\"calculateOperatorAVSRegistrationDigestHash(address,address,bytes32,uint256)\":{\"params\":{\"avs\":\"The address of the service manager contract for the AVS that the operator is registering to\",\"expiry\":\"Time after which the approver's signature becomes invalid\",\"operator\":\"The account registering as an operator\",\"salt\":\"A unique and single use value associated with the approver signature.\"}},\"cancelSalt(bytes32)\":{\"params\":{\"salt\":\"A unique and single use value associated with the approver signature.\"}},\"deregisterOperatorFromAVS(address)\":{\"params\":{\"operator\":\"The address of the operator to deregister.\"}},\"domainSeparator()\":{\"details\":\"The domain separator will change in the event of a fork that changes the ChainID.By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision. for more detailed information please read EIP-712.\"},\"operatorSaltIsSpent(address,bytes32)\":{\"details\":\"Salts is used in the `registerOperatorToAVS` function.\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorSignature\":\"The signature, salt, and expiry of the operator's signature.\"}},\"updateAVSMetadataURI(string)\":{\"details\":\"Note that the `metadataURI` is *never stored * and is only emitted in the `AVSMetadataURIUpdated` event\",\"params\":{\"metadataURI\":\"The URI for metadata associated with an AVS\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AVSMetadataURIUpdated(address,string)\":{\"notice\":\"Emitted when @param avs indicates that they are updating their MetadataURI string\"},\"OperatorAVSRegistrationStatusUpdated(address,address,uint8)\":{\"notice\":\"Emitted when an operator's registration status for an AVS is updated\"}},\"kind\":\"user\",\"methods\":{\"OPERATOR_AVS_REGISTRATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the Registration struct used by the contract\"},\"calculateOperatorAVSRegistrationDigestHash(address,address,bytes32,uint256)\":{\"notice\":\"Calculates the digest hash to be signed by an operator to register with an AVS\"},\"cancelSalt(bytes32)\":{\"notice\":\"Called by an operator to cancel a salt that has been used to register with an AVS.\"},\"deregisterOperatorFromAVS(address)\":{\"notice\":\"Called by an avs to deregister an operator with the avs.\"},\"domainSeparator()\":{\"notice\":\"Getter function for the current EIP-712 domain separator for this contract.\"},\"operatorSaltIsSpent(address,bytes32)\":{\"notice\":\"Returns whether or not the salt has already been used by the operator.\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"notice\":\"Called by the AVS's service manager contract to register an operator with the avs.\"},\"updateAVSMetadataURI(string)\":{\"notice\":\"Called by an AVS to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\":\"IAVSDirectory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\":{\"keccak256\":\"0x19e6056ed89c88687576965f58dfa642276174a5037d6dc0c58a44cabcae6665\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ee010c1f73b3cf85fe7c67d21f83845cc5a86d56017fc2c00862799b45fe998b\",\"dweb:/ipfs/Qmch2rmrHQgtKSwe78JWtPw3xK2km1aY52UxNyCV7xc1cv\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"OPERATOR_AVS_REGISTRATION_TYPEHASH()":"d79aceab","calculateOperatorAVSRegistrationDigestHash(address,address,bytes32,uint256)":"a1060c88","cancelSalt(bytes32)":"ec76f442","deregisterOperatorFromAVS(address)":"a364f4da","domainSeparator()":"f698da25","operatorSaltIsSpent(address,bytes32)":"374823b5","registerOperatorToAVS(address,(bytes,bytes32,uint256))":"9926ee7d","updateAVSMetadataURI(string)":"a98fb355"}}}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"IDelegationManager":{"abi":[{"type":"function","name":"DELEGATION_APPROVAL_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"DOMAIN_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"STAKER_DELEGATION_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"beaconChainETHStrategy","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategy"}],"stateMutability":"view"},{"type":"function","name":"calculateCurrentStakerDelegationDigestHash","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculateDelegationApprovalDigestHash","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"_delegationApprover","type":"address","internalType":"address"},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculateStakerDelegationDigestHash","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"_stakerNonce","type":"uint256","internalType":"uint256"},{"name":"operator","type":"address","internalType":"address"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculateWithdrawalRoot","inputs":[{"name":"withdrawal","type":"tuple","internalType":"struct IDelegationManager.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"completeQueuedWithdrawal","inputs":[{"name":"withdrawal","type":"tuple","internalType":"struct IDelegationManager.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"middlewareTimesIndex","type":"uint256","internalType":"uint256"},{"name":"receiveAsTokens","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"completeQueuedWithdrawals","inputs":[{"name":"withdrawals","type":"tuple[]","internalType":"struct IDelegationManager.Withdrawal[]","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"tokens","type":"address[][]","internalType":"contract IERC20[][]"},{"name":"middlewareTimesIndexes","type":"uint256[]","internalType":"uint256[]"},{"name":"receiveAsTokens","type":"bool[]","internalType":"bool[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cumulativeWithdrawalsQueued","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decreaseDelegatedShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegateTo","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approverSignatureAndExpiry","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegateToBySignature","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"stakerSignatureAndExpiry","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"approverSignatureAndExpiry","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegatedTo","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"delegationApprover","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"delegationApproverSaltIsSpent","inputs":[{"name":"_delegationApprover","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"domainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getDelegatableShares","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IStrategy[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getOperatorShares","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getWithdrawalDelay","inputs":[{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"increaseDelegatedShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"shares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isDelegated","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isOperator","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"minWithdrawalDelayBlocks","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"modifyOperatorDetails","inputs":[{"name":"newOperatorDetails","type":"tuple","internalType":"struct IDelegationManager.OperatorDetails","components":[{"name":"__deprecated_earningsReceiver","type":"address","internalType":"address"},{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"stakerOptOutWindowBlocks","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"operatorDetails","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IDelegationManager.OperatorDetails","components":[{"name":"__deprecated_earningsReceiver","type":"address","internalType":"address"},{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"stakerOptOutWindowBlocks","type":"uint32","internalType":"uint32"}]}],"stateMutability":"view"},{"type":"function","name":"operatorShares","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"queueWithdrawals","inputs":[{"name":"queuedWithdrawalParams","type":"tuple[]","internalType":"struct IDelegationManager.QueuedWithdrawalParams[]","components":[{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"},{"name":"withdrawer","type":"address","internalType":"address"}]}],"outputs":[{"name":"","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerAsOperator","inputs":[{"name":"registeringOperatorDetails","type":"tuple","internalType":"struct IDelegationManager.OperatorDetails","components":[{"name":"__deprecated_earningsReceiver","type":"address","internalType":"address"},{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"stakerOptOutWindowBlocks","type":"uint32","internalType":"uint32"}]},{"name":"metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMinWithdrawalDelayBlocks","inputs":[{"name":"newMinWithdrawalDelayBlocks","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStrategyWithdrawalDelayBlocks","inputs":[{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"withdrawalDelayBlocks","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stakerNonce","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"stakerOptOutWindowBlocks","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"strategyWithdrawalDelayBlocks","inputs":[{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"undelegate","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"withdrawalRoot","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperatorMetadataURI","inputs":[{"name":"metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"MinWithdrawalDelayBlocksSet","inputs":[{"name":"previousValue","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorDetailsModified","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"newOperatorDetails","type":"tuple","indexed":false,"internalType":"struct IDelegationManager.OperatorDetails","components":[{"name":"__deprecated_earningsReceiver","type":"address","internalType":"address"},{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"stakerOptOutWindowBlocks","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"OperatorMetadataURIUpdated","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"metadataURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"operatorDetails","type":"tuple","indexed":false,"internalType":"struct IDelegationManager.OperatorDetails","components":[{"name":"__deprecated_earningsReceiver","type":"address","internalType":"address"},{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"stakerOptOutWindowBlocks","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"OperatorSharesDecreased","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorSharesIncreased","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StakerDelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"StakerForceUndelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"StakerUndelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"StrategyWithdrawalDelayBlocksSet","inputs":[{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"previousValue","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"WithdrawalCompleted","inputs":[{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"WithdrawalQueued","inputs":[{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"withdrawal","type":"tuple","indexed":false,"internalType":"struct IDelegationManager.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}]}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinWithdrawalDelayBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindowBlocks\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IDelegationManager.OperatorDetails\",\"name\":\"newOperatorDetails\",\"type\":\"tuple\"}],\"name\":\"OperatorDetailsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"OperatorMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindowBlocks\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IDelegationManager.OperatorDetails\",\"name\":\"operatorDetails\",\"type\":\"tuple\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerForceUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StrategyWithdrawalDelayBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IDelegationManager.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"WithdrawalQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_APPROVAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainETHStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentStakerDelegationDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationApprover\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateDelegationApprovalDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateStakerDelegationDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"calculateWithdrawalRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"middlewareTimesIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"completeQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManager.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"middlewareTimesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"receiveAsTokens\",\"type\":\"bool[]\"}],\"name\":\"completeQueuedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"cumulativeWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"decreaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"stakerSignatureAndExpiry\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateToBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"delegatedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"delegationApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationApprover\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"delegationApproverSaltIsSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDelegatableShares\",\"outputs\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getOperatorShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"increaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isDelegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawalDelayBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindowBlocks\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationManager.OperatorDetails\",\"name\":\"newOperatorDetails\",\"type\":\"tuple\"}],\"name\":\"modifyOperatorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"operatorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindowBlocks\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationManager.OperatorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"operatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawalParams[]\",\"name\":\"queuedWithdrawalParams\",\"type\":\"tuple[]\"}],\"name\":\"queueWithdrawals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__deprecated_earningsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakerOptOutWindowBlocks\",\"type\":\"uint32\"}],\"internalType\":\"struct IDelegationManager.OperatorDetails\",\"name\":\"registeringOperatorDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"registerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinWithdrawalDelayBlocks\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawalDelayBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalDelayBlocks\",\"type\":\"uint256[]\"}],\"name\":\"setStrategyWithdrawalDelayBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"stakerOptOutWindowBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyWithdrawalDelayBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"undelegate\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateOperatorMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"events\":{\"OperatorMetadataURIUpdated(address,string)\":{\"details\":\"Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\"},\"WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))\":{\"params\":{\"withdrawal\":\"Is the withdrawal itself.\",\"withdrawalRoot\":\"Is the hash of the `withdrawal`.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateCurrentStakerDelegationDigestHash(address,address,uint256)\":{\"params\":{\"expiry\":\"The desired expiry time of the staker's signature\",\"operator\":\"The operator who is being delegated to\",\"staker\":\"The signing staker\"}},\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"params\":{\"_delegationApprover\":\"the operator's `delegationApprover` who will be signing the delegationHash (in general)\",\"approverSalt\":\"A unique and single use value associated with the approver signature.\",\"expiry\":\"Time after which the approver's signature becomes invalid\",\"operator\":\"The account receiving delegated stake\",\"staker\":\"The account delegating their stake\"}},\"calculateStakerDelegationDigestHash(address,uint256,address,uint256)\":{\"params\":{\"_stakerNonce\":\"The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\",\"expiry\":\"The desired expiry time of the staker's signature\",\"operator\":\"The operator who is being delegated to\",\"staker\":\"The signing staker\"}},\"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)\":{\"details\":\"middlewareTimesIndex is unused, but will be used in the Slasher eventuallybeaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in any other strategies, which will be transferred to the withdrawer.\",\"params\":{\"middlewareTimesIndex\":\"is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\",\"receiveAsTokens\":\"If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies will simply be transferred to the caller directly.\",\"tokens\":\"Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array. This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\",\"withdrawal\":\"The Withdrawal to complete.\"}},\"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])\":{\"details\":\"See `completeQueuedWithdrawal` for relevant dev tags\",\"params\":{\"middlewareTimesIndexes\":\"One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\",\"receiveAsTokens\":\"Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\",\"tokens\":\"Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\",\"withdrawals\":\"The Withdrawals to complete.\"}},\"cumulativeWithdrawalsQueued(address)\":{\"details\":\"This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\"},\"decreaseDelegatedShares(address,address,uint256)\":{\"details\":\"*If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.Callable only by the StrategyManager or EigenPodManager.\",\"params\":{\"shares\":\"The number of shares to decrease.\",\"staker\":\"The address to increase the delegated shares for their operator.\",\"strategy\":\"The strategy in which to decrease the delegated shares.\"}},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"details\":\"The approverSignatureAndExpiry is used in the event that:          1) the operator's `delegationApprover` address is set to a non-zero value.                  AND          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator             or their delegationApprover is the `msg.sender`, then approval is assumed.In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs\",\"params\":{\"approverSalt\":\"A unique single use value tied to an individual signature.\",\"approverSignatureAndExpiry\":\"Verifies the operator approves of this delegation\",\"operator\":\"The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\"}},\"delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)\":{\"details\":\"If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.the operator's `delegationApprover` address is set to a non-zero value.neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover is the `msg.sender`, then approval is assumed.This function will revert if the current `block.timestamp` is equal to or exceeds the expiryIn the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input in this case to save on complexity + gas costs\",\"params\":{\"approverSalt\":\"Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\",\"approverSignatureAndExpiry\":\"is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\",\"operator\":\"The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\",\"staker\":\"The account delegating stake to an `operator` account\",\"stakerSignatureAndExpiry\":\"Signed data from the staker authorizing delegating stake to an operator\"}},\"delegatedTo(address)\":{\"details\":\"Note that returning address(0) indicates that the staker is not actively delegated to any operator.\"},\"delegationApproverSaltIsSpent(address,bytes32)\":{\"details\":\"Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\"},\"domainSeparator()\":{\"details\":\"The domain separator will change in the event of a fork that changes the ChainID.By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision. for more detailed information please read EIP-712.\"},\"getDelegatableShares(address)\":{\"details\":\"Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\"},\"getWithdrawalDelay(address[])\":{\"params\":{\"strategies\":\"The strategies to check withdrawal delays for\"}},\"increaseDelegatedShares(address,address,uint256)\":{\"details\":\"*If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.Callable only by the StrategyManager or EigenPodManager.\",\"params\":{\"shares\":\"The number of shares to increase.\",\"staker\":\"The address to increase the delegated shares for their operator.\",\"strategy\":\"The strategy in which to increase the delegated shares.\"}},\"modifyOperatorDetails((address,address,uint32))\":{\"details\":\"The caller must have previously registered as an operator in EigenLayer.\",\"params\":{\"newOperatorDetails\":\"is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\"}},\"operatorShares(address,address)\":{\"details\":\"By design, the following invariant should hold for each Strategy: (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator) = sum (delegateable shares of all stakers delegated to the operator)\"},\"registerAsOperator((address,address,uint32),string)\":{\"details\":\"Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".This function will revert if the caller is already delegated to an operator.Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\",\"params\":{\"metadataURI\":\"is a URI for the operator's metadata, i.e. a link providing more details on the operator.\",\"registeringOperatorDetails\":\"is the `OperatorDetails` for the operator.\"}},\"setMinWithdrawalDelayBlocks(uint256)\":{\"params\":{\"newMinWithdrawalDelayBlocks\":\"new value of `minWithdrawalDelayBlocks`.\"}},\"setStrategyWithdrawalDelayBlocks(address[],uint256[])\":{\"params\":{\"strategies\":\"The strategies to set the minimum withdrawal delay blocks for\",\"withdrawalDelayBlocks\":\"The minimum withdrawal delay blocks to set for each strategy\"}},\"undelegate(address)\":{\"details\":\"Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"Reverts if the `staker` is already undelegated.\",\"params\":{\"staker\":\"The account to be undelegated.\"},\"returns\":{\"withdrawalRoot\":\"The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\"}},\"updateOperatorMetadataURI(string)\":{\"details\":\"Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\",\"params\":{\"metadataURI\":\"The URI for metadata associated with an operator\"}}},\"title\":\"DelegationManager\",\"version\":1},\"userdoc\":{\"events\":{\"MinWithdrawalDelayBlocksSet(uint256,uint256)\":{\"notice\":\"Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\"},\"OperatorDetailsModified(address,(address,address,uint32))\":{\"notice\":\"Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\"},\"OperatorMetadataURIUpdated(address,string)\":{\"notice\":\"Emitted when @param operator indicates that they are updating their MetadataURI string\"},\"OperatorSharesDecreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\"},\"OperatorSharesIncreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\"},\"StakerDelegated(address,address)\":{\"notice\":\"Emitted when @param staker delegates to @param operator.\"},\"StakerForceUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker is undelegated via a call not originating from the staker themself\"},\"StakerUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker undelegates from @param operator.\"},\"StrategyWithdrawalDelayBlocksSet(address,uint256,uint256)\":{\"notice\":\"Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\"},\"WithdrawalCompleted(bytes32)\":{\"notice\":\"Emitted when a queued withdrawal is completed\"},\"WithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]))\":{\"notice\":\"Emitted when a new withdrawal is queued.\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_APPROVAL_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the DelegationApproval struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"STAKER_DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the StakerDelegation struct used by the contract\"},\"beaconChainETHStrategy()\":{\"notice\":\"return address of the beaconChainETHStrategy\"},\"calculateCurrentStakerDelegationDigestHash(address,address,uint256)\":{\"notice\":\"Calculates the digestHash for a `staker` to sign to delegate to an `operator`\"},\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"notice\":\"Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\"},\"calculateStakerDelegationDigestHash(address,uint256,address,uint256)\":{\"notice\":\"Calculates the digest hash to be signed and used in the `delegateToBySignature` function\"},\"calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))\":{\"notice\":\"Returns the keccak256 hash of `withdrawal`.\"},\"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)\":{\"notice\":\"Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\"},\"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])\":{\"notice\":\"Array-ified version of `completeQueuedWithdrawal`. Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\"},\"cumulativeWithdrawalsQueued(address)\":{\"notice\":\"Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\"},\"decreaseDelegatedShares(address,address,uint256)\":{\"notice\":\"Decreases a staker's delegated share balance in a strategy.\"},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"notice\":\"Caller delegates their stake to an operator.\"},\"delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)\":{\"notice\":\"Caller delegates a staker's stake to an operator with valid signatures from both parties.\"},\"delegatedTo(address)\":{\"notice\":\"returns the address of the operator that `staker` is delegated to.Mapping: staker => operator whom the staker is currently delegated to.\"},\"delegationApprover(address)\":{\"notice\":\"Returns the delegationApprover account for an operator\"},\"delegationApproverSaltIsSpent(address,bytes32)\":{\"notice\":\"Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\"},\"domainSeparator()\":{\"notice\":\"Getter function for the current EIP-712 domain separator for this contract.\"},\"getDelegatableShares(address)\":{\"notice\":\"Returns the number of actively-delegatable shares a staker has across all strategies.\"},\"getOperatorShares(address,address[])\":{\"notice\":\"Given array of strategies, returns array of shares for the operator\"},\"getWithdrawalDelay(address[])\":{\"notice\":\"Given a list of strategies, return the minimum number of blocks that must pass to withdraw from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\"},\"increaseDelegatedShares(address,address,uint256)\":{\"notice\":\"Increases a staker's delegated share balance in a strategy.\"},\"isDelegated(address)\":{\"notice\":\"Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\"},\"isOperator(address)\":{\"notice\":\"Returns true is an operator has previously registered for delegation.\"},\"minWithdrawalDelayBlocks()\":{\"notice\":\"Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner, up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced). Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\"},\"modifyOperatorDetails((address,address,uint32))\":{\"notice\":\"Updates an operator's stored `OperatorDetails`.\"},\"operatorDetails(address)\":{\"notice\":\"Returns the OperatorDetails struct associated with an `operator`.\"},\"operatorShares(address,address)\":{\"notice\":\"returns the total number of shares in `strategy` that are delegated to `operator`.Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\"},\"queueWithdrawals((address[],uint256[],address)[])\":{\"notice\":\"Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from their operator. All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\"},\"registerAsOperator((address,address,uint32),string)\":{\"notice\":\"Registers the caller as an operator in EigenLayer.\"},\"setMinWithdrawalDelayBlocks(uint256)\":{\"notice\":\"Owner-only function for modifying the value of the `minWithdrawalDelayBlocks` variable.\"},\"setStrategyWithdrawalDelayBlocks(address[],uint256[])\":{\"notice\":\"Called by owner to set the minimum withdrawal delay blocks for each passed in strategy Note that the min number of blocks to complete a withdrawal of a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\"},\"stakerNonce(address)\":{\"notice\":\"Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\"},\"stakerOptOutWindowBlocks(address)\":{\"notice\":\"Returns the stakerOptOutWindowBlocks for an operator\"},\"strategyWithdrawalDelayBlocks(address)\":{\"notice\":\"Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner, up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\"},\"undelegate(address)\":{\"notice\":\"Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\"},\"updateOperatorMetadataURI(string)\":{\"notice\":\"Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-serviceThis is the contract for delegation in EigenLayer. The main functionalities of this contract are - enabling anyone to register as an operator in EigenLayer - allowing operators to specify parameters related to stakers who delegate to them - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time) - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":\"IDelegationManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"DELEGATION_APPROVAL_TYPEHASH()":"04a4f979","DOMAIN_TYPEHASH()":"20606b70","STAKER_DELEGATION_TYPEHASH()":"43377382","beaconChainETHStrategy()":"9104c319","calculateCurrentStakerDelegationDigestHash(address,address,uint256)":"1bbce091","calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)":"0b9f487a","calculateStakerDelegationDigestHash(address,uint256,address,uint256)":"c94b5111","calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))":"597b36da","completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],uint256,bool)":"60d7faed","completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],uint256[],bool[])":"33404396","cumulativeWithdrawalsQueued(address)":"a1788484","decreaseDelegatedShares(address,address,uint256)":"132d4967","delegateTo(address,(bytes,uint256),bytes32)":"eea9064b","delegateToBySignature(address,address,(bytes,uint256),(bytes,uint256),bytes32)":"7f548071","delegatedTo(address)":"65da1264","delegationApprover(address)":"3cdeb5e0","delegationApproverSaltIsSpent(address,bytes32)":"bb45fef2","domainSeparator()":"f698da25","getDelegatableShares(address)":"cf80873e","getOperatorShares(address,address[])":"90041347","getWithdrawalDelay(address[])":"0449ca39","increaseDelegatedShares(address,address,uint256)":"28a573ae","isDelegated(address)":"3e28391d","isOperator(address)":"6d70f7ae","minWithdrawalDelayBlocks()":"c448feb8","modifyOperatorDetails((address,address,uint32))":"f16172b0","operatorDetails(address)":"c5e480db","operatorShares(address,address)":"778e55f3","queueWithdrawals((address[],uint256[],address)[])":"0dd8dd02","registerAsOperator((address,address,uint32),string)":"0f589e59","setMinWithdrawalDelayBlocks(uint256)":"635bbd10","setStrategyWithdrawalDelayBlocks(address[],uint256[])":"1522bf02","stakerNonce(address)":"29c77d4f","stakerOptOutWindowBlocks(address)":"16928365","strategyWithdrawalDelayBlocks(address)":"c488375a","undelegate(address)":"da8be864","updateOperatorMetadataURI(string)":"99be81c8"}}}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol":{"IRewardsCoordinator":{"abi":[{"type":"function","name":"CALCULATION_INTERVAL_SECONDS","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"GENESIS_REWARDS_TIMESTAMP","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"MAX_FUTURE_LENGTH","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"MAX_RETROACTIVE_LENGTH","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"MAX_REWARDS_DURATION","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"activationDelay","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"calculateEarnerLeafHash","inputs":[{"name":"leaf","type":"tuple","internalType":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf","components":[{"name":"earner","type":"address","internalType":"address"},{"name":"earnerTokenRoot","type":"bytes32","internalType":"bytes32"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"calculateTokenLeafHash","inputs":[{"name":"leaf","type":"tuple","internalType":"struct IRewardsCoordinator.TokenTreeMerkleLeaf","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"cumulativeEarnings","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"checkClaim","inputs":[{"name":"claim","type":"tuple","internalType":"struct IRewardsCoordinator.RewardsMerkleClaim","components":[{"name":"rootIndex","type":"uint32","internalType":"uint32"},{"name":"earnerIndex","type":"uint32","internalType":"uint32"},{"name":"earnerTreeProof","type":"bytes","internalType":"bytes"},{"name":"earnerLeaf","type":"tuple","internalType":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf","components":[{"name":"earner","type":"address","internalType":"address"},{"name":"earnerTokenRoot","type":"bytes32","internalType":"bytes32"}]},{"name":"tokenIndices","type":"uint32[]","internalType":"uint32[]"},{"name":"tokenTreeProofs","type":"bytes[]","internalType":"bytes[]"},{"name":"tokenLeaves","type":"tuple[]","internalType":"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"cumulativeEarnings","type":"uint256","internalType":"uint256"}]}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"claimerFor","inputs":[{"name":"earner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createAVSRewardsSubmission","inputs":[{"name":"rewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createOperatorDirectedAVSRewardsSubmission","inputs":[{"name":"avs","type":"address","internalType":"address"},{"name":"operatorDirectedRewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"operatorRewards","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorReward[]","components":[{"name":"operator","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"},{"name":"description","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createRewardsForAllEarners","inputs":[{"name":"rewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createRewardsForAllSubmission","inputs":[{"name":"rewardsSubmission","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"cumulativeClaimed","inputs":[{"name":"claimer","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"currRewardsCalculationEndTimestamp","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"defaultOperatorSplitBips","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"disableRoot","inputs":[{"name":"rootIndex","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"domainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getCurrentClaimableDistributionRoot","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct IRewardsCoordinator.DistributionRoot","components":[{"name":"root","type":"bytes32","internalType":"bytes32"},{"name":"rewardsCalculationEndTimestamp","type":"uint32","internalType":"uint32"},{"name":"activatedAt","type":"uint32","internalType":"uint32"},{"name":"disabled","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"getCurrentDistributionRoot","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct IRewardsCoordinator.DistributionRoot","components":[{"name":"root","type":"bytes32","internalType":"bytes32"},{"name":"rewardsCalculationEndTimestamp","type":"uint32","internalType":"uint32"},{"name":"activatedAt","type":"uint32","internalType":"uint32"},{"name":"disabled","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"getDistributionRootAtIndex","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IRewardsCoordinator.DistributionRoot","components":[{"name":"root","type":"bytes32","internalType":"bytes32"},{"name":"rewardsCalculationEndTimestamp","type":"uint32","internalType":"uint32"},{"name":"activatedAt","type":"uint32","internalType":"uint32"},{"name":"disabled","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"getDistributionRootsLength","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getOperatorAVSSplit","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"getOperatorPISplit","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"getRootIndexFromHash","inputs":[{"name":"rootHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"processClaim","inputs":[{"name":"claim","type":"tuple","internalType":"struct IRewardsCoordinator.RewardsMerkleClaim","components":[{"name":"rootIndex","type":"uint32","internalType":"uint32"},{"name":"earnerIndex","type":"uint32","internalType":"uint32"},{"name":"earnerTreeProof","type":"bytes","internalType":"bytes"},{"name":"earnerLeaf","type":"tuple","internalType":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf","components":[{"name":"earner","type":"address","internalType":"address"},{"name":"earnerTokenRoot","type":"bytes32","internalType":"bytes32"}]},{"name":"tokenIndices","type":"uint32[]","internalType":"uint32[]"},{"name":"tokenTreeProofs","type":"bytes[]","internalType":"bytes[]"},{"name":"tokenLeaves","type":"tuple[]","internalType":"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"cumulativeEarnings","type":"uint256","internalType":"uint256"}]}]},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"processClaims","inputs":[{"name":"claims","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsMerkleClaim[]","components":[{"name":"rootIndex","type":"uint32","internalType":"uint32"},{"name":"earnerIndex","type":"uint32","internalType":"uint32"},{"name":"earnerTreeProof","type":"bytes","internalType":"bytes"},{"name":"earnerLeaf","type":"tuple","internalType":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf","components":[{"name":"earner","type":"address","internalType":"address"},{"name":"earnerTokenRoot","type":"bytes32","internalType":"bytes32"}]},{"name":"tokenIndices","type":"uint32[]","internalType":"uint32[]"},{"name":"tokenTreeProofs","type":"bytes[]","internalType":"bytes[]"},{"name":"tokenLeaves","type":"tuple[]","internalType":"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"cumulativeEarnings","type":"uint256","internalType":"uint256"}]}]},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rewardsUpdater","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setActivationDelay","inputs":[{"name":"_activationDelay","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setClaimerFor","inputs":[{"name":"claimer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDefaultOperatorSplit","inputs":[{"name":"split","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setOperatorAVSSplit","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"split","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setOperatorPISplit","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"split","type":"uint16","internalType":"uint16"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsForAllSubmitter","inputs":[{"name":"_submitter","type":"address","internalType":"address"},{"name":"_newValue","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsUpdater","inputs":[{"name":"_rewardsUpdater","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"submitRoot","inputs":[{"name":"root","type":"bytes32","internalType":"bytes32"},{"name":"rewardsCalculationEndTimestamp","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AVSRewardsSubmissionCreated","inputs":[{"name":"avs","type":"address","indexed":true,"internalType":"address"},{"name":"submissionNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardsSubmissionHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"rewardsSubmission","type":"tuple","indexed":false,"internalType":"struct IRewardsCoordinator.RewardsSubmission","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"ActivationDelaySet","inputs":[{"name":"oldActivationDelay","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"newActivationDelay","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"ClaimerForSet","inputs":[{"name":"earner","type":"address","indexed":true,"internalType":"address"},{"name":"oldClaimer","type":"address","indexed":true,"internalType":"address"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DefaultOperatorSplitBipsSet","inputs":[{"name":"oldDefaultOperatorSplitBips","type":"uint16","indexed":false,"internalType":"uint16"},{"name":"newDefaultOperatorSplitBips","type":"uint16","indexed":false,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"DistributionRootDisabled","inputs":[{"name":"rootIndex","type":"uint32","indexed":true,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"DistributionRootSubmitted","inputs":[{"name":"rootIndex","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"root","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"rewardsCalculationEndTimestamp","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"activatedAt","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"OperatorAVSSplitBipsSet","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"avs","type":"address","indexed":true,"internalType":"address"},{"name":"activatedAt","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"oldOperatorAVSSplitBips","type":"uint16","indexed":false,"internalType":"uint16"},{"name":"newOperatorAVSSplitBips","type":"uint16","indexed":false,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"OperatorDirectedAVSRewardsSubmissionCreated","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"avs","type":"address","indexed":true,"internalType":"address"},{"name":"operatorDirectedRewardsSubmissionHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"submissionNonce","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"operatorDirectedRewardsSubmission","type":"tuple","indexed":false,"internalType":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"operatorRewards","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorReward[]","components":[{"name":"operator","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"},{"name":"description","type":"string","internalType":"string"}]}],"anonymous":false},{"type":"event","name":"OperatorPISplitBipsSet","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"activatedAt","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"oldOperatorPISplitBips","type":"uint16","indexed":false,"internalType":"uint16"},{"name":"newOperatorPISplitBips","type":"uint16","indexed":false,"internalType":"uint16"}],"anonymous":false},{"type":"event","name":"RewardsClaimed","inputs":[{"name":"root","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"earner","type":"address","indexed":true,"internalType":"address"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"claimedAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RewardsForAllSubmitterSet","inputs":[{"name":"rewardsForAllSubmitter","type":"address","indexed":true,"internalType":"address"},{"name":"oldValue","type":"bool","indexed":true,"internalType":"bool"},{"name":"newValue","type":"bool","indexed":true,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"RewardsSubmissionForAllCreated","inputs":[{"name":"submitter","type":"address","indexed":true,"internalType":"address"},{"name":"submissionNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardsSubmissionHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"rewardsSubmission","type":"tuple","indexed":false,"internalType":"struct IRewardsCoordinator.RewardsSubmission","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"RewardsSubmissionForAllEarnersCreated","inputs":[{"name":"tokenHopper","type":"address","indexed":true,"internalType":"address"},{"name":"submissionNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"rewardsSubmissionHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"rewardsSubmission","type":"tuple","indexed":false,"internalType":"struct IRewardsCoordinator.RewardsSubmission","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"anonymous":false},{"type":"event","name":"RewardsUpdaterSet","inputs":[{"name":"oldRewardsUpdater","type":"address","indexed":true,"internalType":"address"},{"name":"newRewardsUpdater","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rewardsSubmissionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission\",\"name\":\"rewardsSubmission\",\"type\":\"tuple\"}],\"name\":\"AVSRewardsSubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldActivationDelay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newActivationDelay\",\"type\":\"uint32\"}],\"name\":\"ActivationDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldClaimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerForSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldDefaultOperatorSplitBips\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newDefaultOperatorSplitBips\",\"type\":\"uint16\"}],\"name\":\"DefaultOperatorSplitBipsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"}],\"name\":\"DistributionRootDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"rewardsCalculationEndTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"}],\"name\":\"DistributionRootSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldOperatorAVSSplitBips\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newOperatorAVSSplitBips\",\"type\":\"uint16\"}],\"name\":\"OperatorAVSSplitBipsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorDirectedRewardsSubmissionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submissionNonce\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorReward[]\",\"name\":\"operatorRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission\",\"name\":\"operatorDirectedRewardsSubmission\",\"type\":\"tuple\"}],\"name\":\"OperatorDirectedAVSRewardsSubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldOperatorPISplitBips\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newOperatorPISplitBips\",\"type\":\"uint16\"}],\"name\":\"OperatorPISplitBipsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsForAllSubmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"RewardsForAllSubmitterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rewardsSubmissionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission\",\"name\":\"rewardsSubmission\",\"type\":\"tuple\"}],\"name\":\"RewardsSubmissionForAllCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHopper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rewardsSubmissionHash\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission\",\"name\":\"rewardsSubmission\",\"type\":\"tuple\"}],\"name\":\"RewardsSubmissionForAllEarnersCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRewardsUpdater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardsUpdater\",\"type\":\"address\"}],\"name\":\"RewardsUpdaterSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALCULATION_INTERVAL_SECONDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_REWARDS_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUTURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RETROACTIVE_LENGTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARDS_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"earnerTokenRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRewardsCoordinator.EarnerTreeMerkleLeaf\",\"name\":\"leaf\",\"type\":\"tuple\"}],\"name\":\"calculateEarnerLeafHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeEarnings\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.TokenTreeMerkleLeaf\",\"name\":\"leaf\",\"type\":\"tuple\"}],\"name\":\"calculateTokenLeafHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnerIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"earnerTreeProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"earnerTokenRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRewardsCoordinator.EarnerTreeMerkleLeaf\",\"name\":\"earnerLeaf\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"tokenIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tokenTreeProofs\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeEarnings\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]\",\"name\":\"tokenLeaves\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsMerkleClaim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"checkClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"}],\"name\":\"claimerFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorReward[]\",\"name\":\"operatorRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\",\"name\":\"operatorDirectedRewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createOperatorDirectedAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createRewardsForAllEarners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmission\",\"type\":\"tuple[]\"}],\"name\":\"createRewardsForAllSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cumulativeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currRewardsCalculationEndTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperatorSplitBips\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"}],\"name\":\"disableRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentClaimableDistributionRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsCalculationEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"internalType\":\"struct IRewardsCoordinator.DistributionRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDistributionRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsCalculationEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"internalType\":\"struct IRewardsCoordinator.DistributionRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDistributionRootAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsCalculationEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activatedAt\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"internalType\":\"struct IRewardsCoordinator.DistributionRoot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionRootsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"}],\"name\":\"getOperatorAVSSplit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorPISplit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"getRootIndexFromHash\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnerIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"earnerTreeProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"earnerTokenRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRewardsCoordinator.EarnerTreeMerkleLeaf\",\"name\":\"earnerLeaf\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"tokenIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tokenTreeProofs\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeEarnings\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]\",\"name\":\"tokenLeaves\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsMerkleClaim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"processClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rootIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earnerIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"earnerTreeProof\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"earnerTokenRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IRewardsCoordinator.EarnerTreeMerkleLeaf\",\"name\":\"earnerLeaf\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"tokenIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tokenTreeProofs\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeEarnings\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]\",\"name\":\"tokenLeaves\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsMerkleClaim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"processClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_activationDelay\",\"type\":\"uint32\"}],\"name\":\"setActivationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"name\":\"setDefaultOperatorSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"name\":\"setOperatorAVSSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"name\":\"setOperatorPISplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"setRewardsForAllSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsUpdater\",\"type\":\"address\"}],\"name\":\"setRewardsUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsCalculationEndTimestamp\",\"type\":\"uint32\"}],\"name\":\"submitRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"events\":{\"OperatorAVSSplitBipsSet(address,address,address,uint32,uint16,uint16)\":{\"params\":{\"activatedAt\":\"The timestamp at which the split will be activated.\",\"avs\":\"The avs for which the split is being set by the operator.\",\"caller\":\"The address calling `setOperatorAVSSplit`.\",\"newOperatorAVSSplitBips\":\"The new split for the operator for the AVS.\",\"oldOperatorAVSSplitBips\":\"The old split for the operator for the AVS.\",\"operator\":\"The operator on behalf of which the split is being set.\"}},\"OperatorDirectedAVSRewardsSubmissionCreated(address,address,bytes32,uint256,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string))\":{\"params\":{\"avs\":\"The avs on behalf of which the operator-directed rewards are being submitted.\",\"caller\":\"The address calling `createOperatorDirectedAVSRewardsSubmission`.\",\"operatorDirectedRewardsSubmission\":\"The Operator-Directed Rewards Submission. Contains the token, start timestamp, duration, operator rewards, description and, strategy and multipliers.\",\"operatorDirectedRewardsSubmissionHash\":\"Keccak256 hash of (`avs`, `submissionNonce` and `operatorDirectedRewardsSubmission`).\",\"submissionNonce\":\"Current nonce of the avs. Used to generate a unique submission hash.\"}},\"OperatorPISplitBipsSet(address,address,uint32,uint16,uint16)\":{\"params\":{\"activatedAt\":\"The timestamp at which the split will be activated.\",\"caller\":\"The address calling `setOperatorPISplit`.\",\"newOperatorPISplitBips\":\"The new split for the operator for Programmatic Incentives.\",\"oldOperatorPISplitBips\":\"The old split for the operator for Programmatic Incentives.\",\"operator\":\"The operator on behalf of which the split is being set.\"}}},\"kind\":\"dev\",\"methods\":{\"CALCULATION_INTERVAL_SECONDS()\":{\"details\":\"Rewards Submission durations must be multiples of this interval.\"},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"details\":\"Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being madeThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractStrategies must be in ascending order of addresses to check for duplicatesThis function will revert if the `rewardsSubmission` is malformed, e.g. if the `strategies` and `weights` arrays are of non-equal lengths\",\"params\":{\"rewardsSubmissions\":\"The rewards submissions being created\"}},\"createOperatorDirectedAVSRewardsSubmission(address,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"details\":\"Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being madeThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractThe `RewardsCoordinator` contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.Strategies must be in ascending order of addresses to check for duplicatesOperators must be in ascending order of addresses to check for duplicates.This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\",\"params\":{\"avs\":\"The AVS on behalf of which the reward is being submitted\",\"operatorDirectedRewardsSubmissions\":\"The operator-directed rewards submissions being created\"}},\"createRewardsForAllEarners(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"params\":{\"rewardsSubmissions\":\"The rewards submissions being created\"}},\"createRewardsForAllSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"params\":{\"rewardsSubmission\":\"The rewards submission being created\"}},\"disableRoot(uint32)\":{\"params\":{\"rootIndex\":\"The index of the root to be disabled\"}},\"domainSeparator()\":{\"details\":\"The domain separator will change in the event of a fork that changes the ChainID.By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision. for more detailed information please read EIP-712.\"},\"processClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]),address)\":{\"details\":\"only callable by the valid claimer, that is if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only claimerFor[claim.earner] can claim the rewards.\",\"params\":{\"claim\":\"The RewardsMerkleClaim to be processed. Contains the root index, earner, token leaves, and required proofs\",\"recipient\":\"The address recipient that receives the ERC20 rewards\"}},\"processClaims((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[])[],address)\":{\"details\":\"only callable by the valid claimer, that is if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only claimerFor[claim.earner] can claim the rewards.\",\"params\":{\"claims\":\"The RewardsMerkleClaims to be processed. Contains the root index, earner, token leaves, and required proofs\",\"recipient\":\"The address recipient that receives the ERC20 rewards\"}},\"setActivationDelay(uint32)\":{\"details\":\"Only callable by the contract owner\",\"params\":{\"_activationDelay\":\"The new value for activationDelay\"}},\"setClaimerFor(address)\":{\"details\":\"Only callable by the `earner`\",\"params\":{\"claimer\":\"The address of the entity that can call `processClaim` on behalf of the earner\"}},\"setDefaultOperatorSplit(uint16)\":{\"details\":\"Only callable by the contract owner.\",\"params\":{\"split\":\"The default split for all operators across all avss in bips.\"}},\"setOperatorAVSSplit(address,address,uint16)\":{\"details\":\"Only callable by the operatorSplit has to be between 0 and 10000 bips (inclusive)The split will be activated after the activation delay\",\"params\":{\"avs\":\"The avs for which the split is being set by the operator\",\"operator\":\"The operator who is setting the split\",\"split\":\"The split for the operator for the specific avs in bips.\"}},\"setOperatorPISplit(address,uint16)\":{\"details\":\"Only callable by the operatorSplit has to be between 0 and 10000 bips (inclusive)The split will be activated after the activation delay\",\"params\":{\"operator\":\"The operator on behalf of which the split is being set.\",\"split\":\"The split for the operator for Programmatic Incentives in bips.\"}},\"setRewardsForAllSubmitter(address,bool)\":{\"details\":\"Only callable by the contract owner\",\"params\":{\"_newValue\":\"The new value for isRewardsForAllSubmitter\",\"_submitter\":\"The address of the rewardsForAllSubmitter\"}},\"setRewardsUpdater(address)\":{\"details\":\"Only callable by the contract owner\",\"params\":{\"_rewardsUpdater\":\"The address of the new rewardsUpdater\"}},\"submitRoot(bytes32,uint32)\":{\"details\":\"Only callable by the rewardsUpdater\",\"params\":{\"rewardsCalculationEndTimestamp\":\"The timestamp until which rewards have been calculated\",\"root\":\"The merkle root of the distribution\"}}},\"title\":\"Interface for the `IRewardsCoordinator` contract.\",\"version\":1},\"userdoc\":{\"events\":{\"AVSRewardsSubmissionCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))\":{\"notice\":\"emitted when an AVS creates a valid RewardsSubmission\"},\"DistributionRootSubmitted(uint32,bytes32,uint32,uint32)\":{\"notice\":\"rootIndex is the specific array index of the newly created root in the storage array\"},\"OperatorAVSSplitBipsSet(address,address,address,uint32,uint16,uint16)\":{\"notice\":\"Emitted when the operator split for an AVS is set.\"},\"OperatorDirectedAVSRewardsSubmissionCreated(address,address,bytes32,uint256,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string))\":{\"notice\":\"Emitted when an AVS creates a valid `OperatorDirectedRewardsSubmission`\"},\"OperatorPISplitBipsSet(address,address,uint32,uint16,uint16)\":{\"notice\":\"Emitted when the operator split for Programmatic Incentives is set.\"},\"RewardsClaimed(bytes32,address,address,address,address,uint256)\":{\"notice\":\"root is one of the submitted distribution roots that was claimed against\"},\"RewardsSubmissionForAllCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))\":{\"notice\":\"emitted when a valid RewardsSubmission is created for all stakers by a valid submitter\"},\"RewardsSubmissionForAllEarnersCreated(address,uint256,bytes32,((address,uint96)[],address,uint256,uint32,uint32))\":{\"notice\":\"emitted when a valid RewardsSubmission is created when rewardAllStakersAndOperators is called\"},\"RewardsUpdaterSet(address,address)\":{\"notice\":\"rewardsUpdater is responsible for submiting DistributionRoots, only owner can set rewardsUpdater\"}},\"kind\":\"user\",\"methods\":{\"CALCULATION_INTERVAL_SECONDS()\":{\"notice\":\"The interval in seconds at which the calculation for a RewardsSubmission distribution is done.\"},\"GENESIS_REWARDS_TIMESTAMP()\":{\"notice\":\"absolute min timestamp (seconds) that a submission can start at\"},\"MAX_FUTURE_LENGTH()\":{\"notice\":\"max amount of time (seconds) that a submission can start in the future\"},\"MAX_RETROACTIVE_LENGTH()\":{\"notice\":\"max amount of time (seconds) that a submission can start in the past\"},\"MAX_REWARDS_DURATION()\":{\"notice\":\"The maximum amount of time (seconds) that a RewardsSubmission can span over\"},\"activationDelay()\":{\"notice\":\"Delay in timestamp (seconds) before a posted root can be claimed against\"},\"calculateEarnerLeafHash((address,bytes32))\":{\"notice\":\"return the hash of the earner's leaf\"},\"calculateTokenLeafHash((address,uint256))\":{\"notice\":\"returns the hash of the earner's token leaf\"},\"checkClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]))\":{\"notice\":\"returns 'true' if the claim would currently pass the check in `processClaims` but will revert if not valid\"},\"claimerFor(address)\":{\"notice\":\"Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner\"},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"Creates a new rewards submission on behalf of an AVS, to be split amongst the set of stakers delegated to operators who are registered to the `avs`\"},\"createOperatorDirectedAVSRewardsSubmission(address,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"notice\":\"Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and set of stakers delegated to operators who are registered to the `avs`.\"},\"createRewardsForAllEarners(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"Creates a new rewards submission for all earners across all AVSs. Earners in this case indicating all operators and their delegated stakers. Undelegated stake is not rewarded from this RewardsSubmission. This interface is only callable by the token hopper contract from the Eigen Foundation\"},\"createRewardsForAllSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers rather than just those delegated to operators who are registered to a single avs and is a permissioned call based on isRewardsForAllSubmitter mapping.\"},\"cumulativeClaimed(address,address)\":{\"notice\":\"Mapping: claimer => token => total amount claimed\"},\"currRewardsCalculationEndTimestamp()\":{\"notice\":\"The timestamp until which RewardsSubmissions have been calculated\"},\"defaultOperatorSplitBips()\":{\"notice\":\"the defautl split for all operators across all avss\"},\"disableRoot(uint32)\":{\"notice\":\"allow the rewardsUpdater to disable/cancel a pending root submission in case of an error\"},\"domainSeparator()\":{\"notice\":\"Getter function for the current EIP-712 domain separator for this contract.\"},\"getCurrentClaimableDistributionRoot()\":{\"notice\":\"loop through the distribution roots from reverse and get latest root that is not disabled and activated i.e. a root that can be claimed against\"},\"getCurrentDistributionRoot()\":{\"notice\":\"returns the current distributionRoot\"},\"getDistributionRootAtIndex(uint256)\":{\"notice\":\"returns the distributionRoot at the specified index\"},\"getDistributionRootsLength()\":{\"notice\":\"returns the number of distribution roots posted\"},\"getOperatorAVSSplit(address,address)\":{\"notice\":\"the split for a specific `operator` for a specific `avs`\"},\"getOperatorPISplit(address)\":{\"notice\":\"the split for a specific `operator` for Programmatic Incentives\"},\"getRootIndexFromHash(bytes32)\":{\"notice\":\"loop through distribution roots from reverse and return index from hash\"},\"processClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]),address)\":{\"notice\":\"Claim rewards against a given root (read from _distributionRoots[claim.rootIndex]). Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for, they can simply claim against the latest root and the contract will calculate the difference between their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\"},\"processClaims((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[])[],address)\":{\"notice\":\"Batch claim rewards against a given root (read from _distributionRoots[claim.rootIndex]). Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for, they can simply claim against the latest root and the contract will calculate the difference between their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\"},\"rewardsUpdater()\":{\"notice\":\"The address of the entity that can update the contract with new merkle roots\"},\"setActivationDelay(uint32)\":{\"notice\":\"Sets the delay in timestamp before a posted root can be claimed against\"},\"setClaimerFor(address)\":{\"notice\":\"Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\"},\"setDefaultOperatorSplit(uint16)\":{\"notice\":\"Sets the default split for all operators across all avss.\"},\"setOperatorAVSSplit(address,address,uint16)\":{\"notice\":\"Sets the split for a specific operator for a specific avs\"},\"setOperatorPISplit(address,uint16)\":{\"notice\":\"Sets the split for a specific operator for Programmatic Incentives.\"},\"setRewardsForAllSubmitter(address,bool)\":{\"notice\":\"Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\"},\"setRewardsUpdater(address)\":{\"notice\":\"Sets the permissioned `rewardsUpdater` address which can post new roots\"},\"submitRoot(bytes32,uint32)\":{\"notice\":\"Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-serviceAllows AVSs to make \\\"Rewards Submissions\\\", which get distributed amongst the AVSs' confirmed Operators and the Stakers delegated to those Operators. Calculations are performed based on the completed RewardsSubmission, with the results posted in a Merkle root against which Stakers & Operators can make claims.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":\"IRewardsCoordinator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":{\"keccak256\":\"0x39529942c9f3bab419e0570e3c51c27b49803fb0b3821a0fd06f47ab8835ed81\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://da46171725cfe3dd23c0a4f58abf2565eb7db619495fa4fb8bab55aaff9d9c7a\",\"dweb:/ipfs/QmeEVMVWF4peGBEK72rcedp6sWwhuYcVj8q728zrnTzZ6A\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"CALCULATION_INTERVAL_SECONDS()":"9d45c281","GENESIS_REWARDS_TIMESTAMP()":"131433b4","MAX_FUTURE_LENGTH()":"04a0c502","MAX_RETROACTIVE_LENGTH()":"37838ed0","MAX_REWARDS_DURATION()":"bf21a8aa","activationDelay()":"3a8c0786","calculateEarnerLeafHash((address,bytes32))":"149bc872","calculateTokenLeafHash((address,uint256))":"f8cd8448","checkClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]))":"5e9d8348","claimerFor(address)":"2b9f64a4","createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])":"fce36c7d","createOperatorDirectedAVSRewardsSubmission(address,((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])":"9cb9a5fa","createRewardsForAllEarners(((address,uint96)[],address,uint256,uint32,uint32)[])":"ff9f6cce","createRewardsForAllSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])":"36af41fa","cumulativeClaimed(address,address)":"865c6953","currRewardsCalculationEndTimestamp()":"4d18cc35","defaultOperatorSplitBips()":"63f6a798","disableRoot(uint32)":"f96abf2e","domainSeparator()":"f698da25","getCurrentClaimableDistributionRoot()":"0e9a53cf","getCurrentDistributionRoot()":"9be3d4e4","getDistributionRootAtIndex(uint256)":"de02e503","getDistributionRootsLength()":"7b8f8b05","getOperatorAVSSplit(address,address)":"e063f81f","getOperatorPISplit(address)":"4b943960","getRootIndexFromHash(bytes32)":"e810ce21","processClaim((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[]),address)":"3ccc861d","processClaims((uint32,uint32,bytes,(address,bytes32),uint32[],bytes[],(address,uint256)[])[],address)":"4596021c","rewardsUpdater()":"fbf1e2c1","setActivationDelay(uint32)":"58baaa3e","setClaimerFor(address)":"a0169ddd","setDefaultOperatorSplit(uint16)":"a50a1d9c","setOperatorAVSSplit(address,address,uint16)":"dcbb03b3","setOperatorPISplit(address,uint16)":"b3dbb0e0","setRewardsForAllSubmitter(address,bool)":"0eb38345","setRewardsUpdater(address)":"863cb9a9","submitRoot(bytes32,uint32)":"3efe1db6"}}}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol":{"ISignatureUtils":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"The interface for common signature utilities.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":\"ISignatureUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"IStrategy":{"abi":[{"type":"function","name":"deposit","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"explanation","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"shares","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"sharesToUnderlying","inputs":[{"name":"amountShares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"sharesToUnderlyingView","inputs":[{"name":"amountShares","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalShares","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"underlyingToShares","inputs":[{"name":"amountUnderlying","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"underlyingToSharesView","inputs":[{"name":"amountUnderlying","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"underlyingToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IERC20"}],"stateMutability":"view"},{"type":"function","name":"userUnderlying","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"userUnderlyingView","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amountShares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ExchangeRateEmitted","inputs":[{"name":"rate","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StrategyTokenSet","inputs":[{"name":"token","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"decimals","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"StrategyTokenSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"explanation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"sharesToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"sharesToUnderlyingView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"underlyingToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"underlyingToSharesView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userUnderlyingView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"events\":{\"ExchangeRateEmitted(uint256)\":{\"details\":\"Tokens that do not have 18 decimals must have offchain services scale the exchange rate by the proper magnitude\",\"params\":{\"rate\":\"is the exchange rate in wad 18 decimals\"}},\"StrategyTokenSet(address,uint8)\":{\"params\":{\"decimals\":\"are the decimals of the ERC20 token in the strategy\",\"token\":\"is the ERC20 token of the strategy\"}}},\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"details\":\"This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\",\"params\":{\"amount\":\"is the amount of token being deposited\",\"token\":\"is the ERC20 token being deposited\"},\"returns\":{\"_0\":\"newShares is the number of new shares issued at the current exchange ratio.\"}},\"sharesToUnderlying(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountShares\":\"is the amount of shares to calculate its conversion into the underlying token\"},\"returns\":{\"_0\":\"The amount of underlying tokens corresponding to the input `amountShares`\"}},\"sharesToUnderlyingView(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountShares\":\"is the amount of shares to calculate its conversion into the underlying token\"},\"returns\":{\"_0\":\"The amount of shares corresponding to the input `amountUnderlying`\"}},\"underlyingToShares(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountUnderlying\":\"is the amount of `underlyingToken` to calculate its conversion into strategy shares\"},\"returns\":{\"_0\":\"The amount of underlying tokens corresponding to the input `amountShares`\"}},\"underlyingToSharesView(uint256)\":{\"details\":\"Implementation for these functions in particular may vary significantly for different strategies\",\"params\":{\"amountUnderlying\":\"is the amount of `underlyingToken` to calculate its conversion into strategy shares\"},\"returns\":{\"_0\":\"The amount of shares corresponding to the input `amountUnderlying`\"}},\"withdraw(address,address,uint256)\":{\"details\":\"This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's other functions, and individual share balances are recorded in the strategyManager as well.\",\"params\":{\"amountShares\":\"is the amount of shares being withdrawn\",\"recipient\":\"is the address to receive the withdrawn funds\",\"token\":\"is the ERC20 token being transferred out\"}}},\"title\":\"Minimal interface for an `Strategy` contract.\",\"version\":1},\"userdoc\":{\"events\":{\"ExchangeRateEmitted(uint256)\":{\"notice\":\"Used to emit an event for the exchange rate between 1 share and underlying token in a strategy contract\"},\"StrategyTokenSet(address,uint8)\":{\"notice\":\"Used to emit the underlying token and its decimals on strategy creationtoken\"}},\"kind\":\"user\",\"methods\":{\"deposit(address,uint256)\":{\"notice\":\"Used to deposit tokens into this Strategy\"},\"explanation()\":{\"notice\":\"Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\"},\"shares(address)\":{\"notice\":\"convenience function for fetching the current total shares of `user` in this strategy, by querying the `strategyManager` contract\"},\"sharesToUnderlying(uint256)\":{\"notice\":\"Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\"},\"sharesToUnderlyingView(uint256)\":{\"notice\":\"Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.In contrast to `sharesToUnderlying`, this function guarantees no state modifications\"},\"totalShares()\":{\"notice\":\"The total number of extant shares in this Strategy\"},\"underlyingToShares(uint256)\":{\"notice\":\"Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.In contrast to `underlyingToSharesView`, this function **may** make state modifications\"},\"underlyingToSharesView(uint256)\":{\"notice\":\"Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.In contrast to `underlyingToShares`, this function guarantees no state modifications\"},\"underlyingToken()\":{\"notice\":\"The underlying token for shares in this Strategy\"},\"userUnderlying(address)\":{\"notice\":\"convenience function for fetching the current underlying value of all of the `user`'s shares in this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\"},\"userUnderlyingView(address)\":{\"notice\":\"convenience function for fetching the current underlying value of all of the `user`'s shares in this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Used to withdraw tokens from this Strategy, to the `recipient`'s address\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-serviceCustom `Strategy` implementations may expand extensively on this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deposit(address,uint256)":"47e7ef24","explanation()":"ab5921e1","shares(address)":"ce7c2ac2","sharesToUnderlying(uint256)":"f3e73875","sharesToUnderlyingView(uint256)":"7a8b2637","totalShares()":"3a98ef39","underlyingToShares(uint256)":"8c871019","underlyingToSharesView(uint256)":"e3dae51c","underlyingToken()":"2495a599","userUnderlying(address)":"8f6a6240","userUnderlyingView(address)":"553ca5f8","withdraw(address,address,uint256)":"d9caed12"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"proxiableUUID()":"52d1902d"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ERC1967Proxy":{"abi":[{"type":"constructor","inputs":[{"name":"_logic","type":"address","internalType":"address"},{"name":"_data","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"event","name":"AdminChanged","inputs":[{"name":"previousAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"BeaconUpgraded","inputs":[{"name":"beacon","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5\",\"dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89c2a0f70157c13845be5cb49b078a6374fee3a78fa950052a3af26190255da8\",\"dweb:/ipfs/QmUcvMEQH1oMM2pUyMuDiBUKdvvnTz1NRB8bmPHrVq8725\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472\",\"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4\",\"dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"functionDebugData":{"allocate_memory":{"entryPoint":591,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":648,"id":null,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResult":{"entryPoint":675,"id":6839,"parameterSlots":3,"returnSlots":1}},"object":"60806040526103ca803803806100148161024f565b92833981019060408183031261024b578051916001600160a01b0383169182840361024b576020810151906001600160401b03821161024b57019181601f8401121561024b57825161006d61006882610288565b61024f565b9381855260208501936020838301011161024b57815f926020809301865e85010152833b156101f0577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906101e9575b610109575b60405160cb90816102ff8239f35b610113606061024f565b91602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152833b1561019557610184935f92839251915af43d1561018d573d9061017561006883610288565b9182523d5f602084013e6102a3565b505f80806100fb565b6060906102a3565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b505f6100f6565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761027457604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b03811161027457601f01601f191660200190565b909190156102af575090565b8151156102bf5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fdfe608060405236156051577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff35b3d5ffd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff3fea26469706673582212208dec6912d662a4d27db33ab7814e3185d285f4306448e8464c07722889d4f7d764736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0x3CA DUP1 CODESIZE SUB DUP1 PUSH2 0x14 DUP2 PUSH2 0x24F JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH2 0x24B JUMPI DUP1 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP3 DUP5 SUB PUSH2 0x24B JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x24B JUMPI ADD SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x24B JUMPI DUP3 MLOAD PUSH2 0x6D PUSH2 0x68 DUP3 PUSH2 0x288 JUMP JUMPDEST PUSH2 0x24F JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x24B JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP7 MCOPY DUP6 ADD ADD MSTORE DUP4 EXTCODESIZE ISZERO PUSH2 0x1F0 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1E9 JUMPI JUMPDEST PUSH2 0x109 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xCB SWAP1 DUP2 PUSH2 0x2FF DUP3 CODECOPY RETURN JUMPDEST PUSH2 0x113 PUSH1 0x60 PUSH2 0x24F JUMP JUMPDEST SWAP2 PUSH1 0x27 DUP4 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP5 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP5 ADD MSTORE DUP4 EXTCODESIZE ISZERO PUSH2 0x195 JUMPI PUSH2 0x184 SWAP4 PUSH0 SWAP3 DUP4 SWAP3 MLOAD SWAP2 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x18D JUMPI RETURNDATASIZE SWAP1 PUSH2 0x175 PUSH2 0x68 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A3 JUMP JUMPDEST POP PUSH0 DUP1 DUP1 PUSH2 0xFB JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH0 PUSH2 0xF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x274 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x274 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x2AF JUMPI POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2BF JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP2 PUSH1 0x4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x51 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH1 0x4D JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH1 0x4D JUMPI RETURNDATASIZE PUSH0 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xEC PUSH10 0x12D662A4D27DB33AB781 0x4E BALANCE DUP6 0xD2 DUP6 DELEGATECALL ADDRESS PUSH5 0x48E8464C07 PUSH19 0x2889D4F7D764736F6C634300081C0033000000 ","sourceMap":"567:723:21:-:0;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;567:723:21;;;;;;;;;;;;;-1:-1:-1;;;;;567:723:21;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;567:723:21;;;;;;;;;;;1465:19:27;;:23;567:723:21;;1030:66:22;;;-1:-1:-1;;;;;;1030:66:22;;;;;2015:27;-1:-1:-1;;2015:27:22;567:723:21;;2364:15:22;;;:28;;;-1:-1:-1;2360:112:22;;-1:-1:-1;567:723:21;;;;;;;;;2360:112:22;567:723:21;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;567:723:21;;;;1465:19:27;;:23;567:723:21;;7283:51:27;7241:25;-1:-1:-1;7241:25:27;;;;;;;567:723:21;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;567:723:21;;;;7283:51:27;:::i;:::-;;2360:112:22;;;;;567:723:21;;;7283:51:27;:::i;567:723:21:-;;;-1:-1:-1;;;567:723:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;567:723:21;;;;;;;2364:28:22;;-1:-1:-1;2364:28:22;;567:723:21;;;-1:-1:-1;;;567:723:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;567:723:21;;;;;;;;-1:-1:-1;567:723:21;;;;;;;;;-1:-1:-1;;567:723:21;;;-1:-1:-1;;;;;567:723:21;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;567:723:21;;;;;-1:-1:-1;567:723:21;;-1:-1:-1;;;;;567:723:21;;;;;;-1:-1:-1;;567:723:21;;;;:::o;7561:742:27:-;;;;7731:566;;;7758:17;;:::o;7731:566::-;567:723:21;;7876:21:27;:17;;8060:154;;;;;;;7872:415;567:723:21;;;;;;;;;;;8252:20:27;;;;;;567:723:21;;;;;;;;;;;;;;;;7896:1:27;567:723:21;;;;;;;;-1:-1:-1;;567:723:21;;;8252:20:27;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405236156051577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff35b3d5ffd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff3fea26469706673582212208dec6912d662a4d27db33ab7814e3185d285f4306448e8464c07722889d4f7d764736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH1 0x51 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH1 0x4D JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH1 0x4D JUMPI RETURNDATASIZE PUSH0 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xEC PUSH10 0x12D662A4D27DB33AB781 0x4E BALANCE DUP6 0xD2 DUP6 DELEGATECALL ADDRESS PUSH5 0x48E8464C07 PUSH19 0x2889D4F7D764736F6C634300081C0033000000 ","sourceMap":"567:723:21:-:0;;;;;;;1030:66:22;;-1:-1:-1;;;;;;;;;1030:66:22;567:723:21;-1:-1:-1;;1018:819:23;567:723:21;;1018:819:23;;;;-1:-1:-1;1018:819:23;;;;;;-1:-1:-1;1018:819:23;;;-1:-1:-1;1018:819:23;567:723:21;1030:66:22;;-1:-1:-1;;;;;;;;;1030:66:22;567:723:21;-1:-1:-1;;1018:819:23;567:723:21;;1018:819:23;;;;-1:-1:-1;1018:819:23;;;;;;-1:-1:-1;1018:819:23","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ERC1967Upgrade":{"abi":[{"type":"event","name":"AdminChanged","inputs":[{"name":"previousAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"BeaconUpgraded","inputs":[{"name":"beacon","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89c2a0f70157c13845be5cb49b078a6374fee3a78fa950052a3af26190255da8\",\"dweb:/ipfs/QmUcvMEQH1oMM2pUyMuDiBUKdvvnTz1NRB8bmPHrVq8725\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4\",\"dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"Proxy":{"abi":[{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472\",\"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"implementation()":"5c60da1b"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"TransparentUpgradeableProxy":{"abi":[{"type":"constructor","inputs":[{"name":"_logic","type":"address","internalType":"address"},{"name":"admin_","type":"address","internalType":"address"},{"name":"_data","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"admin_","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"changeAdmin","inputs":[{"name":"newAdmin","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"implementation_","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeTo","inputs":[{"name":"newImplementation","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"AdminChanged","inputs":[{"name":"previousAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"BeaconUpgraded","inputs":[{"name":"beacon","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing], which can potentially be used in an attack, this contract uses the https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two things that go hand in hand: 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if that call matches one of the admin functions exposed by the proxy itself. 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the implementation. If the admin tries to call a function on the implementation it will fail with an error that says \\\"admin cannot fallback to proxy target\\\". These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to call a function from the proxy implementation. Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way, you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"admin()\":{\"details\":\"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\"},\"changeAdmin(address)\":{\"details\":\"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\"},\"constructor\":{\"details\":\"Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\"},\"implementation()\":{\"details\":\"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5\",\"dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89c2a0f70157c13845be5cb49b078a6374fee3a78fa950052a3af26190255da8\",\"dweb:/ipfs/QmUcvMEQH1oMM2pUyMuDiBUKdvvnTz1NRB8bmPHrVq8725\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472\",\"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6c4477d480bac20d681ade0e712b77ad828acf530a1d5c0abc5fb78068a05a1\",\"dweb:/ipfs/QmdBqsK8CcUceTeWzhHwFDEvKMoHimwtV96Lbim7ZBtCb8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4\",\"dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":861,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":804,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":881,"id":null,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResult":{"entryPoint":908,"id":6839,"parameterSlots":3,"returnSlots":1}},"object":"6080604052610b478038038061001481610324565b92833981016060828203126103205761002c8261035d565b906100396020840161035d565b604084015190936001600160401b03821161032057019080601f8301121561032057815161006e61006982610371565b610324565b9281845260208401926020838301011161032057815f926020809301855e84010152823b156102c5577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0385169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906102be575b6101de575b50505f516020610b275f395f51905f5254604080516001600160a01b03808416825290941660208501819052939192507f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a1811561018a576001600160a01b031916175f516020610b275f395f51905f525560405161073f90816103e88239f35b60405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6101e86060610324565b91602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152833b1561026a57610259935f92839251915af43d15610262573d9061024a61006983610371565b9182523d5f602084013e61038c565b505f8080610108565b60609061038c565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b505f610103565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761034957604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b038216820361032057565b6001600160401b03811161034957601f01601f191660200190565b90919015610398575090565b8151156103a85750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fdfe60806040526004361015610019575b36610374575b610374565b5f3560e01c80633659cfe6146100685780634f1ef286146100635780635c60da1b1461005e5780638f283970146100595763f851a4400361000e576102c5565b6101c7565b610173565b6100d4565b346100ba5760203660031901126100ba576100816100be565b5f5160206106ca5f395f51905f5254336001600160a01b0390911603610014576100b8906100af602061032d565b905f825261043e565b005b5f80fd5b600435906001600160a01b03821682036100ba57565b60403660031901126100ba576100e86100be565b60243567ffffffffffffffff81116100ba57366023820112156100ba5780600401359167ffffffffffffffff83116100ba5736602484840101116100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f60208480602461016161015c6100b899610358565b61032d565b9682885201838701378401015261051d565b346100ba575f3660031901126100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ea5f395f51905f52546040516001600160a01b039091168152602090f35b346100ba5760203660031901126100ba576101e06100be565b5f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ca5f395f51905f5254604080516001600160a01b03808416825290931660208401819052927f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9190a18115610271576001600160a01b031916175f5160206106ca5f395f51905f5255005b60405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346100ba575f3660031901126100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ca5f395f51905f52546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761035357604052565b610319565b67ffffffffffffffff811161035357601f01601f191660200190565b5f5160206106ca5f395f51905f52546001600160a01b031633146103c8575f5160206106ea5f395f51905f52545f9081906001600160a01b0316368280378136915af43d5f803e156103c4573d5ff35b3d5ffd5b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a490fd5b803b156104c2575f5160206106ea5f395f51905f5280546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906104bb575b6104a6575050565b6104b8916104b261058c565b916105d3565b50565b505f61049e565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b803b156104c2575f5160206106ea5f395f51905f5280546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115801590610584576104a6575050565b50600161049e565b610596606061032d565b9060278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b9190823b1561061a575f8161060f9460208394519201905af43d15610612573d9061060061015c83610358565b9182523d5f602084013e61066e565b90565b60609061066e565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b9091901561067a575090565b81511561068a5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fdfeb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f0c442a07502d2c211a4232a9d71497a906b37cb6415d62efea60188fd40890e64736f6c634300081c0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xB47 DUP1 CODESIZE SUB DUP1 PUSH2 0x14 DUP2 PUSH2 0x324 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH2 0x320 JUMPI PUSH2 0x2C DUP3 PUSH2 0x35D JUMP JUMPDEST SWAP1 PUSH2 0x39 PUSH1 0x20 DUP5 ADD PUSH2 0x35D JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD SWAP1 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x320 JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x320 JUMPI DUP2 MLOAD PUSH2 0x6E PUSH2 0x69 DUP3 PUSH2 0x371 JUMP JUMPDEST PUSH2 0x324 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x320 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP6 MCOPY DUP5 ADD ADD MSTORE DUP3 EXTCODESIZE ISZERO PUSH2 0x2C5 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2BE JUMPI JUMPDEST PUSH2 0x1DE JUMPI JUMPDEST POP POP PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB27 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE SWAP1 SWAP5 AND PUSH1 0x20 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP2 SWAP3 POP PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 LOG1 DUP2 ISZERO PUSH2 0x18A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB27 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH1 0x40 MLOAD PUSH2 0x73F SWAP1 DUP2 PUSH2 0x3E8 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x1E8 PUSH1 0x60 PUSH2 0x324 JUMP JUMPDEST SWAP2 PUSH1 0x27 DUP4 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP5 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP5 ADD MSTORE DUP4 EXTCODESIZE ISZERO PUSH2 0x26A JUMPI PUSH2 0x259 SWAP4 PUSH0 SWAP3 DUP4 SWAP3 MLOAD SWAP2 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x262 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x24A PUSH2 0x69 DUP4 PUSH2 0x371 JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x38C JUMP JUMPDEST POP PUSH0 DUP1 DUP1 PUSH2 0x108 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH0 PUSH2 0x103 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x349 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x320 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x349 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x398 JUMPI POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x3A8 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP2 PUSH1 0x4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x19 JUMPI JUMPDEST CALLDATASIZE PUSH2 0x374 JUMPI JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x59 JUMPI PUSH4 0xF851A440 SUB PUSH2 0xE JUMPI PUSH2 0x2C5 JUMP JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0xD4 JUMP JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0x81 PUSH2 0xBE JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH2 0xB8 SWAP1 PUSH2 0xAF PUSH1 0x20 PUSH2 0x32D JUMP JUMPDEST SWAP1 PUSH0 DUP3 MSTORE PUSH2 0x43E JUMP JUMPDEST STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBA JUMPI JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0xE8 PUSH2 0xBE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBA JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xBA JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xBA JUMPI CALLDATASIZE PUSH1 0x24 DUP5 DUP5 ADD ADD GT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 PUSH1 0x20 DUP5 DUP1 PUSH1 0x24 PUSH2 0x161 PUSH2 0x15C PUSH2 0xB8 SWAP10 PUSH2 0x358 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST SWAP7 DUP3 DUP9 MSTORE ADD DUP4 DUP8 ADD CALLDATACOPY DUP5 ADD ADD MSTORE PUSH2 0x51D JUMP JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0x1E0 PUSH2 0xBE JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP3 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 SWAP1 LOG1 DUP2 ISZERO PUSH2 0x271 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x353 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x319 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x353 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C8 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH2 0x3C4 JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x42 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73706172656E745570677261646561626C6550726F78793A2061646D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696E2063616E6E6F742066616C6C6261636B20746F2070726F78792074617267 PUSH1 0x64 DUP3 ADD MSTORE PUSH2 0x195D PUSH1 0xF2 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x4C2 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x4BB JUMPI JUMPDEST PUSH2 0x4A6 JUMPI POP POP JUMP JUMPDEST PUSH2 0x4B8 SWAP2 PUSH2 0x4B2 PUSH2 0x58C JUMP JUMPDEST SWAP2 PUSH2 0x5D3 JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH0 PUSH2 0x49E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x4C2 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x584 JUMPI PUSH2 0x4A6 JUMPI POP POP JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x49E JUMP JUMPDEST PUSH2 0x596 PUSH1 0x60 PUSH2 0x32D JUMP JUMPDEST SWAP1 PUSH1 0x27 DUP3 MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP4 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x61A JUMPI PUSH0 DUP2 PUSH2 0x60F SWAP5 PUSH1 0x20 DUP4 SWAP5 MLOAD SWAP3 ADD SWAP1 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x612 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x600 PUSH2 0x15C DUP4 PUSH2 0x358 JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x66E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x66E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x67A JUMPI POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x68A JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP2 PUSH1 0x4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID 0xB5 BALANCE 0x27 PUSH9 0x4A568B3173AE13B9F8 0xA6 ADD PUSH15 0x243E63B6E8EE1178D6A717850B5D61 SUB CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 0xC4 TIMESTAMP LOG0 PUSH22 0x2D2C211A4232A9D71497A906B37CB6415D62EFEA601 DUP9 REVERT BLOCKHASH DUP10 0xE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER 0xB5 BALANCE 0x27 PUSH9 0x4A568B3173AE13B9F8 0xA6 ADD PUSH15 0x243E63B6E8EE1178D6A717850B5D61 SUB ","sourceMap":"1649:3469:25:-:0;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;1649:3469:25;;;;;;;;;;;1465:19:27;;:23;1649:3469:25;;1030:66:22;1649:3469:25;;-1:-1:-1;;;;;;1649:3469:25;-1:-1:-1;;;;;1649:3469:25;;;;;;;;2015:27:22;-1:-1:-1;;2015:27:22;1649:3469:25;;2364:15:22;;;:28;;;-1:-1:-1;2360:112:22;;-1:-1:-1;;;;;;;;;;;;;;3842:66:22;1649:3469:25;;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;;;;;;3842:66:22;;-1:-1:-1;4688:35:22;;;4375:22;;1649:3469:25;;-1:-1:-1;;;;;;1649:3469:25;;-1:-1:-1;;;;;;;;;;;1649:3469:25;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;2360:112:22;1649:3469:25;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;1465:19:27;;:23;1649:3469:25;;7283:51:27;7241:25;-1:-1:-1;7241:25:27;;;;;;;1649:3469:25;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;1649:3469:25;;;;7283:51:27;:::i;:::-;;2360:112:22;;;;;1649:3469:25;;;7283:51:27;:::i;1649:3469:25:-;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;2364:28:22;;-1:-1:-1;2364:28:22;;1649:3469:25;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;;-1:-1:-1;1649:3469:25;;;;;;;;;-1:-1:-1;;1649:3469:25;;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;1649:3469:25;;;;;-1:-1:-1;1649:3469:25;;;;-1:-1:-1;;;;;1649:3469:25;;;;;;:::o;:::-;-1:-1:-1;;;;;1649:3469:25;;;;;;-1:-1:-1;;1649:3469:25;;;;:::o;7561:742:27:-;;;;7731:566;;;7758:17;;:::o;7731:566::-;1649:3469:25;;7876:21:27;:17;;8060:154;;;;;;;7872:415;1649:3469:25;;;;;;;;;;;8252:20:27;;;;;;1649:3469:25;;;;;;;;;;;;;;;;7896:1:27;1649:3469:25;;;;;;;;-1:-1:-1;;1649:3469:25;;;8252:20:27;;;","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":190,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":813,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":856,"id":null,"parameterSlots":1,"returnSlots":1},"copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398":{"entryPoint":1420,"id":null,"parameterSlots":0,"returnSlots":1},"external_fun_admin":{"entryPoint":709,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_changeAdmin":{"entryPoint":455,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_implementation":{"entryPoint":371,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_upgradeToAndCall":{"entryPoint":212,"id":null,"parameterSlots":0,"returnSlots":0},"fun_fallback":{"entryPoint":884,"id":6287,"parameterSlots":0,"returnSlots":0},"fun_functionDelegateCall":{"entryPoint":1491,"id":6808,"parameterSlots":3,"returnSlots":1},"fun_upgradeToAndCall":{"entryPoint":1309,"id":6040,"parameterSlots":2,"returnSlots":0},"fun_upgradeToAndCall_3209":{"entryPoint":1086,"id":6040,"parameterSlots":2,"returnSlots":0},"fun_verifyCallResult":{"entryPoint":1646,"id":6839,"parameterSlots":3,"returnSlots":1},"panic_error_0x41":{"entryPoint":793,"id":null,"parameterSlots":0,"returnSlots":0}},"object":"60806040526004361015610019575b36610374575b610374565b5f3560e01c80633659cfe6146100685780634f1ef286146100635780635c60da1b1461005e5780638f283970146100595763f851a4400361000e576102c5565b6101c7565b610173565b6100d4565b346100ba5760203660031901126100ba576100816100be565b5f5160206106ca5f395f51905f5254336001600160a01b0390911603610014576100b8906100af602061032d565b905f825261043e565b005b5f80fd5b600435906001600160a01b03821682036100ba57565b60403660031901126100ba576100e86100be565b60243567ffffffffffffffff81116100ba57366023820112156100ba5780600401359167ffffffffffffffff83116100ba5736602484840101116100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f60208480602461016161015c6100b899610358565b61032d565b9682885201838701378401015261051d565b346100ba575f3660031901126100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ea5f395f51905f52546040516001600160a01b039091168152602090f35b346100ba5760203660031901126100ba576101e06100be565b5f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ca5f395f51905f5254604080516001600160a01b03808416825290931660208401819052927f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9190a18115610271576001600160a01b031916175f5160206106ca5f395f51905f5255005b60405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346100ba575f3660031901126100ba575f5160206106ca5f395f51905f5254336001600160a01b0390911603610014575f5160206106ca5f395f51905f52546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761035357604052565b610319565b67ffffffffffffffff811161035357601f01601f191660200190565b5f5160206106ca5f395f51905f52546001600160a01b031633146103c8575f5160206106ea5f395f51905f52545f9081906001600160a01b0316368280378136915af43d5f803e156103c4573d5ff35b3d5ffd5b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a490fd5b803b156104c2575f5160206106ea5f395f51905f5280546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28151158015906104bb575b6104a6575050565b6104b8916104b261058c565b916105d3565b50565b505f61049e565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b803b156104c2575f5160206106ea5f395f51905f5280546001600160a01b0319166001600160a01b0383169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2815115801590610584576104a6575050565b50600161049e565b610596606061032d565b9060278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b9190823b1561061a575f8161060f9460208394519201905af43d15610612573d9061060061015c83610358565b9182523d5f602084013e61066e565b90565b60609061066e565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b9091901561067a575090565b81511561068a5750805190602001fd5b604460209160405192839162461bcd60e51b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fdfeb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f0c442a07502d2c211a4232a9d71497a906b37cb6415d62efea60188fd40890e64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x19 JUMPI JUMPDEST CALLDATASIZE PUSH2 0x374 JUMPI JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x59 JUMPI PUSH4 0xF851A440 SUB PUSH2 0xE JUMPI PUSH2 0x2C5 JUMP JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0xD4 JUMP JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0x81 PUSH2 0xBE JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH2 0xB8 SWAP1 PUSH2 0xAF PUSH1 0x20 PUSH2 0x32D JUMP JUMPDEST SWAP1 PUSH0 DUP3 MSTORE PUSH2 0x43E JUMP JUMPDEST STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBA JUMPI JUMP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0xE8 PUSH2 0xBE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBA JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xBA JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xBA JUMPI CALLDATASIZE PUSH1 0x24 DUP5 DUP5 ADD ADD GT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 PUSH1 0x20 DUP5 DUP1 PUSH1 0x24 PUSH2 0x161 PUSH2 0x15C PUSH2 0xB8 SWAP10 PUSH2 0x358 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST SWAP7 DUP3 DUP9 MSTORE ADD DUP4 DUP8 ADD CALLDATACOPY DUP5 ADD ADD MSTORE PUSH2 0x51D JUMP JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH2 0x1E0 PUSH2 0xBE JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND DUP3 MSTORE SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP3 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 SWAP1 LOG1 DUP2 ISZERO PUSH2 0x271 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xBA JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBA JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x353 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x319 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x353 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6CA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3C8 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY ISZERO PUSH2 0x3C4 JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x42 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73706172656E745570677261646561626C6550726F78793A2061646D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696E2063616E6E6F742066616C6C6261636B20746F2070726F78792074617267 PUSH1 0x64 DUP3 ADD MSTORE PUSH2 0x195D PUSH1 0xF2 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x4C2 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x4BB JUMPI JUMPDEST PUSH2 0x4A6 JUMPI POP POP JUMP JUMPDEST PUSH2 0x4B8 SWAP2 PUSH2 0x4B2 PUSH2 0x58C JUMP JUMPDEST SWAP2 PUSH2 0x5D3 JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH0 PUSH2 0x49E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x4C2 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x6EA PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH0 DUP1 LOG2 DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x584 JUMPI PUSH2 0x4A6 JUMPI POP POP JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x49E JUMP JUMPDEST PUSH2 0x596 PUSH1 0x60 PUSH2 0x32D JUMP JUMPDEST SWAP1 PUSH1 0x27 DUP3 MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP4 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x61A JUMPI PUSH0 DUP2 PUSH2 0x60F SWAP5 PUSH1 0x20 DUP4 SWAP5 MLOAD SWAP3 ADD SWAP1 GAS DELEGATECALL RETURNDATASIZE ISZERO PUSH2 0x612 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x600 PUSH2 0x15C DUP4 PUSH2 0x358 JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x66E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x66E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0x67A JUMPI POP SWAP1 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x68A JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x44 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP2 PUSH1 0x4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0x24 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT INVALID 0xB5 BALANCE 0x27 PUSH9 0x4A568B3173AE13B9F8 0xA6 ADD PUSH15 0x243E63B6E8EE1178D6A717850B5D61 SUB CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220F0 0xC4 TIMESTAMP LOG0 PUSH22 0x2D2C211A4232A9D71497A906B37CB6415D62EFEA601 DUP9 REVERT BLOCKHASH DUP10 0xE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1649:3469:25:-:0;;;;;;;;;-1:-1:-1;1649:3469:25;2853:63:23;1649:3469:25;;2853:63:23;:::i;1649:3469:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;1649:3469:25;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;3842:66:22;2264:10:25;-1:-1:-1;;;;;1649:3469:25;;;2264:25;1649:3469;;4081:5;1649:3469;;;;:::i;:::-;;;;;4081:5;:::i;:::-;1649:3469;;;;;;;;;-1:-1:-1;;;;;1649:3469:25;;;;;;:::o;:::-;;;-1:-1:-1;;1649:3469:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3842:66:22;2264:10:25;-1:-1:-1;;;;;1649:3469:25;;;2264:25;1649:3469;;-1:-1:-1;1649:3469:25;;;;;;4579:48;1649:3469;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;4579:48;:::i;1649:3469::-;;;;;;-1:-1:-1;;1649:3469:25;;;;-1:-1:-1;;;;;;;;;;;3842:66:22;2264:10:25;-1:-1:-1;;;;;1649:3469:25;;;2264:25;1649:3469;;-1:-1:-1;;;;;;;;;;;3842:66:22;1649:3469:25;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;;;;;-1:-1:-1;;1649:3469:25;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;3842:66:22;2264:10:25;-1:-1:-1;;;;;1649:3469:25;;;2264:25;1649:3469;;-1:-1:-1;;;;;;;;;;;3842:66:22;1649:3469:25;;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;;;;;;4688:35:22;;1649:3469:25;4688:35:22;4375:22;;1649:3469:25;;-1:-1:-1;;;;;;1649:3469:25;;-1:-1:-1;;;;;;;;;;;1649:3469:25;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;-1:-1:-1;;1649:3469:25;;;;-1:-1:-1;;;;;;;;;;;3842:66:22;2264:10:25;-1:-1:-1;;;;;1649:3469:25;;;2264:25;1649:3469;;-1:-1:-1;;;;;;;;;;;3842:66:22;1649:3469:25;;-1:-1:-1;;;;;1649:3469:25;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1649:3469:25;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;-1:-1:-1;;1649:3469:25;;;;:::o;2322:110:23:-;-1:-1:-1;;;;;;;;;;;3842:66:22;-1:-1:-1;;;;;1649:3469:25;4980:10;:25;1649:3469;;-1:-1:-1;;;;;;;;;;;3842:66:22;1018:819:23;;;;-1:-1:-1;;;;;1649:3469:25;1018:819:23;;;;;;;;;;;;;;;;;;;;;;;1649:3469:25;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;2183:295:22;1465:19:27;;:23;1649:3469:25;;-1:-1:-1;;;;;;;;;;;1649:3469:25;;-1:-1:-1;;;;;;1649:3469:25;-1:-1:-1;;;;;1649:3469:25;;;;;;;;2015:27:22;-1:-1:-1;;2015:27:22;1649:3469:25;;2364:15:22;;;:28;;;2183:295;2360:112;;2183:295;;:::o;2360:112::-;6684:77:27;1649:3469:25;;;:::i;:::-;6684:77:27;;:::i;:::-;;2183:295:22:o;2364:28::-;;1649:3469:25;2364:28:22;;1649:3469:25;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;2183:295:22;1465:19:27;;:23;1649:3469:25;;-1:-1:-1;;;;;;;;;;;1649:3469:25;;-1:-1:-1;;;;;;1649:3469:25;-1:-1:-1;;;;;1649:3469:25;;;;;;;;2015:27:22;-1:-1:-1;;2015:27:22;1649:3469:25;;2364:15:22;;;:28;;;2360:112;;2183:295;;:::o;2364:28::-;;4622:4:25;2364:28:22;;1649:3469:25;;;;:::i;:::-;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;:::o;6954:387:27:-;;;1465:19;;:23;1649:3469:25;;-1:-1:-1;7241:25:27;7283:51;7241:25;;;;;;;;;;1649:3469:25;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;7241:25:27;1649:3469:25;;;7283:51:27;:::i;:::-;6954:387;:::o;1649:3469:25:-;;;7283:51:27;:::i;1649:3469:25:-;;;-1:-1:-1;;;1649:3469:25;;;;;;;;;;;;;;;;;-1:-1:-1;;;1649:3469:25;;;;;;;7561:742:27;;;;7731:566;;;7758:17;;:::o;7731:566::-;1649:3469:25;;7876:21:27;:17;;8060:154;;;;;;;7872:415;1649:3469:25;;;;;;;;;;;8252:20:27;;;;;;1649:3469:25;;;;;;;;;;;;;;;;7896:1:27;1649:3469:25;;;;;;;;-1:-1:-1;;1649:3469:25;;;8252:20:27;;;","linkReferences":{}},"methodIdentifiers":{"admin()":"f851a440","changeAdmin(address)":"8f283970","implementation()":"5c60da1b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"Address":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212204f495661e4f3618afd13e48261f27a6f085dda5fda3d70168017e8095ec3748b64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F BLOBHASH JUMP PUSH2 0xE4F3 PUSH2 0x8AFD SGT 0xE4 DUP3 PUSH2 0xF27A PUSH16 0x85DDA5FDA3D70168017E8095EC3748B PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"194:8111:27:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea26469706673582212204f495661e4f3618afd13e48261f27a6f085dda5fda3d70168017e8095ec3748b64736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F BLOBHASH JUMP PUSH2 0xE4F3 PUSH2 0x8AFD SGT 0xE4 DUP3 PUSH2 0xF27A PUSH16 0x85DDA5FDA3D70168017E8095EC3748B PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"194:8111:27:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"Context":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39e096c60a6eb1c6a257122d515496bd92d0c6a693a8f07acb6aa4b1263e95d4\",\"dweb:/ipfs/QmPs5trJBacCiSkezP6tpevapuRYWNY6mqSFzsMCJj7e6B\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212202de75ddbaf932bf6cdaabfbc229a7b1a740a2c5d32d01fd7bb2fa5f46cb5639164736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xE7 TSTORE 0xDB 0xAF SWAP4 0x2B 0xF6 0xCD 0xAA 0xBF 0xBC 0x22 SWAP11 PUSH28 0x1A740A2C5D32D01FD7BB2FA5F46CB5639164736F6C634300081C0033 ","sourceMap":"1279:1391:29:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea26469706673582212202de75ddbaf932bf6cdaabfbc229a7b1a740a2c5d32d01fd7bb2fa5f46cb5639164736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xE7 TSTORE 0xDB 0xAF SWAP4 0x2B 0xF6 0xCD 0xAA 0xBF 0xBC 0x22 SWAP11 PUSH28 0x1A740A2C5D32D01FD7BB2FA5F46CB5639164736F6C634300081C0033 ","sourceMap":"1279:1391:29:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"Strings":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220b45970367f7525bbf90f5469df5532020a4b486db21ea1a5d82b61f69392030464736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 MSIZE PUSH17 0x367F7525BBF90F5469DF5532020A4B486D 0xB2 0x1E LOG1 0xA5 0xD8 0x2B PUSH2 0xF693 SWAP3 SUB DIV PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"161:2235:30:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220b45970367f7525bbf90f5469df5532020a4b486db21ea1a5d82b61f69392030464736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 MSIZE PUSH17 0x367F7525BBF90F5469DF5532020A4B486D 0xB2 0x1E LOG1 0xA5 0xD8 0x2B PUSH2 0xF693 SWAP3 SUB DIV PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"161:2235:30:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol":{"IERC1271Upgradeable":{"abi":[{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"magicValue","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":\"IERC1271Upgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":{\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d92614db0b346b756af8ba9bd0098db81b031026361635fb4f55a420254637d\",\"dweb:/ipfs/QmVviVD57zX54ny1zvVsksfYF9RantBwVyJBTdHqPywFuP\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"isValidSignature(bytes32,bytes)":"1626ba7e"}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220d1a2fc470da6262dc61e0ebd59c8fed9fb79ae673527d3590d5f0948fd9d9d5464736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 LOG2 0xFC SELFBALANCE 0xD 0xA6 0x26 0x2D 0xC6 0x1E 0xE 0xBD MSIZE 0xC8 INVALID 0xD9 0xFB PUSH26 0xAE673527D3590D5F0948FD9D9D5464736F6C634300081C003300 ","sourceMap":"194:7172:11:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220d1a2fc470da6262dc61e0ebd59c8fed9fb79ae673527d3590d5f0948fd9d9d5464736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 LOG2 0xFC SELFBALANCE 0xD 0xA6 0x26 0x2D 0xC6 0x1E 0xE 0xBD MSIZE 0xC8 INVALID 0xD9 0xFB PUSH26 0xAE673527D3590D5F0948FD9D9D5464736F6C634300081C003300 ","sourceMap":"194:7172:11:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol":{"CheckpointsUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library defines the `History` struct, for checkpointing values as they change at different points in time, and later looking up past values by block number. See {Votes} as an example. To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new checkpoint for the current transaction block using the {push} function. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":\"CheckpointsUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":{\"keccak256\":\"0x7fb4716864bc9693785f07ce15f325a44413ad5d2d5685852a9e6112927abd60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2abe805bc615c15daea179f3ff3e3b890f9c0d5ec18d0bb8fad03ab128157ee3\",\"dweb:/ipfs/Qma4UizH7DhTeDfGfkhFFKLnU6p8U9cmodTbgTdRzeFoXX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122089aff699b27494be8e8a836b0c3b6307dfbdfe9bdc38c74cae027a4c2ec48dd964736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xAF 0xF6 SWAP10 0xB2 PUSH21 0x94BE8E8A836B0C3B6307DFBDFE9BDC38C74CAE027A 0x4C 0x2E 0xC4 DUP14 0xD9 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"641:2490:12:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea264697066735822122089aff699b27494be8e8a836b0c3b6307dfbdfe9bdc38c74cae027a4c2ec48dd964736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xAF 0xF6 SWAP10 0xB2 PUSH21 0x94BE8E8A836B0C3B6307DFBDFE9BDC38C74CAE027A 0x4C 0x2E 0xC4 DUP14 0xD9 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"641:2490:12:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220d75a9a5fa86a0edcd9ac45858d793763176020cb9808d50fd8634837c7663f0564736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 GAS SWAP11 PUSH0 0xA8 PUSH11 0xEDCD9AC45858D79376317 PUSH1 0x20 0xCB SWAP9 ADDMOD 0xD5 0xF 0xD8 PUSH4 0x4837C766 EXTCODEHASH SDIV PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"161:2246:14:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220d75a9a5fa86a0edcd9ac45858d793763176020cb9808d50fd8634837c7663f0564736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 GAS SWAP11 PUSH0 0xA8 PUSH11 0xEDCD9AC45858D79376317 PUSH1 0x20 0xCB SWAP9 ADDMOD 0xD5 0xF 0xD8 PUSH4 0x4837C766 EXTCODEHASH SDIV PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"161:2246:14:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a459d8907c5fe73d70b4c522e48127b13b9aaa29a223670e928a2a5e5e4c8f8\",\"dweb:/ipfs/QmcwBnMVrajEBgj2i1saNXnQ6ytHQdnpQF978E86EuhvtX\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e19333c0ecbb945c5e63ebeb6be4094ab549c0bd1cb841567509091bb591435464736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 SWAP4 CALLER 0xC0 0xEC 0xBB SWAP5 TLOAD MCOPY PUSH4 0xEBEB6BE4 MULMOD BLOBBASEFEE 0xB5 BLOBHASH 0xC0 0xBD SHR 0xB8 COINBASE JUMP PUSH22 0x9091BB591435464736F6C634300081C003300000000 ","sourceMap":"380:9040:15:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220e19333c0ecbb945c5e63ebeb6be4094ab549c0bd1cb841567509091bb591435464736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 SWAP4 CALLER 0xC0 0xEC 0xBB SWAP5 TLOAD MCOPY PUSH4 0xEBEB6BE4 MULMOD BLOBBASEFEE 0xB5 BLOBHASH 0xC0 0xBD SHR 0xB8 COINBASE JUMP PUSH22 0x9091BB591435464736F6C634300081C003300000000 ","sourceMap":"380:9040:15:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol":{"SignatureCheckerUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like Argent and Gnosis Safe. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\":\"SignatureCheckerUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":{\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d92614db0b346b756af8ba9bd0098db81b031026361635fb4f55a420254637d\",\"dweb:/ipfs/QmVviVD57zX54ny1zvVsksfYF9RantBwVyJBTdHqPywFuP\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a459d8907c5fe73d70b4c522e48127b13b9aaa29a223670e928a2a5e5e4c8f8\",\"dweb:/ipfs/QmcwBnMVrajEBgj2i1saNXnQ6ytHQdnpQF978E86EuhvtX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"keccak256\":\"0xb19a57535ad6c6d773f61c1e8f8cc190fa35e12bfadf3743092537c7695fd96a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79811c8c7aabd4fae5ff3021ae67688fc6f6a820f784676bf4b8e41c0c71577d\",\"dweb:/ipfs/QmSo7DdJSzx4U5xvLPnCLNn2SFBPin8dHxYnJrrwxEYQje\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220a9b66ae94b3c29de6cba62471de2cfc29af833cb7a3125b68ebd336d673ffc7b64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB6 PUSH11 0xE94B3C29DE6CBA62471DE2 0xCF 0xC2 SWAP11 0xF8 CALLER 0xCB PUSH27 0x3125B68EBD336D673FFC7B64736F6C634300081C00330000000000 ","sourceMap":"564:1209:16:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220a9b66ae94b3c29de6cba62471de2cfc29af833cb7a3125b68ebd336d673ffc7b64736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB6 PUSH11 0xE94B3C29DE6CBA62471DE2 0xCF 0xC2 SWAP11 0xF8 CALLER 0xCB PUSH27 0x3125B68EBD336D673FFC7B64736F6C634300081C00330000000000 ","sourceMap":"564:1209:16:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e1a211906e017942910c2b6f400d4309114995d0d59e83ec247ea53eaf0c50f764736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 LOG2 GT SWAP1 PUSH15 0x17942910C2B6F400D4309114995D0 0xD5 SWAP15 DUP4 0xEC 0x24 PUSH31 0xA53EAF0C50F764736F6C634300081C00330000000000000000000000000000 ","sourceMap":"202:8635:17:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220e1a211906e017942910c2b6f400d4309114995d0d59e83ec247ea53eaf0c50f764736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 LOG2 GT SWAP1 PUSH15 0x17942910C2B6F400D4309114995D0 0xD5 SWAP15 DUP4 0xEC 0x24 PUSH31 0xA53EAF0C50F764736F6C634300081C00330000000000000000000000000000 ","sourceMap":"202:8635:17:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol":{"SafeCastUpgradeable":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":\"SafeCastUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220517d7f1c496689b07d723f0ff11064ac6f9d3c12a01199449a596216131e744664736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH30 0x7F1C496689B07D723F0FF11064AC6F9D3C12A01199449A596216131E7446 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"842:34696:18:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"5f80fdfea2646970667358221220517d7f1c496689b07d723f0ff11064ac6f9d3c12a01199449a596216131e744664736f6c634300081c0033","opcodes":"PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH30 0x7F1C496689B07D723F0FF11064AC6F9D3C12A01199449A596216131E7446 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"842:34696:18:-:0;;","linkReferences":{}}}}},"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol":{"ECDSAStakeRegistryEventsAndErrors":{"abi":[{"type":"event","name":"MinimumWeightUpdated","inputs":[{"name":"_old","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"_new","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorDeregistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorWeightUpdated","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"oldWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"QuorumUpdated","inputs":[{"name":"_old","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]},{"name":"_new","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]}],"anonymous":false},{"type":"event","name":"SigningKeyUpdate","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"updateBlock","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"newSigningKey","type":"address","indexed":true,"internalType":"address"},{"name":"oldSigningKey","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ThresholdWeightUpdated","inputs":[{"name":"_thresholdWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TotalWeightUpdated","inputs":[{"name":"oldTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdateMinimumWeight","inputs":[{"name":"oldMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InsufficientSignedStake","inputs":[]},{"type":"error","name":"InsufficientWeight","inputs":[]},{"type":"error","name":"InvalidLength","inputs":[]},{"type":"error","name":"InvalidQuorum","inputs":[]},{"type":"error","name":"InvalidReferenceBlock","inputs":[]},{"type":"error","name":"InvalidSignature","inputs":[]},{"type":"error","name":"InvalidSignedWeight","inputs":[]},{"type":"error","name":"InvalidThreshold","inputs":[]},{"type":"error","name":"LengthMismatch","inputs":[]},{"type":"error","name":"MustUpdateAllOperators","inputs":[]},{"type":"error","name":"NotSorted","inputs":[]},{"type":"error","name":"OperatorAlreadyRegistered","inputs":[]},{"type":"error","name":"OperatorNotRegistered","inputs":[]}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientSignedStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferenceBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignedWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustUpdateAllOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"MinimumWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"OperatorWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_old\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_new\",\"type\":\"tuple\"}],\"name\":\"QuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updateBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningKey\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSigningKey\",\"type\":\"address\"}],\"name\":\"SigningKeyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_thresholdWeight\",\"type\":\"uint256\"}],\"name\":\"ThresholdWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalWeight\",\"type\":\"uint256\"}],\"name\":\"TotalWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumWeight\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumWeight\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"MinimumWeightUpdated(uint256,uint256)\":{\"params\":{\"_new\":\"The new minimumWeight\",\"_old\":\"The previous minimum weight\"}},\"OperatorDeregistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the deregistered operator\"}},\"OperatorRegistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the registered operator\"}},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"params\":{\"_operator\":\"The address of the operator updated\",\"newWeight\":\"The operator's weight after the update\",\"oldWeight\":\"The operator's weight before the update\"}},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"params\":{\"_new\":\"The new quorum configuration\",\"_old\":\"The previous quorum configuration\"}},\"SigningKeyUpdate(address,uint256,address,address)\":{\"params\":{\"newSigningKey\":\"The operator's signing key after the update\",\"oldSigningKey\":\"The operator's signing key before the update\",\"operator\":\"The address of the operator whose signing key was updated\",\"updateBlock\":\"The block number at which the signing key was updated\"}},\"TotalWeightUpdated(uint256,uint256)\":{\"params\":{\"newTotalWeight\":\"The total weight after the update\",\"oldTotalWeight\":\"The total weight before the update\"}},\"UpdateMinimumWeight(uint256,uint256)\":{\"params\":{\"newMinimumWeight\":\"The updated weight\",\"oldMinimumWeight\":\"The previous weight\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientSignedStake()\":[{\"notice\":\"Indicates the total signed stake fails to meet the required threshold.\"}],\"InsufficientWeight()\":[{\"notice\":\"Indicates an individual signer's weight fails to meet the required threshold.\"}],\"InvalidLength()\":[{\"notice\":\"Indicates encountering an invalid length for the signers or signatures array.\"}],\"InvalidQuorum()\":[{\"notice\":\"Indicates the quorum is invalid\"}],\"InvalidReferenceBlock()\":[{\"notice\":\"Reference blocks must be for blocks that have already been confirmed\"}],\"InvalidSignature()\":[{\"notice\":\"Indicates encountering an invalid signature.\"}],\"InvalidSignedWeight()\":[{\"notice\":\"Indicates operator weights were out of sync and the signed weight exceed the total\"}],\"InvalidThreshold()\":[{\"notice\":\"Thrown when the threshold update is greater than BPS\"}],\"LengthMismatch()\":[{\"notice\":\"Indicates when the lengths of the signers array and signatures array do not match.\"}],\"MustUpdateAllOperators()\":[{\"notice\":\"Thrown when missing operators in an update\"}],\"NotSorted()\":[{\"notice\":\"Indicates the system finds a list of items unsorted\"}],\"OperatorAlreadyRegistered()\":[{\"notice\":\"Thrown when registering an already registered operator\"}],\"OperatorNotRegistered()\":[{\"notice\":\"Thrown when de-registering or updating the stake for an unregisted operator\"}]},\"events\":{\"MinimumWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the weight to join the operator set updates\"},\"OperatorDeregistered(address,address)\":{\"notice\":\"Emitted when the system deregisters an operator\"},\"OperatorRegistered(address,address)\":{\"notice\":\"Emitted when the system registers an operator\"},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when the system updates an operator's weight\"},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"notice\":\"Emitted when the system updates the quorum\"},\"SigningKeyUpdate(address,uint256,address,address)\":{\"notice\":\"Emitted when an operator's signing key is updated\"},\"ThresholdWeightUpdated(uint256)\":{\"notice\":\"Emits when setting a new threshold weight.\"},\"TotalWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the system updates the total weight\"},\"UpdateMinimumWeight(uint256,uint256)\":{\"notice\":\"Emitted when the weight required to be an operator changes\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":\"ECDSAStakeRegistryEventsAndErrors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":{\"keccak256\":\"0x87d62369932af21f32ea3c66d3238e6b65fd90a00bfb537a639189f4d8ceb7dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6951c38bc040fdb1f35e117390a1936543974e062fcc519300365a68c800c88d\",\"dweb:/ipfs/QmVPjxkL1bLaA6EtthcoerTaMjAmJx8Lv1hchALEkNMfDH\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}},"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol":{"IRegistry":{"abi":[{"type":"function","name":"registryCoordinator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Minimal interface for a `Registry`-type contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-serviceFunctions related to the registration process itself have been intentionally excluded because their function signatures may vary significantly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"registryCoordinator()":"6d14a987"}}}},"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol":{"IServiceManager":{"abi":[{"type":"function","name":"avsDirectory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createAVSRewardsSubmission","inputs":[{"name":"rewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createOperatorDirectedAVSRewardsSubmission","inputs":[{"name":"operatorDirectedRewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"operatorRewards","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorReward[]","components":[{"name":"operator","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"},{"name":"description","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperatorFromAVS","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getOperatorRestakedStrategies","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getRestakeableStrategies","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"registerOperatorToAVS","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setClaimerFor","inputs":[{"name":"claimer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAVSMetadataURI","inputs":[{"name":"_metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"RewardsInitiatorUpdated","inputs":[{"name":"prevRewardsInitiator","type":"address","indexed":false,"internalType":"address"},{"name":"newRewardsInitiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevRewardsInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardsInitiator\",\"type\":\"address\"}],\"name\":\"RewardsInitiatorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"avsDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorReward[]\",\"name\":\"operatorRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\",\"name\":\"operatorDirectedRewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createOperatorDirectedAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorRestakedStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakeableStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"operatorSignature\",\"type\":\"tuple\"}],\"name\":\"registerOperatorToAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateAVSMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractStrategies must be in ascending order of addresses to check for duplicatesThis function will revert if the `rewardsSubmission` is malformed, e.g. if the `strategies` and `weights` arrays are of non-equal lengths\",\"params\":{\"rewardsSubmissions\":\"The rewards submissions being created\"}},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractThis contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.Strategies must be in ascending order of addresses to check for duplicatesOperators must be in ascending order of addresses to check for duplicates.This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\",\"params\":{\"operatorDirectedRewardsSubmissions\":\"The operator-directed rewards submissions being created\"}},\"deregisterOperatorFromAVS(address)\":{\"params\":{\"operator\":\"The address of the operator to deregister.\"}},\"getOperatorRestakedStrategies(address)\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness       of each element in the returned array. The off-chain service should do that validation separately\",\"params\":{\"operator\":\"The address of the operator to get restaked strategies for\"}},\"getRestakeableStrategies()\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on uniqueness of each element in the returned array.       The off-chain service should do that validation separately\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorSignature\":\"The signature, salt, and expiry of the operator's signature.\"}},\"setClaimerFor(address)\":{\"details\":\"Only callabe by the owner.\",\"params\":{\"claimer\":\"The address of the entity that can call `processClaim` on behalf of the earner\"}},\"updateAVSMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"is the metadata URI for the AVS\"}}},\"title\":\"Minimal interface for a ServiceManager-type contract that forms the single point for an AVS to push updates to EigenLayer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avsDirectory()\":{\"notice\":\"Returns the EigenLayer AVSDirectory contract.\"},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the set of stakers delegated to operators who are registered to this `avs`\"},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"notice\":\"Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and set of stakers delegated to operators who are registered to the `avs`.\"},\"deregisterOperatorFromAVS(address)\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\"},\"getOperatorRestakedStrategies(address)\":{\"notice\":\"Returns the list of strategies that the operator has potentially restaked on the AVS\"},\"getRestakeableStrategies()\":{\"notice\":\"Returns the list of strategies that the AVS supports for restaking\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\"},\"setClaimerFor(address)\":{\"notice\":\"Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\"},\"updateAVSMetadataURI(string)\":{\"notice\":\"Metadata should follow the format outlined by this example. { \\\"name\\\": \\\"EigenLabs AVS 1\\\", \\\"website\\\": \\\"https://www.eigenlayer.xyz/\\\", \\\"description\\\": \\\"This is my 1st AVS\\\", \\\"logo\\\": \\\"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\\\", \\\"twitter\\\": \\\"https://twitter.com/eigenlayer\\\" }Updates the metadata URI for the AVS\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\":\"IServiceManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":{\"keccak256\":\"0x39529942c9f3bab419e0570e3c51c27b49803fb0b3821a0fd06f47ab8835ed81\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://da46171725cfe3dd23c0a4f58abf2565eb7db619495fa4fb8bab55aaff9d9c7a\",\"dweb:/ipfs/QmeEVMVWF4peGBEK72rcedp6sWwhuYcVj8q728zrnTzZ6A\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\":{\"keccak256\":\"0x5e07f7bdcdf5baaadd43d86fee80036edffbe893f3396cb762eaae3f56f4cb89\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d990a5a16e8f0cfb313784e21583d0fd7cf05f5fe73796571aad30889baf27c\",\"dweb:/ipfs/QmPHQ3cTNVD7NxSiZ5xjSuLAkZyczFhckSuhwW9UNNgr6i\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":{\"keccak256\":\"0x6c66bc2b0b2f5aabd2b90ca02d5b6696fc02d75a53567b16d8d81dd956fd7b1b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://284f9cc3f8eade3b022ab8c527aaa35bdd5e0355607abf6d5ef66fb2c9ce90cd\",\"dweb:/ipfs/QmYi856BQNY6G2FTqAGY9qzWPp27QmiytwnfNtfwPN7Cqm\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"avsDirectory()":"6b3aa72e","createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])":"fce36c7d","createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])":"a20b99bf","deregisterOperatorFromAVS(address)":"a364f4da","getOperatorRestakedStrategies(address)":"33cfb7b7","getRestakeableStrategies()":"e481af9d","registerOperatorToAVS(address,(bytes,bytes32,uint256))":"9926ee7d","setClaimerFor(address)":"a0169ddd","updateAVSMetadataURI(string)":"a98fb355"}}}},"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol":{"IServiceManagerUI":{"abi":[{"type":"function","name":"avsDirectory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"deregisterOperatorFromAVS","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getOperatorRestakedStrategies","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getRestakeableStrategies","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"registerOperatorToAVS","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAVSMetadataURI","inputs":[{"name":"_metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"avsDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorRestakedStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakeableStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"operatorSignature\",\"type\":\"tuple\"}],\"name\":\"registerOperatorToAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateAVSMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"deregisterOperatorFromAVS(address)\":{\"params\":{\"operator\":\"The address of the operator to deregister.\"}},\"getOperatorRestakedStrategies(address)\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness       of each element in the returned array. The off-chain service should do that validation separately\",\"params\":{\"operator\":\"The address of the operator to get restaked strategies for\"}},\"getRestakeableStrategies()\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on uniqueness of each element in the returned array.       The off-chain service should do that validation separately\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorSignature\":\"The signature, salt, and expiry of the operator's signature.\"}},\"updateAVSMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"is the metadata URI for the AVS\"}}},\"title\":\"Minimal interface for a ServiceManager-type contract that AVS ServiceManager contracts must implement for eigenlabs to be able to index their data on the AVS marketplace frontend.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avsDirectory()\":{\"notice\":\"Returns the EigenLayer AVSDirectory contract.\"},\"deregisterOperatorFromAVS(address)\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\"},\"getOperatorRestakedStrategies(address)\":{\"notice\":\"Returns the list of strategies that the operator has potentially restaked on the AVS\"},\"getRestakeableStrategies()\":{\"notice\":\"Returns the list of strategies that the AVS supports for restaking\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\"},\"updateAVSMetadataURI(string)\":{\"notice\":\"Metadata should follow the format outlined by this example. { \\\"name\\\": \\\"EigenLabs AVS 1\\\", \\\"website\\\": \\\"https://www.eigenlayer.xyz/\\\", \\\"description\\\": \\\"This is my 1st AVS\\\", \\\"logo\\\": \\\"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\\\", \\\"twitter\\\": \\\"https://twitter.com/eigenlayer\\\" }Updates the metadata URI for the AVS\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":\"IServiceManagerUI\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":{\"keccak256\":\"0x6c66bc2b0b2f5aabd2b90ca02d5b6696fc02d75a53567b16d8d81dd956fd7b1b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://284f9cc3f8eade3b022ab8c527aaa35bdd5e0355607abf6d5ef66fb2c9ce90cd\",\"dweb:/ipfs/QmYi856BQNY6G2FTqAGY9qzWPp27QmiytwnfNtfwPN7Cqm\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"avsDirectory()":"6b3aa72e","deregisterOperatorFromAVS(address)":"a364f4da","getOperatorRestakedStrategies(address)":"33cfb7b7","getRestakeableStrategies()":"e481af9d","registerOperatorToAVS(address,(bytes,bytes32,uint256))":"9926ee7d","updateAVSMetadataURI(string)":"a98fb355"}}}},"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol":{"IStakeRegistry":{"abi":[{"type":"function","name":"WEIGHTING_DIVISOR","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"addStrategies","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistry.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IDelegationManager"}],"stateMutability":"view"},{"type":"function","name":"deregisterOperator","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getCurrentStake","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getCurrentTotalStake","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getLatestStakeUpdate","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getStakeAtBlockNumber","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getStakeAtBlockNumberAndIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getStakeHistory","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IStakeRegistry.StakeUpdate[]","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getStakeUpdateAtIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getStakeUpdateIndexAtBlockNumber","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeAtBlockNumberFromIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeHistoryLength","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeIndicesAtBlockNumber","inputs":[{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint32[]","internalType":"uint32[]"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeUpdateAtIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"initializeQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"minimumStake","type":"uint96","internalType":"uint96"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistry.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"minimumStakeForQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"modifyStrategyParams","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"strategyIndices","type":"uint256[]","internalType":"uint256[]"},{"name":"newMultipliers","type":"uint96[]","internalType":"uint96[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint96[]","internalType":"uint96[]"},{"name":"","type":"uint96[]","internalType":"uint96[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registryCoordinator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"removeStrategies","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"indicesToRemove","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"strategyParamsByIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StrategyParams","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"strategyParamsLength","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateOperatorStake","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint192","internalType":"uint192"}],"stateMutability":"nonpayable"},{"type":"function","name":"weightOfOperatorForQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"event","name":"MinimumStakeForQuorumUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"minimumStake","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"OperatorStakeUpdate","inputs":[{"name":"operatorId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"stake","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"QuorumCreated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"StrategyAddedToQuorum","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"}],"anonymous":false},{"type":"event","name":"StrategyMultiplierUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"multiplier","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StrategyRemovedFromQuorum","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeForQuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"name\":\"OperatorStakeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"StrategyMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromQuorum\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEIGHTING_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentTotalStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getLatestStakeUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeAtBlockNumberAndIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getStakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getTotalStakeHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"initializeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"minimumStakeForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"newMultipliers\",\"type\":\"uint96[]\"}],\"name\":\"modifyStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"indicesToRemove\",\"type\":\"uint256[]\"}],\"name\":\"removeStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"strategyParamsByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"strategyParamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"updateOperatorStake\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"weightOfOperatorForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"deregisterOperator(bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\",\"params\":{\"operatorId\":\"The id of the operator to deregister.\",\"quorumNumbers\":\"The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\"}},\"getCurrentStake(bytes32,uint8)\":{\"details\":\"Function returns weight of **0** in the event that the operator has no stake history\"},\"getCurrentTotalStake(uint8)\":{\"details\":\"Will revert if `_totalStakeHistory[quorumNumber]` is empty.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"details\":\"Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeHistory(bytes32,uint8)\":{\"params\":{\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.\",\"params\":{\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"params\":{\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"params\":{\"newMultipliers\":\"are the new multipliers for the strategies\",\"quorumNumber\":\"is the quorum number to change the strategy for\",\"strategyIndices\":\"are the indices of the strategies to change\"}},\"registerOperator(address,bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered\",\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorId\":\"The id of the operator to register.\",\"quorumNumbers\":\"The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\"},\"returns\":{\"_0\":\"The operator's current stake for each quorum, and the total stake for each quorum\"}},\"removeStrategies(uint8,uint256[])\":{\"details\":\"higher indices should be *first* in the list of @param indicesToRemove, since otherwise the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\",\"params\":{\"quorumNumber\":\".\"}},\"updateOperatorStake(address,bytes32,bytes)\":{\"returns\":{\"_0\":\"A bitmap of quorums where the operator no longer meets the minimum stake and should be deregistered.\"}},\"weightOfOperatorForQuorum(uint8,address)\":{\"details\":\"reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\"}},\"title\":\"Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\",\"version\":1},\"userdoc\":{\"events\":{\"MinimumStakeForQuorumUpdated(uint8,uint96)\":{\"notice\":\"emitted when the minimum stake for a quorum is updated\"},\"OperatorStakeUpdate(bytes32,uint8,uint96)\":{\"notice\":\"emitted whenever the stake of `operator` is updated\"},\"QuorumCreated(uint8)\":{\"notice\":\"emitted when a new quorum is created\"},\"StrategyAddedToQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\"},\"StrategyMultiplierUpdated(uint8,address,uint256)\":{\"notice\":\"emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\"},\"StrategyRemovedFromQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\"}},\"kind\":\"user\",\"methods\":{\"WEIGHTING_DIVISOR()\":{\"notice\":\"Constant used as a divisor in calculating weights.\"},\"addStrategies(uint8,(address,uint96)[])\":{\"notice\":\"Adds new strategies and the associated multipliers to the @param quorumNumber.\"},\"delegation()\":{\"notice\":\"Returns the EigenLayer delegation manager contract.\"},\"deregisterOperator(bytes32,bytes)\":{\"notice\":\"Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\"},\"getCurrentStake(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\"},\"getCurrentTotalStake(uint8)\":{\"notice\":\"Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for a certain quorum\"},\"getStakeAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"notice\":\"Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry  corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\"},\"getStakeHistory(bytes32,uint8)\":{\"notice\":\"Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"notice\":\"Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\"},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"notice\":\"Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the  `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`.  Reverts otherwise.\"},\"getTotalStakeIndicesAtBlockNumber(uint32,bytes)\":{\"notice\":\"Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\"},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"notice\":\"Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\"},\"initializeQuorum(uint8,uint96,(address,uint96)[])\":{\"notice\":\"Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\"},\"minimumStakeForQuorum(uint8)\":{\"notice\":\"In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\"},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"notice\":\"This function is used for modifying the weights of strategies that are already in the mapping strategyParams for a specific\"},\"registerOperator(address,bytes32,bytes)\":{\"notice\":\"Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\"},\"removeStrategies(uint8,uint256[])\":{\"notice\":\"This function is used for removing strategies and their associated weights from the\"},\"strategyParamsByIndex(uint8,uint256)\":{\"notice\":\"Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\"},\"strategyParamsLength(uint8)\":{\"notice\":\"Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\"},\"updateOperatorStake(address,bytes32,bytes)\":{\"notice\":\"Called by the registry coordinator to update an operator's stake for one or more quorums. If the operator no longer has the minimum stake required for a quorum, they are added to the\"},\"weightOfOperatorForQuorum(uint8,address)\":{\"notice\":\"This function computes the total weight of the @param operator in the quorum @param quorumNumber.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":\"IStakeRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0x1b8b4d757c1b804bc4cf6fbbf8bf8f89ebdeb30a31014751fe7d01deb9d513d4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://984bf2777b898ed187d28997f9783f5c293a1a1848e3e9aa470ce9183d454c97\",\"dweb:/ipfs/Qme3aTpBrkLu8wYHFMZbCfhXHoZ1M6SpXkeC237T9BuU5B\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"WEIGHTING_DIVISOR()":"5e5a6775","addStrategies(uint8,(address,uint96)[])":"c601527d","delegation()":"df5cf723","deregisterOperator(bytes32,bytes)":"bd29b8cd","getCurrentStake(bytes32,uint8)":"5401ed27","getCurrentTotalStake(uint8)":"d5eccc05","getLatestStakeUpdate(bytes32,uint8)":"f851e198","getStakeAtBlockNumber(bytes32,uint8,uint32)":"fa28c627","getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)":"f2be94ae","getStakeHistory(bytes32,uint8)":"2cd95940","getStakeUpdateAtIndex(uint8,bytes32,uint256)":"ac6bfb03","getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)":"dd9846b9","getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)":"c8294c56","getTotalStakeHistoryLength(uint8)":"0491b41c","getTotalStakeIndicesAtBlockNumber(uint32,bytes)":"81c07502","getTotalStakeUpdateAtIndex(uint8,uint256)":"b6904b78","initializeQuorum(uint8,uint96,(address,uint96)[])":"ff694a77","minimumStakeForQuorum(uint8)":"c46778a5","modifyStrategyParams(uint8,uint256[],uint96[])":"20b66298","registerOperator(address,bytes32,bytes)":"25504777","registryCoordinator()":"6d14a987","removeStrategies(uint8,uint256[])":"5f1f2d77","strategyParamsByIndex(uint8,uint256)":"adc804da","strategyParamsLength(uint8)":"3ca5a5f5","updateOperatorStake(address,bytes32,bytes)":"66acfefe","weightOfOperatorForQuorum(uint8,address)":"1f9b74e0"}}}},"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol":{"ECDSAServiceManagerBase":{"abi":[{"type":"function","name":"avsDirectory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createAVSRewardsSubmission","inputs":[{"name":"rewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.RewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createOperatorDirectedAVSRewardsSubmission","inputs":[{"name":"operatorDirectedRewardsSubmissions","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]","components":[{"name":"strategiesAndMultipliers","type":"tuple[]","internalType":"struct IRewardsCoordinator.StrategyAndMultiplier[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"operatorRewards","type":"tuple[]","internalType":"struct IRewardsCoordinator.OperatorReward[]","components":[{"name":"operator","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"startTimestamp","type":"uint32","internalType":"uint32"},{"name":"duration","type":"uint32","internalType":"uint32"},{"name":"description","type":"string","internalType":"string"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperatorFromAVS","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getOperatorRestakedStrategies","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getRestakeableStrategies","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"registerOperatorToAVS","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"rewardsInitiator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"setClaimerFor","inputs":[{"name":"claimer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRewardsInitiator","inputs":[{"name":"newRewardsInitiator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stakeRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateAVSMetadataURI","inputs":[{"name":"_metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RewardsInitiatorUpdated","inputs":[{"name":"prevRewardsInitiator","type":"address","indexed":false,"internalType":"address"},{"name":"newRewardsInitiator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevRewardsInitiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardsInitiator\",\"type\":\"address\"}],\"name\":\"RewardsInitiatorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"avsDirectory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"internalType\":\"struct IRewardsCoordinator.RewardsSubmission[]\",\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IRewardsCoordinator.StrategyAndMultiplier[]\",\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorReward[]\",\"name\":\"operatorRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]\",\"name\":\"operatorDirectedRewardsSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"createOperatorDirectedAVSRewardsSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorRestakedStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakeableStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"operatorSignature\",\"type\":\"tuple\"}],\"name\":\"registerOperatorToAVS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardsInitiator\",\"type\":\"address\"}],\"name\":\"setRewardsInitiator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateAVSMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor for ECDSAServiceManagerBase, initializing immutable contract addresses and disabling initializers.\",\"params\":{\"_avsDirectory\":\"The address of the AVS directory contract, managing AVS-related data for registered operators.\",\"_delegationManager\":\"The address of the delegation manager contract, managing staker delegations to operators.\",\"_rewardsCoordinator\":\"The address of the rewards coordinator contract, handling rewards distributions.\",\"_stakeRegistry\":\"The address of the stake registry contract, managing registration and stake recording.\"}},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractStrategies must be in ascending order of addresses to check for duplicatesThis function will revert if the `rewardsSubmission` is malformed, e.g. if the `strategies` and `weights` arrays are of non-equal lengths\",\"params\":{\"rewardsSubmissions\":\"The rewards submissions being created\"}},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"details\":\"Only callabe by the permissioned rewardsInitiator addressThe duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`The tokens are sent to the `RewardsCoordinator` contractThis contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.Strategies must be in ascending order of addresses to check for duplicatesOperators must be in ascending order of addresses to check for duplicates.This function will revert if the `operatorDirectedRewardsSubmissions` is malformed.\",\"params\":{\"operatorDirectedRewardsSubmissions\":\"The operator-directed rewards submissions being created\"}},\"deregisterOperatorFromAVS(address)\":{\"params\":{\"operator\":\"The address of the operator to deregister.\"}},\"getOperatorRestakedStrategies(address)\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness       of each element in the returned array. The off-chain service should do that validation separately\",\"params\":{\"operator\":\"The address of the operator to get restaked strategies for\"}},\"getRestakeableStrategies()\":{\"details\":\"This function is intended to be called off-chainNo guarantee is made on uniqueness of each element in the returned array.       The off-chain service should do that validation separately\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorSignature\":\"The signature, salt, and expiry of the operator's signature.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setClaimerFor(address)\":{\"details\":\"Only callabe by the owner.\",\"params\":{\"claimer\":\"The address of the entity that can call `processClaim` on behalf of the earner\"}},\"setRewardsInitiator(address)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"newRewardsInitiator\":\"The new rewards initiator address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAVSMetadataURI(string)\":{\"params\":{\"_metadataURI\":\"is the metadata URI for the AVS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"avsDirectory()\":{\"notice\":\"Address of the AVS directory contract, which manages AVS-related data for registered operators.\"},\"createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])\":{\"notice\":\"Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the set of stakers delegated to operators who are registered to this `avs`\"},\"createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])\":{\"notice\":\"Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and set of stakers delegated to operators who are registered to the `avs`.\"},\"deregisterOperatorFromAVS(address)\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\"},\"getOperatorRestakedStrategies(address)\":{\"notice\":\"Returns the list of strategies that the operator has potentially restaked on the AVS\"},\"getRestakeableStrategies()\":{\"notice\":\"Returns the list of strategies that the AVS supports for restaking\"},\"registerOperatorToAVS(address,(bytes,bytes32,uint256))\":{\"notice\":\"Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\"},\"rewardsInitiator()\":{\"notice\":\"Address of the rewards initiator, which is allowed to create AVS rewards submissions.\"},\"setClaimerFor(address)\":{\"notice\":\"Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\"},\"setRewardsInitiator(address)\":{\"notice\":\"Sets the rewards initiator address.\"},\"stakeRegistry()\":{\"notice\":\"Address of the stake registry contract, which manages registration and stake recording.\"},\"updateAVSMetadataURI(string)\":{\"notice\":\"Metadata should follow the format outlined by this example. { \\\"name\\\": \\\"EigenLabs AVS 1\\\", \\\"website\\\": \\\"https://www.eigenlayer.xyz/\\\", \\\"description\\\": \\\"This is my 1st AVS\\\", \\\"logo\\\": \\\"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\\\", \\\"twitter\\\": \\\"https://twitter.com/eigenlayer\\\" }Updates the metadata URI for the AVS\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol\":\"ECDSAServiceManagerBase\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\":{\"keccak256\":\"0x19e6056ed89c88687576965f58dfa642276174a5037d6dc0c58a44cabcae6665\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ee010c1f73b3cf85fe7c67d21f83845cc5a86d56017fc2c00862799b45fe998b\",\"dweb:/ipfs/Qmch2rmrHQgtKSwe78JWtPw3xK2km1aY52UxNyCV7xc1cv\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":{\"keccak256\":\"0x39529942c9f3bab419e0570e3c51c27b49803fb0b3821a0fd06f47ab8835ed81\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://da46171725cfe3dd23c0a4f58abf2565eb7db619495fa4fb8bab55aaff9d9c7a\",\"dweb:/ipfs/QmeEVMVWF4peGBEK72rcedp6sWwhuYcVj8q728zrnTzZ6A\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":{\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d92614db0b346b756af8ba9bd0098db81b031026361635fb4f55a420254637d\",\"dweb:/ipfs/QmVviVD57zX54ny1zvVsksfYF9RantBwVyJBTdHqPywFuP\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":{\"keccak256\":\"0x7fb4716864bc9693785f07ce15f325a44413ad5d2d5685852a9e6112927abd60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2abe805bc615c15daea179f3ff3e3b890f9c0d5ec18d0bb8fad03ab128157ee3\",\"dweb:/ipfs/Qma4UizH7DhTeDfGfkhFFKLnU6p8U9cmodTbgTdRzeFoXX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a459d8907c5fe73d70b4c522e48127b13b9aaa29a223670e928a2a5e5e4c8f8\",\"dweb:/ipfs/QmcwBnMVrajEBgj2i1saNXnQ6ytHQdnpQF978E86EuhvtX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"keccak256\":\"0xb19a57535ad6c6d773f61c1e8f8cc190fa35e12bfadf3743092537c7695fd96a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79811c8c7aabd4fae5ff3021ae67688fc6f6a820f784676bf4b8e41c0c71577d\",\"dweb:/ipfs/QmSo7DdJSzx4U5xvLPnCLNn2SFBPin8dHxYnJrrwxEYQje\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":{\"keccak256\":\"0x87d62369932af21f32ea3c66d3238e6b65fd90a00bfb537a639189f4d8ceb7dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6951c38bc040fdb1f35e117390a1936543974e062fcc519300365a68c800c88d\",\"dweb:/ipfs/QmVPjxkL1bLaA6EtthcoerTaMjAmJx8Lv1hchALEkNMfDH\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\":{\"keccak256\":\"0x5e07f7bdcdf5baaadd43d86fee80036edffbe893f3396cb762eaae3f56f4cb89\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d990a5a16e8f0cfb313784e21583d0fd7cf05f5fe73796571aad30889baf27c\",\"dweb:/ipfs/QmPHQ3cTNVD7NxSiZ5xjSuLAkZyczFhckSuhwW9UNNgr6i\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":{\"keccak256\":\"0x6c66bc2b0b2f5aabd2b90ca02d5b6696fc02d75a53567b16d8d81dd956fd7b1b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://284f9cc3f8eade3b022ab8c527aaa35bdd5e0355607abf6d5ef66fb2c9ce90cd\",\"dweb:/ipfs/QmYi856BQNY6G2FTqAGY9qzWPp27QmiytwnfNtfwPN7Cqm\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0x1b8b4d757c1b804bc4cf6fbbf8bf8f89ebdeb30a31014751fe7d01deb9d513d4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://984bf2777b898ed187d28997f9783f5c293a1a1848e3e9aa470ce9183d454c97\",\"dweb:/ipfs/Qme3aTpBrkLu8wYHFMZbCfhXHoZ1M6SpXkeC237T9BuU5B\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol\":{\"keccak256\":\"0x74c528692828aba3a9e37b0058e04b6d9042b21f4cc8753e0250a777a35ca4a4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1ccd0f176f12248be5fa44d100a4fb3d3040df498ca042a16946c619ec942d68\",\"dweb:/ipfs/QmY5mcJU6m94EuFNjkp7XogyvVyn35YpMJu4uhYMsNA1pu\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol\":{\"keccak256\":\"0x41a94f5a3e38c0907c9b47da511db1d9a545b0175e79a302c15723118db1db07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c875b9516f4dd56a74cb2808c04826769cdccb8e25e01a77227e4fdcc494500b\",\"dweb:/ipfs/QmdyQdsCYyHPxquAY5kcVGdm5AcfX483YSvyYdLGCfWfuq\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\":{\"keccak256\":\"0xd78e86c73c9b5b588281ac78051e97b5c32f766383575750c9245f4fec1b547c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c917f123adc35cd48a60a768abea19c7c99487c82260429571ae093235e902a\",\"dweb:/ipfs/QmaiLzxQ1GxPk9oxcgVXPtBBviSW9dVEsmC4xZgvWLxko8\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"avsDirectory()":"6b3aa72e","createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[])":"fce36c7d","createOperatorDirectedAVSRewardsSubmission(((address,uint96)[],address,(address,uint256)[],uint32,uint32,string)[])":"a20b99bf","deregisterOperatorFromAVS(address)":"a364f4da","getOperatorRestakedStrategies(address)":"33cfb7b7","getRestakeableStrategies()":"e481af9d","owner()":"8da5cb5b","registerOperatorToAVS(address,(bytes,bytes32,uint256))":"9926ee7d","renounceOwnership()":"715018a6","rewardsInitiator()":"fc299dee","setClaimerFor(address)":"a0169ddd","setRewardsInitiator(address)":"3bc28c8c","stakeRegistry()":"68304835","transferOwnership(address)":"f2fde38b","updateAVSMetadataURI(string)":"a98fb355"}}}},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol":{"ECDSAStakeRegistry":{"abi":[{"type":"constructor","inputs":[{"name":"_delegationManager","type":"address","internalType":"contract IDelegationManager"}],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperator","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getLastCheckpointOperatorWeight","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastCheckpointThresholdWeight","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastCheckpointThresholdWeightAtBlock","inputs":[{"name":"_blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastCheckpointTotalWeight","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastCheckpointTotalWeightAtBlock","inputs":[{"name":"_blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLastestOperatorSigningKey","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getOperatorSigningKeyAtBlock","inputs":[{"name":"_operator","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getOperatorWeight","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getOperatorWeightAtBlock","inputs":[{"name":"_operator","type":"address","internalType":"address"},{"name":"_blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"_serviceManager","type":"address","internalType":"address"},{"name":"_thresholdWeight","type":"uint256","internalType":"uint256"},{"name":"_quorum","type":"tuple","internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isValidSignature","inputs":[{"name":"_dataHash","type":"bytes32","internalType":"bytes32"},{"name":"_signatureData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"minimumWeight","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"operatorRegistered","inputs":[{"name":"_operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"quorum","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]}],"stateMutability":"view"},{"type":"function","name":"registerOperatorWithSignature","inputs":[{"name":"_operatorSignature","type":"tuple","internalType":"struct ISignatureUtils.SignatureWithSaltAndExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"_signingKey","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateMinimumWeight","inputs":[{"name":"_newMinimumWeight","type":"uint256","internalType":"uint256"},{"name":"_operators","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperatorSigningKey","inputs":[{"name":"_newSigningKey","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperators","inputs":[{"name":"_operators","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperatorsForQuorum","inputs":[{"name":"operatorsPerQuorum","type":"address[][]","internalType":"address[][]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateQuorumConfig","inputs":[{"name":"_quorum","type":"tuple","internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]},{"name":"_operators","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateStakeThreshold","inputs":[{"name":"_thresholdWeight","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"MinimumWeightUpdated","inputs":[{"name":"_old","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"_new","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorDeregistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorWeightUpdated","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"oldWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"QuorumUpdated","inputs":[{"name":"_old","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]},{"name":"_new","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]}],"anonymous":false},{"type":"event","name":"SigningKeyUpdate","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"updateBlock","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"newSigningKey","type":"address","indexed":true,"internalType":"address"},{"name":"oldSigningKey","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ThresholdWeightUpdated","inputs":[{"name":"_thresholdWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TotalWeightUpdated","inputs":[{"name":"oldTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdateMinimumWeight","inputs":[{"name":"oldMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InsufficientSignedStake","inputs":[]},{"type":"error","name":"InsufficientWeight","inputs":[]},{"type":"error","name":"InvalidLength","inputs":[]},{"type":"error","name":"InvalidQuorum","inputs":[]},{"type":"error","name":"InvalidReferenceBlock","inputs":[]},{"type":"error","name":"InvalidSignature","inputs":[]},{"type":"error","name":"InvalidSignedWeight","inputs":[]},{"type":"error","name":"InvalidThreshold","inputs":[]},{"type":"error","name":"LengthMismatch","inputs":[]},{"type":"error","name":"MustUpdateAllOperators","inputs":[]},{"type":"error","name":"NotSorted","inputs":[]},{"type":"error","name":"OperatorAlreadyRegistered","inputs":[]},{"type":"error","name":"OperatorNotRegistered","inputs":[]}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientSignedStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferenceBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignedWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustUpdateAllOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"MinimumWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"OperatorWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_old\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_new\",\"type\":\"tuple\"}],\"name\":\"QuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updateBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningKey\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSigningKey\",\"type\":\"address\"}],\"name\":\"SigningKeyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_thresholdWeight\",\"type\":\"uint256\"}],\"name\":\"ThresholdWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalWeight\",\"type\":\"uint256\"}],\"name\":\"TotalWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumWeight\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumWeight\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getLastCheckpointOperatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCheckpointThresholdWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockNumber\",\"type\":\"uint32\"}],\"name\":\"getLastCheckpointThresholdWeightAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCheckpointTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockNumber\",\"type\":\"uint32\"}],\"name\":\"getLastCheckpointTotalWeightAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getLastestOperatorSigningKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getOperatorSigningKeyAtBlock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"getOperatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_blockNumber\",\"type\":\"uint32\"}],\"name\":\"getOperatorWeightAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdWeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Quorum\",\"name\":\"_quorum\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signatureData\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"operatorRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Quorum\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"_operatorSignature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_signingKey\",\"type\":\"address\"}],\"name\":\"registerOperatorWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumWeight\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"updateMinimumWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigningKey\",\"type\":\"address\"}],\"name\":\"updateOperatorSigningKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"updateOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"operatorsPerQuorum\",\"type\":\"address[][]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"updateOperatorsForQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Quorum\",\"name\":\"_quorum\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"updateQuorumConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdWeight\",\"type\":\"uint256\"}],\"name\":\"updateStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"THIS CONTRACT IS NOT AUDITED\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinimumWeightUpdated(uint256,uint256)\":{\"params\":{\"_new\":\"The new minimumWeight\",\"_old\":\"The previous minimum weight\"}},\"OperatorDeregistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the deregistered operator\"}},\"OperatorRegistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the registered operator\"}},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"params\":{\"_operator\":\"The address of the operator updated\",\"newWeight\":\"The operator's weight after the update\",\"oldWeight\":\"The operator's weight before the update\"}},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"params\":{\"_new\":\"The new quorum configuration\",\"_old\":\"The previous quorum configuration\"}},\"SigningKeyUpdate(address,uint256,address,address)\":{\"params\":{\"newSigningKey\":\"The operator's signing key after the update\",\"oldSigningKey\":\"The operator's signing key before the update\",\"operator\":\"The address of the operator whose signing key was updated\",\"updateBlock\":\"The block number at which the signing key was updated\"}},\"TotalWeightUpdated(uint256,uint256)\":{\"params\":{\"newTotalWeight\":\"The total weight after the update\",\"oldTotalWeight\":\"The total weight before the update\"}},\"UpdateMinimumWeight(uint256,uint256)\":{\"params\":{\"newMinimumWeight\":\"The updated weight\",\"oldMinimumWeight\":\"The previous weight\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor to create ECDSAStakeRegistry.\",\"params\":{\"_delegationManager\":\"Address of the DelegationManager contract that this registry interacts with.\"}},\"getLastCheckpointOperatorWeight(address)\":{\"params\":{\"_operator\":\"The address of the operator.\"},\"returns\":{\"_0\":\"uint256 - The latest weight of the operator.\"}},\"getLastCheckpointThresholdWeight()\":{\"returns\":{\"_0\":\"uint256 - The latest threshold weight.\"}},\"getLastCheckpointThresholdWeightAtBlock(uint32)\":{\"params\":{\"_blockNumber\":\"The block number to get the threshold weight for the quorum\"},\"returns\":{\"_0\":\"uint256 - The threshold weight the given block.\"}},\"getLastCheckpointTotalWeight()\":{\"returns\":{\"_0\":\"uint256 - The latest total weight.\"}},\"getLastCheckpointTotalWeightAtBlock(uint32)\":{\"params\":{\"_blockNumber\":\"The block number to get the total weight for the quorum\"},\"returns\":{\"_0\":\"uint256 - The total weight at the given block.\"}},\"getLastestOperatorSigningKey(address)\":{\"params\":{\"_operator\":\"The address of the operator.\"},\"returns\":{\"_0\":\"The latest signing key of the operator.\"}},\"getOperatorSigningKeyAtBlock(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block number to get the operator's signing key.\",\"_operator\":\"The address of the operator.\"},\"returns\":{\"_0\":\"The signing key of the operator at the given block.\"}},\"getOperatorWeight(address)\":{\"params\":{\"_operator\":\"The address of the operator.\"},\"returns\":{\"_0\":\"uint256 - The current weight of the operator; returns 0 if below the threshold.\"}},\"getOperatorWeightAtBlock(address,uint32)\":{\"params\":{\"_blockNumber\":\"The block number to get the operator weight for the quorum\",\"_operator\":\"The address of the operator.\"},\"returns\":{\"_0\":\"uint256 - The weight of the operator at the given block.\"}},\"initialize(address,uint256,((address,uint96)[]))\":{\"params\":{\"_quorum\":\"The quorum struct containing the details of the quorum thresholds.\",\"_serviceManager\":\"The address of the service manager.\",\"_thresholdWeight\":\"The threshold weight in basis points.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_dataHash\":\"The hash of the data that was signed.\",\"_signatureData\":\"Encoded signature data consisting of an array of operators, an array of signatures, and a reference block number.\"},\"returns\":{\"_0\":\"The function selector that indicates the signature is valid according to ERC1271 standard.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quorum()\":{\"returns\":{\"_0\":\"Quorum - The current quorum of strategies and weights\"}},\"registerOperatorWithSignature((bytes,bytes32,uint256),address)\":{\"params\":{\"_operatorSignature\":\"Contains the operator's signature, salt, and expiry\",\"_signingKey\":\"The signing key to add to the operator's history\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMinimumWeight(uint256,address[])\":{\"details\":\"Access controlled to the contract owner\",\"params\":{\"_newMinimumWeight\":\"The new weight an operator must have to join the operator set\"}},\"updateOperatorSigningKey(address)\":{\"details\":\"Only callable by the operator themselves\",\"params\":{\"_newSigningKey\":\"The new signing key to set for the operator\"}},\"updateOperators(address[])\":{\"details\":\"Queries stakes from the Eigenlayer core DelegationManager contract\",\"params\":{\"_operators\":\"A list of operator addresses to update\"}},\"updateOperatorsForQuorum(address[][],bytes)\":{\"details\":\"This interface maintains compatibility with avs-sync which handles multiquorums while this registry has a single quorum\",\"params\":{\"operatorsPerQuorum\":\"An array of operator address arrays, one for each quorum.\"}},\"updateQuorumConfig(((address,uint96)[]),address[])\":{\"details\":\"Only callable by the contract owner. It first updates the quorum configuration and then updates the list of operators.\",\"params\":{\"_operators\":\"The list of operator addresses to update stakes for\",\"_quorum\":\"The new quorum configuration, including strategies and their new weights\"}},\"updateStakeThreshold(uint256)\":{\"details\":\"This function can only be invoked by the owner of the contract. It delegates the update to an internal function `_updateStakeThreshold`.\",\"params\":{\"_thresholdWeight\":\"The updated threshold weight required to validate a message. This is the cumulative weight that must be met or exceeded by the sum of the stakes of the signatories for a message to be deemed valid.\"}}},\"title\":\"ECDSA Stake Registry\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientSignedStake()\":[{\"notice\":\"Indicates the total signed stake fails to meet the required threshold.\"}],\"InsufficientWeight()\":[{\"notice\":\"Indicates an individual signer's weight fails to meet the required threshold.\"}],\"InvalidLength()\":[{\"notice\":\"Indicates encountering an invalid length for the signers or signatures array.\"}],\"InvalidQuorum()\":[{\"notice\":\"Indicates the quorum is invalid\"}],\"InvalidReferenceBlock()\":[{\"notice\":\"Reference blocks must be for blocks that have already been confirmed\"}],\"InvalidSignature()\":[{\"notice\":\"Indicates encountering an invalid signature.\"}],\"InvalidSignedWeight()\":[{\"notice\":\"Indicates operator weights were out of sync and the signed weight exceed the total\"}],\"InvalidThreshold()\":[{\"notice\":\"Thrown when the threshold update is greater than BPS\"}],\"LengthMismatch()\":[{\"notice\":\"Indicates when the lengths of the signers array and signatures array do not match.\"}],\"MustUpdateAllOperators()\":[{\"notice\":\"Thrown when missing operators in an update\"}],\"NotSorted()\":[{\"notice\":\"Indicates the system finds a list of items unsorted\"}],\"OperatorAlreadyRegistered()\":[{\"notice\":\"Thrown when registering an already registered operator\"}],\"OperatorNotRegistered()\":[{\"notice\":\"Thrown when de-registering or updating the stake for an unregisted operator\"}]},\"events\":{\"MinimumWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the weight to join the operator set updates\"},\"OperatorDeregistered(address,address)\":{\"notice\":\"Emitted when the system deregisters an operator\"},\"OperatorRegistered(address,address)\":{\"notice\":\"Emitted when the system registers an operator\"},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when the system updates an operator's weight\"},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"notice\":\"Emitted when the system updates the quorum\"},\"SigningKeyUpdate(address,uint256,address,address)\":{\"notice\":\"Emitted when an operator's signing key is updated\"},\"ThresholdWeightUpdated(uint256)\":{\"notice\":\"Emits when setting a new threshold weight.\"},\"TotalWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the system updates the total weight\"},\"UpdateMinimumWeight(uint256,uint256)\":{\"notice\":\"Emitted when the weight required to be an operator changes\"}},\"kind\":\"user\",\"methods\":{\"deregisterOperator()\":{\"notice\":\"Deregisters an existing operator\"},\"getLastCheckpointOperatorWeight(address)\":{\"notice\":\"Retrieves the last recorded weight for a given operator.\"},\"getLastCheckpointThresholdWeight()\":{\"notice\":\"Retrieves the last recorded threshold weight\"},\"getLastCheckpointThresholdWeightAtBlock(uint32)\":{\"notice\":\"Retrieves the threshold weight at a specific block number.\"},\"getLastCheckpointTotalWeight()\":{\"notice\":\"Retrieves the last recorded total weight across all operators.\"},\"getLastCheckpointTotalWeightAtBlock(uint32)\":{\"notice\":\"Retrieves the total weight at a specific block number.\"},\"getLastestOperatorSigningKey(address)\":{\"notice\":\"Retrieves the latest signing key for a given operator.\"},\"getOperatorSigningKeyAtBlock(address,uint256)\":{\"notice\":\"Retrieves the latest signing key for a given operator at a specific block number.\"},\"getOperatorWeight(address)\":{\"notice\":\"Calculates the current weight of an operator based on their delegated stake in the strategies considered in the quorum\"},\"getOperatorWeightAtBlock(address,uint32)\":{\"notice\":\"Retrieves the operator's weight at a specific block number.\"},\"initialize(address,uint256,((address,uint96)[]))\":{\"notice\":\"Initializes the contract with the given parameters.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies if the provided signature data is valid for the given data hash.\"},\"minimumWeight()\":{\"notice\":\"Returns the weight an operator must have to contribute to validating an AVS\"},\"quorum()\":{\"notice\":\"Retrieves the current stake quorum details.\"},\"registerOperatorWithSignature((bytes,bytes32,uint256),address)\":{\"notice\":\"Registers a new operator using a provided signature and signing key\"},\"updateMinimumWeight(uint256,address[])\":{\"notice\":\"Updates the weight an operator must have to join the operator set\"},\"updateOperatorSigningKey(address)\":{\"notice\":\"Updates the signing key for an operator\"},\"updateOperators(address[])\":{\"notice\":\"Updates the StakeRegistry's view of one or more operators' stakes adding a new entry in their history of stake checkpoints,\"},\"updateOperatorsForQuorum(address[][],bytes)\":{\"notice\":\"Updates the set of operators for the first quorum.\"},\"updateQuorumConfig(((address,uint96)[]),address[])\":{\"notice\":\"Updates the quorum configuration and the set of operators\"},\"updateStakeThreshold(uint256)\":{\"notice\":\"Sets a new cumulative threshold weight for message validation by operator set signatures.\"}},\"notice\":\"Manages operator registration and quorum updates for an AVS using ECDSA signatures.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol\":\"ECDSAStakeRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\":{\"keccak256\":\"0x39529942c9f3bab419e0570e3c51c27b49803fb0b3821a0fd06f47ab8835ed81\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://da46171725cfe3dd23c0a4f58abf2565eb7db619495fa4fb8bab55aaff9d9c7a\",\"dweb:/ipfs/QmeEVMVWF4peGBEK72rcedp6sWwhuYcVj8q728zrnTzZ6A\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\":{\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d92614db0b346b756af8ba9bd0098db81b031026361635fb4f55a420254637d\",\"dweb:/ipfs/QmVviVD57zX54ny1zvVsksfYF9RantBwVyJBTdHqPywFuP\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":{\"keccak256\":\"0x7fb4716864bc9693785f07ce15f325a44413ad5d2d5685852a9e6112927abd60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2abe805bc615c15daea179f3ff3e3b890f9c0d5ec18d0bb8fad03ab128157ee3\",\"dweb:/ipfs/Qma4UizH7DhTeDfGfkhFFKLnU6p8U9cmodTbgTdRzeFoXX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a459d8907c5fe73d70b4c522e48127b13b9aaa29a223670e928a2a5e5e4c8f8\",\"dweb:/ipfs/QmcwBnMVrajEBgj2i1saNXnQ6ytHQdnpQF978E86EuhvtX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"keccak256\":\"0xb19a57535ad6c6d773f61c1e8f8cc190fa35e12bfadf3743092537c7695fd96a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79811c8c7aabd4fae5ff3021ae67688fc6f6a820f784676bf4b8e41c0c71577d\",\"dweb:/ipfs/QmSo7DdJSzx4U5xvLPnCLNn2SFBPin8dHxYnJrrwxEYQje\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":{\"keccak256\":\"0x87d62369932af21f32ea3c66d3238e6b65fd90a00bfb537a639189f4d8ceb7dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6951c38bc040fdb1f35e117390a1936543974e062fcc519300365a68c800c88d\",\"dweb:/ipfs/QmVPjxkL1bLaA6EtthcoerTaMjAmJx8Lv1hchALEkNMfDH\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\":{\"keccak256\":\"0x5e07f7bdcdf5baaadd43d86fee80036edffbe893f3396cb762eaae3f56f4cb89\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d990a5a16e8f0cfb313784e21583d0fd7cf05f5fe73796571aad30889baf27c\",\"dweb:/ipfs/QmPHQ3cTNVD7NxSiZ5xjSuLAkZyczFhckSuhwW9UNNgr6i\"]},\"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\":{\"keccak256\":\"0x6c66bc2b0b2f5aabd2b90ca02d5b6696fc02d75a53567b16d8d81dd956fd7b1b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://284f9cc3f8eade3b022ab8c527aaa35bdd5e0355607abf6d5ef66fb2c9ce90cd\",\"dweb:/ipfs/QmYi856BQNY6G2FTqAGY9qzWPp27QmiytwnfNtfwPN7Cqm\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol\":{\"keccak256\":\"0x41a94f5a3e38c0907c9b47da511db1d9a545b0175e79a302c15723118db1db07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c875b9516f4dd56a74cb2808c04826769cdccb8e25e01a77227e4fdcc494500b\",\"dweb:/ipfs/QmdyQdsCYyHPxquAY5kcVGdm5AcfX483YSvyYdLGCfWfuq\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\":{\"keccak256\":\"0xd78e86c73c9b5b588281ac78051e97b5c32f766383575750c9245f4fec1b547c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c917f123adc35cd48a60a768abea19c7c99487c82260429571ae093235e902a\",\"dweb:/ipfs/QmaiLzxQ1GxPk9oxcgVXPtBBviSW9dVEsmC4xZgvWLxko8\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"60a034606657601f61249838819003918201601f19168301916001600160401b03831184841017606a57808492602094604052833981010312606657516001600160a01b0381168103606657608052604051612419908161007f8239608051816114ab0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f5f3560e01c8062cf2ab51461107a5780630dba3394146110515780631626ba7e14610caa5780631703a01814610c5a5780631e4cd85e14610b5e578063314f3a4914610b445780633b242e4a14610b0d5780633d5611f61461092457806340bf2fb7146109065780635140a548146107fa5780635e1042e8146107b45780635ef533291461078f578063696255be14610714578063715018a6146106b7578063743c31f41461066f578063857dc1901461055a5780638da5cb5b14610531578063955f2d90146104e457806398ec1ac9146104b8578063ab11899514610323578063b933fa74146102bb578063cdcd358114610270578063dec5d1f6146101fe578063ec7fbb31146101bf5763f2fde38b1461012c575f80fd5b346101bc5760203660031901126101bc5761014561111d565b61014d6117fc565b6001600160a01b038116156101685761016590611a0c565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b50346101bc5760203660031901126101bc5760209060ff906040906001600160a01b036101ea61111d565b168152606e84522054166040519015158152f35b50346101bc5760403660031901126101bc576004356001600160401b03811161026c5761022f90369060040161126e565b602435906001600160401b03821161026857610263610255610165933690600401611133565b9161025e6117fc565b611b39565b611624565b8280fd5b5080fd5b50346101bc5760203660031901126101bc576020906001600160a01b0361029561111d565b168152606a8252604090206001600160a01b03906102b2906117ca565b16604051908152f35b50346101bc57806003193601126101bc57606c5490816102ed57602091505b6040516001600160e01b03919091168152f35b5f19820191821161030f5750610306602091606c611673565b5054811c6102da565b634e487b7160e01b81526011600452602490fd5b50346101bc5760603660031901126101bc5761033d61111d565b6044356001600160401b0381116102685761035c90369060040161126e565b82549060ff8260081c1615928380946104ab575b8015610494575b156104385760ff19831660011785556103c79284610427575b506103a160ff865460081c16611ad9565b60018060a01b03166001600160601b0360a01b606854161760685561025e602435611854565b6103e060ff835460081c166103db81611ad9565b611ad9565b6103e933611a0c565b6103f05780f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff19166101011785555f610390565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103775750600160ff841614610377565b50600160ff841610610370565b50346101bc5760203660031901126101bc5760206104dc6104d761111d565b6113eb565b604051908152f35b50346101bc5760403660031901126101bc576104fe61111d565b6024359063ffffffff8216809203610268576001600160a01b03168252606d602090815260409092206104dc919061172d565b50346101bc57806003193601126101bc576033546040516001600160a01b039091168152602090f35b50346101bc57806003193601126101bc57338152606e60205260ff6040822054161561066057606554801561064c575f1901606555338152606e6020526040812060ff1981541690556105b46105af33611c9e565b611e9b565b505060685481906001600160a01b0316803b15610649578180916024604051809481936351b27a6d60e11b83523360048401525af1801561063e57610629575b506068546001600160a01b0316337f31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed5808380a380f35b81610633916110e5565b6101bc57805f6105f4565b6040513d84823e3d90fd5b50fd5b634e487b7160e01b82526011600452602482fd5b6325ec6c1f60e01b8152600490fd5b50346101bc5760203660031901126101bc5761068961111d565b338252606e60205260ff604083205416156106a8576101659033611a54565b6325ec6c1f60e01b8252600482fd5b50346101bc57806003193601126101bc576106d06117fc565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101bc5760403660031901126101bc576024356004356001600160401b038211610268577f713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f604061076e610165943690600401611133565b926107776117fc565b606754908060675582519182526020820152a1611624565b50346101bc5760203660031901126101bc576107a96117fc565b610165600435611854565b50346101bc5760403660031901126101bc576020906001600160a01b036107d961111d565b168152606a8252604090206001600160a01b03906102b2906024359061172d565b50346101bc5760403660031901126101bc576004356001600160401b03811161026c573660238201121561026c5780600401359061083782611106565b9061084560405192836110e5565b828252602082019260051b8101602401833682116109025760248301905b8282106108cf57505050506024356001600160401b0381116108cb5761088d9036906004016111cf565b5051156108b757518051606554036108a85761016590611624565b63169efb5b60e11b8252600482fd5b634e487b7160e01b82526032600452602482fd5b8380fd5b81356001600160401b0381116108fe576020916108f3839260243691890101611133565b815201910190610863565b8780fd5b8580fd5b50346101bc57806003193601126101bc576020606754604051908152f35b5034610ad2576040366003190112610ad2576004356001600160401b038111610ad25760606003198236030112610ad257604051606081018181106001600160401b03821117610af95760405281600401356001600160401b038111610ad25761099490600436918501016111cf565b8152602480830135602083019081526044909301356040830190815290356001600160a01b0381168103610ad257335f52606e60205260ff60405f205416610aea57606554905f198214610ad6576001610a179201606555335f52606e60205260405f20600160ff19825416179055610a0f6105af33611c9e565b505033611a54565b6068546001600160a01b0316803b15610ad257610a635f809460405196879586948593639926ee7d60e01b855233600486015260406024860152516060604486015260a48501906117d8565b9151606484015251608483015203925af18015610ac757610ab4575b506068546001600160a01b0316337fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c18380a380f35b610ac091505f906110e5565b5f5f610a7f565b6040513d5f823e3d90fd5b5f80fd5b634e487b7160e01b5f52601160045260245ffd5b6342ee68b560e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b34610ad2576020366003190112610ad2576001600160a01b03610b2e61111d565b165f52606d60205260206104dc60405f206117ca565b34610ad2575f366003190112610ad25760206104dc6117bd565b34610ad2576020366003190112610ad25763ffffffff610b7c6111a1565b1643811015610c1657606c54905f905b828210610bbd578280610ba557506040515f8152602090f35b5f198101908111610ad657610306602091606c611673565b9091610bd081841860011c8285166113de565b908263ffffffff610be284606c611673565b5054161115610bf45750915b90610b8c565b92506001810180911115610bee57634e487b7160e01b5f52601160045260245ffd5b606460405162461bcd60e51b815260206004820152602060248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e65646044820152fd5b34610ad2575f366003190112610ad2576060604051610c78816110af565b52610ca6604051610c88816110af565b610c9061133f565b8152604051918291602083526020830190611215565b0390f35b34610ad2576040366003190112610ad2576004356024356001600160401b038111610ad257610cdd9036906004016111cf565b90815182019160608160208501940312610ad25760208101516001600160401b038111610ad25781019083603f83011215610ad2576020820151610d2081611106565b92610d2e60405194856110e5565b8184526020808086019360051b8301010190868211610ad257604001915b8183106110315750505060408101516001600160401b038111610ad25781019380603f86011215610ad257602085015194610d8686611106565b95610d9460405197886110e5565b8087526020808089019260051b8401010191838311610ad25760408101915b838310610fc75788888860608901519163ffffffff8316809303610ad2578151905f945f9581518403610fb8578315610fa95792905f92438710958615955b848610610ef557505050505050610ee657610e0c82611688565b8311610ed75715610c1657606c54905f905b828210610e7e57505080610e5e57505f5b6001600160e01b031611610e4f57604051630b135d3f60e11b8152602090f35b63e121632f60e01b5f5260045ffd5b5f198101908111610ad657610e7490606c611673565b505460201c610e2f565b9091610e9181841860011c8285166113de565b908263ffffffff610ea384606c611673565b5054161115610eb55750915b90610e1e565b92506001810180911115610eaf57634e487b7160e01b5f52601160045260245ffd5b634b05a0f760e11b5f5260045ffd5b63e64f180f60e01b5f5260045ffd5b949893949293926001600160a01b03610f0e8b846113b6565b511696610ee657865f52606a6020528660018060a01b03610f328b60405f2061172d565b16916001600160a01b03161015610f9a57610f599083610f528c886113b6565b519161212c565b15610f8b576001610f8187945f985f52606d602052610f7b8b60405f2061172d565b906113de565b9901949392610df2565b638baa579f60e01b5f5260045ffd5b63ba50f91160e01b5f5260045ffd5b63251f56a160e21b5f5260045ffd5b631fec674760e31b5f5260045ffd5b82516001600160401b038111610ad25760209083010185603f82011215610ad257602081015191610ff7836111b4565b61100460405191826110e5565b8381526040838501018810610ad2575f602085819660408397018386015e83010152815201920191610db3565b82516001600160a01b0381168103610ad257815260209283019201610d4c565b34610ad2576020366003190112610ad25760206104dc63ffffffff6110746111a1565b16611688565b34610ad2576020366003190112610ad2576004356001600160401b038111610ad2576102636110ad913690600401611133565b005b602081019081106001600160401b03821117610af957604052565b604081019081106001600160401b03821117610af957604052565b90601f801991011681019081106001600160401b03821117610af957604052565b6001600160401b038111610af95760051b60200190565b600435906001600160a01b0382168203610ad257565b9080601f83011215610ad25781359061114b82611106565b9261115960405194856110e5565b82845260208085019360051b820101918211610ad257602001915b8183106111815750505090565b82356001600160a01b0381168103610ad257815260209283019201611174565b6004359063ffffffff82168203610ad257565b6001600160401b038111610af957601f01601f191660200190565b81601f82011215610ad2578035906111e6826111b4565b926111f460405194856110e5565b82845260208383010111610ad257815f926020809301838601378301015290565b602060408184019251938281528451809452019201905f5b81811061123a5750505090565b825180516001600160a01b031685526020908101516001600160601b0316818601526040909401939092019160010161122d565b9190602083820312610ad257604051611286816110af565b80938035906001600160401b038211610ad2570182601f82011215610ad2578035906112b182611106565b936112bf60405195866110e5565b82855260208086019360061b83010191818311610ad257602001925b8284106112e9575050505052565b604084830312610ad25760405190611300826110ca565b84356001600160a01b0381168103610ad25782526020850135906001600160601b0382168203610ad257826020928360409501528152019301926112db565b6066549061134c82611106565b9161135a60405193846110e5565b80835260665f9081525f5160206123c45f395f51905f52602085015b8383106113835750505050565b600160208192604051611395816110ca565b8554848060a01b038116825260a01c83820152815201920192019190611376565b80518210156113ca5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b91908201809211610ad657565b6113f361133f565b805190925f61141a61140484611106565b9361141260405195866110e5565b808552611106565b6020840190601f19013682375f5b865181101561145a576001906001600160a01b03611446828a6113b6565b51511661145382886113b6565b5201611428565b5060408051639004134760e01b81526001600160a01b0390961660048701526024860152925160448501819052919390929091829160648301915f5b8181106115e757505f939283900391508290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610ac7575f91611557575b505f915b8451831015611539576114fa83836113b6565b51906001600160601b03602061151086896113b6565b5101511691828102928184041490151715610ad657600191611531916113de565b9201916114e7565b915050612710919250046067548110155f146115525790565b505f90565b90503d805f833e61156881836110e5565b810190602081830312610ad2578051906001600160401b038211610ad257019080601f83011215610ad257815161159e81611106565b926115ac60405194856110e5565b81845260208085019260051b820101928311610ad257602001905b8282106115d7575050505f6114e3565b81518152602091820191016115c7565b82516001600160a01b0316845285945060209384019390920191600101611496565b9190915f8382019384129112908015821691151617610ad657565b905f805b83518210156116625760019061165a906116546001600160a01b0361164d86896113b6565b5116611c9e565b90611609565b910190611628565b905061166f919250611e9b565b5050565b80548210156113ca575f5260205f2001905f90565b43811015610c1657606b54905f905b8282106116d4575050806116b457505f5b6001600160e01b031690565b5f198101908111610ad6576116ca90606b611673565b505460201c6116a8565b90916116e781841860011c8285166113de565b908263ffffffff6116f984606b611673565b505416111561170b5750915b90611697565b9250600181018091111561170557634e487b7160e01b5f52601160045260245ffd5b9043811015610c16578154905f905b8282106117655750508061175157505f919050565b5f198101908111610ad6576116ca91611673565b909161177881841860011c8285166113de565b908263ffffffff6117898488611673565b505416111561179b5750915b9061173c565b9250600181018091111561179557634e487b7160e01b5f52601160045260245ffd5b606b54806116b457505f90565b80548061175157505f919050565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b6033546001600160a01b0316330361181057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b606c5490611862606c6117ca565b90821515806119e6575b156118da5761187a81612244565b915f198401938411610ad6576118d06020936118b87f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b96606c611673565b509063ffffffff82549181199060201b169116179055565b50604051908152a1565b63ffffffff4311611992576118ee81612244565b91604051936118fc856110ca565b4363ffffffff1685526001600160e01b039093166020850190815292600160401b811015610af9578060016119369201606c55606c611673565b94909461197f5751925163ffffffff90931663ffffffff19602094851b16179093557f9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b926118d0565b634e487b7160e01b5f525f60045260245ffd5b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b505f198301838111610ad657611a0263ffffffff91606c611673565b505416431461186c565b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b6001600160a01b039081165f818152606a6020526040902090929190611a79906117ca565b6001600160a01b0390921692911690828214611ad457805f52606a602052611aa48360405f20611fc9565b50506040519182527fd061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea131500260204393a4565b505050565b15611ae057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b611b42816120b2565b15611c775760405191611b54836110af565b611b5c61133f565b83526066545f60665580611c3d575b505f5b82518051821015611bea5781611b83916113b6565b519060665491600160401b831015610af957600183016066556066548310156113ca5760665f5280516020919091015160a01b6001600160a01b0319166001600160a01b0391909116175f5160206123c45f395f51905f5290920191909155600101611b6e565b505091611c2a90611c387f23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e93604051938493604085526040850190611215565b908382036020850152611215565b0390a1565b60665f525f5160206123c45f395f51905f52015f5160206123c45f395f51905f525b818110611c6c5750611b6b565b5f8155600101611c5f565b63d173577960e01b5f5260045ffd5b81810392915f138015828513169184121617610ad657565b6001600160a01b0381165f818152606d602052604081209092908390611cc3906117ca565b8094845f52606e60205260ff60405f205416155f14611e3d57611ce7929350611c86565b928315611e3757825f52606d60205260405f2090815492611d07836117ca565b84151580611e12575b15611d6b57611d1e5f612244565b945f198101908111610ad6577f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594956118b8611d5b92604097611673565b505b82519182526020820152a290565b63ffffffff431161199257611d7f5f612244565b9360405195611d8d876110ca565b4363ffffffff1687526001600160e01b039095166020870190815294600160401b811015610af957611dc491600182018155611673565b95909561197f5751935160201b63ffffffff191663ffffffff94909416939093179093557f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59492604092611d5b565b505f198501858111610ad657611e2d63ffffffff9186611673565b5054164314611d10565b50505090565b505050611e49906113eb565b91611e548184611c86565b928315611e37577f88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe59491604091845f52606d602052611e9481845f20611fc9565b5050611d5d565b90611eae611ea76117bd565b9283611609565b90606b54611ebc606b6117ca565b9080151580611fa3575b15611f1f57611ed484612244565b5f198201918211610ad6576118b8611eed92606b611673565b507f86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b60408051858152846020820152a1565b63ffffffff431161199257611f3384612244565b60405191611f40836110ca565b4363ffffffff1683526001600160e01b039091166020830190815290600160401b811015610af957806001611f7a9201606b55606b611673565b91909161197f579151915160201b63ffffffff191663ffffffff92909216919091179055611eed565b505f198101818111610ad657611fbf63ffffffff91606b611673565b5054164314611ec6565b9190918054611fd7826117ca565b918115158061208d575b1561200c57611fef85612244565b905f198301928311610ad657612008926118b891611673565b9190565b63ffffffff43116119925761202085612244565b906040519261202e846110ca565b4363ffffffff1684526001600160e01b039092166020840190815291600160401b811015610af95761206591600182018155611673565b91909161197f579151915160201b63ffffffff191663ffffffff929092169190911790559190565b505f198201828111610ad6576120a863ffffffff9183611673565b5054164314611fe1565b51905f80805b8451821015612115576001600160a01b036120d383876113b6565b515116906001600160a01b0316811115610f9a5761210c600191936001600160601b036020612102868a6113b6565b51015116906113de565b910190916120b8565b50919250612710149050612127575f90565b600190565b91909161213982846122b3565b60058110156122305715908161221a575b50612212575f9261218461219285946040519283916020830195630b135d3f60e11b875260248401526040604484015260648301906117d8565b03601f1981018352826110e5565b51915afa3d1561220b573d6121a6816111b4565b906121b460405192836110e5565b81523d5f602083013e5b816121ff575b816121cd575090565b9050602081805181010312610ad257602001516001600160e01b0319811690819003610ad257630b135d3f60e11b1490565b805160201491506121c4565b60606121be565b505050600190565b6001600160a01b0383811691161490505f61214a565b634e487b7160e01b5f52602160045260245ffd5b6001600160e01b03811161225e576001600160e01b031690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b8151604181036122df5750906122db91602082015190606060408401519301515f1a90612321565b9091565b6040036123185760406020830151920151918260ff1c91601b8301809311610ad6576122db936001600160ff1b03169260ff1690612321565b50505f90600290565b907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116123b85760ff1690601b821415806123ad575b6123a2576020935f93608093604051938452868401526040830152606082015282805260015afa15610ac7575f516001600160a01b0381161561239a57905f90565b505f90600190565b505050505f90600490565b50601c821415612358565b505050505f9060039056fe46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354a2646970667358221220118f91e4c9a19d682ff7d5c5ac0ce38d02ed33820dc4a4a3532e02751a0e94b764736f6c634300081c0033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH1 0x66 JUMPI PUSH1 0x1F PUSH2 0x2498 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH1 0x6A JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH1 0x66 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH1 0x66 JUMPI PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2419 SWAP1 DUP2 PUSH2 0x7F DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x14AB ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xCF2AB5 EQ PUSH2 0x107A JUMPI DUP1 PUSH4 0xDBA3394 EQ PUSH2 0x1051 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xCAA JUMPI DUP1 PUSH4 0x1703A018 EQ PUSH2 0xC5A JUMPI DUP1 PUSH4 0x1E4CD85E EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0x314F3A49 EQ PUSH2 0xB44 JUMPI DUP1 PUSH4 0x3B242E4A EQ PUSH2 0xB0D JUMPI DUP1 PUSH4 0x3D5611F6 EQ PUSH2 0x924 JUMPI DUP1 PUSH4 0x40BF2FB7 EQ PUSH2 0x906 JUMPI DUP1 PUSH4 0x5140A548 EQ PUSH2 0x7FA JUMPI DUP1 PUSH4 0x5E1042E8 EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x5EF53329 EQ PUSH2 0x78F JUMPI DUP1 PUSH4 0x696255BE EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6B7 JUMPI DUP1 PUSH4 0x743C31F4 EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0x857DC190 EQ PUSH2 0x55A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0x955F2D90 EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x98EC1AC9 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xAB118995 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0xB933FA74 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xCDCD3581 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xDEC5D1F6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0xEC7FBB31 EQ PUSH2 0x1BF JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x12C JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x145 PUSH2 0x111D JUMP JUMPDEST PUSH2 0x14D PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x168 JUMPI PUSH2 0x165 SWAP1 PUSH2 0x1A0C JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1EA PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6E DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x26C JUMPI PUSH2 0x22F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x126E JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x268 JUMPI PUSH2 0x263 PUSH2 0x255 PUSH2 0x165 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST SWAP2 PUSH2 0x25E PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST PUSH2 0x1624 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x295 PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6A DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2B2 SWAP1 PUSH2 0x17CA JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x6C SLOAD SWAP1 DUP2 PUSH2 0x2ED JUMPI PUSH1 0x20 SWAP2 POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x30F JUMPI POP PUSH2 0x306 PUSH1 0x20 SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD DUP2 SHR PUSH2 0x2DA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x33D PUSH2 0x111D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x268 JUMPI PUSH2 0x35C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x126E JUMP JUMPDEST DUP3 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO SWAP3 DUP4 DUP1 SWAP5 PUSH2 0x4AB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x494 JUMPI JUMPDEST ISZERO PUSH2 0x438 JUMPI PUSH1 0xFF NOT DUP4 AND PUSH1 0x1 OR DUP6 SSTORE PUSH2 0x3C7 SWAP3 DUP5 PUSH2 0x427 JUMPI JUMPDEST POP PUSH2 0x3A1 PUSH1 0xFF DUP7 SLOAD PUSH1 0x8 SHR AND PUSH2 0x1AD9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x68 SLOAD AND OR PUSH1 0x68 SSTORE PUSH2 0x25E PUSH1 0x24 CALLDATALOAD PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x3E0 PUSH1 0xFF DUP4 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3DB DUP2 PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0x3E9 CALLER PUSH2 0x1A0C JUMP JUMPDEST PUSH2 0x3F0 JUMPI DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT DUP2 SLOAD AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP6 SSTORE PUSH0 PUSH2 0x390 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x377 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP5 AND EQ PUSH2 0x377 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP5 AND LT PUSH2 0x370 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH2 0x4D7 PUSH2 0x111D JUMP JUMPDEST PUSH2 0x13EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x4FE PUSH2 0x111D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x268 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0x172D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI CALLER DUP2 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x660 JUMPI PUSH1 0x65 SLOAD DUP1 ISZERO PUSH2 0x64C JUMPI PUSH0 NOT ADD PUSH1 0x65 SSTORE CALLER DUP2 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x5B4 PUSH2 0x5AF CALLER PUSH2 0x1C9E JUMP JUMPDEST PUSH2 0x1E9B JUMP JUMPDEST POP POP PUSH1 0x68 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x649 JUMPI DUP2 DUP1 SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x51B27A6D PUSH1 0xE1 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x63E JUMPI PUSH2 0x629 JUMPI JUMPDEST POP PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH32 0x31E0ADFEC71BCCEE37B6E83A90C2FEDB17D8F1693FEE863C4771E7BFE2AED580 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x633 SWAP2 PUSH2 0x10E5 JUMP JUMPDEST PUSH2 0x1BC JUMPI DUP1 PUSH0 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x25EC6C1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x689 PUSH2 0x111D JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND ISZERO PUSH2 0x6A8 JUMPI PUSH2 0x165 SWAP1 CALLER PUSH2 0x1A54 JUMP JUMPDEST PUSH4 0x25EC6C1F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x6D0 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x268 JUMPI PUSH32 0x713CA53B88D6EB63F5B1854CB8CBDD736EC51EDA225E46791AA9298B0160648F PUSH1 0x40 PUSH2 0x76E PUSH2 0x165 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST SWAP3 PUSH2 0x777 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x67 SLOAD SWAP1 DUP1 PUSH1 0x67 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH2 0x1624 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x7A9 PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x165 PUSH1 0x4 CALLDATALOAD PUSH2 0x1854 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7D9 PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6A DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2B2 SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x172D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x26C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x26C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x837 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP1 PUSH2 0x845 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 PUSH1 0x5 SHL DUP2 ADD PUSH1 0x24 ADD DUP4 CALLDATASIZE DUP3 GT PUSH2 0x902 JUMPI PUSH1 0x24 DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8CF JUMPI POP POP POP POP PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x8CB JUMPI PUSH2 0x88D SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x11CF JUMP JUMPDEST POP MLOAD ISZERO PUSH2 0x8B7 JUMPI MLOAD DUP1 MLOAD PUSH1 0x65 SLOAD SUB PUSH2 0x8A8 JUMPI PUSH2 0x165 SWAP1 PUSH2 0x1624 JUMP JUMPDEST PUSH4 0x169EFB5B PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x8FE JUMPI PUSH1 0x20 SWAP2 PUSH2 0x8F3 DUP4 SWAP3 PUSH1 0x24 CALLDATASIZE SWAP2 DUP10 ADD ADD PUSH2 0x1133 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x863 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 PUSH1 0x67 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH1 0x60 PUSH1 0x3 NOT DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0x994 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP6 ADD ADD PUSH2 0x11CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x24 DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP4 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD SWAP1 DUP2 MSTORE SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI CALLER PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0xAEA JUMPI PUSH1 0x65 SLOAD SWAP1 PUSH0 NOT DUP3 EQ PUSH2 0xAD6 JUMPI PUSH1 0x1 PUSH2 0xA17 SWAP3 ADD PUSH1 0x65 SSTORE CALLER PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xA0F PUSH2 0x5AF CALLER PUSH2 0x1C9E JUMP JUMPDEST POP POP CALLER PUSH2 0x1A54 JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0xAD2 JUMPI PUSH2 0xA63 PUSH0 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x9926EE7D PUSH1 0xE0 SHL DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MLOAD PUSH1 0x60 PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD SWAP1 PUSH2 0x17D8 JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xAC7 JUMPI PUSH2 0xAB4 JUMPI JUMPDEST POP PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH32 0xA453DB612AF59E5521D6AB9284DC3E2D06AF286EB1B1B7B771FCE4716C19F2C1 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH2 0xAC0 SWAP2 POP PUSH0 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x42EE68B5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB2E PUSH2 0x111D JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x4DC PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x17CA JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH2 0x17BD JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH4 0xFFFFFFFF PUSH2 0xB7C PUSH2 0x11A1 JUMP JUMPDEST AND NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6C SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xBBD JUMPI DUP3 DUP1 PUSH2 0xBA5 JUMPI POP PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x306 PUSH1 0x20 SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xBD0 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xBE2 DUP5 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0xBF4 JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0xB8C JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0xBEE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E74733A20626C6F636B206E6F7420796574206D696E6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xC78 DUP2 PUSH2 0x10AF JUMP JUMPDEST MSTORE PUSH2 0xCA6 PUSH1 0x40 MLOAD PUSH2 0xC88 DUP2 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0xC90 PUSH2 0x133F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x1215 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0xCDD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x11CF JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x60 DUP2 PUSH1 0x20 DUP6 ADD SWAP5 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI DUP2 ADD SWAP1 DUP4 PUSH1 0x3F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xD20 DUP2 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0xD2E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP1 DUP7 ADD SWAP4 PUSH1 0x5 SHL DUP4 ADD ADD ADD SWAP1 DUP7 DUP3 GT PUSH2 0xAD2 JUMPI PUSH1 0x40 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1031 JUMPI POP POP POP PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI DUP2 ADD SWAP4 DUP1 PUSH1 0x3F DUP7 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP6 ADD MLOAD SWAP5 PUSH2 0xD86 DUP7 PUSH2 0x1106 JUMP JUMPDEST SWAP6 PUSH2 0xD94 PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH1 0x20 DUP1 DUP1 DUP10 ADD SWAP3 PUSH1 0x5 SHL DUP5 ADD ADD ADD SWAP2 DUP4 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x40 DUP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xFC7 JUMPI DUP9 DUP9 DUP9 PUSH1 0x60 DUP10 ADD MLOAD SWAP2 PUSH4 0xFFFFFFFF DUP4 AND DUP1 SWAP4 SUB PUSH2 0xAD2 JUMPI DUP2 MLOAD SWAP1 PUSH0 SWAP5 PUSH0 SWAP6 DUP2 MLOAD DUP5 SUB PUSH2 0xFB8 JUMPI DUP4 ISZERO PUSH2 0xFA9 JUMPI SWAP3 SWAP1 PUSH0 SWAP3 NUMBER DUP8 LT SWAP6 DUP7 ISZERO SWAP6 JUMPDEST DUP5 DUP7 LT PUSH2 0xEF5 JUMPI POP POP POP POP POP POP PUSH2 0xEE6 JUMPI PUSH2 0xE0C DUP3 PUSH2 0x1688 JUMP JUMPDEST DUP4 GT PUSH2 0xED7 JUMPI ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6C SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xE7E JUMPI POP POP DUP1 PUSH2 0xE5E JUMPI POP PUSH0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND GT PUSH2 0xE4F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH4 0xE121632F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0xE74 SWAP1 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD PUSH1 0x20 SHR PUSH2 0xE2F JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xE91 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xEA3 DUP5 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0xEB5 JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0xE1E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0xEAF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4B05A0F7 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xE64F180F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP5 SWAP9 SWAP4 SWAP5 SWAP3 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xF0E DUP12 DUP5 PUSH2 0x13B6 JUMP JUMPDEST MLOAD AND SWAP7 PUSH2 0xEE6 JUMPI DUP7 PUSH0 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE DUP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0xF32 DUP12 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x172D JUMP JUMPDEST AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT ISZERO PUSH2 0xF9A JUMPI PUSH2 0xF59 SWAP1 DUP4 PUSH2 0xF52 DUP13 DUP9 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x212C JUMP JUMPDEST ISZERO PUSH2 0xF8B JUMPI PUSH1 0x1 PUSH2 0xF81 DUP8 SWAP5 PUSH0 SWAP9 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH2 0xF7B DUP12 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x172D JUMP JUMPDEST SWAP1 PUSH2 0x13DE JUMP JUMPDEST SWAP10 ADD SWAP5 SWAP4 SWAP3 PUSH2 0xDF2 JUMP JUMPDEST PUSH4 0x8BAA579F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xBA50F911 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x251F56A1 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x1FEC6747 PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 SWAP1 DUP4 ADD ADD DUP6 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP2 PUSH2 0xFF7 DUP4 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x1004 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x10E5 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 DUP4 DUP6 ADD ADD DUP9 LT PUSH2 0xAD2 JUMPI PUSH0 PUSH1 0x20 DUP6 DUP2 SWAP7 PUSH1 0x40 DUP4 SWAP8 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xDB3 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xD4C JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH4 0xFFFFFFFF PUSH2 0x1074 PUSH2 0x11A1 JUMP JUMPDEST AND PUSH2 0x1688 JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0x263 PUSH2 0x10AD SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAF9 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x114B DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0x1159 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP3 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1181 JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1174 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAF9 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x11E6 DUP3 PUSH2 0x11B4 JUMP JUMPDEST SWAP3 PUSH2 0x11F4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xAD2 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD SWAP3 MLOAD SWAP4 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x123A JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 ADD MSTORE PUSH1 0x40 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x122D JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 DUP4 DUP3 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1286 DUP2 PUSH2 0x10AF JUMP JUMPDEST DUP1 SWAP4 DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xAD2 JUMPI ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x12B1 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP4 PUSH2 0x12BF PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP4 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 DUP2 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x12E9 JUMPI POP POP POP POP MSTORE JUMP JUMPDEST PUSH1 0x40 DUP5 DUP4 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1300 DUP3 PUSH2 0x10CA JUMP JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP3 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x40 SWAP6 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x66 SLOAD SWAP1 PUSH2 0x134C DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP2 PUSH2 0x135A PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x66 PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 DUP6 ADD JUMPDEST DUP4 DUP4 LT PUSH2 0x1383 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP3 PUSH1 0x40 MLOAD PUSH2 0x1395 DUP2 PUSH2 0x10CA JUMP JUMPDEST DUP6 SLOAD DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0xA0 SHR DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xAD6 JUMPI JUMP JUMPDEST PUSH2 0x13F3 PUSH2 0x133F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 PUSH0 PUSH2 0x141A PUSH2 0x1404 DUP5 PUSH2 0x1106 JUMP JUMPDEST SWAP4 PUSH2 0x1412 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH2 0x1106 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP3 CALLDATACOPY PUSH0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x145A JUMPI PUSH1 0x1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1446 DUP3 DUP11 PUSH2 0x13B6 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x1453 DUP3 DUP9 PUSH2 0x13B6 JUMP JUMPDEST MSTORE ADD PUSH2 0x1428 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x90041347 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x4 DUP8 ADD MSTORE PUSH1 0x24 DUP7 ADD MSTORE SWAP3 MLOAD PUSH1 0x44 DUP6 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x64 DUP4 ADD SWAP2 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x15E7 JUMPI POP PUSH0 SWAP4 SWAP3 DUP4 SWAP1 SUB SWAP2 POP DUP3 SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xAC7 JUMPI PUSH0 SWAP2 PUSH2 0x1557 JUMPI JUMPDEST POP PUSH0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x1539 JUMPI PUSH2 0x14FA DUP4 DUP4 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x20 PUSH2 0x1510 DUP7 DUP10 PUSH2 0x13B6 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x1 SWAP2 PUSH2 0x1531 SWAP2 PUSH2 0x13DE JUMP JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x14E7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2710 SWAP2 SWAP3 POP DIV PUSH1 0x67 SLOAD DUP2 LT ISZERO PUSH0 EQ PUSH2 0x1552 JUMPI SWAP1 JUMP JUMPDEST POP PUSH0 SWAP1 JUMP JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1568 DUP2 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xAD2 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xAD2 JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP2 MLOAD PUSH2 0x159E DUP2 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0x15AC PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x15D7 JUMPI POP POP POP PUSH0 PUSH2 0x14E3 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15C7 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP6 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1496 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0xAD6 JUMPI JUMP JUMPDEST SWAP1 PUSH0 DUP1 JUMPDEST DUP4 MLOAD DUP3 LT ISZERO PUSH2 0x1662 JUMPI PUSH1 0x1 SWAP1 PUSH2 0x165A SWAP1 PUSH2 0x1654 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x164D DUP7 DUP10 PUSH2 0x13B6 JUMP JUMPDEST MLOAD AND PUSH2 0x1C9E JUMP JUMPDEST SWAP1 PUSH2 0x1609 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x1628 JUMP JUMPDEST SWAP1 POP PUSH2 0x166F SWAP2 SWAP3 POP PUSH2 0x1E9B JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x13CA JUMPI PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6B SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x16D4 JUMPI POP POP DUP1 PUSH2 0x16B4 JUMPI POP PUSH0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x16CA SWAP1 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD PUSH1 0x20 SHR PUSH2 0x16A8 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x16E7 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16F9 DUP5 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0x170B JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0x1697 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x1705 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI DUP2 SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1765 JUMPI POP POP DUP1 PUSH2 0x1751 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x16CA SWAP2 PUSH2 0x1673 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1778 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1789 DUP5 DUP9 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0x179B JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0x173C JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x1795 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x6B SLOAD DUP1 PUSH2 0x16B4 JUMPI POP PUSH0 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP1 PUSH2 0x1751 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1810 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x6C SLOAD SWAP1 PUSH2 0x1862 PUSH1 0x6C PUSH2 0x17CA JUMP JUMPDEST SWAP1 DUP3 ISZERO ISZERO DUP1 PUSH2 0x19E6 JUMPI JUMPDEST ISZERO PUSH2 0x18DA JUMPI PUSH2 0x187A DUP2 PUSH2 0x2244 JUMP JUMPDEST SWAP2 PUSH0 NOT DUP5 ADD SWAP4 DUP5 GT PUSH2 0xAD6 JUMPI PUSH2 0x18D0 PUSH1 0x20 SWAP4 PUSH2 0x18B8 PUSH32 0x9324F7E5A7C0288808A634CCDE44B8E979676474B22E29EE9DD569B55E791A4B SWAP7 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SWAP1 PUSH4 0xFFFFFFFF DUP3 SLOAD SWAP2 DUP2 NOT SWAP1 PUSH1 0x20 SHL AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x18EE DUP2 PUSH2 0x2244 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x18FC DUP6 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE SWAP3 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1936 SWAP3 ADD PUSH1 0x6C SSTORE PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST SWAP5 SWAP1 SWAP5 PUSH2 0x197F JUMPI MLOAD SWAP3 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND PUSH4 0xFFFFFFFF NOT PUSH1 0x20 SWAP5 DUP6 SHL AND OR SWAP1 SWAP4 SSTORE PUSH32 0x9324F7E5A7C0288808A634CCDE44B8E979676474B22E29EE9DD569B55E791A4B SWAP3 PUSH2 0x18D0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH0 NOT DUP4 ADD DUP4 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1A02 PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x186C JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1A79 SWAP1 PUSH2 0x17CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 AND SWAP1 DUP3 DUP3 EQ PUSH2 0x1AD4 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH2 0x1AA4 DUP4 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1FC9 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xD061168252F441733658F09E4D8F5B2D998ED4EF24A2BBFD6CECA52EA1315002 PUSH1 0x20 NUMBER SWAP4 LOG4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST ISZERO PUSH2 0x1AE0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x1B42 DUP2 PUSH2 0x20B2 JUMP JUMPDEST ISZERO PUSH2 0x1C77 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1B54 DUP4 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x1B5C PUSH2 0x133F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x66 SLOAD PUSH0 PUSH1 0x66 SSTORE DUP1 PUSH2 0x1C3D JUMPI JUMPDEST POP PUSH0 JUMPDEST DUP3 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1BEA JUMPI DUP2 PUSH2 0x1B83 SWAP2 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x66 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP4 LT ISZERO PUSH2 0xAF9 JUMPI PUSH1 0x1 DUP4 ADD PUSH1 0x66 SSTORE PUSH1 0x66 SLOAD DUP4 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x66 PUSH0 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1B6E JUMP JUMPDEST POP POP SWAP2 PUSH2 0x1C2A SWAP1 PUSH2 0x1C38 PUSH32 0x23AAD4E61744ECE164130AA415C1616E80136B0F0770E56589438B90B269265E SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x1215 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1215 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x66 PUSH0 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE ADD PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE JUMPDEST DUP2 DUP2 LT PUSH2 0x1C6C JUMPI POP PUSH2 0x1B6B JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH4 0xD1735779 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB SWAP3 SWAP2 PUSH0 SGT DUP1 ISZERO DUP3 DUP6 SGT AND SWAP2 DUP5 SLT AND OR PUSH2 0xAD6 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 SWAP1 DUP4 SWAP1 PUSH2 0x1CC3 SWAP1 PUSH2 0x17CA JUMP JUMPDEST DUP1 SWAP5 DUP5 PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH0 EQ PUSH2 0x1E3D JUMPI PUSH2 0x1CE7 SWAP3 SWAP4 POP PUSH2 0x1C86 JUMP JUMPDEST SWAP3 DUP4 ISZERO PUSH2 0x1E37 JUMPI DUP3 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD SWAP3 PUSH2 0x1D07 DUP4 PUSH2 0x17CA JUMP JUMPDEST DUP5 ISZERO ISZERO DUP1 PUSH2 0x1E12 JUMPI JUMPDEST ISZERO PUSH2 0x1D6B JUMPI PUSH2 0x1D1E PUSH0 PUSH2 0x2244 JUMP JUMPDEST SWAP5 PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP6 PUSH2 0x18B8 PUSH2 0x1D5B SWAP3 PUSH1 0x40 SWAP8 PUSH2 0x1673 JUMP JUMPDEST POP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x1D7F PUSH0 PUSH2 0x2244 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x1D8D DUP8 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x20 DUP8 ADD SWAP1 DUP2 MSTORE SWAP5 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI PUSH2 0x1DC4 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1673 JUMP JUMPDEST SWAP6 SWAP1 SWAP6 PUSH2 0x197F JUMPI MLOAD SWAP4 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 SSTORE PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP3 PUSH1 0x40 SWAP3 PUSH2 0x1D5B JUMP JUMPDEST POP PUSH0 NOT DUP6 ADD DUP6 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1E2D PUSH4 0xFFFFFFFF SWAP2 DUP7 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1D10 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST POP POP POP PUSH2 0x1E49 SWAP1 PUSH2 0x13EB JUMP JUMPDEST SWAP2 PUSH2 0x1E54 DUP2 DUP5 PUSH2 0x1C86 JUMP JUMPDEST SWAP3 DUP4 ISZERO PUSH2 0x1E37 JUMPI PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP2 PUSH1 0x40 SWAP2 DUP5 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH2 0x1E94 DUP2 DUP5 PUSH0 KECCAK256 PUSH2 0x1FC9 JUMP JUMPDEST POP POP PUSH2 0x1D5D JUMP JUMPDEST SWAP1 PUSH2 0x1EAE PUSH2 0x1EA7 PUSH2 0x17BD JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x1609 JUMP JUMPDEST SWAP1 PUSH1 0x6B SLOAD PUSH2 0x1EBC PUSH1 0x6B PUSH2 0x17CA JUMP JUMPDEST SWAP1 DUP1 ISZERO ISZERO DUP1 PUSH2 0x1FA3 JUMPI JUMPDEST ISZERO PUSH2 0x1F1F JUMPI PUSH2 0x1ED4 DUP5 PUSH2 0x2244 JUMP JUMPDEST PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0xAD6 JUMPI PUSH2 0x18B8 PUSH2 0x1EED SWAP3 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP PUSH32 0x86DCF86B12DFEEDEA74AE9300DBDAA193BCCE5809369C8177EA2F4EAAA65729B PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE LOG1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x1F33 DUP5 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1F40 DUP4 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1F7A SWAP3 ADD PUSH1 0x6B SSTORE PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x197F JUMPI SWAP2 MLOAD SWAP2 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1EED JUMP JUMPDEST POP PUSH0 NOT DUP2 ADD DUP2 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1FBF PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1EC6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP1 SLOAD PUSH2 0x1FD7 DUP3 PUSH2 0x17CA JUMP JUMPDEST SWAP2 DUP2 ISZERO ISZERO DUP1 PUSH2 0x208D JUMPI JUMPDEST ISZERO PUSH2 0x200C JUMPI PUSH2 0x1FEF DUP6 PUSH2 0x2244 JUMP JUMPDEST SWAP1 PUSH0 NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0xAD6 JUMPI PUSH2 0x2008 SWAP3 PUSH2 0x18B8 SWAP2 PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x2020 DUP6 PUSH2 0x2244 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x202E DUP5 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD SWAP1 DUP2 MSTORE SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI PUSH2 0x2065 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x197F JUMPI SWAP2 MLOAD SWAP2 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP1 JUMP JUMPDEST POP PUSH0 NOT DUP3 ADD DUP3 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x20A8 PUSH4 0xFFFFFFFF SWAP2 DUP4 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1FE1 JUMP JUMPDEST MLOAD SWAP1 PUSH0 DUP1 DUP1 JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x2115 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x20D3 DUP4 DUP8 PUSH2 0x13B6 JUMP JUMPDEST MLOAD MLOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 GT ISZERO PUSH2 0xF9A JUMPI PUSH2 0x210C PUSH1 0x1 SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x20 PUSH2 0x2102 DUP7 DUP11 PUSH2 0x13B6 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP1 PUSH2 0x13DE JUMP JUMPDEST SWAP2 ADD SWAP1 SWAP2 PUSH2 0x20B8 JUMP JUMPDEST POP SWAP2 SWAP3 POP PUSH2 0x2710 EQ SWAP1 POP PUSH2 0x2127 JUMPI PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2139 DUP3 DUP5 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2230 JUMPI ISZERO SWAP1 DUP2 PUSH2 0x221A JUMPI JUMPDEST POP PUSH2 0x2212 JUMPI PUSH0 SWAP3 PUSH2 0x2184 PUSH2 0x2192 DUP6 SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD SWAP6 PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP8 MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x17D8 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10E5 JUMP JUMPDEST MLOAD SWAP2 GAS STATICCALL RETURNDATASIZE ISZERO PUSH2 0x220B JUMPI RETURNDATASIZE PUSH2 0x21A6 DUP2 PUSH2 0x11B4 JUMP JUMPDEST SWAP1 PUSH2 0x21B4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x21FF JUMPI JUMPDEST DUP2 PUSH2 0x21CD JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xAD2 JUMPI PUSH4 0xB135D3F PUSH1 0xE1 SHL EQ SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ SWAP2 POP PUSH2 0x21C4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x21BE JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH0 PUSH2 0x214A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 GT PUSH2 0x225E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x41 DUP2 SUB PUSH2 0x22DF JUMPI POP SWAP1 PUSH2 0x22DB SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0x2321 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 SUB PUSH2 0x2318 JUMPI PUSH1 0x40 PUSH1 0x20 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP2 DUP3 PUSH1 0xFF SHR SWAP2 PUSH1 0x1B DUP4 ADD DUP1 SWAP4 GT PUSH2 0xAD6 JUMPI PUSH2 0x22DB SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND SWAP3 PUSH1 0xFF AND SWAP1 PUSH2 0x2321 JUMP JUMPDEST POP POP PUSH0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0x23B8 JUMPI PUSH1 0xFF AND SWAP1 PUSH1 0x1B DUP3 EQ ISZERO DUP1 PUSH2 0x23AD JUMPI JUMPDEST PUSH2 0x23A2 JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x80 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP7 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xAC7 JUMPI PUSH0 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x239A JUMPI SWAP1 PUSH0 SWAP1 JUMP JUMPDEST POP PUSH0 SWAP1 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP POP POP PUSH0 SWAP1 PUSH1 0x4 SWAP1 JUMP JUMPDEST POP PUSH1 0x1C DUP3 EQ ISZERO PUSH2 0x2358 JUMP JUMPDEST POP POP POP POP PUSH0 SWAP1 PUSH1 0x3 SWAP1 JUMP INVALID CHAINID POP XOR PUSH26 0xB8CA8525E8C2FD519E2FBFCFA2EBEA26501294AA02CBFCFB12E9 NUMBER SLOAD LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP16 SWAP2 0xE4 0xC9 LOG1 SWAP14 PUSH9 0x2FF7D5C5AC0CE38D02 0xED CALLER DUP3 0xD 0xC4 LOG4 LOG3 MSTORE8 0x2E MUL PUSH22 0x1A0E94B764736F6C634300081C003300000000000000 ","sourceMap":"1122:25313:37:-:0;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;2152:39:38;;1122:25313:37;;;;;;;;2152:39:38;1122:25313:37;;;;;;;-1:-1:-1;1122:25313:37;;;;;;-1:-1:-1;1122:25313:37;;;;;-1:-1:-1;1122:25313:37","linkReferences":{}},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":4381,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_address_dyn":{"entryPoint":4403,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4559,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_Quorum":{"entryPoint":4718,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint32":{"entryPoint":4513,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_bytes":{"entryPoint":6104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Quorum":{"entryPoint":4629,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":4358,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":4532,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_int256":{"entryPoint":5641,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":5086,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_int256":{"entryPoint":7302,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_array_struct_StrategyParams__dyn":{"entryPoint":4927,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":4325,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_17972":{"entryPoint":4271,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_18019":{"entryPoint":4298,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkOwner":{"entryPoint":6140,"id":2074,"parameterSlots":0,"returnSlots":0},"fun_getAtBlock":{"entryPoint":5933,"id":2665,"parameterSlots":2,"returnSlots":1},"fun_getAtBlock_17969":{"entryPoint":5768,"id":2665,"parameterSlots":1,"returnSlots":1},"fun_getOperatorWeight":{"entryPoint":5099,"id":8907,"parameterSlots":1,"returnSlots":1},"fun_isValidQuorum":{"entryPoint":8370,"id":9465,"parameterSlots":1,"returnSlots":1},"fun_isValidSignatureNow":{"entryPoint":8492,"id":3533,"parameterSlots":3,"returnSlots":1},"fun_latest":{"entryPoint":6090,"id":2589,"parameterSlots":1,"returnSlots":1},"fun_latest_17977":{"entryPoint":6077,"id":2589,"parameterSlots":0,"returnSlots":1},"fun_push":{"entryPoint":8137,"id":2744,"parameterSlots":2,"returnSlots":2},"fun_toUint224":{"entryPoint":8772,"id":4141,"parameterSlots":1,"returnSlots":1},"fun_transferOwnership":{"entryPoint":6668,"id":2131,"parameterSlots":1,"returnSlots":0},"fun_tryRecover":{"entryPoint":8883,"id":3176,"parameterSlots":2,"returnSlots":2},"fun_tryRecover_3361":{"entryPoint":8993,"id":3361,"parameterSlots":4,"returnSlots":2},"fun_updateOperatorSigningKey":{"entryPoint":6740,"id":9253,"parameterSlots":2,"returnSlots":0},"fun_updateOperatorWeight":{"entryPoint":7326,"id":9344,"parameterSlots":1,"returnSlots":1},"fun_updateOperators":{"entryPoint":5668,"id":9009,"parameterSlots":1,"returnSlots":0},"fun_updateQuorumConfig":{"entryPoint":6969,"id":9100,"parameterSlots":1,"returnSlots":0},"fun_updateStakeThreshold":{"entryPoint":6228,"id":9026,"parameterSlots":1,"returnSlots":0},"fun_updateTotalWeight":{"entryPoint":7835,"id":9388,"parameterSlots":1,"returnSlots":2},"memory_array_index_access_address_dyn_dyn":{"entryPoint":5046,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral_d688":{"entryPoint":6873,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_struct_Checkpoint__dyn":{"entryPoint":5747,"id":null,"parameterSlots":2,"returnSlots":2},"update_storage_value_offset_uint224_to_uint224":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xCF2AB5 EQ PUSH2 0x107A JUMPI DUP1 PUSH4 0xDBA3394 EQ PUSH2 0x1051 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xCAA JUMPI DUP1 PUSH4 0x1703A018 EQ PUSH2 0xC5A JUMPI DUP1 PUSH4 0x1E4CD85E EQ PUSH2 0xB5E JUMPI DUP1 PUSH4 0x314F3A49 EQ PUSH2 0xB44 JUMPI DUP1 PUSH4 0x3B242E4A EQ PUSH2 0xB0D JUMPI DUP1 PUSH4 0x3D5611F6 EQ PUSH2 0x924 JUMPI DUP1 PUSH4 0x40BF2FB7 EQ PUSH2 0x906 JUMPI DUP1 PUSH4 0x5140A548 EQ PUSH2 0x7FA JUMPI DUP1 PUSH4 0x5E1042E8 EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x5EF53329 EQ PUSH2 0x78F JUMPI DUP1 PUSH4 0x696255BE EQ PUSH2 0x714 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6B7 JUMPI DUP1 PUSH4 0x743C31F4 EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0x857DC190 EQ PUSH2 0x55A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0x955F2D90 EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0x98EC1AC9 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xAB118995 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0xB933FA74 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xCDCD3581 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xDEC5D1F6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0xEC7FBB31 EQ PUSH2 0x1BF JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x12C JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x145 PUSH2 0x111D JUMP JUMPDEST PUSH2 0x14D PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x168 JUMPI PUSH2 0x165 SWAP1 PUSH2 0x1A0C JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1EA PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6E DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x26C JUMPI PUSH2 0x22F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x126E JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x268 JUMPI PUSH2 0x263 PUSH2 0x255 PUSH2 0x165 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST SWAP2 PUSH2 0x25E PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST PUSH2 0x1624 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x295 PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6A DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2B2 SWAP1 PUSH2 0x17CA JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x6C SLOAD SWAP1 DUP2 PUSH2 0x2ED JUMPI PUSH1 0x20 SWAP2 POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x30F JUMPI POP PUSH2 0x306 PUSH1 0x20 SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD DUP2 SHR PUSH2 0x2DA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x33D PUSH2 0x111D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x268 JUMPI PUSH2 0x35C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x126E JUMP JUMPDEST DUP3 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND ISZERO SWAP3 DUP4 DUP1 SWAP5 PUSH2 0x4AB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x494 JUMPI JUMPDEST ISZERO PUSH2 0x438 JUMPI PUSH1 0xFF NOT DUP4 AND PUSH1 0x1 OR DUP6 SSTORE PUSH2 0x3C7 SWAP3 DUP5 PUSH2 0x427 JUMPI JUMPDEST POP PUSH2 0x3A1 PUSH1 0xFF DUP7 SLOAD PUSH1 0x8 SHR AND PUSH2 0x1AD9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x68 SLOAD AND OR PUSH1 0x68 SSTORE PUSH2 0x25E PUSH1 0x24 CALLDATALOAD PUSH2 0x1854 JUMP JUMPDEST PUSH2 0x3E0 PUSH1 0xFF DUP4 SLOAD PUSH1 0x8 SHR AND PUSH2 0x3DB DUP2 PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0x1AD9 JUMP JUMPDEST PUSH2 0x3E9 CALLER PUSH2 0x1A0C JUMP JUMPDEST PUSH2 0x3F0 JUMPI DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT DUP2 SLOAD AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP6 SSTORE PUSH0 PUSH2 0x390 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x377 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP5 AND EQ PUSH2 0x377 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP5 AND LT PUSH2 0x370 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH2 0x4D7 PUSH2 0x111D JUMP JUMPDEST PUSH2 0x13EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x4FE PUSH2 0x111D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0x268 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x6D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0x172D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI CALLER DUP2 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x660 JUMPI PUSH1 0x65 SLOAD DUP1 ISZERO PUSH2 0x64C JUMPI PUSH0 NOT ADD PUSH1 0x65 SSTORE CALLER DUP2 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x5B4 PUSH2 0x5AF CALLER PUSH2 0x1C9E JUMP JUMPDEST PUSH2 0x1E9B JUMP JUMPDEST POP POP PUSH1 0x68 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x649 JUMPI DUP2 DUP1 SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x51B27A6D PUSH1 0xE1 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x63E JUMPI PUSH2 0x629 JUMPI JUMPDEST POP PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH32 0x31E0ADFEC71BCCEE37B6E83A90C2FEDB17D8F1693FEE863C4771E7BFE2AED580 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x633 SWAP2 PUSH2 0x10E5 JUMP JUMPDEST PUSH2 0x1BC JUMPI DUP1 PUSH0 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x25EC6C1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x689 PUSH2 0x111D JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND ISZERO PUSH2 0x6A8 JUMPI PUSH2 0x165 SWAP1 CALLER PUSH2 0x1A54 JUMP JUMPDEST PUSH4 0x25EC6C1F PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x6D0 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x268 JUMPI PUSH32 0x713CA53B88D6EB63F5B1854CB8CBDD736EC51EDA225E46791AA9298B0160648F PUSH1 0x40 PUSH2 0x76E PUSH2 0x165 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST SWAP3 PUSH2 0x777 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x67 SLOAD SWAP1 DUP1 PUSH1 0x67 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH2 0x1624 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH2 0x7A9 PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x165 PUSH1 0x4 CALLDATALOAD PUSH2 0x1854 JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7D9 PUSH2 0x111D JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x6A DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x2B2 SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x172D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x26C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x26C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x837 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP1 PUSH2 0x845 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 PUSH1 0x5 SHL DUP2 ADD PUSH1 0x24 ADD DUP4 CALLDATASIZE DUP3 GT PUSH2 0x902 JUMPI PUSH1 0x24 DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8CF JUMPI POP POP POP POP PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x8CB JUMPI PUSH2 0x88D SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x11CF JUMP JUMPDEST POP MLOAD ISZERO PUSH2 0x8B7 JUMPI MLOAD DUP1 MLOAD PUSH1 0x65 SLOAD SUB PUSH2 0x8A8 JUMPI PUSH2 0x165 SWAP1 PUSH2 0x1624 JUMP JUMPDEST PUSH4 0x169EFB5B PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x8FE JUMPI PUSH1 0x20 SWAP2 PUSH2 0x8F3 DUP4 SWAP3 PUSH1 0x24 CALLDATASIZE SWAP2 DUP10 ADD ADD PUSH2 0x1133 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x863 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1BC JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BC JUMPI PUSH1 0x20 PUSH1 0x67 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH1 0x60 PUSH1 0x3 NOT DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0x994 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP6 ADD ADD PUSH2 0x11CF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x24 DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP4 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD SWAP1 DUP2 MSTORE SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI CALLER PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH2 0xAEA JUMPI PUSH1 0x65 SLOAD SWAP1 PUSH0 NOT DUP3 EQ PUSH2 0xAD6 JUMPI PUSH1 0x1 PUSH2 0xA17 SWAP3 ADD PUSH1 0x65 SSTORE CALLER PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xA0F PUSH2 0x5AF CALLER PUSH2 0x1C9E JUMP JUMPDEST POP POP CALLER PUSH2 0x1A54 JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0xAD2 JUMPI PUSH2 0xA63 PUSH0 DUP1 SWAP5 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x9926EE7D PUSH1 0xE0 SHL DUP6 MSTORE CALLER PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP7 ADD MSTORE MLOAD PUSH1 0x60 PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD SWAP1 PUSH2 0x17D8 JUMP JUMPDEST SWAP2 MLOAD PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xAC7 JUMPI PUSH2 0xAB4 JUMPI JUMPDEST POP PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH32 0xA453DB612AF59E5521D6AB9284DC3E2D06AF286EB1B1B7B771FCE4716C19F2C1 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH2 0xAC0 SWAP2 POP PUSH0 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x42EE68B5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB2E PUSH2 0x111D JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x4DC PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x17CA JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH2 0x17BD JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH4 0xFFFFFFFF PUSH2 0xB7C PUSH2 0x11A1 JUMP JUMPDEST AND NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6C SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xBBD JUMPI DUP3 DUP1 PUSH2 0xBA5 JUMPI POP PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x306 PUSH1 0x20 SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xBD0 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xBE2 DUP5 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0xBF4 JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0xB8C JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0xBEE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E74733A20626C6F636B206E6F7420796574206D696E6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0xC78 DUP2 PUSH2 0x10AF JUMP JUMPDEST MSTORE PUSH2 0xCA6 PUSH1 0x40 MLOAD PUSH2 0xC88 DUP2 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0xC90 PUSH2 0x133F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x1215 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0xCDD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x11CF JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x60 DUP2 PUSH1 0x20 DUP6 ADD SWAP5 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI DUP2 ADD SWAP1 DUP4 PUSH1 0x3F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xD20 DUP2 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0xD2E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP1 DUP7 ADD SWAP4 PUSH1 0x5 SHL DUP4 ADD ADD ADD SWAP1 DUP7 DUP3 GT PUSH2 0xAD2 JUMPI PUSH1 0x40 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1031 JUMPI POP POP POP PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI DUP2 ADD SWAP4 DUP1 PUSH1 0x3F DUP7 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP6 ADD MLOAD SWAP5 PUSH2 0xD86 DUP7 PUSH2 0x1106 JUMP JUMPDEST SWAP6 PUSH2 0xD94 PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH1 0x20 DUP1 DUP1 DUP10 ADD SWAP3 PUSH1 0x5 SHL DUP5 ADD ADD ADD SWAP2 DUP4 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x40 DUP2 ADD SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0xFC7 JUMPI DUP9 DUP9 DUP9 PUSH1 0x60 DUP10 ADD MLOAD SWAP2 PUSH4 0xFFFFFFFF DUP4 AND DUP1 SWAP4 SUB PUSH2 0xAD2 JUMPI DUP2 MLOAD SWAP1 PUSH0 SWAP5 PUSH0 SWAP6 DUP2 MLOAD DUP5 SUB PUSH2 0xFB8 JUMPI DUP4 ISZERO PUSH2 0xFA9 JUMPI SWAP3 SWAP1 PUSH0 SWAP3 NUMBER DUP8 LT SWAP6 DUP7 ISZERO SWAP6 JUMPDEST DUP5 DUP7 LT PUSH2 0xEF5 JUMPI POP POP POP POP POP POP PUSH2 0xEE6 JUMPI PUSH2 0xE0C DUP3 PUSH2 0x1688 JUMP JUMPDEST DUP4 GT PUSH2 0xED7 JUMPI ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6C SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xE7E JUMPI POP POP DUP1 PUSH2 0xE5E JUMPI POP PUSH0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND GT PUSH2 0xE4F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH4 0xE121632F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0xE74 SWAP1 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD PUSH1 0x20 SHR PUSH2 0xE2F JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xE91 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xEA3 DUP5 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0xEB5 JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0xE1E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0xEAF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4B05A0F7 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xE64F180F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP5 SWAP9 SWAP4 SWAP5 SWAP3 SWAP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xF0E DUP12 DUP5 PUSH2 0x13B6 JUMP JUMPDEST MLOAD AND SWAP7 PUSH2 0xEE6 JUMPI DUP7 PUSH0 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE DUP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0xF32 DUP12 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x172D JUMP JUMPDEST AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT ISZERO PUSH2 0xF9A JUMPI PUSH2 0xF59 SWAP1 DUP4 PUSH2 0xF52 DUP13 DUP9 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x212C JUMP JUMPDEST ISZERO PUSH2 0xF8B JUMPI PUSH1 0x1 PUSH2 0xF81 DUP8 SWAP5 PUSH0 SWAP9 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH2 0xF7B DUP12 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x172D JUMP JUMPDEST SWAP1 PUSH2 0x13DE JUMP JUMPDEST SWAP10 ADD SWAP5 SWAP4 SWAP3 PUSH2 0xDF2 JUMP JUMPDEST PUSH4 0x8BAA579F PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xBA50F911 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x251F56A1 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x1FEC6747 PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 SWAP1 DUP4 ADD ADD DUP6 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP2 PUSH2 0xFF7 DUP4 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x1004 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x10E5 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 DUP4 DUP6 ADD ADD DUP9 LT PUSH2 0xAD2 JUMPI PUSH0 PUSH1 0x20 DUP6 DUP2 SWAP7 PUSH1 0x40 DUP4 SWAP8 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xDB3 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xD4C JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 PUSH2 0x4DC PUSH4 0xFFFFFFFF PUSH2 0x1074 PUSH2 0x11A1 JUMP JUMPDEST AND PUSH2 0x1688 JUMP JUMPDEST CALLVALUE PUSH2 0xAD2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xAD2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAD2 JUMPI PUSH2 0x263 PUSH2 0x10AD SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1133 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xAF9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAF9 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x114B DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0x1159 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP4 PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 DUP3 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1181 JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x1174 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xAF9 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x11E6 DUP3 PUSH2 0x11B4 JUMP JUMPDEST SWAP3 PUSH2 0x11F4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0xAD2 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 DUP2 DUP5 ADD SWAP3 MLOAD SWAP4 DUP3 DUP2 MSTORE DUP5 MLOAD DUP1 SWAP5 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x123A JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 ADD MSTORE PUSH1 0x40 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x122D JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 DUP4 DUP3 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1286 DUP2 PUSH2 0x10AF JUMP JUMPDEST DUP1 SWAP4 DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xAD2 JUMPI ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x12B1 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP4 PUSH2 0x12BF PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x10E5 JUMP JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP4 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 DUP2 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x12E9 JUMPI POP POP POP POP MSTORE JUMP JUMPDEST PUSH1 0x40 DUP5 DUP4 SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1300 DUP3 PUSH2 0x10CA JUMP JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xAD2 JUMPI DUP3 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xAD2 JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x40 SWAP6 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x12DB JUMP JUMPDEST PUSH1 0x66 SLOAD SWAP1 PUSH2 0x134C DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP2 PUSH2 0x135A PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x66 PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 DUP6 ADD JUMPDEST DUP4 DUP4 LT PUSH2 0x1383 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP3 PUSH1 0x40 MLOAD PUSH2 0x1395 DUP2 PUSH2 0x10CA JUMP JUMPDEST DUP6 SLOAD DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0xA0 SHR DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x1376 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xAD6 JUMPI JUMP JUMPDEST PUSH2 0x13F3 PUSH2 0x133F JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 PUSH0 PUSH2 0x141A PUSH2 0x1404 DUP5 PUSH2 0x1106 JUMP JUMPDEST SWAP4 PUSH2 0x1412 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x10E5 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH2 0x1106 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP3 CALLDATACOPY PUSH0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x145A JUMPI PUSH1 0x1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1446 DUP3 DUP11 PUSH2 0x13B6 JUMP JUMPDEST MLOAD MLOAD AND PUSH2 0x1453 DUP3 DUP9 PUSH2 0x13B6 JUMP JUMPDEST MSTORE ADD PUSH2 0x1428 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x90041347 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND PUSH1 0x4 DUP8 ADD MSTORE PUSH1 0x24 DUP7 ADD MSTORE SWAP3 MLOAD PUSH1 0x44 DUP6 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x64 DUP4 ADD SWAP2 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x15E7 JUMPI POP PUSH0 SWAP4 SWAP3 DUP4 SWAP1 SUB SWAP2 POP DUP3 SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xAC7 JUMPI PUSH0 SWAP2 PUSH2 0x1557 JUMPI JUMPDEST POP PUSH0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x1539 JUMPI PUSH2 0x14FA DUP4 DUP4 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x20 PUSH2 0x1510 DUP7 DUP10 PUSH2 0x13B6 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x1 SWAP2 PUSH2 0x1531 SWAP2 PUSH2 0x13DE JUMP JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x14E7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2710 SWAP2 SWAP3 POP DIV PUSH1 0x67 SLOAD DUP2 LT ISZERO PUSH0 EQ PUSH2 0x1552 JUMPI SWAP1 JUMP JUMPDEST POP PUSH0 SWAP1 JUMP JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH0 DUP4 RETURNDATACOPY PUSH2 0x1568 DUP2 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xAD2 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xAD2 JUMPI ADD SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xAD2 JUMPI DUP2 MLOAD PUSH2 0x159E DUP2 PUSH2 0x1106 JUMP JUMPDEST SWAP3 PUSH2 0x15AC PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x10E5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x15D7 JUMPI POP POP POP PUSH0 PUSH2 0x14E3 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x15C7 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP6 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1496 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0xAD6 JUMPI JUMP JUMPDEST SWAP1 PUSH0 DUP1 JUMPDEST DUP4 MLOAD DUP3 LT ISZERO PUSH2 0x1662 JUMPI PUSH1 0x1 SWAP1 PUSH2 0x165A SWAP1 PUSH2 0x1654 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x164D DUP7 DUP10 PUSH2 0x13B6 JUMP JUMPDEST MLOAD AND PUSH2 0x1C9E JUMP JUMPDEST SWAP1 PUSH2 0x1609 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x1628 JUMP JUMPDEST SWAP1 POP PUSH2 0x166F SWAP2 SWAP3 POP PUSH2 0x1E9B JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x13CA JUMPI PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x6B SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x16D4 JUMPI POP POP DUP1 PUSH2 0x16B4 JUMPI POP PUSH0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x16CA SWAP1 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD PUSH1 0x20 SHR PUSH2 0x16A8 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x16E7 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x16F9 DUP5 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0x170B JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0x1697 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x1705 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 NUMBER DUP2 LT ISZERO PUSH2 0xC16 JUMPI DUP2 SLOAD SWAP1 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x1765 JUMPI POP POP DUP1 PUSH2 0x1751 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x16CA SWAP2 PUSH2 0x1673 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1778 DUP2 DUP5 XOR PUSH1 0x1 SHR DUP3 DUP6 AND PUSH2 0x13DE JUMP JUMPDEST SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1789 DUP5 DUP9 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND GT ISZERO PUSH2 0x179B JUMPI POP SWAP2 JUMPDEST SWAP1 PUSH2 0x173C JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT ISZERO PUSH2 0x1795 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x6B SLOAD DUP1 PUSH2 0x16B4 JUMPI POP PUSH0 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP1 PUSH2 0x1751 JUMPI POP PUSH0 SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1810 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x6C SLOAD SWAP1 PUSH2 0x1862 PUSH1 0x6C PUSH2 0x17CA JUMP JUMPDEST SWAP1 DUP3 ISZERO ISZERO DUP1 PUSH2 0x19E6 JUMPI JUMPDEST ISZERO PUSH2 0x18DA JUMPI PUSH2 0x187A DUP2 PUSH2 0x2244 JUMP JUMPDEST SWAP2 PUSH0 NOT DUP5 ADD SWAP4 DUP5 GT PUSH2 0xAD6 JUMPI PUSH2 0x18D0 PUSH1 0x20 SWAP4 PUSH2 0x18B8 PUSH32 0x9324F7E5A7C0288808A634CCDE44B8E979676474B22E29EE9DD569B55E791A4B SWAP7 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SWAP1 PUSH4 0xFFFFFFFF DUP3 SLOAD SWAP2 DUP2 NOT SWAP1 PUSH1 0x20 SHL AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x18EE DUP2 PUSH2 0x2244 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x18FC DUP6 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE SWAP3 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1936 SWAP3 ADD PUSH1 0x6C SSTORE PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST SWAP5 SWAP1 SWAP5 PUSH2 0x197F JUMPI MLOAD SWAP3 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND PUSH4 0xFFFFFFFF NOT PUSH1 0x20 SWAP5 DUP6 SHL AND OR SWAP1 SWAP4 SSTORE PUSH32 0x9324F7E5A7C0288808A634CCDE44B8E979676474B22E29EE9DD569B55E791A4B SWAP3 PUSH2 0x18D0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH0 NOT DUP4 ADD DUP4 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1A02 PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x6C PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x186C JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1A79 SWAP1 PUSH2 0x17CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 AND SWAP1 DUP3 DUP3 EQ PUSH2 0x1AD4 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH2 0x1AA4 DUP4 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x1FC9 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xD061168252F441733658F09E4D8F5B2D998ED4EF24A2BBFD6CECA52EA1315002 PUSH1 0x20 NUMBER SWAP4 LOG4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST ISZERO PUSH2 0x1AE0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x1B42 DUP2 PUSH2 0x20B2 JUMP JUMPDEST ISZERO PUSH2 0x1C77 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1B54 DUP4 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x1B5C PUSH2 0x133F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x66 SLOAD PUSH0 PUSH1 0x66 SSTORE DUP1 PUSH2 0x1C3D JUMPI JUMPDEST POP PUSH0 JUMPDEST DUP3 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1BEA JUMPI DUP2 PUSH2 0x1B83 SWAP2 PUSH2 0x13B6 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x66 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP4 LT ISZERO PUSH2 0xAF9 JUMPI PUSH1 0x1 DUP4 ADD PUSH1 0x66 SSTORE PUSH1 0x66 SLOAD DUP4 LT ISZERO PUSH2 0x13CA JUMPI PUSH1 0x66 PUSH0 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1B6E JUMP JUMPDEST POP POP SWAP2 PUSH2 0x1C2A SWAP1 PUSH2 0x1C38 PUSH32 0x23AAD4E61744ECE164130AA415C1616E80136B0F0770E56589438B90B269265E SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x1215 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1215 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x66 PUSH0 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE ADD PUSH0 MLOAD PUSH1 0x20 PUSH2 0x23C4 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE JUMPDEST DUP2 DUP2 LT PUSH2 0x1C6C JUMPI POP PUSH2 0x1B6B JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1C5F JUMP JUMPDEST PUSH4 0xD1735779 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB SWAP3 SWAP2 PUSH0 SGT DUP1 ISZERO DUP3 DUP6 SGT AND SWAP2 DUP5 SLT AND OR PUSH2 0xAD6 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 SWAP3 SWAP1 DUP4 SWAP1 PUSH2 0x1CC3 SWAP1 PUSH2 0x17CA JUMP JUMPDEST DUP1 SWAP5 DUP5 PUSH0 MSTORE PUSH1 0x6E PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH0 EQ PUSH2 0x1E3D JUMPI PUSH2 0x1CE7 SWAP3 SWAP4 POP PUSH2 0x1C86 JUMP JUMPDEST SWAP3 DUP4 ISZERO PUSH2 0x1E37 JUMPI DUP3 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP2 SLOAD SWAP3 PUSH2 0x1D07 DUP4 PUSH2 0x17CA JUMP JUMPDEST DUP5 ISZERO ISZERO DUP1 PUSH2 0x1E12 JUMPI JUMPDEST ISZERO PUSH2 0x1D6B JUMPI PUSH2 0x1D1E PUSH0 PUSH2 0x2244 JUMP JUMPDEST SWAP5 PUSH0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xAD6 JUMPI PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP6 PUSH2 0x18B8 PUSH2 0x1D5B SWAP3 PUSH1 0x40 SWAP8 PUSH2 0x1673 JUMP JUMPDEST POP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x1D7F PUSH0 PUSH2 0x2244 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x1D8D DUP8 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP6 AND PUSH1 0x20 DUP8 ADD SWAP1 DUP2 MSTORE SWAP5 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI PUSH2 0x1DC4 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1673 JUMP JUMPDEST SWAP6 SWAP1 SWAP6 PUSH2 0x197F JUMPI MLOAD SWAP4 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP4 SSTORE PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP3 PUSH1 0x40 SWAP3 PUSH2 0x1D5B JUMP JUMPDEST POP PUSH0 NOT DUP6 ADD DUP6 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1E2D PUSH4 0xFFFFFFFF SWAP2 DUP7 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1D10 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST POP POP POP PUSH2 0x1E49 SWAP1 PUSH2 0x13EB JUMP JUMPDEST SWAP2 PUSH2 0x1E54 DUP2 DUP5 PUSH2 0x1C86 JUMP JUMPDEST SWAP3 DUP4 ISZERO PUSH2 0x1E37 JUMPI PUSH32 0x88770DC862E47A7ED586907857EB1B75E4C5FFC8B707C7EE10EB74D6885FE594 SWAP2 PUSH1 0x40 SWAP2 DUP5 PUSH0 MSTORE PUSH1 0x6D PUSH1 0x20 MSTORE PUSH2 0x1E94 DUP2 DUP5 PUSH0 KECCAK256 PUSH2 0x1FC9 JUMP JUMPDEST POP POP PUSH2 0x1D5D JUMP JUMPDEST SWAP1 PUSH2 0x1EAE PUSH2 0x1EA7 PUSH2 0x17BD JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x1609 JUMP JUMPDEST SWAP1 PUSH1 0x6B SLOAD PUSH2 0x1EBC PUSH1 0x6B PUSH2 0x17CA JUMP JUMPDEST SWAP1 DUP1 ISZERO ISZERO DUP1 PUSH2 0x1FA3 JUMPI JUMPDEST ISZERO PUSH2 0x1F1F JUMPI PUSH2 0x1ED4 DUP5 PUSH2 0x2244 JUMP JUMPDEST PUSH0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0xAD6 JUMPI PUSH2 0x18B8 PUSH2 0x1EED SWAP3 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP PUSH32 0x86DCF86B12DFEEDEA74AE9300DBDAA193BCCE5809369C8177EA2F4EAAA65729B PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE LOG1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x1F33 DUP5 PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1F40 DUP4 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI DUP1 PUSH1 0x1 PUSH2 0x1F7A SWAP3 ADD PUSH1 0x6B SSTORE PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x197F JUMPI SWAP2 MLOAD SWAP2 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1EED JUMP JUMPDEST POP PUSH0 NOT DUP2 ADD DUP2 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x1FBF PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x6B PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1EC6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP1 SLOAD PUSH2 0x1FD7 DUP3 PUSH2 0x17CA JUMP JUMPDEST SWAP2 DUP2 ISZERO ISZERO DUP1 PUSH2 0x208D JUMPI JUMPDEST ISZERO PUSH2 0x200C JUMPI PUSH2 0x1FEF DUP6 PUSH2 0x2244 JUMP JUMPDEST SWAP1 PUSH0 NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0xAD6 JUMPI PUSH2 0x2008 SWAP3 PUSH2 0x18B8 SWAP2 PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF NUMBER GT PUSH2 0x1992 JUMPI PUSH2 0x2020 DUP6 PUSH2 0x2244 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x202E DUP5 PUSH2 0x10CA JUMP JUMPDEST NUMBER PUSH4 0xFFFFFFFF AND DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD SWAP1 DUP2 MSTORE SWAP2 PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0xAF9 JUMPI PUSH2 0x2065 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1673 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x197F JUMPI SWAP2 MLOAD SWAP2 MLOAD PUSH1 0x20 SHL PUSH4 0xFFFFFFFF NOT AND PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP1 JUMP JUMPDEST POP PUSH0 NOT DUP3 ADD DUP3 DUP2 GT PUSH2 0xAD6 JUMPI PUSH2 0x20A8 PUSH4 0xFFFFFFFF SWAP2 DUP4 PUSH2 0x1673 JUMP JUMPDEST POP SLOAD AND NUMBER EQ PUSH2 0x1FE1 JUMP JUMPDEST MLOAD SWAP1 PUSH0 DUP1 DUP1 JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x2115 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x20D3 DUP4 DUP8 PUSH2 0x13B6 JUMP JUMPDEST MLOAD MLOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 GT ISZERO PUSH2 0xF9A JUMPI PUSH2 0x210C PUSH1 0x1 SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x20 PUSH2 0x2102 DUP7 DUP11 PUSH2 0x13B6 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP1 PUSH2 0x13DE JUMP JUMPDEST SWAP2 ADD SWAP1 SWAP2 PUSH2 0x20B8 JUMP JUMPDEST POP SWAP2 SWAP3 POP PUSH2 0x2710 EQ SWAP1 POP PUSH2 0x2127 JUMPI PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2139 DUP3 DUP5 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2230 JUMPI ISZERO SWAP1 DUP2 PUSH2 0x221A JUMPI JUMPDEST POP PUSH2 0x2212 JUMPI PUSH0 SWAP3 PUSH2 0x2184 PUSH2 0x2192 DUP6 SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD SWAP6 PUSH4 0xB135D3F PUSH1 0xE1 SHL DUP8 MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x17D8 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x10E5 JUMP JUMPDEST MLOAD SWAP2 GAS STATICCALL RETURNDATASIZE ISZERO PUSH2 0x220B JUMPI RETURNDATASIZE PUSH2 0x21A6 DUP2 PUSH2 0x11B4 JUMP JUMPDEST SWAP1 PUSH2 0x21B4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x10E5 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x21FF JUMPI JUMPDEST DUP2 PUSH2 0x21CD JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xAD2 JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xAD2 JUMPI PUSH4 0xB135D3F PUSH1 0xE1 SHL EQ SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ SWAP2 POP PUSH2 0x21C4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x21BE JUMP JUMPDEST POP POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH0 PUSH2 0x214A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 GT PUSH2 0x225E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x41 DUP2 SUB PUSH2 0x22DF JUMPI POP SWAP1 PUSH2 0x22DB SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0x2321 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 SUB PUSH2 0x2318 JUMPI PUSH1 0x40 PUSH1 0x20 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP2 DUP3 PUSH1 0xFF SHR SWAP2 PUSH1 0x1B DUP4 ADD DUP1 SWAP4 GT PUSH2 0xAD6 JUMPI PUSH2 0x22DB SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB AND SWAP3 PUSH1 0xFF AND SWAP1 PUSH2 0x2321 JUMP JUMPDEST POP POP PUSH0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0x23B8 JUMPI PUSH1 0xFF AND SWAP1 PUSH1 0x1B DUP3 EQ ISZERO DUP1 PUSH2 0x23AD JUMPI JUMPDEST PUSH2 0x23A2 JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x80 SWAP4 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP7 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xAC7 JUMPI PUSH0 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x239A JUMPI SWAP1 PUSH0 SWAP1 JUMP JUMPDEST POP PUSH0 SWAP1 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP POP POP PUSH0 SWAP1 PUSH1 0x4 SWAP1 JUMP JUMPDEST POP PUSH1 0x1C DUP3 EQ ISZERO PUSH2 0x2358 JUMP JUMPDEST POP POP POP POP PUSH0 SWAP1 PUSH1 0x3 SWAP1 JUMP INVALID CHAINID POP XOR PUSH26 0xB8CA8525E8C2FD519E2FBFCFA2EBEA26501294AA02CBFCFB12E9 NUMBER SLOAD LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP16 SWAP2 0xE4 0xC9 LOG1 SWAP14 PUSH9 0x2FF7D5C5AC0CE38D02 0xED CALLER DUP3 0xD 0xC4 LOG4 LOG3 MSTORE8 0x2E MUL PUSH22 0x1A0E94B764736F6C634300081C003300000000000000 ","sourceMap":"1122:25313:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;:::i;:::-;1303:62:8;;:::i;:::-;-1:-1:-1;;;;;1122:25313:37;;2409:22:8;1122:25313:37;;2503:8:8;;;:::i;:::-;1122:25313:37;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;:::i;:::-;;;;9949:19;1122:25313;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1122:25313:37;;;;4261:7;1122:25313;4296:10;1122:25313;;;;;;:::i;:::-;1303:62:8;;;:::i;:::-;4261:7:37;:::i;:::-;4296:10;:::i;1122:25313::-;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;:::i;:::-;;;;6861:26;1122:25313;;;;;-1:-1:-1;;;;;1122:25313:37;6861:46;;;:::i;:::-;1122:25313;;;;;;;;;;;;;;;;;;;;8466:23;1122:25313;;1069:8:12;;;1122:25313:37;1069:48:12;;;1122:25313:37;;-1:-1:-1;;;;;1122:25313:37;;;;;;;1069:48:12;-1:-1:-1;;1122:25313:37;;;;;;;1084:26:12;;1122:25313:37;1084:26:12;8466:23:37;1084:26:12;:::i;:::-;1122:25313:37;;;;1069:48:12;;1122:25313:37;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;:::i;:::-;;;;;;;;;3133:14:10;;;;3179:34;;;1122:25313:37;3178:108:10;;;;1122:25313:37;;;;-1:-1:-1;;1122:25313:37;;;;;;11708:7;;1122:25313;3394:65:10;;1122:25313:37;;4902:69:10;1122:25313:37;;;;;;4902:69:10;:::i;:::-;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;11592:37;1122:25313;;;11592:37;1122:25313;11661:16;1122:25313;;11661:16;:::i;11708:7::-;4902:69:10;1122:25313:37;;;;;;4902:69:10;;;:::i;:::-;;:::i;:::-;1195:12:8;929:10:13;1195:12:8;:::i;:::-;3479:99:10;;1122:25313:37;;3479:99:10;1122:25313:37;;;;;;;3553:14:10;1122:25313:37;;;;;;3553:14:10;1122:25313:37;;3394:65:10;-1:-1:-1;;1122:25313:37;;;;;3394:65:10;;;1122:25313:37;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;3178:108:10;3258:4;;1476:19:11;:23;3219:66:10;;3178:108;3219:66;1122:25313:37;;;;;3268:17:10;3178:108;;3179:34;1122:25313:37;;;;;3197:16:10;3179:34;;1122:25313:37;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;8946:22;1122:25313;;;;;;;;8946:58;;1122:25313;8946:58;:::i;1122:25313::-;;;;;;;;;;;;;1513:6:8;1122:25313:37;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;2833:10;1122:25313;;14973:19;1122:25313;;;;;;;;14972:31;14968:92;;15069:17;1122:25313;;;;;;;;15069:17;1122:25313;2833:10;1122:25313;;14973:19;1122:25313;;;;;;;;;;;;15200:25;15158:32;2833:10;15158:32;:::i;:::-;15200:25;:::i;:::-;-1:-1:-1;;15251:15:37;1122:25313;;;-1:-1:-1;;;;;1122:25313:37;15235:69;;;;;1122:25313;;;15235:69;1122:25313;;;;;;;;;15235:69;;2833:10;1122:25313;15235:69;;1122:25313;15235:69;;;;;;;;1122:25313;-1:-1:-1;15251:15:37;1122:25313;-1:-1:-1;;;;;1122:25313:37;2833:10;15319:57;;;;1122:25313;;15235:69;;;;;:::i;:::-;1122:25313;;15235:69;;;;;1122:25313;;;;;;;;;15235:69;1122:25313;;;-1:-1:-1;;;1122:25313:37;;;;;;;;14968:92;-1:-1:-1;;;15026:23:37;;1122:25313;;15026:23;1122:25313;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;:::i;:::-;3156:10;1122:25313;;3136:19;1122:25313;;;;;;;;3135:32;3131:93;;3271:14;3156:10;;3271:14;:::i;3131:93::-;-1:-1:-1;;;3190:23:37;;1122:25313;3190:23;;1122:25313;;;;;;;;;;;;;1303:62:8;;:::i;:::-;2765:6;1122:25313:37;;-1:-1:-1;;;;;;1122:25313:37;;;;;;;-1:-1:-1;;;;;1122:25313:37;2813:40:8;1122:25313:37;;2813:40:8;1122:25313:37;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;13932:57;1122:25313;;4752:10;1122:25313;;;;;;:::i;:::-;1303:62:8;;;:::i;:::-;13859:14:37;1122:25313;;;13859:14;1122:25313;;;;;;;;;;13932:57;4752:10;:::i;1122:25313::-;;;;;;;-1:-1:-1;;1122:25313:37;;;;1303:62:8;;:::i;:::-;5403:16:37;1122:25313;;5403:16;:::i;1122:25313::-;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;:::i;:::-;;;;7450:26;1122:25313;;;;;-1:-1:-1;;;;;1122:25313:37;7450:108;;1122:25313;;;7450:108;:::i;1122:25313::-;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;:::i;:::-;;;;;;12195:21;1122:25313;;12605:15;1122:25313;12584:36;12580:98;;12704:10;;;:::i;12580:98::-;-1:-1:-1;;;12643:24:37;;1122:25313;12643:24;;1122:25313;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10158:14;1122:25313;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;2658:10;1122:25313;;15820:19;1122:25313;;;;;;;;15816:95;;15920:17;1122:25313;;-1:-1:-1;;1122:25313:37;;;;;16123:11;1122:25313;;15920:17;1122:25313;2658:10;1122:25313;;15820:19;1122:25313;;;;;;;;;;;;;;16051:25;16009:32;2658:10;16009:32;:::i;16051:25::-;2658:10;;;16123:11;:::i;:::-;16161:15;1122:25313;-1:-1:-1;;;;;1122:25313:37;16145:119;;;;;1122:25313;;;;;;;;;;;;;;;;16145:119;;2658:10;1122:25313;16145:119;;1122:25313;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;16145:119;;;;;;;;;;1122:25313;-1:-1:-1;16161:15:37;1122:25313;-1:-1:-1;;;;;1122:25313:37;2658:10;16279:46;;;;1122:25313;;16145:119;;;;1122:25313;16145:119;;:::i;:::-;1122:25313;16145:119;;;;1122:25313;;;;;;;;;16145:119;1122:25313;;;;;;;;;;;;;;;15816:95;15873:27;;;1122:25313;15873:27;1122:25313;;15873:27;1122:25313;;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;:::i;:::-;;;;7914:22;1122:25313;;;7914:42;1122:25313;;;7914:42;:::i;1122:25313::-;;;;;;-1:-1:-1;;1122:25313:37;;;;;8188:28;;:::i;1122:25313::-;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;:::i;:::-;;1441:12:12;1427:26;;1122:25313:37;;;9781:23;1122:25313;1550:15:12;1122:25313:37;1575:255:12;1582:10;;;;;;1846:50;:9;;;-1:-1:-1;1122:25313:37;;;;;;;;1846:50:12;-1:-1:-1;;1122:25313:37;;;;;;;1862:27:12;1122:25313:37;1862:27:12;9781:23:37;1862:27:12;:::i;1575:255::-;953:5:17;;942:21;953:5;;;729:6:38;;943:5:17;;;942:21;:::i;:::-;1674:22:12;;1122:25313:37;1674:22:12;;9781:23:37;1674:22:12;:::i;:::-;-1:-1:-1;1122:25313:37;;1674:49:12;;;;1743:10;1670:150;;1575:255;;;1670:150;1122:25313:37;;729:6:38;1122:25313:37;;;;;;1670:150:12;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;:::i;:::-;;;;6101:56;;;1122:25313;6101:56;1122:25313;6101:56;;1122:25313;;;;;;6101:56;;1122:25313;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20642:20;1122:25313;20696:20;1122:25313;;;;21765:35;;21761:89;;21863:19;;21859:72;;20802:9;;1122:25313;23417:12;;23398:31;;;;;20797:536;20813:17;;;;;;24922:92;;;;;;;;25030:47;;;:::i;:::-;26173:27;;26169:86;;1122:25313;;;25625:23;1122:25313;1550:15:12;1122:25313:37;1575:255:12;1582:10;;;;;;-1:-1:-1;;1846:9:12;;;:50;1122:25313:37;1846:50:12;-1:-1:-1;;;;;1122:25313:37;26338:30;26334:93;;1122:25313;;-1:-1:-1;;;1122:25313:37;;;;;26334:93;26391:25;;;1122:25313;26391:25;1122:25313;;26391:25;1846:50:12;-1:-1:-1;;1122:25313:37;;;;;;;1862:27:12;;25625:23:37;1862:27:12;:::i;:::-;1122:25313:37;;;;1846:50:12;;1575:255;953:5:17;;942:21;953:5;;;1122:25313:37;729:6:38;943:5:17;;;942:21;:::i;:::-;1674:22:12;;1122:25313:37;1674:22:12;;25625:23:37;1674:22:12;:::i;:::-;-1:-1:-1;1122:25313:37;;1674:49:12;;;;1743:10;1670:150;;1575:255;;;1670:150;1122:25313:37;;;;;;;;;1670:150:12;1122:25313:37;;;;;;;;;;;;26169:86;26223:21;;;1122:25313;26223:21;1122:25313;;26223:21;24922:92;23452:23;;;1122:25313;24980:23;1122:25313;;24980:23;20832:3;1122:25313;;;;;;;-1:-1:-1;;;;;20869:13:37;1122:25313;20869:13;;:::i;:::-;1122:25313;;23394:92;;;1122:25313;;;23568:26;1122:25313;;;;;;;;23568:111;1122:25313;;;;23568:111;:::i;:::-;1122:25313;;-1:-1:-1;;;;;1122:25313:37;22273:29;;22269:78;;22772:50;21081:14;;;;;;:::i;:::-;;22772:50;;:::i;:::-;22771:51;22767:107;;1122:25313;21292:30;21111;24224:92;1122:25313;;;;24332:22;1122:25313;;24332:59;1122:25313;;;;24332:59;:::i;:::-;21292:30;;:::i;:::-;20832:3;1122:25313;20802:9;;;;;22767:107;22845:18;;;1122:25313;22845:18;1122:25313;;22845:18;22269:78;22325:11;;;1122:25313;22325:11;1122:25313;;22325:11;21859:72;21905:15;;;1122:25313;21905:15;1122:25313;;21905:15;21761:89;21823:16;;;1122:25313;21823:16;1122:25313;;21823:16;1122:25313;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;9364:44;1122:25313;;;:::i;:::-;;9364:44;:::i;1122:25313::-;;;;;;-1:-1:-1;;1122:25313:37;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;3687:10;1122:25313;;;;;;:::i;3687:10::-;1122:25313;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;:::o;:::-;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;1122:25313:37;;;;;;-1:-1:-1;;1122:25313:37;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1122:25313:37;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;6511:7;1122:25313;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;6511:7;-1:-1:-1;1122:25313:37;;;-1:-1:-1;;;;;;;;;;;1122:25313:37;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;10470:803::-;1122:25313;;:::i;:::-;;;10639:14;;1122:25313;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;-1:-1:-1;;1122:25313:37;;;;;10786:3;1122:25313;;10759:25;;;;;1122:25313;;-1:-1:-1;;;;;10821:17:37;1122:25313;10821:17;;:::i;:::-;;1122:25313;;10805:42;;;;:::i;:::-;1122:25313;;10748:9;;10759:25;-1:-1:-1;1122:25313:37;;;-1:-1:-1;;;10893:93:37;;-1:-1:-1;;;;;1122:25313:37;;;10893:93;;;1122:25313;;;;;;;;;;;;;10759:25;;;;1122:25313;;;;;;;;-1:-1:-1;1122:25313:37;;;;;;-1:-1:-1;1122:25313:37;;10893:93;;;;;-1:-1:-1;10893:93:37;;-1:-1:-1;10893:18:37;-1:-1:-1;;;;;1122:25313:37;10893:93;;;;;;;1122:25313;10893:93;;;1122:25313;11001:9;1122:25313;10996:123;11039:3;1122:25313;;11012:25;;;;;11068:9;;;;:::i;:::-;1122:25313;11080:17;-1:-1:-1;;;;;1122:25313:37;11080:17;;;;:::i;:::-;;:28;1122:25313;;;;;;;;;;;;;;;;;;11058:50;;;;:::i;:::-;11039:3;1122:25313;11001:9;;;11012:25;;;;729:6:38;11012:25:37;;;729:6:38;11174:14:37;1122:25313;11164:24;;;11160:107;11174:14;;;11204:13;:::o;11160:107::-;11248:8;1122:25313;11248:8;:::o;10893:93::-;;;;;1122:25313;10893:93;;;;;;:::i;:::-;;;1122:25313;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;10893:93;;;;;;1122:25313;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1122:25313:37;;;;;-1:-1:-1;1122:25313:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12971:251::-;;-1:-1:-1;;13106:3:37;1122:25313;;13083:21;;;;;1122:25313;;13125:45;;13134:36;-1:-1:-1;;;;;13156:13:37;;;;:::i;:::-;1122:25313;;13134:36;:::i;:::-;13125:45;;:::i;:::-;13106:3;1122:25313;13072:9;;;13083:21;;;13190:25;13083:21;;;13190:25;:::i;:::-;12971:251;;:::o;1122:25313::-;;;;;;;;-1:-1:-1;1122:25313:37;;-1:-1:-1;1122:25313:37;;;-1:-1:-1;1122:25313:37;:::o;1314:589:12:-;1441:12;1427:26;;1122:25313:37;;;9364:19;1122:25313;1550:15:12;1516:17;1575:255;1582:10;;;;;;-1:-1:-1;;1846:9:12;;;:50;1516:17;1846:50;-1:-1:-1;;;;;1122:25313:37;;1314:589:12:o;1846:50::-;-1:-1:-1;;1122:25313:37;;;;;;;1862:27:12;;9364:19:37;1862:27:12;:::i;:::-;1122:25313:37;;;;1846:50:12;;1575:255;953:5:17;;942:21;953:5;;;729:6:38;;943:5:17;;;942:21;:::i;:::-;1674:22:12;;1122:25313:37;1674:22:12;;9364:19:37;1674:22:12;:::i;:::-;-1:-1:-1;1122:25313:37;;1674:49:12;;;;1743:10;1670:150;;1575:255;;;1670:150;1122:25313:37;;729:6:38;1122:25313:37;;;;;;1670:150:12;1122:25313:37;;;;1516:17:12;1122:25313:37;;;;;1516:17:12;1122:25313:37;1314:589:12;;1441:12;1427:26;;1122:25313:37;;;;;1550:15:12;1516:17;1575:255;1582:10;;;;;;-1:-1:-1;;1846:9:12;;;-1:-1:-1;1516:17:12;;1122:25313:37;-1:-1:-1;1314:589:12:o;1846:50::-;-1:-1:-1;;1122:25313:37;;;;;;;1862:27:12;;;:::i;1575:255::-;953:5:17;;942:21;953:5;;;729:6:38;;943:5:17;;;942:21;:::i;:::-;1674:22:12;;1122:25313:37;1674:22:12;;;;:::i;:::-;-1:-1:-1;1122:25313:37;;1674:49:12;;;;1743:10;1670:150;;1575:255;;;1670:150;1122:25313:37;;729:6:38;1122:25313:37;;;;;;1670:150:12;1122:25313:37;;;;1516:17:12;1122:25313:37;;;;;1516:17:12;1122:25313:37;934:190:12;8188:19:37;1122:25313;1069:8:12;;;-1:-1:-1;1028:17:12;;934:190::o;:::-;1122:25313:37;;1069:8:12;;;-1:-1:-1;1028:17:12;;1122:25313:37;-1:-1:-1;934:190:12:o;1122:25313:37:-;;;;;;;;;;;;;;;;;-1:-1:-1;1122:25313:37;;;;;;;;-1:-1:-1;;1122:25313:37;;;;:::o;1599:130:8:-;1513:6;1122:25313:37;-1:-1:-1;;;;;1122:25313:37;929:10:13;1662:23:8;1122:25313:37;;1599:130:8:o;1122:25313:37:-;;;;;;;;;;;;;;;;;;;;;;;;;13392:184;13468:23;1122:25313;2240:12:12;;13468:23:37;2240:12:12;:::i;:::-;2266:7;;;;:66;;;13392:184:37;2262:370:12;;;2384:36;;;:::i;:::-;1122:25313:37;;;;;;;;;;2348:72:12;1122:25313:37;2348:26:12;;13529:40:37;2348:26:12;13468:23:37;2348:26:12;:::i;:::-;:72;1122:25313:37;;;;;;;;;;;;;;;;;2348:72:12;2641:19;1122:25313:37;;;;;13529:40;13392:184::o;2262:370:12:-;1122:25313:37;2546:12:12;15272:25:18;1122:25313:37;;2569:36:12;;;:::i;:::-;1122:25313:37;;;;;;;:::i;:::-;2546:12:12;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;;2491:116:12;;;1122:25313:37;;;2491:116:12;-1:-1:-1;;;1122:25313:37;;;;;;;;;;13468:23;1122:25313;13468:23;1122:25313;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;13529:40;;2262:370:12;;1122:25313:37;;;;-1:-1:-1;1122:25313:37;-1:-1:-1;1122:25313:37;;;-1:-1:-1;1122:25313:37;;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;2266:66:12;-1:-1:-1;;;1122:25313:37;;;;;;;2277:26:12;1122:25313:37;2277:26:12;13468:23:37;2277:26:12;:::i;:::-;1122:25313:37;;;2320:12:12;2277:55;2266:66;;2673:187:8;2765:6;1122:25313:37;;-1:-1:-1;;;;;1122:25313:37;;;-1:-1:-1;;;;;;1122:25313:37;;;;;;;;;;2813:40:8;-1:-1:-1;;2813:40:8;2673:187::o;16562:535:37:-;-1:-1:-1;;;;;1122:25313:37;;;-1:-1:-1;1122:25313:37;;;16734:26;1122:25313;;;;;;;;;16734:46;;;:::i;:::-;-1:-1:-1;;;;;1122:25313:37;;;;;;;16805:31;;;16801:68;;1122:25313;-1:-1:-1;1122:25313:37;16734:26;1122:25313;;16878:67;1122:25313;;-1:-1:-1;1122:25313:37;16878:67;:::i;:::-;1122:25313;;;;;;;16960:130;1122:25313;17013:12;16960:130;;16562:535::o;16801:68::-;16852:7;;;:::o;1122:25313::-;;;;:::o;:::-;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;14360:416;14439:26;;;:::i;:::-;14438:27;14434:80;;1122:25313;;;;;;:::i;:::-;;;:::i;:::-;;;14549:7;1122:25313;-1:-1:-1;14549:7:37;1122:25313;;;;14360:416;14595:9;-1:-1:-1;14640:3:37;14610:21;;1122:25313;;14606:32;;;;;14683:24;;;;:::i;:::-;;1122:25313;14549:7;1122:25313;;-1:-1:-1;;;1122:25313:37;;;;;;;;14549:7;1122:25313;14549:7;1122:25313;;;;;;14549:7;-1:-1:-1;1122:25313:37;;;;;;;;;;;-1:-1:-1;;;;;;1122:25313:37;-1:-1:-1;;;;;1122:25313:37;;;;;-1:-1:-1;;;;;;;;;;;1122:25313:37;;;;;;;;;14595:9;;14606:32;;;;1122:25313;14606:32;1122:25313;14733:36;14606:32;1122:25313;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;14733:36;;;14360:416::o;1122:25313::-;14549:7;-1:-1:-1;1122:25313:37;-1:-1:-1;;;;;;;;;;;1122:25313:37;-1:-1:-1;;;;;;;;;;;1122:25313:37;;;;;;;;;;-1:-1:-1;1122:25313:37;;;;;;14434:80;14488:15;;;-1:-1:-1;14488:15:37;;-1:-1:-1;14488:15:37;1122:25313;;;;;;;-1:-1:-1;1122:25313:37;;;;;;;;;;;;;:::o;17277:810::-;-1:-1:-1;;;;;1122:25313:37;;;;;;17454:22;1122:25313;;;;;;;17407:17;1122:25313;;17454:42;;;:::i;:::-;1122:25313;;;;;17511:19;1122:25313;;;;;;;;17510:31;17506:484;1122:25313;;;17557:26;;;;;:::i;:::-;17601:10;;;17597:61;;1122:25313;;;17454:22;1122:25313;;;;;17671:41;1122:25313;;2240:12:12;;;;:::i;:::-;2266:7;;;:66;;;17506:484:37;2262:370:12;;;2384:36;1122:25313:37;2384:36:12;:::i;:::-;1122:25313:37;-1:-1:-1;;1122:25313:37;;;;;;;18004:54;2348:26:12;;:72;:26;1122:25313:37;2348:26:12;;:::i;:72::-;2641:19;17506:484:37;1122:25313;;;;;;;;;18004:54;17277:810;:::o;2262:370:12:-;1122:25313:37;2546:12:12;15272:25:18;1122:25313:37;;2569:36:12;1122:25313:37;2569:36:12;:::i;:::-;1122:25313:37;;;;;;;:::i;:::-;2546:12:12;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;;;2491:116:12;;1122:25313:37;;;2491:116:12;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;;;;;18004:54;;1122:25313;;2262:370:12;;2266:66;-1:-1:-1;;;1122:25313:37;;;;;;;2277:26:12;1122:25313:37;2277:26:12;;;:::i;:::-;1122:25313:37;;;2320:12:12;2277:55;2266:66;;17597:61:37;17631:12;;;;:::o;17506:484::-;17755:28;;;;;;:::i;:::-;17805:37;;;;;:::i;:::-;17860:10;;;17856:61;;18004:54;1122:25313;;;;;;17454:22;1122:25313;;17930:49;1122:25313;;;;17930:49;:::i;:::-;17506:484;;;;18366:403;;18572:30;18515:28;;:::i;:::-;18572:30;;;:::i;:::-;18657:40;18515:19;1122:25313;2240:12:12;18515:19:37;2240:12:12;:::i;:::-;2266:7;;;;:66;;;18366:403:37;2262:370:12;;;2384:36;;;:::i;:::-;-1:-1:-1;;1122:25313:37;;;;;;;2348:26:12;:72;:26;18515:19:37;2348:26:12;:::i;:72::-;2641:19;18712:50:37;1122:25313;;;;;;;;;;;18712:50;18366:403::o;2262:370:12:-;1122:25313:37;2546:12:12;15272:25:18;1122:25313:37;;2569:36:12;;;:::i;:::-;1122:25313:37;;;;;;:::i;:::-;2546:12:12;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;;2491:116:12;;;1122:25313:37;;;2491:116:12;-1:-1:-1;;;1122:25313:37;;;;;;;;;;18515:19;1122:25313;18515:19;1122:25313;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;;;;2262:370:12;;2266:66;-1:-1:-1;;;1122:25313:37;;;;;;;2277:26:12;1122:25313:37;2277:26:12;18515:19:37;2277:26:12;:::i;:::-;1122:25313:37;;;2320:12:12;2277:55;2266:66;;2081:586;;;;1122:25313:37;;2240:12:12;;;:::i;:::-;2266:7;;;;:66;;;2081:586;2262:370;;;2384:36;;;:::i;:::-;1122:25313:37;;;;;;;;;;2348:72:12;:26;;;;:::i;:72::-;2641:19;2081:586;:::o;2262:370::-;1122:25313:37;2546:12:12;15272:25:18;1122:25313:37;;2569:36:12;;;:::i;:::-;1122:25313:37;;;;;;;:::i;:::-;2546:12:12;1122:25313:37;;;;-1:-1:-1;;;;;1122:25313:37;;;2491:116:12;;;1122:25313:37;;;2491:116:12;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;1122:25313:37;;;;;;;;;;;;2641:19:12;2081:586;:::o;2266:66::-;-1:-1:-1;;;1122:25313:37;;;;;;;2277:26:12;1122:25313:37;2277:26:12;;;:::i;:::-;1122:25313:37;;;2320:12:12;2277:55;2266:66;;19208:671:37;19345:18;;1122:25313;;;19508:3;1122:25313;;19485:21;;;;;-1:-1:-1;;;;;19553:13:37;;;;:::i;:::-;;1122:25313;;;-1:-1:-1;;;;;1122:25313:37;19594:31;-1:-1:-1;19594:31:37;19590:55;;19703:43;1122:25313;19659:30;19722:13;-1:-1:-1;;;;;19722:24:37;:13;;;;:::i;:::-;;:24;1122:25313;;19703:43;;:::i;:::-;19508:3;1122:25313;19474:9;;;;19485:21;-1:-1:-1;19485:21:37;;-1:-1:-1;729:6:38;19770:22:37;;-1:-1:-1;729:6:38;;1122:25313:37;19808:12;:::o;19766:107::-;1122:25313;19851:11;:::o;1083:688:16:-;;;;1294:44;;;;:::i;:::-;1122:25313:37;;;;;;1352:46:16;:69;;;;1083:688;1348:111;;;1122:25313:37;;;1538:86:16;1122:25313:37;;;;1538:86:16;;;;;;6250:45:37;;;;1538:86:16;;;;;1122:25313:37;;;;;;;;;;;:::i;:::-;1538:86:16;1122:25313:37;;1538:86:16;;;;;;:::i;:::-;1507:127;;;;1122:25313:37;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1538:86:16;1122:25313:37;;;;1652:30:16;;;1122:25313:37;1652:111:16;;;1644:120;1083:688;:::o;1652:111::-;1122:25313:37;;1538:86:16;1122:25313:37;;;1686:28:16;;1122:25313:37;;;;1538:86:16;1686:28;1122:25313:37;-1:-1:-1;;;;;;1122:25313:37;;;;;;;;-1:-1:-1;;;1686:77:16;;1083:688::o;1652:30::-;1122:25313:37;;1538:86:16;1663:19;;-1:-1:-1;1652:30:16;;1122:25313:37;;;;1348:111:16;1437:11;;;1122:25313:37;1437:11:16;:::o;1352:69::-;-1:-1:-1;;;;;1122:25313:37;;;;;1402:19:16;;-1:-1:-1;1352:69:16;;;1122:25313:37;;;;;;;;;;;;2762:192:18;-1:-1:-1;;;;;2846:26:18;;1122:25313:37;;-1:-1:-1;;;;;1122:25313:37;;2762:192:18:o;1122:25313:37:-;;;-1:-1:-1;;;1122:25313:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;1122:25313:37;;;;;;;2265:1373:15;1122:25313:37;;2596:2:15;2576:22;;2596:2;;2859:180;;3059:25;2859:180;;;;;;;;;;;;;;-1:-1:-1;2859:180:15;3059:25;;:::i;:::-;3052:32;;:::o;2572:1060::-;3125:2;3105:22;3125:2;;;3368:123;;;;;;;1122:25313:37;;;;;5189:2:15;1122:25313:37;;;;;;;5209:25:15;;-1:-1:-1;;;;;5060:80:15;;1122:25313:37;;;5209:25:15;:::i;3101:531::-;3565:56;;3581:1;3565:56;3585:35;3565:56;:::o;5832:1603::-;;6882:66;6869:79;;6865:161;;1122:25313:37;;7039:7:15;7044:2;7039:7;;;:18;;;5832:1603;7035:100;;1122:25313:37;;-1:-1:-1;1122:25313:37;;;;;;;;;;;;;;;;;;;;7246:24:15;;;;;;;;;-1:-1:-1;7246:24:15;-1:-1:-1;;;;;1122:25313:37;;7284:20:15;7280:101;;7391:37;-1:-1:-1;5832:1603:15;:::o;7280:101::-;7320:50;-1:-1:-1;7320:50:15;7246:24;7320:50;:::o;7035:100::-;7073:51;;;;7089:1;7073:51;7093:30;7073:51;:::o;7039:18::-;7050:7;7055:2;7050:7;;;7039:18;;6865:161;6964:51;;;;6980:1;6964:51;6984:30;6964:51;:::o","linkReferences":{},"immutableReferences":{"9784":[{"start":5291,"length":32}]}},"methodIdentifiers":{"deregisterOperator()":"857dc190","getLastCheckpointOperatorWeight(address)":"3b242e4a","getLastCheckpointThresholdWeight()":"b933fa74","getLastCheckpointThresholdWeightAtBlock(uint32)":"1e4cd85e","getLastCheckpointTotalWeight()":"314f3a49","getLastCheckpointTotalWeightAtBlock(uint32)":"0dba3394","getLastestOperatorSigningKey(address)":"cdcd3581","getOperatorSigningKeyAtBlock(address,uint256)":"5e1042e8","getOperatorWeight(address)":"98ec1ac9","getOperatorWeightAtBlock(address,uint32)":"955f2d90","initialize(address,uint256,((address,uint96)[]))":"ab118995","isValidSignature(bytes32,bytes)":"1626ba7e","minimumWeight()":"40bf2fb7","operatorRegistered(address)":"ec7fbb31","owner()":"8da5cb5b","quorum()":"1703a018","registerOperatorWithSignature((bytes,bytes32,uint256),address)":"3d5611f6","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","updateMinimumWeight(uint256,address[])":"696255be","updateOperatorSigningKey(address)":"743c31f4","updateOperators(address[])":"00cf2ab5","updateOperatorsForQuorum(address[][],bytes)":"5140a548","updateQuorumConfig(((address,uint96)[]),address[])":"dec5d1f6","updateStakeThreshold(uint256)":"5ef53329"}}}},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol":{"ECDSAStakeRegistryStorage":{"abi":[{"type":"event","name":"MinimumWeightUpdated","inputs":[{"name":"_old","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"_new","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorDeregistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"_avs","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorWeightUpdated","inputs":[{"name":"_operator","type":"address","indexed":true,"internalType":"address"},{"name":"oldWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"QuorumUpdated","inputs":[{"name":"_old","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]},{"name":"_new","type":"tuple","indexed":false,"internalType":"struct Quorum","components":[{"name":"strategies","type":"tuple[]","internalType":"struct StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}]}],"anonymous":false},{"type":"event","name":"SigningKeyUpdate","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"updateBlock","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"newSigningKey","type":"address","indexed":true,"internalType":"address"},{"name":"oldSigningKey","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ThresholdWeightUpdated","inputs":[{"name":"_thresholdWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TotalWeightUpdated","inputs":[{"name":"oldTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdateMinimumWeight","inputs":[{"name":"oldMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newMinimumWeight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InsufficientSignedStake","inputs":[]},{"type":"error","name":"InsufficientWeight","inputs":[]},{"type":"error","name":"InvalidLength","inputs":[]},{"type":"error","name":"InvalidQuorum","inputs":[]},{"type":"error","name":"InvalidReferenceBlock","inputs":[]},{"type":"error","name":"InvalidSignature","inputs":[]},{"type":"error","name":"InvalidSignedWeight","inputs":[]},{"type":"error","name":"InvalidThreshold","inputs":[]},{"type":"error","name":"LengthMismatch","inputs":[]},{"type":"error","name":"MustUpdateAllOperators","inputs":[]},{"type":"error","name":"NotSorted","inputs":[]},{"type":"error","name":"OperatorAlreadyRegistered","inputs":[]},{"type":"error","name":"OperatorNotRegistered","inputs":[]}],"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientSignedStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuorum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferenceBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignedWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustUpdateAllOperators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"MinimumWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_avs\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"OperatorWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_old\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct StrategyParams[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Quorum\",\"name\":\"_new\",\"type\":\"tuple\"}],\"name\":\"QuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updateBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigningKey\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSigningKey\",\"type\":\"address\"}],\"name\":\"SigningKeyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_thresholdWeight\",\"type\":\"uint256\"}],\"name\":\"ThresholdWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalWeight\",\"type\":\"uint256\"}],\"name\":\"TotalWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumWeight\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumWeight\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"MinimumWeightUpdated(uint256,uint256)\":{\"params\":{\"_new\":\"The new minimumWeight\",\"_old\":\"The previous minimum weight\"}},\"OperatorDeregistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the deregistered operator\"}},\"OperatorRegistered(address,address)\":{\"params\":{\"_avs\":\"The address of the associated AVS\",\"_operator\":\"The address of the registered operator\"}},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"params\":{\"_operator\":\"The address of the operator updated\",\"newWeight\":\"The operator's weight after the update\",\"oldWeight\":\"The operator's weight before the update\"}},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"params\":{\"_new\":\"The new quorum configuration\",\"_old\":\"The previous quorum configuration\"}},\"SigningKeyUpdate(address,uint256,address,address)\":{\"params\":{\"newSigningKey\":\"The operator's signing key after the update\",\"oldSigningKey\":\"The operator's signing key before the update\",\"operator\":\"The address of the operator whose signing key was updated\",\"updateBlock\":\"The block number at which the signing key was updated\"}},\"TotalWeightUpdated(uint256,uint256)\":{\"params\":{\"newTotalWeight\":\"The total weight after the update\",\"oldTotalWeight\":\"The total weight before the update\"}},\"UpdateMinimumWeight(uint256,uint256)\":{\"params\":{\"newMinimumWeight\":\"The updated weight\",\"oldMinimumWeight\":\"The previous weight\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_delegationManager\":\"Connects this registry with the DelegationManager\"}}},\"stateVariables\":{\"BPS\":{\"details\":\"The total amount of multipliers to weigh stakes\"},\"__gap\":{\"details\":\"Reserves storage slots for future upgrades\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientSignedStake()\":[{\"notice\":\"Indicates the total signed stake fails to meet the required threshold.\"}],\"InsufficientWeight()\":[{\"notice\":\"Indicates an individual signer's weight fails to meet the required threshold.\"}],\"InvalidLength()\":[{\"notice\":\"Indicates encountering an invalid length for the signers or signatures array.\"}],\"InvalidQuorum()\":[{\"notice\":\"Indicates the quorum is invalid\"}],\"InvalidReferenceBlock()\":[{\"notice\":\"Reference blocks must be for blocks that have already been confirmed\"}],\"InvalidSignature()\":[{\"notice\":\"Indicates encountering an invalid signature.\"}],\"InvalidSignedWeight()\":[{\"notice\":\"Indicates operator weights were out of sync and the signed weight exceed the total\"}],\"InvalidThreshold()\":[{\"notice\":\"Thrown when the threshold update is greater than BPS\"}],\"LengthMismatch()\":[{\"notice\":\"Indicates when the lengths of the signers array and signatures array do not match.\"}],\"MustUpdateAllOperators()\":[{\"notice\":\"Thrown when missing operators in an update\"}],\"NotSorted()\":[{\"notice\":\"Indicates the system finds a list of items unsorted\"}],\"OperatorAlreadyRegistered()\":[{\"notice\":\"Thrown when registering an already registered operator\"}],\"OperatorNotRegistered()\":[{\"notice\":\"Thrown when de-registering or updating the stake for an unregisted operator\"}]},\"events\":{\"MinimumWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the weight to join the operator set updates\"},\"OperatorDeregistered(address,address)\":{\"notice\":\"Emitted when the system deregisters an operator\"},\"OperatorRegistered(address,address)\":{\"notice\":\"Emitted when the system registers an operator\"},\"OperatorWeightUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when the system updates an operator's weight\"},\"QuorumUpdated(((address,uint96)[]),((address,uint96)[]))\":{\"notice\":\"Emitted when the system updates the quorum\"},\"SigningKeyUpdate(address,uint256,address,address)\":{\"notice\":\"Emitted when an operator's signing key is updated\"},\"ThresholdWeightUpdated(uint256)\":{\"notice\":\"Emits when setting a new threshold weight.\"},\"TotalWeightUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the system updates the total weight\"},\"UpdateMinimumWeight(uint256,uint256)\":{\"notice\":\"Emitted when the weight required to be an operator changes\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\":\"ECDSAStakeRegistryStorage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/\",\":@eigenlayer/middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer/test/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/test/\",\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":ds-test/=lib/eigenlayer-middleware/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":erc4626-tests/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/contracts/\",\":zeus-templates/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/zeus-templates/src/\"],\"viaIR\":true},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xe81ddde979612b77f32ff93d18118326304f8606671abc22b491d005aa4ca924\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0ade6ec99eaed94cee212880292abe32d24d2d7cd2babbc0d971dd2d8b8fc3e3\",\"dweb:/ipfs/QmWs5JE1JfDB1KvrGU3XAhnopa9sdMwTGW6AQJPGQMvuaT\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\":{\"keccak256\":\"0x7fb4716864bc9693785f07ce15f325a44413ad5d2d5685852a9e6112927abd60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2abe805bc615c15daea179f3ff3e3b890f9c0d5ec18d0bb8fad03ab128157ee3\",\"dweb:/ipfs/Qma4UizH7DhTeDfGfkhFFKLnU6p8U9cmodTbgTdRzeFoXX\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c983bca009e0c413b39f851ca4728c20c42bcf5359252131d48f612ee5757a70\",\"dweb:/ipfs/QmP1c7MV6FdzTBYTFdosLNijvGa1dKeaGXy5Ax5UV381GZ\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f8cf00c5981b953e57af6f8d6dad38ff0c90c61f1f1b03042039a41797aa198b\",\"dweb:/ipfs/QmdngJRARxdVwxqG7vHDRf2QSBxK6294Ab16G6hsMoXqew\"]},\"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\":{\"keccak256\":\"0x87d62369932af21f32ea3c66d3238e6b65fd90a00bfb537a639189f4d8ceb7dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6951c38bc040fdb1f35e117390a1936543974e062fcc519300365a68c800c88d\",\"dweb:/ipfs/QmVPjxkL1bLaA6EtthcoerTaMjAmJx8Lv1hchALEkNMfDH\"]},\"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\":{\"keccak256\":\"0xd78e86c73c9b5b588281ac78051e97b5c32f766383575750c9245f4fec1b547c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c917f123adc35cd48a60a768abea19c7c99487c82260429571ae093235e902a\",\"dweb:/ipfs/QmaiLzxQ1GxPk9oxcgVXPtBBviSW9dVEsmC4xZgvWLxko8\"]}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}}}}},"sources":{"contracts/HelloWorldServiceManager.sol":{"id":0,"ast":{"absolutePath":"contracts/HelloWorldServiceManager.sol","id":218,"exportedSymbols":{"ECDSAServiceManagerBase":[8415],"ECDSAStakeRegistry":[9768],"ECDSAUpgradeable":[3454],"HelloWorldServiceManager":[217],"IERC1271Upgradeable":[2151],"IERC20":[6545],"IHelloWorldServiceManager":[280],"IRewardsCoordinator":[1874],"IServiceManager":[7319],"IStrategy":[2005],"Strings":[7148],"TransparentUpgradeableProxy":[6467]},"nodeType":"SourceUnit","src":"39:4046:0","nodes":[{"id":1,"nodeType":"PragmaDirective","src":"39:23:0","nodes":[],"literals":["solidity","^","0.8",".9"]},{"id":3,"nodeType":"ImportDirective","src":"64:105:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol","file":"@eigenlayer/middleware/src/unaudited/ECDSAServiceManagerBase.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":8416,"symbolAliases":[{"foreign":{"id":2,"name":"ECDSAServiceManagerBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"72:23:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5,"nodeType":"ImportDirective","src":"170:95:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol","file":"@eigenlayer/middleware/src/unaudited/ECDSAStakeRegistry.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":9769,"symbolAliases":[{"foreign":{"id":4,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"178:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7,"nodeType":"ImportDirective","src":"266:90:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol","file":"@eigenlayer/middleware/src/interfaces/IServiceManager.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":7320,"symbolAliases":[{"foreign":{"id":6,"name":"IServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7319,"src":"274:15:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":9,"nodeType":"ImportDirective","src":"357:106:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/utils/cryptography/ECDSAUpgradeable.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":3455,"symbolAliases":[{"foreign":{"id":8,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"365:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":11,"nodeType":"ImportDirective","src":"464:104:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol","file":"@openzeppelin-upgrades/contracts/interfaces/IERC1271Upgradeable.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":2152,"symbolAliases":[{"foreign":{"id":10,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"472:19:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":13,"nodeType":"ImportDirective","src":"569:74:0","nodes":[],"absolutePath":"contracts/IHelloWorldServiceManager.sol","file":"./IHelloWorldServiceManager.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":281,"symbolAliases":[{"foreign":{"id":12,"name":"IHelloWorldServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"577:25:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":14,"nodeType":"ImportDirective","src":"644:51:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":7149,"symbolAliases":[],"unitAlias":""},{"id":15,"nodeType":"ImportDirective","src":"696:66:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","file":"@eigenlayer/contracts/interfaces/IRewardsCoordinator.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":1875,"symbolAliases":[],"unitAlias":""},{"id":17,"nodeType":"ImportDirective","src":"763:118:0","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol","file":"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol","nameLocation":"-1:-1:-1","scope":218,"sourceUnit":6468,"symbolAliases":[{"foreign":{"id":16,"name":"TransparentUpgradeableProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6467,"src":"771:27:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":217,"nodeType":"ContractDefinition","src":"988:3096:0","nodes":[{"id":25,"nodeType":"UsingForDirective","src":"1090:35:0","nodes":[],"global":false,"libraryName":{"id":23,"name":"ECDSAUpgradeable","nameLocations":["1096:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":3454,"src":"1096:16:0"},"typeName":{"id":24,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1117:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"id":27,"nodeType":"VariableDeclaration","src":"1131:27:0","nodes":[],"baseFunctions":[245],"constant":false,"functionSelector":"8b00ce7c","mutability":"mutable","name":"latestTaskNum","nameLocation":"1145:13:0","scope":217,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":26,"name":"uint32","nodeType":"ElementaryTypeName","src":"1131:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"public"},{"id":31,"nodeType":"VariableDeclaration","src":"1388:47:0","nodes":[],"baseFunctions":[252],"constant":false,"functionSelector":"2d89f6fc","mutability":"mutable","name":"allTaskHashes","nameLocation":"1422:13:0","scope":217,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"},"typeName":{"id":30,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":28,"name":"uint32","nodeType":"ElementaryTypeName","src":"1396:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Mapping","src":"1388:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1406:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"id":37,"nodeType":"VariableDeclaration","src":"1531:68:0","nodes":[],"baseFunctions":[261],"constant":false,"functionSelector":"c20bab7f","mutability":"mutable","name":"allTaskResponses","nameLocation":"1583:16:0","scope":217,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_bytes_storage_$_$","typeString":"mapping(address => mapping(uint32 => bytes))"},"typeName":{"id":36,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1539:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1531:44:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_bytes_storage_$_$","typeString":"mapping(address => mapping(uint32 => bytes))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":35,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":33,"name":"uint32","nodeType":"ElementaryTypeName","src":"1558:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Mapping","src":"1550:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes_storage_$","typeString":"mapping(uint32 => bytes)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":34,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}}},"visibility":"public"},{"id":52,"nodeType":"ModifierDefinition","src":"1606:190:0","nodes":[],"body":{"id":51,"nodeType":"Block","src":"1630:166:0","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":44,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1714:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1718:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1714:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":41,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"1680:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":40,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"1661:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAStakeRegistry_$9768_$","typeString":"type(contract ECDSAStakeRegistry)"}},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAStakeRegistry_$9768","typeString":"contract ECDSAStakeRegistry"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1695:18:0","memberName":"operatorRegistered","nodeType":"MemberAccess","referencedDeclaration":8794,"src":"1661:52:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f70657261746f72206d757374206265207468652063616c6c6572","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1739:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4fa72fa5c9fef03f73800b32eb996ac4bd54e4e163aa888fa5b08b3c608b36cc","typeString":"literal_string \"Operator must be the caller\""},"value":"Operator must be the caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4fa72fa5c9fef03f73800b32eb996ac4bd54e4e163aa888fa5b08b3c608b36cc","typeString":"literal_string \"Operator must be the caller\""}],"id":39,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1640:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1640:138:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"1640:138:0"},{"id":50,"nodeType":"PlaceholderStatement","src":"1788:1:0"}]},"name":"onlyOperator","nameLocation":"1615:12:0","parameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"1627:2:0"},"virtual":false,"visibility":"internal"},{"id":70,"nodeType":"FunctionDefinition","src":"1802:322:0","nodes":[],"body":{"id":69,"nodeType":"Block","src":"2122:2:0","nodes":[],"statements":[]},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":63,"name":"_avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"2001:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":64,"name":"_stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"2028:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":65,"name":"_rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"2056:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":66,"name":"_delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"2089:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":67,"kind":"baseConstructorSpecifier","modifierName":{"id":62,"name":"ECDSAServiceManagerBase","nameLocations":["1964:23:0"],"nodeType":"IdentifierPath","referencedDeclaration":8415,"src":"1964:23:0"},"nodeType":"ModifierInvocation","src":"1964:153:0"}],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"_avsDirectory","nameLocation":"1831:13:0","nodeType":"VariableDeclaration","scope":70,"src":"1823:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"1823:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"_stakeRegistry","nameLocation":"1862:14:0","nodeType":"VariableDeclaration","scope":70,"src":"1854:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"1854:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"_rewardsCoordinator","nameLocation":"1894:19:0","nodeType":"VariableDeclaration","scope":70,"src":"1886:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":57,"name":"address","nodeType":"ElementaryTypeName","src":"1886:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":60,"mutability":"mutable","name":"_delegationManager","nameLocation":"1931:18:0","nodeType":"VariableDeclaration","scope":70,"src":"1923:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"1923:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1813:142:0"},"returnParameters":{"id":68,"nodeType":"ParameterList","parameters":[],"src":"2122:0:0"},"scope":217,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":123,"nodeType":"FunctionDefinition","src":"2215:497:0","nodes":[],"body":{"id":122,"nodeType":"Block","src":"2289:423:0","nodes":[],"statements":[{"assignments":[80],"declarations":[{"constant":false,"id":80,"mutability":"mutable","name":"newTask","nameLocation":"2347:7:0","nodeType":"VariableDeclaration","scope":122,"src":"2335:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":79,"nodeType":"UserDefinedTypeName","pathNode":{"id":78,"name":"Task","nameLocations":["2335:4:0"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"2335:4:0"},"referencedDeclaration":240,"src":"2335:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"}],"id":81,"nodeType":"VariableDeclarationStatement","src":"2335:19:0"},{"expression":{"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":82,"name":"newTask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2364:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}},"id":84,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2372:4:0","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":237,"src":"2364:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":85,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"2379:4:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2364:19:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":87,"nodeType":"ExpressionStatement","src":"2364:19:0"},{"expression":{"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":88,"name":"newTask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2393:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}},"id":90,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2401:16:0","memberName":"taskCreatedBlock","nodeType":"MemberAccess","referencedDeclaration":239,"src":"2393:24:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":93,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2427:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2433:6:0","memberName":"number","nodeType":"MemberAccess","src":"2427:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2420:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":91,"name":"uint32","nodeType":"ElementaryTypeName","src":"2420:6:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2393:47:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":97,"nodeType":"ExpressionStatement","src":"2393:47:0"},{"expression":{"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":98,"name":"allTaskHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"2523:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"}},"id":100,"indexExpression":{"id":99,"name":"latestTaskNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2537:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2523:28:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":104,"name":"newTask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2575:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}],"expression":{"id":102,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2564:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2568:6:0","memberName":"encode","nodeType":"MemberAccess","src":"2564:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2564:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":101,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2554:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2554:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2523:61:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":108,"nodeType":"ExpressionStatement","src":"2523:61:0"},{"eventCall":{"arguments":[{"id":110,"name":"latestTaskNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2614:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":111,"name":"newTask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2629:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}],"id":109,"name":"NewTaskCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"2599:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint32_$_t_struct$_Task_$240_memory_ptr_$returns$__$","typeString":"function (uint32,struct IHelloWorldServiceManager.Task memory)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":113,"nodeType":"EmitStatement","src":"2594:43:0"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":114,"name":"latestTaskNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2647:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":115,"name":"latestTaskNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2663:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2679:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2663:17:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2647:33:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":119,"nodeType":"ExpressionStatement","src":"2647:33:0"},{"expression":{"id":120,"name":"newTask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2698:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task memory"}},"functionReturnParameters":77,"id":121,"nodeType":"Return","src":"2691:14:0"}]},"baseFunctions":[269],"functionSelector":"85edf874","implemented":true,"kind":"function","modifiers":[],"name":"createNewTask","nameLocation":"2224:13:0","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"name","nameLocation":"2252:4:0","nodeType":"VariableDeclaration","scope":123,"src":"2238:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":71,"name":"string","nodeType":"ElementaryTypeName","src":"2238:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2237:20:0"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":123,"src":"2276:11:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":75,"nodeType":"UserDefinedTypeName","pathNode":{"id":74,"name":"Task","nameLocations":["2276:4:0"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"2276:4:0"},"referencedDeclaration":240,"src":"2276:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"}],"src":"2275:13:0"},"scope":217,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":216,"nodeType":"FunctionDefinition","src":"2718:1364:0","nodes":[],"body":{"id":215,"nodeType":"Block","src":"2851:1231:0","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":137,"name":"task","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"3002:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task calldata"}],"expression":{"id":135,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2991:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2995:6:0","memberName":"encode","nodeType":"MemberAccess","src":"2991:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2991:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":134,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2981:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2981:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":140,"name":"allTaskHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"3012:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"}},"id":142,"indexExpression":{"id":141,"name":"referenceTaskIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3026:18:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3012:33:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2981:64:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"737570706c696564207461736b20646f6573206e6f74206d6174636820746865206f6e65207265636f7264656420696e2074686520636f6e7472616374","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3059:63:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_8358489e92dfb0f78b5b06c25508a0cca1da42041fdf02ce0f7644a8978f5461","typeString":"literal_string \"supplied task does not match the one recorded in the contract\""},"value":"supplied task does not match the one recorded in the contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8358489e92dfb0f78b5b06c25508a0cca1da42041fdf02ce0f7644a8978f5461","typeString":"literal_string \"supplied task does not match the one recorded in the contract\""}],"id":133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2960:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2960:172:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":146,"nodeType":"ExpressionStatement","src":"2960:172:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":148,"name":"allTaskResponses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"3163:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_bytes_storage_$_$","typeString":"mapping(address => mapping(uint32 => bytes storage ref))"}},"id":151,"indexExpression":{"expression":{"id":149,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3180:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3184:6:0","memberName":"sender","nodeType":"MemberAccess","src":"3180:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3163:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes_storage_$","typeString":"mapping(uint32 => bytes storage ref)"}},"id":153,"indexExpression":{"id":152,"name":"referenceTaskIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3192:18:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3163:48:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3212:6:0","memberName":"length","nodeType":"MemberAccess","src":"3163:55:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3222:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3163:60:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f70657261746f722068617320616c726561647920726573706f6e64656420746f20746865207461736b","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3237:44:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_947c6d4eb718e2b9289bc7e2a5f29fd356bba4e853faf0947b90b2c42c2d52c7","typeString":"literal_string \"Operator has already responded to the task\""},"value":"Operator has already responded to the task"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_947c6d4eb718e2b9289bc7e2a5f29fd356bba4e853faf0947b90b2c42c2d52c7","typeString":"literal_string \"Operator has already responded to the task\""}],"id":147,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3142:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3142:149:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":159,"nodeType":"ExpressionStatement","src":"3142:149:0"},{"assignments":[161],"declarations":[{"constant":false,"id":161,"mutability":"mutable","name":"messageHash","nameLocation":"3349:11:0","nodeType":"VariableDeclaration","scope":215,"src":"3341:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3341:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":170,"initialValue":{"arguments":[{"arguments":[{"hexValue":"48656c6c6f2c20","id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:9:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_315bd5b018847bd1e5590b19fc301179788844029ccf0523278ec2eb6a799e82","typeString":"literal_string \"Hello, \""},"value":"Hello, "},{"expression":{"id":166,"name":"task","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"3401:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task calldata"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3406:4:0","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":237,"src":"3401:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_315bd5b018847bd1e5590b19fc301179788844029ccf0523278ec2eb6a799e82","typeString":"literal_string \"Hello, \""},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":163,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3373:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3377:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"3373:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3373:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":162,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3363:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3363:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3341:71:0"},{"assignments":[172],"declarations":[{"constant":false,"id":172,"mutability":"mutable","name":"ethSignedMessageHash","nameLocation":"3430:20:0","nodeType":"VariableDeclaration","scope":215,"src":"3422:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3422:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":176,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":173,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"3453:11:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3465:22:0","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":3411,"src":"3453:34:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3453:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3422:67:0"},{"assignments":[178],"declarations":[{"constant":false,"id":178,"mutability":"mutable","name":"magicValue","nameLocation":"3556:10:0","nodeType":"VariableDeclaration","scope":215,"src":"3549:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3549:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":182,"initialValue":{"expression":{"expression":{"id":179,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"3569:19:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271Upgradeable_$2151_$","typeString":"type(contract IERC1271Upgradeable)"}},"id":180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3589:16:0","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"3569:36:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271Upgradeable.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3606:8:0","memberName":"selector","nodeType":"MemberAccess","src":"3569:45:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"3549:65:0"},{"condition":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3642:174:0","subExpression":{"components":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":183,"name":"magicValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"3644:10:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":188,"name":"ethSignedMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"3746:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":189,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"3788:9:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":185,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"3693:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":184,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"3674:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAStakeRegistry_$9768_$","typeString":"type(contract ECDSAStakeRegistry)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3674:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAStakeRegistry_$9768","typeString":"contract ECDSAStakeRegistry"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3708:16:0","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":8644,"src":"3674:50:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (bytes32,bytes memory) view external returns (bytes4)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3674:141:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3644:171:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":192,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3643:173:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":198,"nodeType":"IfStatement","src":"3625:235:0","trueBody":{"id":197,"nodeType":"Block","src":"3827:33:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":194,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3841:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3841:8:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":196,"nodeType":"ExpressionStatement","src":"3841:8:0"}]}},{"expression":{"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":199,"name":"allTaskResponses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"3922:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint32_$_t_bytes_storage_$_$","typeString":"mapping(address => mapping(uint32 => bytes storage ref))"}},"id":203,"indexExpression":{"expression":{"id":200,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3939:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3943:6:0","memberName":"sender","nodeType":"MemberAccess","src":"3939:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3922:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes_storage_$","typeString":"mapping(uint32 => bytes storage ref)"}},"id":204,"indexExpression":{"id":202,"name":"referenceTaskIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3951:18:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3922:48:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":205,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"3973:9:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3922:60:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":207,"nodeType":"ExpressionStatement","src":"3922:60:0"},{"eventCall":{"arguments":[{"id":209,"name":"referenceTaskIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4038:18:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":210,"name":"task","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4058:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task calldata"}},{"expression":{"id":211,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4064:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4068:6:0","memberName":"sender","nodeType":"MemberAccess","src":"4064:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"id":208,"name":"TaskResponded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"4024:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint32_$_t_struct$_Task_$240_memory_ptr_$_t_address_$returns$__$","typeString":"function (uint32,struct IHelloWorldServiceManager.Task memory,address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4024:51:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":214,"nodeType":"EmitStatement","src":"4019:56:0"}]},"baseFunctions":[279],"functionSelector":"3415a49c","implemented":true,"kind":"function","modifiers":[],"name":"respondToTask","nameLocation":"2727:13:0","parameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"task","nameLocation":"2764:4:0","nodeType":"VariableDeclaration","scope":216,"src":"2750:18:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":125,"nodeType":"UserDefinedTypeName","pathNode":{"id":124,"name":"Task","nameLocations":["2750:4:0"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"2750:4:0"},"referencedDeclaration":240,"src":"2750:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"referenceTaskIndex","nameLocation":"2785:18:0","nodeType":"VariableDeclaration","scope":216,"src":"2778:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":127,"name":"uint32","nodeType":"ElementaryTypeName","src":"2778:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":130,"mutability":"mutable","name":"signature","nameLocation":"2826:9:0","nodeType":"VariableDeclaration","scope":216,"src":"2813:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":129,"name":"bytes","nodeType":"ElementaryTypeName","src":"2813:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2740:101:0"},"returnParameters":{"id":132,"nodeType":"ParameterList","parameters":[],"src":"2851:0:0"},"scope":217,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":19,"name":"ECDSAServiceManagerBase","nameLocations":["1029:23:0"],"nodeType":"IdentifierPath","referencedDeclaration":8415,"src":"1029:23:0"},"id":20,"nodeType":"InheritanceSpecifier","src":"1029:23:0"},{"baseName":{"id":21,"name":"IHelloWorldServiceManager","nameLocations":["1058:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":280,"src":"1058:25:0"},"id":22,"nodeType":"InheritanceSpecifier","src":"1058:25:0"}],"canonicalName":"HelloWorldServiceManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"883:104:0","text":" @title Primary entrypoint for procuring services from HelloWorld.\n @author Eigen Labs, Inc."},"fullyImplemented":true,"linearizedBaseContracts":[217,280,8415,2137,2821,2302,7319,7368],"name":"HelloWorldServiceManager","nameLocation":"997:24:0","scope":218,"usedErrors":[],"usedEvents":[226,235,2022,2166,7318]}],"license":"UNLICENSED"}},"contracts/IHelloWorldServiceManager.sol":{"id":1,"ast":{"absolutePath":"contracts/IHelloWorldServiceManager.sol","id":281,"exportedSymbols":{"IHelloWorldServiceManager":[280]},"nodeType":"SourceUnit","src":"39:777:1","nodes":[{"id":219,"nodeType":"PragmaDirective","src":"39:23:1","nodes":[],"literals":["solidity","^","0.8",".9"]},{"id":280,"nodeType":"ContractDefinition","src":"64:751:1","nodes":[{"id":226,"nodeType":"EventDefinition","src":"106:58:1","nodes":[],"anonymous":false,"eventSelector":"58180a6a0403a63c2b5ce4b85d129d46a80d37851b2216bd0a98b59e7309b847","name":"NewTaskCreated","nameLocation":"112:14:1","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"indexed":true,"mutability":"mutable","name":"taskIndex","nameLocation":"142:9:1","nodeType":"VariableDeclaration","scope":226,"src":"127:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":220,"name":"uint32","nodeType":"ElementaryTypeName","src":"127:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":224,"indexed":false,"mutability":"mutable","name":"task","nameLocation":"158:4:1","nodeType":"VariableDeclaration","scope":226,"src":"153:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":223,"nodeType":"UserDefinedTypeName","pathNode":{"id":222,"name":"Task","nameLocations":["153:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"153:4:1"},"referencedDeclaration":240,"src":"153:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"}],"src":"126:37:1"}},{"id":235,"nodeType":"EventDefinition","src":"170:75:1","nodes":[],"anonymous":false,"eventSelector":"8eb2d2fcccf5801e10ff58cd73e8781ba923122963789378771f03c1148b023e","name":"TaskResponded","nameLocation":"176:13:1","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"indexed":true,"mutability":"mutable","name":"taskIndex","nameLocation":"205:9:1","nodeType":"VariableDeclaration","scope":235,"src":"190:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":227,"name":"uint32","nodeType":"ElementaryTypeName","src":"190:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":231,"indexed":false,"mutability":"mutable","name":"task","nameLocation":"221:4:1","nodeType":"VariableDeclaration","scope":235,"src":"216:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Task","nameLocations":["216:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"216:4:1"},"referencedDeclaration":240,"src":"216:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"},{"constant":false,"id":233,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"235:8:1","nodeType":"VariableDeclaration","scope":235,"src":"227:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"189:55:1"}},{"id":240,"nodeType":"StructDefinition","src":"251:73:1","nodes":[],"canonicalName":"IHelloWorldServiceManager.Task","members":[{"constant":false,"id":237,"mutability":"mutable","name":"name","nameLocation":"280:4:1","nodeType":"VariableDeclaration","scope":240,"src":"273:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":236,"name":"string","nodeType":"ElementaryTypeName","src":"273:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"taskCreatedBlock","nameLocation":"301:16:1","nodeType":"VariableDeclaration","scope":240,"src":"294:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":238,"name":"uint32","nodeType":"ElementaryTypeName","src":"294:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Task","nameLocation":"258:4:1","scope":280,"visibility":"public"},{"id":245,"nodeType":"FunctionDefinition","src":"330:56:1","nodes":[],"functionSelector":"8b00ce7c","implemented":false,"kind":"function","modifiers":[],"name":"latestTaskNum","nameLocation":"339:13:1","parameters":{"id":241,"nodeType":"ParameterList","parameters":[],"src":"352:2:1"},"returnParameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"378:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":242,"name":"uint32","nodeType":"ElementaryTypeName","src":"378:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"377:8:1"},"scope":280,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":252,"nodeType":"FunctionDefinition","src":"392:73:1","nodes":[],"functionSelector":"2d89f6fc","implemented":false,"kind":"function","modifiers":[],"name":"allTaskHashes","nameLocation":"401:13:1","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"taskIndex","nameLocation":"422:9:1","nodeType":"VariableDeclaration","scope":252,"src":"415:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":246,"name":"uint32","nodeType":"ElementaryTypeName","src":"415:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"414:18:1"},"returnParameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":252,"src":"456:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"456:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"455:9:1"},"scope":280,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":261,"nodeType":"FunctionDefinition","src":"471:121:1","nodes":[],"functionSelector":"c20bab7f","implemented":false,"kind":"function","modifiers":[],"name":"allTaskResponses","nameLocation":"480:16:1","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"operator","nameLocation":"514:8:1","nodeType":"VariableDeclaration","scope":261,"src":"506:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":253,"name":"address","nodeType":"ElementaryTypeName","src":"506:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"taskIndex","nameLocation":"539:9:1","nodeType":"VariableDeclaration","scope":261,"src":"532:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":255,"name":"uint32","nodeType":"ElementaryTypeName","src":"532:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"496:58:1"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":261,"src":"578:12:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":258,"name":"bytes","nodeType":"ElementaryTypeName","src":"578:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"577:14:1"},"scope":280,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":269,"nodeType":"FunctionDefinition","src":"598:74:1","nodes":[],"functionSelector":"85edf874","implemented":false,"kind":"function","modifiers":[],"name":"createNewTask","nameLocation":"607:13:1","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"name","nameLocation":"635:4:1","nodeType":"VariableDeclaration","scope":269,"src":"621:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":262,"name":"string","nodeType":"ElementaryTypeName","src":"621:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"620:20:1"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":269,"src":"659:11:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_memory_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":266,"nodeType":"UserDefinedTypeName","pathNode":{"id":265,"name":"Task","nameLocations":["659:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"659:4:1"},"referencedDeclaration":240,"src":"659:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"}],"src":"658:13:1"},"scope":280,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":279,"nodeType":"FunctionDefinition","src":"678:135:1","nodes":[],"functionSelector":"3415a49c","implemented":false,"kind":"function","modifiers":[],"name":"respondToTask","nameLocation":"687:13:1","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"task","nameLocation":"724:4:1","nodeType":"VariableDeclaration","scope":279,"src":"710:18:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_calldata_ptr","typeString":"struct IHelloWorldServiceManager.Task"},"typeName":{"id":271,"nodeType":"UserDefinedTypeName","pathNode":{"id":270,"name":"Task","nameLocations":["710:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":240,"src":"710:4:1"},"referencedDeclaration":240,"src":"710:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_Task_$240_storage_ptr","typeString":"struct IHelloWorldServiceManager.Task"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"referenceTaskIndex","nameLocation":"745:18:1","nodeType":"VariableDeclaration","scope":279,"src":"738:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":273,"name":"uint32","nodeType":"ElementaryTypeName","src":"738:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"signature","nameLocation":"788:9:1","nodeType":"VariableDeclaration","scope":279,"src":"773:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":275,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"700:103:1"},"returnParameters":{"id":278,"nodeType":"ParameterList","parameters":[],"src":"812:0:1"},"scope":280,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IHelloWorldServiceManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[280],"name":"IHelloWorldServiceManager","nameLocation":"74:25:1","scope":281,"usedErrors":[],"usedEvents":[226,235]}],"license":"UNLICENSED"}},"contracts/LayerToken.sol":{"id":2,"ast":{"absolutePath":"contracts/LayerToken.sol","id":733,"exportedSymbols":{"Context":[6862],"IERC20":[6545],"LayerToken":[732]},"nodeType":"SourceUnit","src":"105:9972:2","nodes":[{"id":282,"nodeType":"PragmaDirective","src":"105:24:2","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":283,"nodeType":"ImportDirective","src":"131:55:2","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","nameLocation":"-1:-1:-1","scope":733,"sourceUnit":5893,"symbolAliases":[],"unitAlias":""},{"id":284,"nodeType":"ImportDirective","src":"187:51:2","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","nameLocation":"-1:-1:-1","scope":733,"sourceUnit":6863,"symbolAliases":[],"unitAlias":""},{"id":732,"nodeType":"ContractDefinition","src":"1542:8534:2","nodes":[{"id":293,"nodeType":"VariableDeclaration","src":"1587:45:2","nodes":[],"constant":false,"mutability":"mutable","name":"_balances","nameLocation":"1623:9:2","scope":732,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":292,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1587:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":291,"name":"uint256","nodeType":"ElementaryTypeName","src":"1606:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"id":299,"nodeType":"VariableDeclaration","src":"1639:67:2","nodes":[],"constant":false,"mutability":"mutable","name":"_allowances","nameLocation":"1695:11:2","scope":732,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":298,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"1647:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1639:47:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":297,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"1666:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1658:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1677:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"id":301,"nodeType":"VariableDeclaration","src":"1713:28:2","nodes":[],"constant":false,"mutability":"mutable","name":"_totalSupply","nameLocation":"1729:12:2","scope":732,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":308,"nodeType":"VariableDeclaration","src":"1748:37:2","nodes":[],"constant":false,"mutability":"mutable","name":"initSupply","nameLocation":"1756:10:2","scope":732,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"1748:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"expression":{"arguments":[{"id":305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1774:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":304,"name":"uint88","nodeType":"ElementaryTypeName","src":"1774:6:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":303,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1782:3:2","memberName":"max","nodeType":"MemberAccess","src":"1769:16:2","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"},{"id":318,"nodeType":"FunctionDefinition","src":"1792:60:2","nodes":[],"body":{"id":317,"nodeType":"Block","src":"1806:46:2","nodes":[],"statements":[{"expression":{"arguments":[{"expression":{"id":312,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1822:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1826:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1822:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":314,"name":"initSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1834:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":311,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"1816:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1816:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":316,"nodeType":"ExpressionStatement","src":"1816:29:2"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":309,"nodeType":"ParameterList","parameters":[],"src":"1803:2:2"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[],"src":"1806:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":327,"nodeType":"FunctionDefinition","src":"1928:76:2","nodes":[],"body":{"id":326,"nodeType":"Block","src":"1978:26:2","nodes":[],"statements":[{"expression":{"hexValue":"3138","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1995:2:2","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":323,"id":325,"nodeType":"Return","src":"1988:9:2"}]},"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"1858:65:2","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"1937:8:2","parameters":{"id":320,"nodeType":"ParameterList","parameters":[],"src":"1945:2:2"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":327,"src":"1971:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":321,"name":"uint8","nodeType":"ElementaryTypeName","src":"1971:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1970:7:2"},"scope":732,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":337,"nodeType":"FunctionDefinition","src":"2064:106:2","nodes":[],"body":{"id":336,"nodeType":"Block","src":"2134:36:2","nodes":[],"statements":[{"expression":{"id":334,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2151:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":333,"id":335,"nodeType":"Return","src":"2144:19:2"}]},"baseFunctions":[6494],"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"2010:49:2","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2073:11:2","overrides":{"id":330,"nodeType":"OverrideSpecifier","overrides":[],"src":"2107:8:2"},"parameters":{"id":329,"nodeType":"ParameterList","parameters":[],"src":"2084:2:2"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"2125:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"2125:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2124:9:2"},"scope":732,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":351,"nodeType":"FunctionDefinition","src":"2228:139:2","nodes":[],"body":{"id":350,"nodeType":"Block","src":"2325:42:2","nodes":[],"statements":[{"expression":{"baseExpression":{"id":346,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"2342:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":348,"indexExpression":{"id":347,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"2352:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2342:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":345,"id":349,"nodeType":"Return","src":"2335:25:2"}]},"baseFunctions":[6502],"documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"2176:47:2","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2237:9:2","overrides":{"id":342,"nodeType":"OverrideSpecifier","overrides":[],"src":"2298:8:2"},"parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"account","nameLocation":"2264:7:2","nodeType":"VariableDeclaration","scope":351,"src":"2256:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"2256:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2246:31:2"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":351,"src":"2316:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2316:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2315:9:2"},"scope":732,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":376,"nodeType":"FunctionDefinition","src":"2563:211:2","nodes":[],"body":{"id":375,"nodeType":"Block","src":"2670:104:2","nodes":[],"statements":[{"assignments":[363],"declarations":[{"constant":false,"id":363,"mutability":"mutable","name":"owner","nameLocation":"2688:5:2","nodeType":"VariableDeclaration","scope":375,"src":"2680:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"2680:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":366,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":364,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6852,"src":"2696:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2696:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2680:28:2"},{"expression":{"arguments":[{"id":368,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"2728:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":369,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"2735:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":370,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"2739:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":367,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"2718:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2718:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":372,"nodeType":"ExpressionStatement","src":"2718:28:2"},{"expression":{"hexValue":"74727565","id":373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2763:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":361,"id":374,"nodeType":"Return","src":"2756:11:2"}]},"baseFunctions":[6512],"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"2373:185:2","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2572:8:2","overrides":{"id":358,"nodeType":"OverrideSpecifier","overrides":[],"src":"2646:8:2"},"parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"to","nameLocation":"2598:2:2","nodeType":"VariableDeclaration","scope":376,"src":"2590:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"2590:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"amount","nameLocation":"2618:6:2","nodeType":"VariableDeclaration","scope":376,"src":"2610:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"2610:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2580:50:2"},"returnParameters":{"id":361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":376,"src":"2664:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":359,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2663:6:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":394,"nodeType":"FunctionDefinition","src":"2832:171:2","nodes":[],"body":{"id":393,"nodeType":"Block","src":"2952:51:2","nodes":[],"statements":[{"expression":{"baseExpression":{"baseExpression":{"id":387,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"2969:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":389,"indexExpression":{"id":388,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"2981:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2969:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":391,"indexExpression":{"id":390,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2988:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2969:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":386,"id":392,"nodeType":"Return","src":"2962:34:2"}]},"baseFunctions":[6522],"documentation":{"id":377,"nodeType":"StructuredDocumentation","src":"2780:47:2","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"2841:9:2","overrides":{"id":383,"nodeType":"OverrideSpecifier","overrides":[],"src":"2925:8:2"},"parameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"owner","nameLocation":"2868:5:2","nodeType":"VariableDeclaration","scope":394,"src":"2860:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"2860:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"spender","nameLocation":"2891:7:2","nodeType":"VariableDeclaration","scope":394,"src":"2883:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":380,"name":"address","nodeType":"ElementaryTypeName","src":"2883:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2850:54:2"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":394,"src":"2943:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint256","nodeType":"ElementaryTypeName","src":"2943:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2942:9:2"},"scope":732,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":412,"nodeType":"FunctionDefinition","src":"3009:136:2","nodes":[],"body":{"id":411,"nodeType":"Block","src":"3070:75:2","nodes":[],"statements":[{"assignments":[402],"declarations":[{"constant":false,"id":402,"mutability":"mutable","name":"owner","nameLocation":"3088:5:2","nodeType":"VariableDeclaration","scope":411,"src":"3080:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"3080:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":405,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":403,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6852,"src":"3096:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3080:28:2"},{"expression":{"arguments":[{"id":407,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"3124:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":408,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"3131:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":406,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3118:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3118:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":410,"nodeType":"ExpressionStatement","src":"3118:20:2"}]},"functionSelector":"40c10f19","implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"3018:4:2","parameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"3023:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"3023:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"amount","nameLocation":"3047:6:2","nodeType":"VariableDeclaration","scope":412,"src":"3039:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"3039:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3022:32:2"},"returnParameters":{"id":400,"nodeType":"ParameterList","parameters":[],"src":"3070:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":426,"nodeType":"FunctionDefinition","src":"3453:147:2","nodes":[],"body":{"id":425,"nodeType":"Block","src":"3572:28:2","nodes":[],"statements":[{"expression":{"hexValue":"74727565","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3589:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":422,"id":424,"nodeType":"Return","src":"3582:11:2"}]},"baseFunctions":[6532],"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"3151:297:2","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3462:7:2","overrides":{"id":419,"nodeType":"OverrideSpecifier","overrides":[],"src":"3548:8:2"},"parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":426,"src":"3479:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"3479:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":426,"src":"3508:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"3508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3469:63:2"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":426,"src":"3566:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"3566:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3565:6:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":448,"nodeType":"FunctionDefinition","src":"4162:198:2","nodes":[],"body":{"id":447,"nodeType":"Block","src":"4295:65:2","nodes":[],"statements":[{"expression":{"arguments":[{"id":440,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"4315:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"4321:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"4325:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":439,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"4305:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4305:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":444,"nodeType":"ExpressionStatement","src":"4305:27:2"},{"expression":{"hexValue":"74727565","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4349:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":438,"id":446,"nodeType":"Return","src":"4342:11:2"}]},"baseFunctions":[6544],"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"3606:551:2","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4171:12:2","overrides":{"id":435,"nodeType":"OverrideSpecifier","overrides":[],"src":"4271:8:2"},"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"from","nameLocation":"4201:4:2","nodeType":"VariableDeclaration","scope":448,"src":"4193:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"4193:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"to","nameLocation":"4223:2:2","nodeType":"VariableDeclaration","scope":448,"src":"4215:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"4215:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"amount","nameLocation":"4243:6:2","nodeType":"VariableDeclaration","scope":448,"src":"4235:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"4235:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4183:72:2"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"4289:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":436,"name":"bool","nodeType":"ElementaryTypeName","src":"4289:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4288:6:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":519,"nodeType":"FunctionDefinition","src":"4814:722:2","nodes":[],"body":{"id":518,"nodeType":"Block","src":"4922:614:2","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":459,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"4940:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4956:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4948:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"4948:7:2","typeDescriptions":{}}},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4948:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4940:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4960:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4932:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4932:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":467,"nodeType":"ExpressionStatement","src":"4932:68:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5018:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5032:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5024:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"5024:7:2","typeDescriptions":{}}},"id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5024:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5018:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5036:37:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":468,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5010:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5010:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"ExpressionStatement","src":"5010:64:2"},{"expression":{"arguments":[{"id":479,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5106:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":480,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5112:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":481,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5116:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":478,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"5085:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5085:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":483,"nodeType":"ExpressionStatement","src":"5085:38:2"},{"expression":{"arguments":[{"id":485,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5140:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":486,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5146:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":484,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"5134:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5134:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":488,"nodeType":"ExpressionStatement","src":"5134:19:2"},{"id":505,"nodeType":"UncheckedBlock","src":"5163:277:2","statements":[{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":489,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5187:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":491,"indexExpression":{"id":490,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5197:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5187:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":492,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5205:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":494,"indexExpression":{"id":493,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5215:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5205:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":495,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5223:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5205:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5187:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":498,"nodeType":"ExpressionStatement","src":"5187:42:2"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":499,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5406:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":501,"indexExpression":{"id":500,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5416:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5406:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":502,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5423:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5406:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":504,"nodeType":"ExpressionStatement","src":"5406:23:2"}]},{"eventCall":{"arguments":[{"id":507,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5464:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":508,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5470:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":509,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5474:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":506,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"5455:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5455:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":511,"nodeType":"EmitStatement","src":"5450:31:2"},{"expression":{"arguments":[{"id":513,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5512:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":514,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5518:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":515,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5522:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":512,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"5492:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5492:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":517,"nodeType":"ExpressionStatement","src":"5492:37:2"}]},"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"4366:443:2","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"4823:9:2","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"from","nameLocation":"4850:4:2","nodeType":"VariableDeclaration","scope":519,"src":"4842:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"4842:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"to","nameLocation":"4872:2:2","nodeType":"VariableDeclaration","scope":519,"src":"4864:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"4864:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"amount","nameLocation":"4892:6:2","nodeType":"VariableDeclaration","scope":519,"src":"4884:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"4884:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4832:72:2"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[],"src":"4922:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":558,"nodeType":"FunctionDefinition","src":"5812:416:2","nodes":[],"body":{"id":557,"nodeType":"Block","src":"5877:351:2","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":528,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"5895:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5914:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5906:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"5906:7:2","typeDescriptions":{}}},"id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5906:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5895:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5918:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":527,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5887:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5887:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"ExpressionStatement","src":"5887:65:2"},{"expression":{"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":537,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"5963:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":538,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"5979:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5963:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":540,"nodeType":"ExpressionStatement","src":"5963:22:2"},{"id":547,"nodeType":"UncheckedBlock","src":"5995:175:2","statements":[{"expression":{"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":541,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"6131:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":543,"indexExpression":{"id":542,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"6141:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6131:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":544,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"6153:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6131:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":546,"nodeType":"ExpressionStatement","src":"6131:28:2"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6201:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6193:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":549,"name":"address","nodeType":"ElementaryTypeName","src":"6193:7:2","typeDescriptions":{}}},"id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6193:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"6205:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"6214:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"6184:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6184:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"EmitStatement","src":"6179:42:2"}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"5542:265:2","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"5821:5:2","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"account","nameLocation":"5835:7:2","nodeType":"VariableDeclaration","scope":558,"src":"5827:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"amount","nameLocation":"5852:6:2","nodeType":"VariableDeclaration","scope":558,"src":"5844:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"5844:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5826:33:2"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[],"src":"5877:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":630,"nodeType":"FunctionDefinition","src":"6548:659:2","nodes":[],"body":{"id":629,"nodeType":"Block","src":"6613:594:2","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":567,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6631:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6650:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6642:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"6642:7:2","typeDescriptions":{}}},"id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6642:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6631:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6654:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":566,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6623:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6623:67:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":575,"nodeType":"ExpressionStatement","src":"6623:67:2"},{"expression":{"arguments":[{"id":577,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6722:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6739:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6731:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":578,"name":"address","nodeType":"ElementaryTypeName","src":"6731:7:2","typeDescriptions":{}}},"id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6731:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":582,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"6743:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":576,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6701:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6701:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":584,"nodeType":"ExpressionStatement","src":"6701:49:2"},{"assignments":[586],"declarations":[{"constant":false,"id":586,"mutability":"mutable","name":"accountBalance","nameLocation":"6769:14:2","nodeType":"VariableDeclaration","scope":629,"src":"6761:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"6761:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":590,"initialValue":{"baseExpression":{"id":587,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"6786:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":589,"indexExpression":{"id":588,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6796:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6786:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6761:43:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6822:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":593,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"6840:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6822:24:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6848:36:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":591,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6814:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6814:71:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":597,"nodeType":"ExpressionStatement","src":"6814:71:2"},{"id":610,"nodeType":"UncheckedBlock","src":"6895:194:2","statements":[{"expression":{"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":598,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"6919:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":600,"indexExpression":{"id":599,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6929:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6919:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":601,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"6940:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":602,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"6957:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6940:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6919:44:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":605,"nodeType":"ExpressionStatement","src":"6919:44:2"},{"expression":{"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":606,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"7056:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":607,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7072:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7056:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":609,"nodeType":"ExpressionStatement","src":"7056:22:2"}]},{"eventCall":{"arguments":[{"id":612,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7113:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7130:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7122:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"7122:7:2","typeDescriptions":{}}},"id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7122:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":617,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7134:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":611,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"7104:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7104:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":619,"nodeType":"EmitStatement","src":"7099:42:2"},{"expression":{"arguments":[{"id":621,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"7172:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7189:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7181:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"7181:7:2","typeDescriptions":{}}},"id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7181:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":626,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"7193:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":620,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"7152:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7152:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":628,"nodeType":"ExpressionStatement","src":"7152:48:2"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"6234:309:2","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"6557:5:2","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"account","nameLocation":"6571:7:2","nodeType":"VariableDeclaration","scope":630,"src":"6563:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"6563:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"amount","nameLocation":"6588:6:2","nodeType":"VariableDeclaration","scope":630,"src":"6580:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"6580:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6562:33:2"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"6613:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":675,"nodeType":"FunctionDefinition","src":"7630:370:2","nodes":[],"body":{"id":674,"nodeType":"Block","src":"7743:257:2","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":641,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"7761:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7778:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7770:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"7770:7:2","typeDescriptions":{}}},"id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7770:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7761:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7782:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":640,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7753:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7753:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":649,"nodeType":"ExpressionStatement","src":"7753:68:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":651,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"7839:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7858:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7850:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"7850:7:2","typeDescriptions":{}}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7850:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7839:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7862:36:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7831:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7831:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"7831:68:2"},{"expression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":660,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"7910:11:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":663,"indexExpression":{"id":661,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"7922:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7910:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":664,"indexExpression":{"id":662,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"7929:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7910:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":665,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"7940:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":667,"nodeType":"ExpressionStatement","src":"7910:36:2"},{"eventCall":{"arguments":[{"id":669,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"7970:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":670,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"7977:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":671,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"7986:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":668,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6488,"src":"7961:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7961:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":673,"nodeType":"EmitStatement","src":"7956:37:2"}]},"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"7213:412:2","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"7639:8:2","parameters":{"id":638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"owner","nameLocation":"7665:5:2","nodeType":"VariableDeclaration","scope":675,"src":"7657:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"7657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"spender","nameLocation":"7688:7:2","nodeType":"VariableDeclaration","scope":675,"src":"7680:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"7680:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"amount","nameLocation":"7713:6:2","nodeType":"VariableDeclaration","scope":675,"src":"7705:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"7705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7647:78:2"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"7743:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":709,"nodeType":"FunctionDefinition","src":"8281:380:2","nodes":[],"body":{"id":708,"nodeType":"Block","src":"8401:260:2","nodes":[],"statements":[{"assignments":[686],"declarations":[{"constant":false,"id":686,"mutability":"mutable","name":"currentAllowance","nameLocation":"8419:16:2","nodeType":"VariableDeclaration","scope":708,"src":"8411:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"8411:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":691,"initialValue":{"arguments":[{"id":688,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":678,"src":"8448:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":689,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"8455:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":687,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"8438:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8411:52:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":692,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"8477:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8502:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"8502:7:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":693,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8497:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8497:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8511:3:2","memberName":"max","nodeType":"MemberAccess","src":"8497:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8477:37:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":707,"nodeType":"IfStatement","src":"8473:182:2","trueBody":{"id":706,"nodeType":"Block","src":"8516:139:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":700,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"8555:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":701,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"8575:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8555:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8599:31:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":699,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8530:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8530:114:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":705,"nodeType":"ExpressionStatement","src":"8530:114:2"}]}}]},"documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"8006:270:2","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"8290:15:2","parameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":678,"mutability":"mutable","name":"owner","nameLocation":"8323:5:2","nodeType":"VariableDeclaration","scope":709,"src":"8315:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":677,"name":"address","nodeType":"ElementaryTypeName","src":"8315:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"spender","nameLocation":"8346:7:2","nodeType":"VariableDeclaration","scope":709,"src":"8338:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"8338:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"amount","nameLocation":"8371:6:2","nodeType":"VariableDeclaration","scope":709,"src":"8363:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"8363:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8305:78:2"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"8401:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":720,"nodeType":"FunctionDefinition","src":"9245:121:2","nodes":[],"body":{"id":719,"nodeType":"Block","src":"9364:2:2","nodes":[],"statements":[]},"documentation":{"id":710,"nodeType":"StructuredDocumentation","src":"8667:573:2","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"9254:20:2","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"from","nameLocation":"9292:4:2","nodeType":"VariableDeclaration","scope":720,"src":"9284:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":711,"name":"address","nodeType":"ElementaryTypeName","src":"9284:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"to","nameLocation":"9314:2:2","nodeType":"VariableDeclaration","scope":720,"src":"9306:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"9306:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"amount","nameLocation":"9334:6:2","nodeType":"VariableDeclaration","scope":720,"src":"9326:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":715,"name":"uint256","nodeType":"ElementaryTypeName","src":"9326:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9274:72:2"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"9364:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":731,"nodeType":"FunctionDefinition","src":"9954:120:2","nodes":[],"body":{"id":730,"nodeType":"Block","src":"10072:2:2","nodes":[],"statements":[]},"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"9372:577:2","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"9963:19:2","parameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"from","nameLocation":"10000:4:2","nodeType":"VariableDeclaration","scope":731,"src":"9992:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"9992:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"to","nameLocation":"10022:2:2","nodeType":"VariableDeclaration","scope":731,"src":"10014:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"10014:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":727,"mutability":"mutable","name":"amount","nameLocation":"10042:6:2","nodeType":"VariableDeclaration","scope":731,"src":"10034:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"10034:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9982:72:2"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[],"src":"10072:0:2"},"scope":732,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":286,"name":"Context","nameLocations":["1565:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":6862,"src":"1565:7:2"},"id":287,"nodeType":"InheritanceSpecifier","src":"1565:7:2"},{"baseName":{"id":288,"name":"IERC20","nameLocations":["1574:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"1574:6:2"},"id":289,"nodeType":"InheritanceSpecifier","src":"1574:6:2"}],"canonicalName":"LayerToken","contractDependencies":[],"contractKind":"contract","documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"240:1301:2","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"linearizedBaseContracts":[732,6545,6862],"name":"LayerToken","nameLocation":"1551:10:2","scope":733,"usedErrors":[],"usedEvents":[6479,6488]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol":{"id":3,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol","id":823,"exportedSymbols":{"IAVSDirectory":[822],"ISignatureUtils":[1890]},"nodeType":"SourceUnit","src":"37:3714:3","nodes":[{"id":734,"nodeType":"PragmaDirective","src":"37:24:3","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":735,"nodeType":"ImportDirective","src":"63:31:3","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","file":"./ISignatureUtils.sol","nameLocation":"-1:-1:-1","scope":823,"sourceUnit":1891,"symbolAliases":[],"unitAlias":""},{"id":822,"nodeType":"ContractDefinition","src":"96:3654:3","nodes":[{"id":741,"nodeType":"EnumDefinition","src":"232:148:3","nodes":[],"canonicalName":"IAVSDirectory.OperatorAVSRegistrationStatus","documentation":{"id":738,"nodeType":"StructuredDocumentation","src":"145:82:3","text":"@notice Enum representing the status of an operator's registration with an AVS"},"members":[{"id":739,"name":"UNREGISTERED","nameLocation":"277:12:3","nodeType":"EnumValue","src":"277:12:3"},{"id":740,"name":"REGISTERED","nameLocation":"333:10:3","nodeType":"EnumValue","src":"333:10:3"}],"name":"OperatorAVSRegistrationStatus","nameLocation":"237:29:3"},{"id":748,"nodeType":"EventDefinition","src":"629:69:3","nodes":[],"anonymous":false,"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"386:238:3","text":" @notice Emitted when @param avs indicates that they are updating their MetadataURI string\n @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing"},"eventSelector":"a89c1dc243d8908a96dd84944bcc97d6bc6ac00dd78e20621576be6a3c943713","name":"AVSMetadataURIUpdated","nameLocation":"635:21:3","parameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":744,"indexed":true,"mutability":"mutable","name":"avs","nameLocation":"673:3:3","nodeType":"VariableDeclaration","scope":748,"src":"657:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":746,"indexed":false,"mutability":"mutable","name":"metadataURI","nameLocation":"685:11:3","nodeType":"VariableDeclaration","scope":748,"src":"678:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":745,"name":"string","nodeType":"ElementaryTypeName","src":"678:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"656:41:3"}},{"id":758,"nodeType":"EventDefinition","src":"789:142:3","nodes":[],"anonymous":false,"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"704:80:3","text":"@notice Emitted when an operator's registration status for an AVS is updated"},"eventSelector":"f0952b1c65271d819d39983d2abb044b9cace59bcc4d4dd389f586ebdcb15b41","name":"OperatorAVSRegistrationStatusUpdated","nameLocation":"795:36:3","parameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"857:8:3","nodeType":"VariableDeclaration","scope":758,"src":"841:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":750,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":753,"indexed":true,"mutability":"mutable","name":"avs","nameLocation":"883:3:3","nodeType":"VariableDeclaration","scope":758,"src":"867:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":752,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":756,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"918:6:3","nodeType":"VariableDeclaration","scope":758,"src":"888:36:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_OperatorAVSRegistrationStatus_$741","typeString":"enum IAVSDirectory.OperatorAVSRegistrationStatus"},"typeName":{"id":755,"nodeType":"UserDefinedTypeName","pathNode":{"id":754,"name":"OperatorAVSRegistrationStatus","nameLocations":["888:29:3"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"888:29:3"},"referencedDeclaration":741,"src":"888:29:3","typeDescriptions":{"typeIdentifier":"t_enum$_OperatorAVSRegistrationStatus_$741","typeString":"enum IAVSDirectory.OperatorAVSRegistrationStatus"}},"visibility":"internal"}],"src":"831:99:3"}},{"id":767,"nodeType":"FunctionDefinition","src":"1208:149:3","nodes":[],"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"937:266:3","text":" @notice Called by the AVS's service manager contract to register an operator with the avs.\n @param operator The address of the operator to register.\n @param operatorSignature The signature, salt, and expiry of the operator's signature."},"functionSelector":"9926ee7d","implemented":false,"kind":"function","modifiers":[],"name":"registerOperatorToAVS","nameLocation":"1217:21:3","parameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"operator","nameLocation":"1256:8:3","nodeType":"VariableDeclaration","scope":767,"src":"1248:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"1248:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"mutability":"mutable","name":"operatorSignature","nameLocation":"1324:17:3","nodeType":"VariableDeclaration","scope":767,"src":"1274:67:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":763,"nodeType":"UserDefinedTypeName","pathNode":{"id":762,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["1274:15:3","1290:26:3"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"1274:42:3"},"referencedDeclaration":1889,"src":"1274:42:3","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"}],"src":"1238:109:3"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[],"src":"1356:0:3"},"scope":822,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":773,"nodeType":"FunctionDefinition","src":"1517:62:3","nodes":[],"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"1363:149:3","text":" @notice Called by an avs to deregister an operator with the avs.\n @param operator The address of the operator to deregister."},"functionSelector":"a364f4da","implemented":false,"kind":"function","modifiers":[],"name":"deregisterOperatorFromAVS","nameLocation":"1526:25:3","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"operator","nameLocation":"1560:8:3","nodeType":"VariableDeclaration","scope":773,"src":"1552:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"1552:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1551:18:3"},"returnParameters":{"id":772,"nodeType":"ParameterList","parameters":[],"src":"1578:0:3"},"scope":822,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":779,"nodeType":"FunctionDefinition","src":"1900:68:3","nodes":[],"documentation":{"id":774,"nodeType":"StructuredDocumentation","src":"1585:310:3","text":" @notice Called by an AVS to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\n @param metadataURI The URI for metadata associated with an AVS\n @dev Note that the `metadataURI` is *never stored * and is only emitted in the `AVSMetadataURIUpdated` event"},"functionSelector":"a98fb355","implemented":false,"kind":"function","modifiers":[],"name":"updateAVSMetadataURI","nameLocation":"1909:20:3","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"mutability":"mutable","name":"metadataURI","nameLocation":"1946:11:3","nodeType":"VariableDeclaration","scope":779,"src":"1930:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":775,"name":"string","nodeType":"ElementaryTypeName","src":"1930:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1929:29:3"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[],"src":"1967:0:3"},"scope":822,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":789,"nodeType":"FunctionDefinition","src":"2143:90:3","nodes":[],"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"1974:164:3","text":" @notice Returns whether or not the salt has already been used by the operator.\n @dev Salts is used in the `registerOperatorToAVS` function."},"functionSelector":"374823b5","implemented":false,"kind":"function","modifiers":[],"name":"operatorSaltIsSpent","nameLocation":"2152:19:3","parameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"operator","nameLocation":"2180:8:3","nodeType":"VariableDeclaration","scope":789,"src":"2172:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"2172:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"salt","nameLocation":"2198:4:3","nodeType":"VariableDeclaration","scope":789,"src":"2190:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2190:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2171:32:3"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":789,"src":"2227:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":786,"name":"bool","nodeType":"ElementaryTypeName","src":"2227:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2226:6:3"},"scope":822,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":803,"nodeType":"FunctionDefinition","src":"2689:183:3","nodes":[],"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"2239:445:3","text":" @notice Calculates the digest hash to be signed by an operator to register with an AVS\n @param operator The account registering as an operator\n @param avs The address of the service manager contract for the AVS that the operator is registering to\n @param salt A unique and single use value associated with the approver signature.\n @param expiry Time after which the approver's signature becomes invalid"},"functionSelector":"a1060c88","implemented":false,"kind":"function","modifiers":[],"name":"calculateOperatorAVSRegistrationDigestHash","nameLocation":"2698:42:3","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"operator","nameLocation":"2758:8:3","nodeType":"VariableDeclaration","scope":803,"src":"2750:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"2750:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"avs","nameLocation":"2784:3:3","nodeType":"VariableDeclaration","scope":803,"src":"2776:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"2776:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"salt","nameLocation":"2805:4:3","nodeType":"VariableDeclaration","scope":803,"src":"2797:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2797:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":798,"mutability":"mutable","name":"expiry","nameLocation":"2827:6:3","nodeType":"VariableDeclaration","scope":803,"src":"2819:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2740:99:3"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":803,"src":"2863:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2863:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2862:9:3"},"scope":822,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":809,"nodeType":"FunctionDefinition","src":"2964:78:3","nodes":[],"documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"2878:81:3","text":"@notice The EIP-712 typehash for the Registration struct used by the contract"},"functionSelector":"d79aceab","implemented":false,"kind":"function","modifiers":[],"name":"OPERATOR_AVS_REGISTRATION_TYPEHASH","nameLocation":"2973:34:3","parameters":{"id":805,"nodeType":"ParameterList","parameters":[],"src":"3007:2:3"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":809,"src":"3033:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":806,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:9:3"},"scope":822,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":815,"nodeType":"FunctionDefinition","src":"3251:43:3","nodes":[],"documentation":{"id":810,"nodeType":"StructuredDocumentation","src":"3048:198:3","text":" @notice Called by an operator to cancel a salt that has been used to register with an AVS.\n @param salt A unique and single use value associated with the approver signature."},"functionSelector":"ec76f442","implemented":false,"kind":"function","modifiers":[],"name":"cancelSalt","nameLocation":"3260:10:3","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"mutability":"mutable","name":"salt","nameLocation":"3279:4:3","nodeType":"VariableDeclaration","scope":815,"src":"3271:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3271:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3270:14:3"},"returnParameters":{"id":814,"nodeType":"ParameterList","parameters":[],"src":"3293:0:3"},"scope":822,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":821,"nodeType":"FunctionDefinition","src":"3689:59:3","nodes":[],"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"3300:384:3","text":" @notice Getter function for the current EIP-712 domain separator for this contract.\n @dev The domain separator will change in the event of a fork that changes the ChainID.\n @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n for more detailed information please read EIP-712."},"functionSelector":"f698da25","implemented":false,"kind":"function","modifiers":[],"name":"domainSeparator","nameLocation":"3698:15:3","parameters":{"id":817,"nodeType":"ParameterList","parameters":[],"src":"3713:2:3"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":821,"src":"3739:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3739:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3738:9:3"},"scope":822,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":736,"name":"ISignatureUtils","nameLocations":["123:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":1890,"src":"123:15:3"},"id":737,"nodeType":"InheritanceSpecifier","src":"123:15:3"}],"canonicalName":"IAVSDirectory","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[822,1890],"name":"IAVSDirectory","nameLocation":"106:13:3","scope":823,"usedErrors":[],"usedEvents":[748,758]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"id":4,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","id":1348,"exportedSymbols":{"IDelegationManager":[1347],"IERC20":[6545],"ISignatureUtils":[1890],"IStrategy":[2005]},"nodeType":"SourceUnit","src":"37:26744:4","nodes":[{"id":824,"nodeType":"PragmaDirective","src":"37:24:4","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":825,"nodeType":"ImportDirective","src":"63:25:4","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"./IStrategy.sol","nameLocation":"-1:-1:-1","scope":1348,"sourceUnit":2006,"symbolAliases":[],"unitAlias":""},{"id":826,"nodeType":"ImportDirective","src":"89:31:4","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","file":"./ISignatureUtils.sol","nameLocation":"-1:-1:-1","scope":1348,"sourceUnit":1891,"symbolAliases":[],"unitAlias":""},{"id":1347,"nodeType":"ContractDefinition","src":"838:25942:4","nodes":[{"id":839,"nodeType":"StructDefinition","src":"1002:1569:4","nodes":[],"canonicalName":"IDelegationManager.OperatorDetails","members":[{"constant":false,"id":832,"mutability":"mutable","name":"__deprecated_earningsReceiver","nameLocation":"1154:29:4","nodeType":"VariableDeclaration","scope":839,"src":"1146:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":835,"mutability":"mutable","name":"delegationApprover","nameLocation":"1905:18:4","nodeType":"VariableDeclaration","scope":839,"src":"1897:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":834,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"stakerOptOutWindowBlocks","nameLocation":"2540:24:4","nodeType":"VariableDeclaration","scope":839,"src":"2533:31:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":837,"name":"uint32","nodeType":"ElementaryTypeName","src":"2533:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"OperatorDetails","nameLocation":"1009:15:4","scope":1347,"visibility":"public"},{"id":849,"nodeType":"StructDefinition","src":"2921:300:4","nodes":[],"canonicalName":"IDelegationManager.StakerDelegation","documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"2577:339:4","text":" @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function."},"members":[{"constant":false,"id":842,"mutability":"mutable","name":"staker","nameLocation":"3003:6:4","nodeType":"VariableDeclaration","scope":849,"src":"2995:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":844,"mutability":"mutable","name":"operator","nameLocation":"3070:8:4","nodeType":"VariableDeclaration","scope":849,"src":"3062:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"3062:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":846,"mutability":"mutable","name":"nonce","nameLocation":"3126:5:4","nodeType":"VariableDeclaration","scope":849,"src":"3118:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":845,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"expiry","nameLocation":"3208:6:4","nodeType":"VariableDeclaration","scope":849,"src":"3200:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":847,"name":"uint256","nodeType":"ElementaryTypeName","src":"3200:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakerDelegation","nameLocation":"2928:16:4","scope":1347,"visibility":"public"},{"id":859,"nodeType":"StructDefinition","src":"3569:311:4","nodes":[],"canonicalName":"IDelegationManager.DelegationApproval","documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"3227:337:4","text":" @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function."},"members":[{"constant":false,"id":852,"mutability":"mutable","name":"staker","nameLocation":"3653:6:4","nodeType":"VariableDeclaration","scope":859,"src":"3645:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":851,"name":"address","nodeType":"ElementaryTypeName","src":"3645:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"operator","nameLocation":"3720:8:4","nodeType":"VariableDeclaration","scope":859,"src":"3712:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"3712:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"salt","nameLocation":"3786:4:4","nodeType":"VariableDeclaration","scope":859,"src":"3778:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3778:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"expiry","nameLocation":"3867:6:4","nodeType":"VariableDeclaration","scope":859,"src":"3859:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":857,"name":"uint256","nodeType":"ElementaryTypeName","src":"3859:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"DelegationApproval","nameLocation":"3576:18:4","scope":1347,"visibility":"public"},{"id":878,"nodeType":"StructDefinition","src":"4329:775:4","nodes":[],"canonicalName":"IDelegationManager.Withdrawal","documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"3886:438:4","text":" Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\n In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\n data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data."},"members":[{"constant":false,"id":862,"mutability":"mutable","name":"staker","nameLocation":"4419:6:4","nodeType":"VariableDeclaration","scope":878,"src":"4411:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":861,"name":"address","nodeType":"ElementaryTypeName","src":"4411:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"delegatedTo","nameLocation":"4543:11:4","nodeType":"VariableDeclaration","scope":878,"src":"4535:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"4535:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"withdrawer","nameLocation":"4680:10:4","nodeType":"VariableDeclaration","scope":878,"src":"4672:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"4672:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"nonce","nameLocation":"4799:5:4","nodeType":"VariableDeclaration","scope":878,"src":"4791:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"4791:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"startBlock","nameLocation":"4877:10:4","nodeType":"VariableDeclaration","scope":878,"src":"4870:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":869,"name":"uint32","nodeType":"ElementaryTypeName","src":"4870:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"strategies","nameLocation":"4969:10:4","nodeType":"VariableDeclaration","scope":878,"src":"4957:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":872,"nodeType":"UserDefinedTypeName","pathNode":{"id":871,"name":"IStrategy","nameLocations":["4957:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"4957:9:4"},"referencedDeclaration":2005,"src":"4957:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":873,"nodeType":"ArrayTypeName","src":"4957:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"shares","nameLocation":"5091:6:4","nodeType":"VariableDeclaration","scope":878,"src":"5081:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":875,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":876,"nodeType":"ArrayTypeName","src":"5081:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"Withdrawal","nameLocation":"4336:10:4","scope":1347,"visibility":"public"},{"id":888,"nodeType":"StructDefinition","src":"5110:322:4","nodes":[],"canonicalName":"IDelegationManager.QueuedWithdrawalParams","members":[{"constant":false,"id":882,"mutability":"mutable","name":"strategies","nameLocation":"5228:10:4","nodeType":"VariableDeclaration","scope":888,"src":"5216:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":880,"nodeType":"UserDefinedTypeName","pathNode":{"id":879,"name":"IStrategy","nameLocations":["5216:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"5216:9:4"},"referencedDeclaration":2005,"src":"5216:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":881,"nodeType":"ArrayTypeName","src":"5216:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"shares","nameLocation":"5350:6:4","nodeType":"VariableDeclaration","scope":888,"src":"5340:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"5340:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":884,"nodeType":"ArrayTypeName","src":"5340:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"withdrawer","nameLocation":"5415:10:4","nodeType":"VariableDeclaration","scope":888,"src":"5407:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"5407:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"QueuedWithdrawalParams","nameLocation":"5117:22:4","scope":1347,"visibility":"public"},{"id":895,"nodeType":"EventDefinition","src":"5541:84:4","nodes":[],"anonymous":false,"eventSelector":"8e8485583a2310d41f7c82b9427d0bd49bad74bb9cff9d3402a29d8f9b28a0e2","name":"OperatorRegistered","nameLocation":"5547:18:4","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"5582:8:4","nodeType":"VariableDeclaration","scope":895,"src":"5566:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":889,"name":"address","nodeType":"ElementaryTypeName","src":"5566:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"indexed":false,"mutability":"mutable","name":"operatorDetails","nameLocation":"5608:15:4","nodeType":"VariableDeclaration","scope":895,"src":"5592:31:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_memory_ptr","typeString":"struct IDelegationManager.OperatorDetails"},"typeName":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"OperatorDetails","nameLocations":["5592:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":839,"src":"5592:15:4"},"referencedDeclaration":839,"src":"5592:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_storage_ptr","typeString":"struct IDelegationManager.OperatorDetails"}},"visibility":"internal"}],"src":"5565:59:4"}},{"id":903,"nodeType":"EventDefinition","src":"5731:92:4","nodes":[],"anonymous":false,"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"5631:95:4","text":"@notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails"},"eventSelector":"febe5cd24b2cbc7b065b9d0fdeb904461e4afcff57dd57acda1e7832031ba7ac","name":"OperatorDetailsModified","nameLocation":"5737:23:4","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"5777:8:4","nodeType":"VariableDeclaration","scope":903,"src":"5761:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":897,"name":"address","nodeType":"ElementaryTypeName","src":"5761:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":901,"indexed":false,"mutability":"mutable","name":"newOperatorDetails","nameLocation":"5803:18:4","nodeType":"VariableDeclaration","scope":903,"src":"5787:34:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_memory_ptr","typeString":"struct IDelegationManager.OperatorDetails"},"typeName":{"id":900,"nodeType":"UserDefinedTypeName","pathNode":{"id":899,"name":"OperatorDetails","nameLocations":["5787:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":839,"src":"5787:15:4"},"referencedDeclaration":839,"src":"5787:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_storage_ptr","typeString":"struct IDelegationManager.OperatorDetails"}},"visibility":"internal"}],"src":"5760:62:4"}},{"id":910,"nodeType":"EventDefinition","src":"6077:79:4","nodes":[],"anonymous":false,"documentation":{"id":904,"nodeType":"StructuredDocumentation","src":"5829:243:4","text":" @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing"},"eventSelector":"02a919ed0e2acad1dd90f17ef2fa4ae5462ee1339170034a8531cca4b6708090","name":"OperatorMetadataURIUpdated","nameLocation":"6083:26:4","parameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"6126:8:4","nodeType":"VariableDeclaration","scope":910,"src":"6110:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":905,"name":"address","nodeType":"ElementaryTypeName","src":"6110:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":908,"indexed":false,"mutability":"mutable","name":"metadataURI","nameLocation":"6143:11:4","nodeType":"VariableDeclaration","scope":910,"src":"6136:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":907,"name":"string","nodeType":"ElementaryTypeName","src":"6136:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6109:46:4"}},{"id":922,"nodeType":"EventDefinition","src":"6308:108:4","nodes":[],"anonymous":false,"documentation":{"id":911,"nodeType":"StructuredDocumentation","src":"6162:141:4","text":"@notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares."},"eventSelector":"1ec042c965e2edd7107b51188ee0f383e22e76179041ab3a9d18ff151405166c","name":"OperatorSharesIncreased","nameLocation":"6314:23:4","parameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"6354:8:4","nodeType":"VariableDeclaration","scope":922,"src":"6338:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"6338:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":915,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"6372:6:4","nodeType":"VariableDeclaration","scope":922,"src":"6364:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":914,"name":"address","nodeType":"ElementaryTypeName","src":"6364:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":918,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"6390:8:4","nodeType":"VariableDeclaration","scope":922,"src":"6380:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":917,"nodeType":"UserDefinedTypeName","pathNode":{"id":916,"name":"IStrategy","nameLocations":["6380:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"6380:9:4"},"referencedDeclaration":2005,"src":"6380:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":920,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"6408:6:4","nodeType":"VariableDeclaration","scope":922,"src":"6400:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"6400:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6337:78:4"}},{"id":934,"nodeType":"EventDefinition","src":"6568:108:4","nodes":[],"anonymous":false,"documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"6422:141:4","text":"@notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares."},"eventSelector":"6909600037b75d7b4733aedd815442b5ec018a827751c832aaff64eba5d6d2dd","name":"OperatorSharesDecreased","nameLocation":"6574:23:4","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":925,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"6614:8:4","nodeType":"VariableDeclaration","scope":934,"src":"6598:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"6598:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":927,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"6632:6:4","nodeType":"VariableDeclaration","scope":934,"src":"6624:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"6624:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":930,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"6650:8:4","nodeType":"VariableDeclaration","scope":934,"src":"6640:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":929,"nodeType":"UserDefinedTypeName","pathNode":{"id":928,"name":"IStrategy","nameLocations":["6640:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"6640:9:4"},"referencedDeclaration":2005,"src":"6640:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":932,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"6668:6:4","nodeType":"VariableDeclaration","scope":934,"src":"6660:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":931,"name":"uint256","nodeType":"ElementaryTypeName","src":"6660:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6597:78:4"}},{"id":941,"nodeType":"EventDefinition","src":"6755:72:4","nodes":[],"anonymous":false,"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"6682:68:4","text":"@notice Emitted when @param staker delegates to @param operator."},"eventSelector":"c3ee9f2e5fda98e8066a1f745b2df9285f416fe98cf2559cd21484b3d8743304","name":"StakerDelegated","nameLocation":"6761:15:4","parameters":{"id":940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"6793:6:4","nodeType":"VariableDeclaration","scope":941,"src":"6777:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"6777:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":939,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"6817:8:4","nodeType":"VariableDeclaration","scope":941,"src":"6801:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":938,"name":"address","nodeType":"ElementaryTypeName","src":"6801:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6776:50:4"}},{"id":948,"nodeType":"EventDefinition","src":"6910:74:4","nodes":[],"anonymous":false,"documentation":{"id":942,"nodeType":"StructuredDocumentation","src":"6833:72:4","text":"@notice Emitted when @param staker undelegates from @param operator."},"eventSelector":"fee30966a256b71e14bc0ebfc94315e28ef4a97a7131a9e2b7a310a73af44676","name":"StakerUndelegated","nameLocation":"6916:17:4","parameters":{"id":947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"6950:6:4","nodeType":"VariableDeclaration","scope":948,"src":"6934:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"6934:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":946,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"6974:8:4","nodeType":"VariableDeclaration","scope":948,"src":"6958:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"6958:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6933:50:4"}},{"id":955,"nodeType":"EventDefinition","src":"7100:79:4","nodes":[],"anonymous":false,"documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"6990:105:4","text":"@notice Emitted when @param staker is undelegated via a call not originating from the staker themself"},"eventSelector":"f0eddf07e6ea14f388b47e1e94a0f464ecbd9eed4171130e0fc0e99fb4030a8a","name":"StakerForceUndelegated","nameLocation":"7106:22:4","parameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"7145:6:4","nodeType":"VariableDeclaration","scope":955,"src":"7129:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"7129:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":953,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"7169:8:4","nodeType":"VariableDeclaration","scope":955,"src":"7153:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"7153:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7128:50:4"}},{"id":963,"nodeType":"EventDefinition","src":"7370:70:4","nodes":[],"anonymous":false,"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"7185:180:4","text":" @notice Emitted when a new withdrawal is queued.\n @param withdrawalRoot Is the hash of the `withdrawal`.\n @param withdrawal Is the withdrawal itself."},"eventSelector":"9009ab153e8014fbfb02f2217f5cde7aa7f9ad734ae85ca3ee3f4ca2fdd499f9","name":"WithdrawalQueued","nameLocation":"7376:16:4","parameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"indexed":false,"mutability":"mutable","name":"withdrawalRoot","nameLocation":"7401:14:4","nodeType":"VariableDeclaration","scope":963,"src":"7393:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7393:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":961,"indexed":false,"mutability":"mutable","name":"withdrawal","nameLocation":"7428:10:4","nodeType":"VariableDeclaration","scope":963,"src":"7417:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_memory_ptr","typeString":"struct IDelegationManager.Withdrawal"},"typeName":{"id":960,"nodeType":"UserDefinedTypeName","pathNode":{"id":959,"name":"Withdrawal","nameLocations":["7417:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"7417:10:4"},"referencedDeclaration":878,"src":"7417:10:4","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_storage_ptr","typeString":"struct IDelegationManager.Withdrawal"}},"visibility":"internal"}],"src":"7392:47:4"}},{"id":968,"nodeType":"EventDefinition","src":"7508:50:4","nodes":[],"anonymous":false,"documentation":{"id":964,"nodeType":"StructuredDocumentation","src":"7446:57:4","text":"@notice Emitted when a queued withdrawal is completed"},"eventSelector":"c97098c2f658800b4df29001527f7324bcdffcf6e8751a699ab920a1eced5b1d","name":"WithdrawalCompleted","nameLocation":"7514:19:4","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"indexed":false,"mutability":"mutable","name":"withdrawalRoot","nameLocation":"7542:14:4","nodeType":"VariableDeclaration","scope":968,"src":"7534:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7534:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7533:24:4"}},{"id":975,"nodeType":"EventDefinition","src":"7681:75:4","nodes":[],"anonymous":false,"documentation":{"id":969,"nodeType":"StructuredDocumentation","src":"7564:112:4","text":"@notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`."},"eventSelector":"afa003cd76f87ff9d62b35beea889920f33c0c42b8d45b74954d61d50f4b6b69","name":"MinWithdrawalDelayBlocksSet","nameLocation":"7687:27:4","parameters":{"id":974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"indexed":false,"mutability":"mutable","name":"previousValue","nameLocation":"7723:13:4","nodeType":"VariableDeclaration","scope":975,"src":"7715:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"7715:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":973,"indexed":false,"mutability":"mutable","name":"newValue","nameLocation":"7746:8:4","nodeType":"VariableDeclaration","scope":975,"src":"7738:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"7738:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7714:41:4"}},{"id":985,"nodeType":"EventDefinition","src":"7884:100:4","nodes":[],"anonymous":false,"documentation":{"id":976,"nodeType":"StructuredDocumentation","src":"7762:117:4","text":"@notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`."},"eventSelector":"0e7efa738e8b0ce6376a0c1af471655540d2e9a81647d7b09ed823018426576d","name":"StrategyWithdrawalDelayBlocksSet","nameLocation":"7890:32:4","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"7933:8:4","nodeType":"VariableDeclaration","scope":985,"src":"7923:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":978,"nodeType":"UserDefinedTypeName","pathNode":{"id":977,"name":"IStrategy","nameLocations":["7923:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"7923:9:4"},"referencedDeclaration":2005,"src":"7923:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":981,"indexed":false,"mutability":"mutable","name":"previousValue","nameLocation":"7951:13:4","nodeType":"VariableDeclaration","scope":985,"src":"7943:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"7943:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"indexed":false,"mutability":"mutable","name":"newValue","nameLocation":"7974:8:4","nodeType":"VariableDeclaration","scope":985,"src":"7966:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"7966:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7922:61:4"}},{"id":994,"nodeType":"FunctionDefinition","src":"8635:141:4","nodes":[],"documentation":{"id":986,"nodeType":"StructuredDocumentation","src":"7990:640:4","text":" @notice Registers the caller as an operator in EigenLayer.\n @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n @dev This function will revert if the caller is already delegated to an operator.\n @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event"},"functionSelector":"0f589e59","implemented":false,"kind":"function","modifiers":[],"name":"registerAsOperator","nameLocation":"8644:18:4","parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"registeringOperatorDetails","nameLocation":"8697:26:4","nodeType":"VariableDeclaration","scope":994,"src":"8672:51:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_calldata_ptr","typeString":"struct IDelegationManager.OperatorDetails"},"typeName":{"id":988,"nodeType":"UserDefinedTypeName","pathNode":{"id":987,"name":"OperatorDetails","nameLocations":["8672:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":839,"src":"8672:15:4"},"referencedDeclaration":839,"src":"8672:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_storage_ptr","typeString":"struct IDelegationManager.OperatorDetails"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"metadataURI","nameLocation":"8749:11:4","nodeType":"VariableDeclaration","scope":994,"src":"8733:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":990,"name":"string","nodeType":"ElementaryTypeName","src":"8733:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8662:104:4"},"returnParameters":{"id":993,"nodeType":"ParameterList","parameters":[],"src":"8775:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1001,"nodeType":"FunctionDefinition","src":"9080:85:4","nodes":[],"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"8782:293:4","text":" @notice Updates an operator's stored `OperatorDetails`.\n @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n @dev The caller must have previously registered as an operator in EigenLayer."},"functionSelector":"f16172b0","implemented":false,"kind":"function","modifiers":[],"name":"modifyOperatorDetails","nameLocation":"9089:21:4","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"newOperatorDetails","nameLocation":"9136:18:4","nodeType":"VariableDeclaration","scope":1001,"src":"9111:43:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_calldata_ptr","typeString":"struct IDelegationManager.OperatorDetails"},"typeName":{"id":997,"nodeType":"UserDefinedTypeName","pathNode":{"id":996,"name":"OperatorDetails","nameLocations":["9111:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":839,"src":"9111:15:4"},"referencedDeclaration":839,"src":"9111:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_storage_ptr","typeString":"struct IDelegationManager.OperatorDetails"}},"visibility":"internal"}],"src":"9110:45:4"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"9164:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1007,"nodeType":"FunctionDefinition","src":"9506:73:4","nodes":[],"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"9171:330:4","text":" @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n @param metadataURI The URI for metadata associated with an operator\n @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event"},"functionSelector":"99be81c8","implemented":false,"kind":"function","modifiers":[],"name":"updateOperatorMetadataURI","nameLocation":"9515:25:4","parameters":{"id":1005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"metadataURI","nameLocation":"9557:11:4","nodeType":"VariableDeclaration","scope":1007,"src":"9541:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1003,"name":"string","nodeType":"ElementaryTypeName","src":"9541:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9540:29:4"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[],"src":"9578:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1018,"nodeType":"FunctionDefinition","src":"10582:154:4","nodes":[],"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"9585:992:4","text":" @notice Caller delegates their stake to an operator.\n @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\n @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n @param approverSalt A unique single use value tied to an individual signature.\n @dev The approverSignatureAndExpiry is used in the event that:\n          1) the operator's `delegationApprover` address is set to a non-zero value.\n                  AND\n          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n             or their delegationApprover is the `msg.sender`, then approval is assumed.\n @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n in this case to save on complexity + gas costs"},"functionSelector":"eea9064b","implemented":false,"kind":"function","modifiers":[],"name":"delegateTo","nameLocation":"10591:10:4","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"operator","nameLocation":"10619:8:4","nodeType":"VariableDeclaration","scope":1018,"src":"10611:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"10611:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1013,"mutability":"mutable","name":"approverSignatureAndExpiry","nameLocation":"10664:26:4","nodeType":"VariableDeclaration","scope":1018,"src":"10637:53:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"},"typeName":{"id":1012,"nodeType":"UserDefinedTypeName","pathNode":{"id":1011,"name":"SignatureWithExpiry","nameLocations":["10637:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":1882,"src":"10637:19:4"},"referencedDeclaration":1882,"src":"10637:19:4","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"}},"visibility":"internal"},{"constant":false,"id":1015,"mutability":"mutable","name":"approverSalt","nameLocation":"10708:12:4","nodeType":"VariableDeclaration","scope":1018,"src":"10700:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10700:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"10601:125:4"},"returnParameters":{"id":1017,"nodeType":"ParameterList","parameters":[],"src":"10735:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1034,"nodeType":"FunctionDefinition","src":"12337:250:4","nodes":[],"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"10742:1590:4","text":" @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n @param staker The account delegating stake to an `operator` account\n @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\n @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n @dev the operator's `delegationApprover` address is set to a non-zero value.\n @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n is the `msg.sender`, then approval is assumed.\n @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n in this case to save on complexity + gas costs"},"functionSelector":"7f548071","implemented":false,"kind":"function","modifiers":[],"name":"delegateToBySignature","nameLocation":"12346:21:4","parameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"staker","nameLocation":"12385:6:4","nodeType":"VariableDeclaration","scope":1034,"src":"12377:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"12377:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"operator","nameLocation":"12409:8:4","nodeType":"VariableDeclaration","scope":1034,"src":"12401:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1022,"name":"address","nodeType":"ElementaryTypeName","src":"12401:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"stakerSignatureAndExpiry","nameLocation":"12454:24:4","nodeType":"VariableDeclaration","scope":1034,"src":"12427:51:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"},"typeName":{"id":1025,"nodeType":"UserDefinedTypeName","pathNode":{"id":1024,"name":"SignatureWithExpiry","nameLocations":["12427:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":1882,"src":"12427:19:4"},"referencedDeclaration":1882,"src":"12427:19:4","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"approverSignatureAndExpiry","nameLocation":"12515:26:4","nodeType":"VariableDeclaration","scope":1034,"src":"12488:53:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"},"typeName":{"id":1028,"nodeType":"UserDefinedTypeName","pathNode":{"id":1027,"name":"SignatureWithExpiry","nameLocations":["12488:19:4"],"nodeType":"IdentifierPath","referencedDeclaration":1882,"src":"12488:19:4"},"referencedDeclaration":1882,"src":"12488:19:4","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithExpiry_$1882_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithExpiry"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"approverSalt","nameLocation":"12559:12:4","nodeType":"VariableDeclaration","scope":1034,"src":"12551:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12551:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12367:210:4"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[],"src":"12586:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1043,"nodeType":"FunctionDefinition","src":"13398:87:4","nodes":[],"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"12593:800:4","text":" @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of the EigenPodManager\n and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\n @param staker The account to be undelegated.\n @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n @dev Reverts if the `staker` is already undelegated."},"functionSelector":"da8be864","implemented":false,"kind":"function","modifiers":[],"name":"undelegate","nameLocation":"13407:10:4","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"staker","nameLocation":"13426:6:4","nodeType":"VariableDeclaration","scope":1043,"src":"13418:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"13418:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13417:16:4"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"withdrawalRoot","nameLocation":"13469:14:4","nodeType":"VariableDeclaration","scope":1043,"src":"13452:31:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13452:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1040,"nodeType":"ArrayTypeName","src":"13452:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"13451:33:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1054,"nodeType":"FunctionDefinition","src":"13842:136:4","nodes":[],"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"13491:346:4","text":" Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n their operator.\n All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay."},"functionSelector":"0dd8dd02","implemented":false,"kind":"function","modifiers":[],"name":"queueWithdrawals","nameLocation":"13851:16:4","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"queuedWithdrawalParams","nameLocation":"13902:22:4","nodeType":"VariableDeclaration","scope":1054,"src":"13868:56:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_QueuedWithdrawalParams_$888_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDelegationManager.QueuedWithdrawalParams[]"},"typeName":{"baseType":{"id":1046,"nodeType":"UserDefinedTypeName","pathNode":{"id":1045,"name":"QueuedWithdrawalParams","nameLocations":["13868:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":888,"src":"13868:22:4"},"referencedDeclaration":888,"src":"13868:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_QueuedWithdrawalParams_$888_storage_ptr","typeString":"struct IDelegationManager.QueuedWithdrawalParams"}},"id":1047,"nodeType":"ArrayTypeName","src":"13868:24:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_QueuedWithdrawalParams_$888_storage_$dyn_storage_ptr","typeString":"struct IDelegationManager.QueuedWithdrawalParams[]"}},"visibility":"internal"}],"src":"13867:58:4"},"returnParameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1054,"src":"13960:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13960:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1051,"nodeType":"ArrayTypeName","src":"13960:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"13959:18:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1069,"nodeType":"FunctionDefinition","src":"15420:191:4","nodes":[],"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"13984:1431:4","text":" @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n @param withdrawal The Withdrawal to complete.\n @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n will simply be transferred to the caller directly.\n @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n any other strategies, which will be transferred to the withdrawer."},"functionSelector":"60d7faed","implemented":false,"kind":"function","modifiers":[],"name":"completeQueuedWithdrawal","nameLocation":"15429:24:4","parameters":{"id":1067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1058,"mutability":"mutable","name":"withdrawal","nameLocation":"15483:10:4","nodeType":"VariableDeclaration","scope":1069,"src":"15463:30:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_calldata_ptr","typeString":"struct IDelegationManager.Withdrawal"},"typeName":{"id":1057,"nodeType":"UserDefinedTypeName","pathNode":{"id":1056,"name":"Withdrawal","nameLocations":["15463:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"15463:10:4"},"referencedDeclaration":878,"src":"15463:10:4","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_storage_ptr","typeString":"struct IDelegationManager.Withdrawal"}},"visibility":"internal"},{"constant":false,"id":1062,"mutability":"mutable","name":"tokens","nameLocation":"15521:6:4","nodeType":"VariableDeclaration","scope":1069,"src":"15503:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6545_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1060,"nodeType":"UserDefinedTypeName","pathNode":{"id":1059,"name":"IERC20","nameLocations":["15503:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"15503:6:4"},"referencedDeclaration":6545,"src":"15503:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":1061,"nodeType":"ArrayTypeName","src":"15503:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6545_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1064,"mutability":"mutable","name":"middlewareTimesIndex","nameLocation":"15545:20:4","nodeType":"VariableDeclaration","scope":1069,"src":"15537:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1063,"name":"uint256","nodeType":"ElementaryTypeName","src":"15537:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1066,"mutability":"mutable","name":"receiveAsTokens","nameLocation":"15580:15:4","nodeType":"VariableDeclaration","scope":1069,"src":"15575:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1065,"name":"bool","nodeType":"ElementaryTypeName","src":"15575:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15453:148:4"},"returnParameters":{"id":1068,"nodeType":"ParameterList","parameters":[],"src":"15610:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1088,"nodeType":"FunctionDefinition","src":"16345:221:4","nodes":[],"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"15617:723:4","text":" @notice Array-ified version of `completeQueuedWithdrawal`.\n Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n @param withdrawals The Withdrawals to complete.\n @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n @dev See `completeQueuedWithdrawal` for relevant dev tags"},"functionSelector":"33404396","implemented":false,"kind":"function","modifiers":[],"name":"completeQueuedWithdrawals","nameLocation":"16354:25:4","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1074,"mutability":"mutable","name":"withdrawals","nameLocation":"16411:11:4","nodeType":"VariableDeclaration","scope":1088,"src":"16389:33:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$878_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDelegationManager.Withdrawal[]"},"typeName":{"baseType":{"id":1072,"nodeType":"UserDefinedTypeName","pathNode":{"id":1071,"name":"Withdrawal","nameLocations":["16389:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"16389:10:4"},"referencedDeclaration":878,"src":"16389:10:4","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_storage_ptr","typeString":"struct IDelegationManager.Withdrawal"}},"id":1073,"nodeType":"ArrayTypeName","src":"16389:12:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Withdrawal_$878_storage_$dyn_storage_ptr","typeString":"struct IDelegationManager.Withdrawal[]"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"tokens","nameLocation":"16452:6:4","nodeType":"VariableDeclaration","scope":1088,"src":"16432:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_contract$_IERC20_$6545_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"contract IERC20[][]"},"typeName":{"baseType":{"baseType":{"id":1076,"nodeType":"UserDefinedTypeName","pathNode":{"id":1075,"name":"IERC20","nameLocations":["16432:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"16432:6:4"},"referencedDeclaration":6545,"src":"16432:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":1077,"nodeType":"ArrayTypeName","src":"16432:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$6545_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"id":1078,"nodeType":"ArrayTypeName","src":"16432:10:4","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_contract$_IERC20_$6545_$dyn_storage_$dyn_storage_ptr","typeString":"contract IERC20[][]"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"middlewareTimesIndexes","nameLocation":"16487:22:4","nodeType":"VariableDeclaration","scope":1088,"src":"16468:41:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"16468:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1081,"nodeType":"ArrayTypeName","src":"16468:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"receiveAsTokens","nameLocation":"16535:15:4","nodeType":"VariableDeclaration","scope":1088,"src":"16519:31:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1083,"name":"bool","nodeType":"ElementaryTypeName","src":"16519:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1084,"nodeType":"ArrayTypeName","src":"16519:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"16379:177:4"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"16565:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1099,"nodeType":"FunctionDefinition","src":"17108:94:4","nodes":[],"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"16572:531:4","text":" @notice Increases a staker's delegated share balance in a strategy.\n @param staker The address to increase the delegated shares for their operator.\n @param strategy The strategy in which to increase the delegated shares.\n @param shares The number of shares to increase.\n @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n @dev Callable only by the StrategyManager or EigenPodManager."},"functionSelector":"28a573ae","implemented":false,"kind":"function","modifiers":[],"name":"increaseDelegatedShares","nameLocation":"17117:23:4","parameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"staker","nameLocation":"17149:6:4","nodeType":"VariableDeclaration","scope":1099,"src":"17141:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"17141:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"strategy","nameLocation":"17167:8:4","nodeType":"VariableDeclaration","scope":1099,"src":"17157:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1093,"nodeType":"UserDefinedTypeName","pathNode":{"id":1092,"name":"IStrategy","nameLocations":["17157:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"17157:9:4"},"referencedDeclaration":2005,"src":"17157:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"shares","nameLocation":"17185:6:4","nodeType":"VariableDeclaration","scope":1099,"src":"17177:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"17177:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17140:52:4"},"returnParameters":{"id":1098,"nodeType":"ParameterList","parameters":[],"src":"17201:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1110,"nodeType":"FunctionDefinition","src":"17744:94:4","nodes":[],"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"17208:531:4","text":" @notice Decreases a staker's delegated share balance in a strategy.\n @param staker The address to increase the delegated shares for their operator.\n @param strategy The strategy in which to decrease the delegated shares.\n @param shares The number of shares to decrease.\n @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n @dev Callable only by the StrategyManager or EigenPodManager."},"functionSelector":"132d4967","implemented":false,"kind":"function","modifiers":[],"name":"decreaseDelegatedShares","nameLocation":"17753:23:4","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"staker","nameLocation":"17785:6:4","nodeType":"VariableDeclaration","scope":1110,"src":"17777:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"17777:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"strategy","nameLocation":"17803:8:4","nodeType":"VariableDeclaration","scope":1110,"src":"17793:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1104,"nodeType":"UserDefinedTypeName","pathNode":{"id":1103,"name":"IStrategy","nameLocations":["17793:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"17793:9:4"},"referencedDeclaration":2005,"src":"17793:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"shares","nameLocation":"17821:6:4","nodeType":"VariableDeclaration","scope":1110,"src":"17813:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"17813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17776:52:4"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[],"src":"17837:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1116,"nodeType":"FunctionDefinition","src":"18046:83:4","nodes":[],"documentation":{"id":1111,"nodeType":"StructuredDocumentation","src":"17844:197:4","text":" @notice Owner-only function for modifying the value of the `minWithdrawalDelayBlocks` variable.\n @param newMinWithdrawalDelayBlocks new value of `minWithdrawalDelayBlocks`."},"functionSelector":"635bbd10","implemented":false,"kind":"function","modifiers":[],"name":"setMinWithdrawalDelayBlocks","nameLocation":"18055:27:4","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"newMinWithdrawalDelayBlocks","nameLocation":"18091:27:4","nodeType":"VariableDeclaration","scope":1116,"src":"18083:35:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"18083:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18082:37:4"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[],"src":"18128:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1127,"nodeType":"FunctionDefinition","src":"18600:126:4","nodes":[],"documentation":{"id":1117,"nodeType":"StructuredDocumentation","src":"18136:459:4","text":" @notice Called by owner to set the minimum withdrawal delay blocks for each passed in strategy\n Note that the min number of blocks to complete a withdrawal of a strategy is\n MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\n @param strategies The strategies to set the minimum withdrawal delay blocks for\n @param withdrawalDelayBlocks The minimum withdrawal delay blocks to set for each strategy"},"functionSelector":"1522bf02","implemented":false,"kind":"function","modifiers":[],"name":"setStrategyWithdrawalDelayBlocks","nameLocation":"18609:32:4","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"strategies","nameLocation":"18663:10:4","nodeType":"VariableDeclaration","scope":1127,"src":"18642:31:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_calldata_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":1119,"nodeType":"UserDefinedTypeName","pathNode":{"id":1118,"name":"IStrategy","nameLocations":["18642:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"18642:9:4"},"referencedDeclaration":2005,"src":"18642:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":1120,"nodeType":"ArrayTypeName","src":"18642:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"withdrawalDelayBlocks","nameLocation":"18694:21:4","nodeType":"VariableDeclaration","scope":1127,"src":"18675:40:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1122,"name":"uint256","nodeType":"ElementaryTypeName","src":"18675:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1123,"nodeType":"ArrayTypeName","src":"18675:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"18641:75:4"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[],"src":"18725:0:4"},"scope":1347,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1135,"nodeType":"FunctionDefinition","src":"19028:69:4","nodes":[],"documentation":{"id":1128,"nodeType":"StructuredDocumentation","src":"18732:291:4","text":" @notice returns the address of the operator that `staker` is delegated to.\n @notice Mapping: staker => operator whom the staker is currently delegated to.\n @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator."},"functionSelector":"65da1264","implemented":false,"kind":"function","modifiers":[],"name":"delegatedTo","nameLocation":"19037:11:4","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"staker","nameLocation":"19057:6:4","nodeType":"VariableDeclaration","scope":1135,"src":"19049:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"19049:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19048:16:4"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"19088:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"19088:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19087:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1144,"nodeType":"FunctionDefinition","src":"19200:90:4","nodes":[],"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"19103:92:4","text":" @notice Returns the OperatorDetails struct associated with an `operator`."},"functionSelector":"c5e480db","implemented":false,"kind":"function","modifiers":[],"name":"operatorDetails","nameLocation":"19209:15:4","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"operator","nameLocation":"19233:8:4","nodeType":"VariableDeclaration","scope":1144,"src":"19225:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"19225:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19224:18:4"},"returnParameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1144,"src":"19266:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_memory_ptr","typeString":"struct IDelegationManager.OperatorDetails"},"typeName":{"id":1141,"nodeType":"UserDefinedTypeName","pathNode":{"id":1140,"name":"OperatorDetails","nameLocations":["19266:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":839,"src":"19266:15:4"},"referencedDeclaration":839,"src":"19266:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDetails_$839_storage_ptr","typeString":"struct IDelegationManager.OperatorDetails"}},"visibility":"internal"}],"src":"19265:24:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1152,"nodeType":"FunctionDefinition","src":"19382:78:4","nodes":[],"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"19296:81:4","text":" @notice Returns the delegationApprover account for an operator"},"functionSelector":"3cdeb5e0","implemented":false,"kind":"function","modifiers":[],"name":"delegationApprover","nameLocation":"19391:18:4","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"operator","nameLocation":"19418:8:4","nodeType":"VariableDeclaration","scope":1152,"src":"19410:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"19410:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19409:18:4"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1152,"src":"19451:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"19451:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19450:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1160,"nodeType":"FunctionDefinition","src":"19550:84:4","nodes":[],"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"19466:79:4","text":" @notice Returns the stakerOptOutWindowBlocks for an operator"},"functionSelector":"16928365","implemented":false,"kind":"function","modifiers":[],"name":"stakerOptOutWindowBlocks","nameLocation":"19559:24:4","parameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"operator","nameLocation":"19592:8:4","nodeType":"VariableDeclaration","scope":1160,"src":"19584:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"19584:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19583:18:4"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"19625:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1157,"name":"uint256","nodeType":"ElementaryTypeName","src":"19625:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19624:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1173,"nodeType":"FunctionDefinition","src":"19739:139:4","nodes":[],"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"19640:94:4","text":" @notice Given array of strategies, returns array of shares for the operator"},"functionSelector":"90041347","implemented":false,"kind":"function","modifiers":[],"name":"getOperatorShares","nameLocation":"19748:17:4","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"operator","nameLocation":"19783:8:4","nodeType":"VariableDeclaration","scope":1173,"src":"19775:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"19775:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"strategies","nameLocation":"19820:10:4","nodeType":"VariableDeclaration","scope":1173,"src":"19801:29:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":1165,"nodeType":"UserDefinedTypeName","pathNode":{"id":1164,"name":"IStrategy","nameLocations":["19801:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"19801:9:4"},"referencedDeclaration":2005,"src":"19801:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":1166,"nodeType":"ArrayTypeName","src":"19801:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"}],"src":"19765:71:4"},"returnParameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1173,"src":"19860:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"19860:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1170,"nodeType":"ArrayTypeName","src":"19860:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"19859:18:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1183,"nodeType":"FunctionDefinition","src":"20206:93:4","nodes":[],"documentation":{"id":1174,"nodeType":"StructuredDocumentation","src":"19884:317:4","text":" @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\n from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\n @param strategies The strategies to check withdrawal delays for"},"functionSelector":"0449ca39","implemented":false,"kind":"function","modifiers":[],"name":"getWithdrawalDelay","nameLocation":"20215:18:4","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"strategies","nameLocation":"20255:10:4","nodeType":"VariableDeclaration","scope":1183,"src":"20234:31:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_calldata_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":1176,"nodeType":"UserDefinedTypeName","pathNode":{"id":1175,"name":"IStrategy","nameLocations":["20234:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"20234:9:4"},"referencedDeclaration":2005,"src":"20234:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":1177,"nodeType":"ArrayTypeName","src":"20234:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"}],"src":"20233:33:4"},"returnParameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1183,"src":"20290:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"20290:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20289:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1194,"nodeType":"FunctionDefinition","src":"20799:94:4","nodes":[],"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"20305:489:4","text":" @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n @dev By design, the following invariant should hold for each Strategy:\n (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n = sum (delegateable shares of all stakers delegated to the operator)"},"functionSelector":"778e55f3","implemented":false,"kind":"function","modifiers":[],"name":"operatorShares","nameLocation":"20808:14:4","parameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"operator","nameLocation":"20831:8:4","nodeType":"VariableDeclaration","scope":1194,"src":"20823:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"20823:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"strategy","nameLocation":"20851:8:4","nodeType":"VariableDeclaration","scope":1194,"src":"20841:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1188,"nodeType":"UserDefinedTypeName","pathNode":{"id":1187,"name":"IStrategy","nameLocations":["20841:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"20841:9:4"},"referencedDeclaration":2005,"src":"20841:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"20822:38:4"},"returnParameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1194,"src":"20884:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"20884:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20883:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1207,"nodeType":"FunctionDefinition","src":"21119:107:4","nodes":[],"documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"20900:214:4","text":" @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares."},"functionSelector":"cf80873e","implemented":false,"kind":"function","modifiers":[],"name":"getDelegatableShares","nameLocation":"21128:20:4","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"staker","nameLocation":"21157:6:4","nodeType":"VariableDeclaration","scope":1207,"src":"21149:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"21149:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21148:16:4"},"returnParameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1207,"src":"21188:18:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":1200,"nodeType":"UserDefinedTypeName","pathNode":{"id":1199,"name":"IStrategy","nameLocations":["21188:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"21188:9:4"},"referencedDeclaration":2005,"src":"21188:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":1201,"nodeType":"ArrayTypeName","src":"21188:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1207,"src":"21208:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"21208:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1204,"nodeType":"ArrayTypeName","src":"21208:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"21187:38:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1215,"nodeType":"FunctionDefinition","src":"21338:66:4","nodes":[],"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"21232:101:4","text":" @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise."},"functionSelector":"3e28391d","implemented":false,"kind":"function","modifiers":[],"name":"isDelegated","nameLocation":"21347:11:4","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"staker","nameLocation":"21367:6:4","nodeType":"VariableDeclaration","scope":1215,"src":"21359:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1209,"name":"address","nodeType":"ElementaryTypeName","src":"21359:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21358:16:4"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1215,"src":"21398:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1212,"name":"bool","nodeType":"ElementaryTypeName","src":"21398:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"21397:6:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1223,"nodeType":"FunctionDefinition","src":"21511:67:4","nodes":[],"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"21410:96:4","text":" @notice Returns true is an operator has previously registered for delegation."},"functionSelector":"6d70f7ae","implemented":false,"kind":"function","modifiers":[],"name":"isOperator","nameLocation":"21520:10:4","parameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"mutability":"mutable","name":"operator","nameLocation":"21539:8:4","nodeType":"VariableDeclaration","scope":1223,"src":"21531:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"21531:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21530:18:4"},"returnParameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1223,"src":"21572:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1220,"name":"bool","nodeType":"ElementaryTypeName","src":"21572:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"21571:6:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1231,"nodeType":"FunctionDefinition","src":"21742:69:4","nodes":[],"documentation":{"id":1224,"nodeType":"StructuredDocumentation","src":"21584:153:4","text":"@notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked"},"functionSelector":"29c77d4f","implemented":false,"kind":"function","modifiers":[],"name":"stakerNonce","nameLocation":"21751:11:4","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"staker","nameLocation":"21771:6:4","nodeType":"VariableDeclaration","scope":1231,"src":"21763:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"21763:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21762:16:4"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"21802:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"21802:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21801:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1241,"nodeType":"FunctionDefinition","src":"22253:111:4","nodes":[],"documentation":{"id":1232,"nodeType":"StructuredDocumentation","src":"21817:431:4","text":" @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`."},"functionSelector":"bb45fef2","implemented":false,"kind":"function","modifiers":[],"name":"delegationApproverSaltIsSpent","nameLocation":"22262:29:4","parameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"_delegationApprover","nameLocation":"22300:19:4","nodeType":"VariableDeclaration","scope":1241,"src":"22292:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1233,"name":"address","nodeType":"ElementaryTypeName","src":"22292:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"salt","nameLocation":"22329:4:4","nodeType":"VariableDeclaration","scope":1241,"src":"22321:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22321:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22291:43:4"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1241,"src":"22358:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1238,"name":"bool","nodeType":"ElementaryTypeName","src":"22358:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22357:6:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1247,"nodeType":"FunctionDefinition","src":"22895:68:4","nodes":[],"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"22370:520:4","text":" @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\n to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])"},"functionSelector":"c448feb8","implemented":false,"kind":"function","modifiers":[],"name":"minWithdrawalDelayBlocks","nameLocation":"22904:24:4","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[],"src":"22928:2:4"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1247,"src":"22954:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"22954:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22953:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1256,"nodeType":"FunctionDefinition","src":"23251:91:4","nodes":[],"documentation":{"id":1248,"nodeType":"StructuredDocumentation","src":"22969:277:4","text":" @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced)."},"functionSelector":"c488375a","implemented":false,"kind":"function","modifiers":[],"name":"strategyWithdrawalDelayBlocks","nameLocation":"23260:29:4","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"strategy","nameLocation":"23300:8:4","nodeType":"VariableDeclaration","scope":1256,"src":"23290:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1250,"nodeType":"UserDefinedTypeName","pathNode":{"id":1249,"name":"IStrategy","nameLocations":["23290:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"23290:9:4"},"referencedDeclaration":2005,"src":"23290:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"23289:20:4"},"returnParameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1256,"src":"23333:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"23333:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23332:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1263,"nodeType":"FunctionDefinition","src":"23409:68:4","nodes":[],"documentation":{"id":1257,"nodeType":"StructuredDocumentation","src":"23348:56:4","text":"@notice return address of the beaconChainETHStrategy"},"functionSelector":"9104c319","implemented":false,"kind":"function","modifiers":[],"name":"beaconChainETHStrategy","nameLocation":"23418:22:4","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[],"src":"23440:2:4"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1263,"src":"23466:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1260,"nodeType":"UserDefinedTypeName","pathNode":{"id":1259,"name":"IStrategy","nameLocations":["23466:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"23466:9:4"},"referencedDeclaration":2005,"src":"23466:9:4","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"23465:11:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1275,"nodeType":"FunctionDefinition","src":"23765:164:4","nodes":[],"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"23483:277:4","text":" @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n @param staker The signing staker\n @param operator The operator who is being delegated to\n @param expiry The desired expiry time of the staker's signature"},"functionSelector":"1bbce091","implemented":false,"kind":"function","modifiers":[],"name":"calculateCurrentStakerDelegationDigestHash","nameLocation":"23774:42:4","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"staker","nameLocation":"23834:6:4","nodeType":"VariableDeclaration","scope":1275,"src":"23826:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"23826:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"operator","nameLocation":"23858:8:4","nodeType":"VariableDeclaration","scope":1275,"src":"23850:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"23850:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"expiry","nameLocation":"23884:6:4","nodeType":"VariableDeclaration","scope":1275,"src":"23876:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"23876:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23816:80:4"},"returnParameters":{"id":1274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1275,"src":"23920:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23920:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"23919:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1289,"nodeType":"FunctionDefinition","src":"24359:187:4","nodes":[],"documentation":{"id":1276,"nodeType":"StructuredDocumentation","src":"23935:419:4","text":" @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n @param staker The signing staker\n @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n @param operator The operator who is being delegated to\n @param expiry The desired expiry time of the staker's signature"},"functionSelector":"c94b5111","implemented":false,"kind":"function","modifiers":[],"name":"calculateStakerDelegationDigestHash","nameLocation":"24368:35:4","parameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"staker","nameLocation":"24421:6:4","nodeType":"VariableDeclaration","scope":1289,"src":"24413:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"24413:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"_stakerNonce","nameLocation":"24445:12:4","nodeType":"VariableDeclaration","scope":1289,"src":"24437:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"24437:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"operator","nameLocation":"24475:8:4","nodeType":"VariableDeclaration","scope":1289,"src":"24467:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"24467:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"expiry","nameLocation":"24501:6:4","nodeType":"VariableDeclaration","scope":1289,"src":"24493:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1283,"name":"uint256","nodeType":"ElementaryTypeName","src":"24493:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24403:110:4"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1289,"src":"24537:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"24537:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"24536:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1305,"nodeType":"FunctionDefinition","src":"25142:226:4","nodes":[],"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"24552:585:4","text":" @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n @param staker The account delegating their stake\n @param operator The account receiving delegated stake\n @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n @param approverSalt A unique and single use value associated with the approver signature.\n @param expiry Time after which the approver's signature becomes invalid"},"functionSelector":"0b9f487a","implemented":false,"kind":"function","modifiers":[],"name":"calculateDelegationApprovalDigestHash","nameLocation":"25151:37:4","parameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"staker","nameLocation":"25206:6:4","nodeType":"VariableDeclaration","scope":1305,"src":"25198:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1291,"name":"address","nodeType":"ElementaryTypeName","src":"25198:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"operator","nameLocation":"25230:8:4","nodeType":"VariableDeclaration","scope":1305,"src":"25222:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1293,"name":"address","nodeType":"ElementaryTypeName","src":"25222:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"_delegationApprover","nameLocation":"25256:19:4","nodeType":"VariableDeclaration","scope":1305,"src":"25248:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"25248:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1298,"mutability":"mutable","name":"approverSalt","nameLocation":"25293:12:4","nodeType":"VariableDeclaration","scope":1305,"src":"25285:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25285:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"expiry","nameLocation":"25323:6:4","nodeType":"VariableDeclaration","scope":1305,"src":"25315:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"25315:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25188:147:4"},"returnParameters":{"id":1304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"25359:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25359:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"25358:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1311,"nodeType":"FunctionDefinition","src":"25437:59:4","nodes":[],"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"25374:58:4","text":"@notice The EIP-712 typehash for the contract's domain"},"functionSelector":"20606b70","implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_TYPEHASH","nameLocation":"25446:15:4","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[],"src":"25461:2:4"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1311,"src":"25487:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25487:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"25486:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1317,"nodeType":"FunctionDefinition","src":"25592:70:4","nodes":[],"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"25502:85:4","text":"@notice The EIP-712 typehash for the StakerDelegation struct used by the contract"},"functionSelector":"43377382","implemented":false,"kind":"function","modifiers":[],"name":"STAKER_DELEGATION_TYPEHASH","nameLocation":"25601:26:4","parameters":{"id":1313,"nodeType":"ParameterList","parameters":[],"src":"25627:2:4"},"returnParameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1317,"src":"25653:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25653:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"25652:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1323,"nodeType":"FunctionDefinition","src":"25760:72:4","nodes":[],"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"25668:87:4","text":"@notice The EIP-712 typehash for the DelegationApproval struct used by the contract"},"functionSelector":"04a4f979","implemented":false,"kind":"function","modifiers":[],"name":"DELEGATION_APPROVAL_TYPEHASH","nameLocation":"25769:28:4","parameters":{"id":1319,"nodeType":"ParameterList","parameters":[],"src":"25797:2:4"},"returnParameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1323,"src":"25823:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25823:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"25822:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1329,"nodeType":"FunctionDefinition","src":"26227:59:4","nodes":[],"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"25838:384:4","text":" @notice Getter function for the current EIP-712 domain separator for this contract.\n @dev The domain separator will change in the event of a fork that changes the ChainID.\n @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n for more detailed information please read EIP-712."},"functionSelector":"f698da25","implemented":false,"kind":"function","modifiers":[],"name":"domainSeparator","nameLocation":"26236:15:4","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[],"src":"26251:2:4"},"returnParameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"26277:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"26277:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"26276:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1337,"nodeType":"FunctionDefinition","src":"26532:85:4","nodes":[],"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"26292:235:4","text":"@notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes."},"functionSelector":"a1788484","implemented":false,"kind":"function","modifiers":[],"name":"cumulativeWithdrawalsQueued","nameLocation":"26541:27:4","parameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"staker","nameLocation":"26577:6:4","nodeType":"VariableDeclaration","scope":1337,"src":"26569:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"26569:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26568:16:4"},"returnParameters":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"26608:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1334,"name":"uint256","nodeType":"ElementaryTypeName","src":"26608:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26607:9:4"},"scope":1347,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1346,"nodeType":"FunctionDefinition","src":"26683:95:4","nodes":[],"documentation":{"id":1338,"nodeType":"StructuredDocumentation","src":"26623:55:4","text":"@notice Returns the keccak256 hash of `withdrawal`."},"functionSelector":"597b36da","implemented":false,"kind":"function","modifiers":[],"name":"calculateWithdrawalRoot","nameLocation":"26692:23:4","parameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"withdrawal","nameLocation":"26734:10:4","nodeType":"VariableDeclaration","scope":1346,"src":"26716:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_memory_ptr","typeString":"struct IDelegationManager.Withdrawal"},"typeName":{"id":1340,"nodeType":"UserDefinedTypeName","pathNode":{"id":1339,"name":"Withdrawal","nameLocations":["26716:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":878,"src":"26716:10:4"},"referencedDeclaration":878,"src":"26716:10:4","typeDescriptions":{"typeIdentifier":"t_struct$_Withdrawal_$878_storage_ptr","typeString":"struct IDelegationManager.Withdrawal"}},"visibility":"internal"}],"src":"26715:30:4"},"returnParameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1346,"src":"26769:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"26769:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"26768:9:4"},"scope":1347,"stateMutability":"pure","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":828,"name":"ISignatureUtils","nameLocations":["870:15:4"],"nodeType":"IdentifierPath","referencedDeclaration":1890,"src":"870:15:4"},"id":829,"nodeType":"InheritanceSpecifier","src":"870:15:4"}],"canonicalName":"IDelegationManager","contractDependencies":[],"contractKind":"interface","documentation":{"id":827,"nodeType":"StructuredDocumentation","src":"122:715:4","text":" @title DelegationManager\n @author Layr Labs, Inc.\n @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\n - enabling anyone to register as an operator in EigenLayer\n - allowing operators to specify parameters related to stakers who delegate to them\n - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)"},"fullyImplemented":false,"linearizedBaseContracts":[1347,1890],"name":"IDelegationManager","nameLocation":"848:18:4","scope":1348,"usedErrors":[],"usedEvents":[895,903,910,922,934,941,948,955,963,968,975,985]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol":{"id":5,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","id":1875,"exportedSymbols":{"IERC20":[6545],"IRewardsCoordinator":[1874],"IStrategy":[2005]},"nodeType":"SourceUnit","src":"37:25602:5","nodes":[{"id":1349,"nodeType":"PragmaDirective","src":"37:24:5","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":1350,"nodeType":"ImportDirective","src":"63:56:5","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":1875,"sourceUnit":6546,"symbolAliases":[],"unitAlias":""},{"id":1351,"nodeType":"ImportDirective","src":"120:25:5","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"./IStrategy.sol","nameLocation":"-1:-1:-1","scope":1875,"sourceUnit":2006,"symbolAliases":[],"unitAlias":""},{"id":1874,"nodeType":"ContractDefinition","src":"655:24983:5","nodes":[{"id":1359,"nodeType":"StructDefinition","src":"1004:91:5","nodes":[],"canonicalName":"IRewardsCoordinator.StrategyAndMultiplier","documentation":{"id":1353,"nodeType":"StructuredDocumentation","src":"711:288:5","text":" @notice A linear combination of strategies and multipliers for AVSs to weigh\n EigenLayer strategies.\n @param strategy The EigenLayer strategy to be used for the rewards submission\n @param multiplier The weight of the strategy in the rewards submission"},"members":[{"constant":false,"id":1356,"mutability":"mutable","name":"strategy","nameLocation":"1053:8:5","nodeType":"VariableDeclaration","scope":1359,"src":"1043:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":1355,"nodeType":"UserDefinedTypeName","pathNode":{"id":1354,"name":"IStrategy","nameLocations":["1043:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"1043:9:5"},"referencedDeclaration":2005,"src":"1043:9:5","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"multiplier","nameLocation":"1078:10:5","nodeType":"VariableDeclaration","scope":1359,"src":"1071:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1357,"name":"uint96","nodeType":"ElementaryTypeName","src":"1071:6:5","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"StrategyAndMultiplier","nameLocation":"1011:21:5","scope":1874,"visibility":"public"},{"id":1365,"nodeType":"StructDefinition","src":"1271:79:5","nodes":[],"canonicalName":"IRewardsCoordinator.OperatorReward","documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"1101:165:5","text":" @notice A reward struct for an operator\n @param operator The operator to be rewarded\n @param amount The reward amount for the operator"},"members":[{"constant":false,"id":1362,"mutability":"mutable","name":"operator","nameLocation":"1311:8:5","nodeType":"VariableDeclaration","scope":1365,"src":"1303:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1361,"name":"address","nodeType":"ElementaryTypeName","src":"1303:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"amount","nameLocation":"1337:6:5","nodeType":"VariableDeclaration","scope":1365,"src":"1329:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"1329:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"OperatorReward","nameLocation":"1278:14:5","scope":1874,"visibility":"public"},{"id":1373,"nodeType":"StructDefinition","src":"1748:114:5","nodes":[],"canonicalName":"IRewardsCoordinator.OperatorSplit","documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"1356:387:5","text":" @notice A split struct for an Operator\n @param oldSplitBips The old split in basis points. This is the split that is active if `block.timestamp < activatedAt`\n @param newSplitBips The new split in basis points. This is the split that is active if `block.timestamp >= activatedAt`\n @param activatedAt The timestamp at which the split will be activated"},"members":[{"constant":false,"id":1368,"mutability":"mutable","name":"oldSplitBips","nameLocation":"1786:12:5","nodeType":"VariableDeclaration","scope":1373,"src":"1779:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1367,"name":"uint16","nodeType":"ElementaryTypeName","src":"1779:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"newSplitBips","nameLocation":"1815:12:5","nodeType":"VariableDeclaration","scope":1373,"src":"1808:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1369,"name":"uint16","nodeType":"ElementaryTypeName","src":"1808:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1372,"mutability":"mutable","name":"activatedAt","nameLocation":"1844:11:5","nodeType":"VariableDeclaration","scope":1373,"src":"1837:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1371,"name":"uint32","nodeType":"ElementaryTypeName","src":"1837:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"OperatorSplit","nameLocation":"1755:13:5","scope":1874,"visibility":"public"},{"id":1388,"nodeType":"StructDefinition","src":"3486:192:5","nodes":[],"canonicalName":"IRewardsCoordinator.RewardsSubmission","documentation":{"id":1374,"nodeType":"StructuredDocumentation","src":"1868:1613:5","text":" Sliding Window for valid RewardsSubmission startTimestamp\n Scenario A: GENESIS_REWARDS_TIMESTAMP IS WITHIN RANGE\n         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n             <--------------------valid range for startTimestamp------------------------>\n             ^\n         GENESIS_REWARDS_TIMESTAMP\n Scenario B: GENESIS_REWARDS_TIMESTAMP IS OUT OF RANGE\n         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n         <------------------------valid range for startTimestamp------------------------>\n     ^\n GENESIS_REWARDS_TIMESTAMP\n @notice RewardsSubmission struct submitted by AVSs when making rewards for their operators and stakers\n RewardsSubmission can be for a time range within the valid window for startTimestamp and must be within max duration.\n See `createAVSRewardsSubmission()` for more details.\n @param strategiesAndMultipliers The strategies and their relative weights\n cannot have duplicate strategies and need to be sorted in ascending address order\n @param token The rewards token to be distributed\n @param amount The total amount of tokens to be distributed\n @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution\n could start in the past or in the future but within a valid range. See the diagram above.\n @param duration The duration of the submission range in seconds. Must be <= MAX_REWARDS_DURATION"},"members":[{"constant":false,"id":1378,"mutability":"mutable","name":"strategiesAndMultipliers","nameLocation":"3545:24:5","nodeType":"VariableDeclaration","scope":1388,"src":"3521:48:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyAndMultiplier_$1359_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier[]"},"typeName":{"baseType":{"id":1376,"nodeType":"UserDefinedTypeName","pathNode":{"id":1375,"name":"StrategyAndMultiplier","nameLocations":["3521:21:5"],"nodeType":"IdentifierPath","referencedDeclaration":1359,"src":"3521:21:5"},"referencedDeclaration":1359,"src":"3521:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyAndMultiplier_$1359_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier"}},"id":1377,"nodeType":"ArrayTypeName","src":"3521:23:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyAndMultiplier_$1359_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier[]"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"token","nameLocation":"3586:5:5","nodeType":"VariableDeclaration","scope":1388,"src":"3579:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1380,"nodeType":"UserDefinedTypeName","pathNode":{"id":1379,"name":"IERC20","nameLocations":["3579:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"3579:6:5"},"referencedDeclaration":6545,"src":"3579:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"amount","nameLocation":"3609:6:5","nodeType":"VariableDeclaration","scope":1388,"src":"3601:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1382,"name":"uint256","nodeType":"ElementaryTypeName","src":"3601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"startTimestamp","nameLocation":"3632:14:5","nodeType":"VariableDeclaration","scope":1388,"src":"3625:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1384,"name":"uint32","nodeType":"ElementaryTypeName","src":"3625:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"duration","nameLocation":"3663:8:5","nodeType":"VariableDeclaration","scope":1388,"src":"3656:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1386,"name":"uint32","nodeType":"ElementaryTypeName","src":"3656:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"RewardsSubmission","nameLocation":"3493:17:5","scope":1874,"visibility":"public"},{"id":1407,"nodeType":"StructDefinition","src":"4304:254:5","nodes":[],"canonicalName":"IRewardsCoordinator.OperatorDirectedRewardsSubmission","documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"3684:615:5","text":" @notice OperatorDirectedRewardsSubmission struct submitted by AVSs when making operator-directed rewards for their operators and stakers.\n @param strategiesAndMultipliers The strategies and their relative weights.\n @param token The rewards token to be distributed.\n @param operatorRewards The rewards for the operators.\n @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution.\n @param duration The duration of the submission range in seconds.\n @param description Describes what the rewards submission is for."},"members":[{"constant":false,"id":1393,"mutability":"mutable","name":"strategiesAndMultipliers","nameLocation":"4379:24:5","nodeType":"VariableDeclaration","scope":1407,"src":"4355:48:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyAndMultiplier_$1359_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier[]"},"typeName":{"baseType":{"id":1391,"nodeType":"UserDefinedTypeName","pathNode":{"id":1390,"name":"StrategyAndMultiplier","nameLocations":["4355:21:5"],"nodeType":"IdentifierPath","referencedDeclaration":1359,"src":"4355:21:5"},"referencedDeclaration":1359,"src":"4355:21:5","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyAndMultiplier_$1359_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier"}},"id":1392,"nodeType":"ArrayTypeName","src":"4355:23:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyAndMultiplier_$1359_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.StrategyAndMultiplier[]"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"token","nameLocation":"4420:5:5","nodeType":"VariableDeclaration","scope":1407,"src":"4413:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1395,"nodeType":"UserDefinedTypeName","pathNode":{"id":1394,"name":"IERC20","nameLocations":["4413:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"4413:6:5"},"referencedDeclaration":6545,"src":"4413:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"operatorRewards","nameLocation":"4452:15:5","nodeType":"VariableDeclaration","scope":1407,"src":"4435:32:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorReward_$1365_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorReward[]"},"typeName":{"baseType":{"id":1398,"nodeType":"UserDefinedTypeName","pathNode":{"id":1397,"name":"OperatorReward","nameLocations":["4435:14:5"],"nodeType":"IdentifierPath","referencedDeclaration":1365,"src":"4435:14:5"},"referencedDeclaration":1365,"src":"4435:14:5","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorReward_$1365_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorReward"}},"id":1399,"nodeType":"ArrayTypeName","src":"4435:16:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorReward_$1365_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorReward[]"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"startTimestamp","nameLocation":"4484:14:5","nodeType":"VariableDeclaration","scope":1407,"src":"4477:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1401,"name":"uint32","nodeType":"ElementaryTypeName","src":"4477:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"duration","nameLocation":"4515:8:5","nodeType":"VariableDeclaration","scope":1407,"src":"4508:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1403,"name":"uint32","nodeType":"ElementaryTypeName","src":"4508:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"description","nameLocation":"4540:11:5","nodeType":"VariableDeclaration","scope":1407,"src":"4533:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1405,"name":"string","nodeType":"ElementaryTypeName","src":"4533:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"OperatorDirectedRewardsSubmission","nameLocation":"4311:33:5","scope":1874,"visibility":"public"},{"id":1417,"nodeType":"StructDefinition","src":"5311:151:5","nodes":[],"canonicalName":"IRewardsCoordinator.DistributionRoot","documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"4564:742:5","text":" @notice A distribution root is a merkle root of the distribution of earnings for a given period.\n The RewardsCoordinator stores all historical distribution roots so that earners can claim their earnings against older roots\n if they wish but the merkle tree contains the cumulative earnings of all earners and tokens for a given period so earners (or their claimers if set)\n only need to claim against the latest root to claim all available earnings.\n @param root The merkle root of the distribution\n @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n @param activatedAt The timestamp (seconds) at which the root can be claimed against"},"members":[{"constant":false,"id":1410,"mutability":"mutable","name":"root","nameLocation":"5353:4:5","nodeType":"VariableDeclaration","scope":1417,"src":"5345:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5345:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"rewardsCalculationEndTimestamp","nameLocation":"5374:30:5","nodeType":"VariableDeclaration","scope":1417,"src":"5367:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1411,"name":"uint32","nodeType":"ElementaryTypeName","src":"5367:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"activatedAt","nameLocation":"5421:11:5","nodeType":"VariableDeclaration","scope":1417,"src":"5414:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1413,"name":"uint32","nodeType":"ElementaryTypeName","src":"5414:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1416,"mutability":"mutable","name":"disabled","nameLocation":"5447:8:5","nodeType":"VariableDeclaration","scope":1417,"src":"5442:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1415,"name":"bool","nodeType":"ElementaryTypeName","src":"5442:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"DistributionRoot","nameLocation":"5318:16:5","scope":1874,"visibility":"public"},{"id":1423,"nodeType":"StructDefinition","src":"5757:92:5","nodes":[],"canonicalName":"IRewardsCoordinator.EarnerTreeMerkleLeaf","documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"5468:284:5","text":" @notice Internal leaf in the merkle tree for the earner's account leaf\n @param earner The address of the earner\n @param earnerTokenRoot The merkle root of the earner's token subtree\n Each leaf in the earner's token subtree is a TokenTreeMerkleLeaf"},"members":[{"constant":false,"id":1420,"mutability":"mutable","name":"earner","nameLocation":"5803:6:5","nodeType":"VariableDeclaration","scope":1423,"src":"5795:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1419,"name":"address","nodeType":"ElementaryTypeName","src":"5795:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"earnerTokenRoot","nameLocation":"5827:15:5","nodeType":"VariableDeclaration","scope":1423,"src":"5819:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5819:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"EarnerTreeMerkleLeaf","nameLocation":"5764:20:5","scope":1874,"visibility":"public"},{"id":1430,"nodeType":"StructDefinition","src":"6224:92:5","nodes":[],"canonicalName":"IRewardsCoordinator.TokenTreeMerkleLeaf","documentation":{"id":1424,"nodeType":"StructuredDocumentation","src":"5855:364:5","text":" @notice The actual leaves in the distribution merkle tree specifying the token earnings\n for the respective earner's subtree. Each leaf is a claimable amount of a token for an earner.\n @param token The token for which the earnings are being claimed\n @param cumulativeEarnings The cumulative earnings of the earner for the token"},"members":[{"constant":false,"id":1427,"mutability":"mutable","name":"token","nameLocation":"6268:5:5","nodeType":"VariableDeclaration","scope":1430,"src":"6261:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1426,"nodeType":"UserDefinedTypeName","pathNode":{"id":1425,"name":"IERC20","nameLocations":["6261:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"6261:6:5"},"referencedDeclaration":6545,"src":"6261:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"cumulativeEarnings","nameLocation":"6291:18:5","nodeType":"VariableDeclaration","scope":1430,"src":"6283:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"6283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TokenTreeMerkleLeaf","nameLocation":"6231:19:5","scope":1874,"visibility":"public"},{"id":1451,"nodeType":"StructDefinition","src":"7929:266:5","nodes":[],"canonicalName":"IRewardsCoordinator.RewardsMerkleClaim","documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"6322:1602:5","text":" @notice A claim against a distribution root called by an\n earners claimer (could be the earner themselves). Each token claim will claim the difference\n between the cumulativeEarnings of the earner and the cumulativeClaimed of the claimer.\n Each claim can specify which of the earner's earned tokens they want to claim.\n See `processClaim()` for more details.\n @param rootIndex The index of the root in the list of DistributionRoots\n @param earnerIndex The index of the earner's account root in the merkle tree\n @param earnerTreeProof The proof of the earner's EarnerTreeMerkleLeaf against the merkle root\n @param earnerLeaf The earner's EarnerTreeMerkleLeaf struct, providing the earner address and earnerTokenRoot\n @param tokenIndices The indices of the token leaves in the earner's subtree\n @param tokenTreeProofs The proofs of the token leaves against the earner's earnerTokenRoot\n @param tokenLeaves The token leaves to be claimed\n @dev The merkle tree is structured with the merkle root at the top and EarnerTreeMerkleLeaf as internal leaves\n in the tree. Each earner leaf has its own subtree with TokenTreeMerkleLeaf as leaves in the subtree.\n To prove a claim against a specified rootIndex(which specifies the distributionRoot being used),\n the claim will first verify inclusion of the earner leaf in the tree against _distributionRoots[rootIndex].root.\n Then for each token, it will verify inclusion of the token leaf in the earner's subtree against the earner's earnerTokenRoot."},"members":[{"constant":false,"id":1433,"mutability":"mutable","name":"rootIndex","nameLocation":"7972:9:5","nodeType":"VariableDeclaration","scope":1451,"src":"7965:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1432,"name":"uint32","nodeType":"ElementaryTypeName","src":"7965:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"earnerIndex","nameLocation":"7998:11:5","nodeType":"VariableDeclaration","scope":1451,"src":"7991:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1434,"name":"uint32","nodeType":"ElementaryTypeName","src":"7991:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"earnerTreeProof","nameLocation":"8025:15:5","nodeType":"VariableDeclaration","scope":1451,"src":"8019:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1436,"name":"bytes","nodeType":"ElementaryTypeName","src":"8019:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"earnerLeaf","nameLocation":"8071:10:5","nodeType":"VariableDeclaration","scope":1451,"src":"8050:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_EarnerTreeMerkleLeaf_$1423_storage_ptr","typeString":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf"},"typeName":{"id":1439,"nodeType":"UserDefinedTypeName","pathNode":{"id":1438,"name":"EarnerTreeMerkleLeaf","nameLocations":["8050:20:5"],"nodeType":"IdentifierPath","referencedDeclaration":1423,"src":"8050:20:5"},"referencedDeclaration":1423,"src":"8050:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_EarnerTreeMerkleLeaf_$1423_storage_ptr","typeString":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"tokenIndices","nameLocation":"8100:12:5","nodeType":"VariableDeclaration","scope":1451,"src":"8091:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":1441,"name":"uint32","nodeType":"ElementaryTypeName","src":"8091:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1442,"nodeType":"ArrayTypeName","src":"8091:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"tokenTreeProofs","nameLocation":"8130:15:5","nodeType":"VariableDeclaration","scope":1451,"src":"8122:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1444,"name":"bytes","nodeType":"ElementaryTypeName","src":"8122:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1445,"nodeType":"ArrayTypeName","src":"8122:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"tokenLeaves","nameLocation":"8177:11:5","nodeType":"VariableDeclaration","scope":1451,"src":"8155:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenTreeMerkleLeaf_$1430_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]"},"typeName":{"baseType":{"id":1448,"nodeType":"UserDefinedTypeName","pathNode":{"id":1447,"name":"TokenTreeMerkleLeaf","nameLocations":["8155:19:5"],"nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"8155:19:5"},"referencedDeclaration":1430,"src":"8155:19:5","typeDescriptions":{"typeIdentifier":"t_struct$_TokenTreeMerkleLeaf_$1430_storage_ptr","typeString":"struct IRewardsCoordinator.TokenTreeMerkleLeaf"}},"id":1449,"nodeType":"ArrayTypeName","src":"8155:21:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenTreeMerkleLeaf_$1430_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.TokenTreeMerkleLeaf[]"}},"visibility":"internal"}],"name":"RewardsMerkleClaim","nameLocation":"7936:18:5","scope":1874,"visibility":"public"},{"id":1463,"nodeType":"EventDefinition","src":"8291:202:5","nodes":[],"anonymous":false,"documentation":{"id":1452,"nodeType":"StructuredDocumentation","src":"8221:65:5","text":"@notice emitted when an AVS creates a valid RewardsSubmission"},"eventSelector":"450a367a380c4e339e5ae7340c8464ef27af7781ad9945cfe8abd828f89e6281","name":"AVSRewardsSubmissionCreated","nameLocation":"8297:27:5","parameters":{"id":1462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1454,"indexed":true,"mutability":"mutable","name":"avs","nameLocation":"8350:3:5","nodeType":"VariableDeclaration","scope":1463,"src":"8334:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1453,"name":"address","nodeType":"ElementaryTypeName","src":"8334:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1456,"indexed":true,"mutability":"mutable","name":"submissionNonce","nameLocation":"8379:15:5","nodeType":"VariableDeclaration","scope":1463,"src":"8363:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"8363:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1458,"indexed":true,"mutability":"mutable","name":"rewardsSubmissionHash","nameLocation":"8420:21:5","nodeType":"VariableDeclaration","scope":1463,"src":"8404:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8404:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1461,"indexed":false,"mutability":"mutable","name":"rewardsSubmission","nameLocation":"8469:17:5","nodeType":"VariableDeclaration","scope":1463,"src":"8451:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_memory_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"},"typeName":{"id":1460,"nodeType":"UserDefinedTypeName","pathNode":{"id":1459,"name":"RewardsSubmission","nameLocations":["8451:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"8451:17:5"},"referencedDeclaration":1388,"src":"8451:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"visibility":"internal"}],"src":"8324:168:5"}},{"id":1475,"nodeType":"EventDefinition","src":"8601:211:5","nodes":[],"anonymous":false,"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"8498:98:5","text":"@notice emitted when a valid RewardsSubmission is created for all stakers by a valid submitter"},"eventSelector":"51088b8c89628df3a8174002c2a034d0152fce6af8415d651b2a4734bf270482","name":"RewardsSubmissionForAllCreated","nameLocation":"8607:30:5","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"indexed":true,"mutability":"mutable","name":"submitter","nameLocation":"8663:9:5","nodeType":"VariableDeclaration","scope":1475,"src":"8647:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"8647:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1468,"indexed":true,"mutability":"mutable","name":"submissionNonce","nameLocation":"8698:15:5","nodeType":"VariableDeclaration","scope":1475,"src":"8682:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"8682:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1470,"indexed":true,"mutability":"mutable","name":"rewardsSubmissionHash","nameLocation":"8739:21:5","nodeType":"VariableDeclaration","scope":1475,"src":"8723:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8723:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1473,"indexed":false,"mutability":"mutable","name":"rewardsSubmission","nameLocation":"8788:17:5","nodeType":"VariableDeclaration","scope":1475,"src":"8770:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_memory_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"},"typeName":{"id":1472,"nodeType":"UserDefinedTypeName","pathNode":{"id":1471,"name":"RewardsSubmission","nameLocations":["8770:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"8770:17:5"},"referencedDeclaration":1388,"src":"8770:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"visibility":"internal"}],"src":"8637:174:5"}},{"id":1487,"nodeType":"EventDefinition","src":"8927:220:5","nodes":[],"anonymous":false,"documentation":{"id":1476,"nodeType":"StructuredDocumentation","src":"8817:105:5","text":"@notice emitted when a valid RewardsSubmission is created when rewardAllStakersAndOperators is called"},"eventSelector":"5251b6fdefcb5d81144e735f69ea4c695fd43b0289ca53dc075033f5fc80068b","name":"RewardsSubmissionForAllEarnersCreated","nameLocation":"8933:37:5","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"indexed":true,"mutability":"mutable","name":"tokenHopper","nameLocation":"8996:11:5","nodeType":"VariableDeclaration","scope":1487,"src":"8980:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1477,"name":"address","nodeType":"ElementaryTypeName","src":"8980:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1480,"indexed":true,"mutability":"mutable","name":"submissionNonce","nameLocation":"9033:15:5","nodeType":"VariableDeclaration","scope":1487,"src":"9017:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1479,"name":"uint256","nodeType":"ElementaryTypeName","src":"9017:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1482,"indexed":true,"mutability":"mutable","name":"rewardsSubmissionHash","nameLocation":"9074:21:5","nodeType":"VariableDeclaration","scope":1487,"src":"9058:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9058:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1485,"indexed":false,"mutability":"mutable","name":"rewardsSubmission","nameLocation":"9123:17:5","nodeType":"VariableDeclaration","scope":1487,"src":"9105:35:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_memory_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"},"typeName":{"id":1484,"nodeType":"UserDefinedTypeName","pathNode":{"id":1483,"name":"RewardsSubmission","nameLocations":["9105:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"9105:17:5"},"referencedDeclaration":1388,"src":"9105:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"visibility":"internal"}],"src":"8970:176:5"}},{"id":1501,"nodeType":"EventDefinition","src":"9874:290:5","nodes":[],"anonymous":false,"documentation":{"id":1488,"nodeType":"StructuredDocumentation","src":"9153:716:5","text":" @notice Emitted when an AVS creates a valid `OperatorDirectedRewardsSubmission`\n @param caller The address calling `createOperatorDirectedAVSRewardsSubmission`.\n @param avs The avs on behalf of which the operator-directed rewards are being submitted.\n @param operatorDirectedRewardsSubmissionHash Keccak256 hash of (`avs`, `submissionNonce` and `operatorDirectedRewardsSubmission`).\n @param submissionNonce Current nonce of the avs. Used to generate a unique submission hash.\n @param operatorDirectedRewardsSubmission The Operator-Directed Rewards Submission. Contains the token, start timestamp, duration, operator rewards, description and, strategy and multipliers."},"eventSelector":"fc8888bffd711da60bc5092b33f677d81896fe80ecc677b84cfab8184462b6e0","name":"OperatorDirectedAVSRewardsSubmissionCreated","nameLocation":"9880:43:5","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1490,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"9949:6:5","nodeType":"VariableDeclaration","scope":1501,"src":"9933:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1489,"name":"address","nodeType":"ElementaryTypeName","src":"9933:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1492,"indexed":true,"mutability":"mutable","name":"avs","nameLocation":"9981:3:5","nodeType":"VariableDeclaration","scope":1501,"src":"9965:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1491,"name":"address","nodeType":"ElementaryTypeName","src":"9965:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1494,"indexed":true,"mutability":"mutable","name":"operatorDirectedRewardsSubmissionHash","nameLocation":"10010:37:5","nodeType":"VariableDeclaration","scope":1501,"src":"9994:53:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9994:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1496,"indexed":false,"mutability":"mutable","name":"submissionNonce","nameLocation":"10065:15:5","nodeType":"VariableDeclaration","scope":1501,"src":"10057:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1495,"name":"uint256","nodeType":"ElementaryTypeName","src":"10057:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1499,"indexed":false,"mutability":"mutable","name":"operatorDirectedRewardsSubmission","nameLocation":"10124:33:5","nodeType":"VariableDeclaration","scope":1501,"src":"10090:67:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_memory_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"},"typeName":{"id":1498,"nodeType":"UserDefinedTypeName","pathNode":{"id":1497,"name":"OperatorDirectedRewardsSubmission","nameLocations":["10090:33:5"],"nodeType":"IdentifierPath","referencedDeclaration":1407,"src":"10090:33:5"},"referencedDeclaration":1407,"src":"10090:33:5","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"}},"visibility":"internal"}],"src":"9923:240:5"}},{"id":1508,"nodeType":"EventDefinition","src":"10283:94:5","nodes":[],"anonymous":false,"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"10170:108:5","text":"@notice rewardsUpdater is responsible for submiting DistributionRoots, only owner can set rewardsUpdater"},"eventSelector":"237b82f438d75fc568ebab484b75b01d9287b9e98b490b7c23221623b6705dbb","name":"RewardsUpdaterSet","nameLocation":"10289:17:5","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"indexed":true,"mutability":"mutable","name":"oldRewardsUpdater","nameLocation":"10323:17:5","nodeType":"VariableDeclaration","scope":1508,"src":"10307:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1503,"name":"address","nodeType":"ElementaryTypeName","src":"10307:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1506,"indexed":true,"mutability":"mutable","name":"newRewardsUpdater","nameLocation":"10358:17:5","nodeType":"VariableDeclaration","scope":1508,"src":"10342:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1505,"name":"address","nodeType":"ElementaryTypeName","src":"10342:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10306:70:5"}},{"id":1516,"nodeType":"EventDefinition","src":"10382:148:5","nodes":[],"anonymous":false,"eventSelector":"4de6293e668df1398422e1def12118052c1539a03cbfedc145895d48d7685f1c","name":"RewardsForAllSubmitterSet","nameLocation":"10388:25:5","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"indexed":true,"mutability":"mutable","name":"rewardsForAllSubmitter","nameLocation":"10439:22:5","nodeType":"VariableDeclaration","scope":1516,"src":"10423:38:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"10423:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1512,"indexed":true,"mutability":"mutable","name":"oldValue","nameLocation":"10484:8:5","nodeType":"VariableDeclaration","scope":1516,"src":"10471:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1511,"name":"bool","nodeType":"ElementaryTypeName","src":"10471:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1514,"indexed":true,"mutability":"mutable","name":"newValue","nameLocation":"10515:8:5","nodeType":"VariableDeclaration","scope":1516,"src":"10502:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1513,"name":"bool","nodeType":"ElementaryTypeName","src":"10502:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10413:116:5"}},{"id":1522,"nodeType":"EventDefinition","src":"10535:79:5","nodes":[],"anonymous":false,"eventSelector":"af557c6c02c208794817a705609cfa935f827312a1adfdd26494b6b95dd2b4b3","name":"ActivationDelaySet","nameLocation":"10541:18:5","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1518,"indexed":false,"mutability":"mutable","name":"oldActivationDelay","nameLocation":"10567:18:5","nodeType":"VariableDeclaration","scope":1522,"src":"10560:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1517,"name":"uint32","nodeType":"ElementaryTypeName","src":"10560:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1520,"indexed":false,"mutability":"mutable","name":"newActivationDelay","nameLocation":"10594:18:5","nodeType":"VariableDeclaration","scope":1522,"src":"10587:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1519,"name":"uint32","nodeType":"ElementaryTypeName","src":"10587:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"10559:54:5"}},{"id":1528,"nodeType":"EventDefinition","src":"10619:106:5","nodes":[],"anonymous":false,"eventSelector":"e6cd4edfdcc1f6d130ab35f73d72378f3a642944fb4ee5bd84b7807a81ea1c4e","name":"DefaultOperatorSplitBipsSet","nameLocation":"10625:27:5","parameters":{"id":1527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"indexed":false,"mutability":"mutable","name":"oldDefaultOperatorSplitBips","nameLocation":"10660:27:5","nodeType":"VariableDeclaration","scope":1528,"src":"10653:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1523,"name":"uint16","nodeType":"ElementaryTypeName","src":"10653:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1526,"indexed":false,"mutability":"mutable","name":"newDefaultOperatorSplitBips","nameLocation":"10696:27:5","nodeType":"VariableDeclaration","scope":1528,"src":"10689:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1525,"name":"uint16","nodeType":"ElementaryTypeName","src":"10689:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"10652:72:5"}},{"id":1543,"nodeType":"EventDefinition","src":"11274:239:5","nodes":[],"anonymous":false,"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"10731:538:5","text":" @notice Emitted when the operator split for an AVS is set.\n @param caller The address calling `setOperatorAVSSplit`.\n @param operator The operator on behalf of which the split is being set.\n @param avs The avs for which the split is being set by the operator.\n @param activatedAt The timestamp at which the split will be activated.\n @param oldOperatorAVSSplitBips The old split for the operator for the AVS.\n @param newOperatorAVSSplitBips The new split for the operator for the AVS."},"eventSelector":"48e198b6ae357e529204ee53a8e514c470ff77d9cc8e4f7207f8b5d490ae6934","name":"OperatorAVSSplitBipsSet","nameLocation":"11280:23:5","parameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"11329:6:5","nodeType":"VariableDeclaration","scope":1543,"src":"11313:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1530,"name":"address","nodeType":"ElementaryTypeName","src":"11313:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1533,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"11361:8:5","nodeType":"VariableDeclaration","scope":1543,"src":"11345:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1532,"name":"address","nodeType":"ElementaryTypeName","src":"11345:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1535,"indexed":true,"mutability":"mutable","name":"avs","nameLocation":"11395:3:5","nodeType":"VariableDeclaration","scope":1543,"src":"11379:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1534,"name":"address","nodeType":"ElementaryTypeName","src":"11379:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1537,"indexed":false,"mutability":"mutable","name":"activatedAt","nameLocation":"11415:11:5","nodeType":"VariableDeclaration","scope":1543,"src":"11408:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1536,"name":"uint32","nodeType":"ElementaryTypeName","src":"11408:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1539,"indexed":false,"mutability":"mutable","name":"oldOperatorAVSSplitBips","nameLocation":"11443:23:5","nodeType":"VariableDeclaration","scope":1543,"src":"11436:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1538,"name":"uint16","nodeType":"ElementaryTypeName","src":"11436:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1541,"indexed":false,"mutability":"mutable","name":"newOperatorAVSSplitBips","nameLocation":"11483:23:5","nodeType":"VariableDeclaration","scope":1543,"src":"11476:30:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1540,"name":"uint16","nodeType":"ElementaryTypeName","src":"11476:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"11303:209:5"}},{"id":1556,"nodeType":"EventDefinition","src":"12032:207:5","nodes":[],"anonymous":false,"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"11519:508:5","text":" @notice Emitted when the operator split for Programmatic Incentives is set.\n @param caller The address calling `setOperatorPISplit`.\n @param operator The operator on behalf of which the split is being set.\n @param activatedAt The timestamp at which the split will be activated.\n @param oldOperatorPISplitBips The old split for the operator for Programmatic Incentives.\n @param newOperatorPISplitBips The new split for the operator for Programmatic Incentives."},"eventSelector":"d1e028bd664486a46ad26040e999cd2d22e1e9a094ee6afe19fcf64678f16f74","name":"OperatorPISplitBipsSet","nameLocation":"12038:22:5","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"12086:6:5","nodeType":"VariableDeclaration","scope":1556,"src":"12070:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1545,"name":"address","nodeType":"ElementaryTypeName","src":"12070:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1548,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"12118:8:5","nodeType":"VariableDeclaration","scope":1556,"src":"12102:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1547,"name":"address","nodeType":"ElementaryTypeName","src":"12102:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1550,"indexed":false,"mutability":"mutable","name":"activatedAt","nameLocation":"12143:11:5","nodeType":"VariableDeclaration","scope":1556,"src":"12136:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1549,"name":"uint32","nodeType":"ElementaryTypeName","src":"12136:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1552,"indexed":false,"mutability":"mutable","name":"oldOperatorPISplitBips","nameLocation":"12171:22:5","nodeType":"VariableDeclaration","scope":1556,"src":"12164:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1551,"name":"uint16","nodeType":"ElementaryTypeName","src":"12164:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1554,"indexed":false,"mutability":"mutable","name":"newOperatorPISplitBips","nameLocation":"12210:22:5","nodeType":"VariableDeclaration","scope":1556,"src":"12203:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1553,"name":"uint16","nodeType":"ElementaryTypeName","src":"12203:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"12060:178:5"}},{"id":1564,"nodeType":"EventDefinition","src":"12245:97:5","nodes":[],"anonymous":false,"eventSelector":"bab947934d42e0ad206f25c9cab18b5bb6ae144acfb00f40b4e3aa59590ca312","name":"ClaimerForSet","nameLocation":"12251:13:5","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"indexed":true,"mutability":"mutable","name":"earner","nameLocation":"12281:6:5","nodeType":"VariableDeclaration","scope":1564,"src":"12265:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1557,"name":"address","nodeType":"ElementaryTypeName","src":"12265:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1560,"indexed":true,"mutability":"mutable","name":"oldClaimer","nameLocation":"12305:10:5","nodeType":"VariableDeclaration","scope":1564,"src":"12289:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1559,"name":"address","nodeType":"ElementaryTypeName","src":"12289:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1562,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"12333:7:5","nodeType":"VariableDeclaration","scope":1564,"src":"12317:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"12317:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12264:77:5"}},{"id":1575,"nodeType":"EventDefinition","src":"12448:185:5","nodes":[],"anonymous":false,"documentation":{"id":1565,"nodeType":"StructuredDocumentation","src":"12347:96:5","text":"@notice rootIndex is the specific array index of the newly created root in the storage array"},"eventSelector":"ecd866c3c158fa00bf34d803d5f6023000b57080bcb48af004c2b4b46b3afd08","name":"DistributionRootSubmitted","nameLocation":"12454:25:5","parameters":{"id":1574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"indexed":true,"mutability":"mutable","name":"rootIndex","nameLocation":"12504:9:5","nodeType":"VariableDeclaration","scope":1575,"src":"12489:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1566,"name":"uint32","nodeType":"ElementaryTypeName","src":"12489:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1569,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"12539:4:5","nodeType":"VariableDeclaration","scope":1575,"src":"12523:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12523:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1571,"indexed":true,"mutability":"mutable","name":"rewardsCalculationEndTimestamp","nameLocation":"12568:30:5","nodeType":"VariableDeclaration","scope":1575,"src":"12553:45:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1570,"name":"uint32","nodeType":"ElementaryTypeName","src":"12553:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1573,"indexed":false,"mutability":"mutable","name":"activatedAt","nameLocation":"12615:11:5","nodeType":"VariableDeclaration","scope":1575,"src":"12608:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1572,"name":"uint32","nodeType":"ElementaryTypeName","src":"12608:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12479:153:5"}},{"id":1579,"nodeType":"EventDefinition","src":"12638:57:5","nodes":[],"anonymous":false,"eventSelector":"d850e6e5dfa497b72661fa73df2923464eaed9dc2ff1d3cb82bccbfeabe5c41e","name":"DistributionRootDisabled","nameLocation":"12644:24:5","parameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"indexed":true,"mutability":"mutable","name":"rootIndex","nameLocation":"12684:9:5","nodeType":"VariableDeclaration","scope":1579,"src":"12669:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1576,"name":"uint32","nodeType":"ElementaryTypeName","src":"12669:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12668:26:5"}},{"id":1595,"nodeType":"EventDefinition","src":"12789:202:5","nodes":[],"anonymous":false,"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"12700:84:5","text":"@notice root is one of the submitted distribution roots that was claimed against"},"eventSelector":"9543dbd55580842586a951f0386e24d68a5df99ae29e3b216588b45fd684ce31","name":"RewardsClaimed","nameLocation":"12795:14:5","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"indexed":false,"mutability":"mutable","name":"root","nameLocation":"12827:4:5","nodeType":"VariableDeclaration","scope":1595,"src":"12819:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12819:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1584,"indexed":true,"mutability":"mutable","name":"earner","nameLocation":"12857:6:5","nodeType":"VariableDeclaration","scope":1595,"src":"12841:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"12841:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"12889:7:5","nodeType":"VariableDeclaration","scope":1595,"src":"12873:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"12873:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1588,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"12922:9:5","nodeType":"VariableDeclaration","scope":1595,"src":"12906:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1587,"name":"address","nodeType":"ElementaryTypeName","src":"12906:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1591,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"12948:5:5","nodeType":"VariableDeclaration","scope":1595,"src":"12941:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1590,"nodeType":"UserDefinedTypeName","pathNode":{"id":1589,"name":"IERC20","nameLocations":["12941:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"12941:6:5"},"referencedDeclaration":6545,"src":"12941:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1593,"indexed":false,"mutability":"mutable","name":"claimedAmount","nameLocation":"12971:13:5","nodeType":"VariableDeclaration","scope":1595,"src":"12963:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1592,"name":"uint256","nodeType":"ElementaryTypeName","src":"12963:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12809:181:5"}},{"id":1601,"nodeType":"FunctionDefinition","src":"13167:58:5","nodes":[],"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"13074:88:5","text":"@notice The address of the entity that can update the contract with new merkle roots"},"functionSelector":"fbf1e2c1","implemented":false,"kind":"function","modifiers":[],"name":"rewardsUpdater","nameLocation":"13176:14:5","parameters":{"id":1597,"nodeType":"ParameterList","parameters":[],"src":"13190:2:5"},"returnParameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"13216:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1598,"name":"address","nodeType":"ElementaryTypeName","src":"13216:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13215:9:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1607,"nodeType":"FunctionDefinition","src":"13434:71:5","nodes":[],"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"13231:198:5","text":" @notice The interval in seconds at which the calculation for a RewardsSubmission distribution is done.\n @dev Rewards Submission durations must be multiples of this interval."},"functionSelector":"9d45c281","implemented":false,"kind":"function","modifiers":[],"name":"CALCULATION_INTERVAL_SECONDS","nameLocation":"13443:28:5","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[],"src":"13471:2:5"},"returnParameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1607,"src":"13497:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1604,"name":"uint32","nodeType":"ElementaryTypeName","src":"13497:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"13496:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1613,"nodeType":"FunctionDefinition","src":"13603:63:5","nodes":[],"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"13511:87:5","text":"@notice The maximum amount of time (seconds) that a RewardsSubmission can span over"},"functionSelector":"bf21a8aa","implemented":false,"kind":"function","modifiers":[],"name":"MAX_REWARDS_DURATION","nameLocation":"13612:20:5","parameters":{"id":1609,"nodeType":"ParameterList","parameters":[],"src":"13632:2:5"},"returnParameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1613,"src":"13658:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1610,"name":"uint32","nodeType":"ElementaryTypeName","src":"13658:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"13657:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1619,"nodeType":"FunctionDefinition","src":"13757:65:5","nodes":[],"documentation":{"id":1614,"nodeType":"StructuredDocumentation","src":"13672:80:5","text":"@notice max amount of time (seconds) that a submission can start in the past"},"functionSelector":"37838ed0","implemented":false,"kind":"function","modifiers":[],"name":"MAX_RETROACTIVE_LENGTH","nameLocation":"13766:22:5","parameters":{"id":1615,"nodeType":"ParameterList","parameters":[],"src":"13788:2:5"},"returnParameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1619,"src":"13814:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1616,"name":"uint32","nodeType":"ElementaryTypeName","src":"13814:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"13813:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1625,"nodeType":"FunctionDefinition","src":"13915:60:5","nodes":[],"documentation":{"id":1620,"nodeType":"StructuredDocumentation","src":"13828:82:5","text":"@notice max amount of time (seconds) that a submission can start in the future"},"functionSelector":"04a0c502","implemented":false,"kind":"function","modifiers":[],"name":"MAX_FUTURE_LENGTH","nameLocation":"13924:17:5","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"13941:2:5"},"returnParameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1625,"src":"13967:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1622,"name":"uint32","nodeType":"ElementaryTypeName","src":"13967:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"13966:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1631,"nodeType":"FunctionDefinition","src":"14061:68:5","nodes":[],"documentation":{"id":1626,"nodeType":"StructuredDocumentation","src":"13981:75:5","text":"@notice absolute min timestamp (seconds) that a submission can start at"},"functionSelector":"131433b4","implemented":false,"kind":"function","modifiers":[],"name":"GENESIS_REWARDS_TIMESTAMP","nameLocation":"14070:25:5","parameters":{"id":1627,"nodeType":"ParameterList","parameters":[],"src":"14095:2:5"},"returnParameters":{"id":1630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1631,"src":"14121:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1628,"name":"uint32","nodeType":"ElementaryTypeName","src":"14121:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14120:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1637,"nodeType":"FunctionDefinition","src":"14224:58:5","nodes":[],"documentation":{"id":1632,"nodeType":"StructuredDocumentation","src":"14135:84:5","text":"@notice Delay in timestamp (seconds) before a posted root can be claimed against"},"functionSelector":"3a8c0786","implemented":false,"kind":"function","modifiers":[],"name":"activationDelay","nameLocation":"14233:15:5","parameters":{"id":1633,"nodeType":"ParameterList","parameters":[],"src":"14248:2:5"},"returnParameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1637,"src":"14274:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1634,"name":"uint32","nodeType":"ElementaryTypeName","src":"14274:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14273:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1645,"nodeType":"FunctionDefinition","src":"14401:68:5","nodes":[],"documentation":{"id":1638,"nodeType":"StructuredDocumentation","src":"14288:108:5","text":"@notice Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner"},"functionSelector":"2b9f64a4","implemented":false,"kind":"function","modifiers":[],"name":"claimerFor","nameLocation":"14410:10:5","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"earner","nameLocation":"14429:6:5","nodeType":"VariableDeclaration","scope":1645,"src":"14421:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"14421:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14420:16:5"},"returnParameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1645,"src":"14460:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1642,"name":"address","nodeType":"ElementaryTypeName","src":"14460:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14459:9:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1656,"nodeType":"FunctionDefinition","src":"14541:90:5","nodes":[],"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"14475:61:5","text":"@notice Mapping: claimer => token => total amount claimed"},"functionSelector":"865c6953","implemented":false,"kind":"function","modifiers":[],"name":"cumulativeClaimed","nameLocation":"14550:17:5","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1648,"mutability":"mutable","name":"claimer","nameLocation":"14576:7:5","nodeType":"VariableDeclaration","scope":1656,"src":"14568:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1647,"name":"address","nodeType":"ElementaryTypeName","src":"14568:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"token","nameLocation":"14592:5:5","nodeType":"VariableDeclaration","scope":1656,"src":"14585:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1650,"nodeType":"UserDefinedTypeName","pathNode":{"id":1649,"name":"IERC20","nameLocations":["14585:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"14585:6:5"},"referencedDeclaration":6545,"src":"14585:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"14567:31:5"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1656,"src":"14622:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"14622:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14621:9:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1662,"nodeType":"FunctionDefinition","src":"14705:67:5","nodes":[],"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"14637:63:5","text":"@notice the defautl split for all operators across all avss"},"functionSelector":"63f6a798","implemented":false,"kind":"function","modifiers":[],"name":"defaultOperatorSplitBips","nameLocation":"14714:24:5","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[],"src":"14738:2:5"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1662,"src":"14764:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1659,"name":"uint16","nodeType":"ElementaryTypeName","src":"14764:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"14763:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1672,"nodeType":"FunctionDefinition","src":"14851:91:5","nodes":[],"documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"14778:68:5","text":"@notice the split for a specific `operator` for a specific `avs`"},"functionSelector":"e063f81f","implemented":false,"kind":"function","modifiers":[],"name":"getOperatorAVSSplit","nameLocation":"14860:19:5","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"operator","nameLocation":"14888:8:5","nodeType":"VariableDeclaration","scope":1672,"src":"14880:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1664,"name":"address","nodeType":"ElementaryTypeName","src":"14880:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"avs","nameLocation":"14906:3:5","nodeType":"VariableDeclaration","scope":1672,"src":"14898:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1666,"name":"address","nodeType":"ElementaryTypeName","src":"14898:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14879:31:5"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1672,"src":"14934:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1669,"name":"uint16","nodeType":"ElementaryTypeName","src":"14934:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"14933:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1680,"nodeType":"FunctionDefinition","src":"15028:77:5","nodes":[],"documentation":{"id":1673,"nodeType":"StructuredDocumentation","src":"14948:75:5","text":"@notice the split for a specific `operator` for Programmatic Incentives"},"functionSelector":"4b943960","implemented":false,"kind":"function","modifiers":[],"name":"getOperatorPISplit","nameLocation":"15037:18:5","parameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"operator","nameLocation":"15064:8:5","nodeType":"VariableDeclaration","scope":1680,"src":"15056:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1674,"name":"address","nodeType":"ElementaryTypeName","src":"15056:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15055:18:5"},"returnParameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1680,"src":"15097:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1677,"name":"uint16","nodeType":"ElementaryTypeName","src":"15097:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"15096:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1689,"nodeType":"FunctionDefinition","src":"15164:101:5","nodes":[],"documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"15111:48:5","text":"@notice return the hash of the earner's leaf"},"functionSelector":"149bc872","implemented":false,"kind":"function","modifiers":[],"name":"calculateEarnerLeafHash","nameLocation":"15173:23:5","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"leaf","nameLocation":"15227:4:5","nodeType":"VariableDeclaration","scope":1689,"src":"15197:34:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_EarnerTreeMerkleLeaf_$1423_calldata_ptr","typeString":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf"},"typeName":{"id":1683,"nodeType":"UserDefinedTypeName","pathNode":{"id":1682,"name":"EarnerTreeMerkleLeaf","nameLocations":["15197:20:5"],"nodeType":"IdentifierPath","referencedDeclaration":1423,"src":"15197:20:5"},"referencedDeclaration":1423,"src":"15197:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_EarnerTreeMerkleLeaf_$1423_storage_ptr","typeString":"struct IRewardsCoordinator.EarnerTreeMerkleLeaf"}},"visibility":"internal"}],"src":"15196:36:5"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1689,"src":"15256:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15256:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15255:9:5"},"scope":1874,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":1698,"nodeType":"FunctionDefinition","src":"15331:99:5","nodes":[],"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"15271:55:5","text":"@notice returns the hash of the earner's token leaf"},"functionSelector":"f8cd8448","implemented":false,"kind":"function","modifiers":[],"name":"calculateTokenLeafHash","nameLocation":"15340:22:5","parameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"leaf","nameLocation":"15392:4:5","nodeType":"VariableDeclaration","scope":1698,"src":"15363:33:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TokenTreeMerkleLeaf_$1430_calldata_ptr","typeString":"struct IRewardsCoordinator.TokenTreeMerkleLeaf"},"typeName":{"id":1692,"nodeType":"UserDefinedTypeName","pathNode":{"id":1691,"name":"TokenTreeMerkleLeaf","nameLocations":["15363:19:5"],"nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"15363:19:5"},"referencedDeclaration":1430,"src":"15363:19:5","typeDescriptions":{"typeIdentifier":"t_struct$_TokenTreeMerkleLeaf_$1430_storage_ptr","typeString":"struct IRewardsCoordinator.TokenTreeMerkleLeaf"}},"visibility":"internal"}],"src":"15362:35:5"},"returnParameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1698,"src":"15421:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15421:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15420:9:5"},"scope":1874,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":1707,"nodeType":"FunctionDefinition","src":"15567:84:5","nodes":[],"documentation":{"id":1699,"nodeType":"StructuredDocumentation","src":"15436:126:5","text":"@notice returns 'true' if the claim would currently pass the check in `processClaims`\n but will revert if not valid"},"functionSelector":"5e9d8348","implemented":false,"kind":"function","modifiers":[],"name":"checkClaim","nameLocation":"15576:10:5","parameters":{"id":1703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"claim","nameLocation":"15615:5:5","nodeType":"VariableDeclaration","scope":1707,"src":"15587:33:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsMerkleClaim_$1451_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim"},"typeName":{"id":1701,"nodeType":"UserDefinedTypeName","pathNode":{"id":1700,"name":"RewardsMerkleClaim","nameLocations":["15587:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1451,"src":"15587:18:5"},"referencedDeclaration":1451,"src":"15587:18:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsMerkleClaim_$1451_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim"}},"visibility":"internal"}],"src":"15586:35:5"},"returnParameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1707,"src":"15645:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1704,"name":"bool","nodeType":"ElementaryTypeName","src":"15645:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15644:6:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1713,"nodeType":"FunctionDefinition","src":"15739:77:5","nodes":[],"documentation":{"id":1708,"nodeType":"StructuredDocumentation","src":"15657:77:5","text":"@notice The timestamp until which RewardsSubmissions have been calculated"},"functionSelector":"4d18cc35","implemented":false,"kind":"function","modifiers":[],"name":"currRewardsCalculationEndTimestamp","nameLocation":"15748:34:5","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[],"src":"15782:2:5"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1713,"src":"15808:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1710,"name":"uint32","nodeType":"ElementaryTypeName","src":"15808:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15807:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1719,"nodeType":"FunctionDefinition","src":"15886:70:5","nodes":[],"documentation":{"id":1714,"nodeType":"StructuredDocumentation","src":"15822:59:5","text":"@notice returns the number of distribution roots posted"},"functionSelector":"7b8f8b05","implemented":false,"kind":"function","modifiers":[],"name":"getDistributionRootsLength","nameLocation":"15895:26:5","parameters":{"id":1715,"nodeType":"ParameterList","parameters":[],"src":"15921:2:5"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1719,"src":"15947:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"15947:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15946:9:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1728,"nodeType":"FunctionDefinition","src":"16030:99:5","nodes":[],"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"15962:63:5","text":"@notice returns the distributionRoot at the specified index"},"functionSelector":"de02e503","implemented":false,"kind":"function","modifiers":[],"name":"getDistributionRootAtIndex","nameLocation":"16039:26:5","parameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"index","nameLocation":"16074:5:5","nodeType":"VariableDeclaration","scope":1728,"src":"16066:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"16066:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16065:15:5"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1728,"src":"16104:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_memory_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"},"typeName":{"id":1725,"nodeType":"UserDefinedTypeName","pathNode":{"id":1724,"name":"DistributionRoot","nameLocations":["16104:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"16104:16:5"},"referencedDeclaration":1417,"src":"16104:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_storage_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"}},"visibility":"internal"}],"src":"16103:25:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1735,"nodeType":"FunctionDefinition","src":"16188:86:5","nodes":[],"documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"16135:48:5","text":"@notice returns the current distributionRoot"},"functionSelector":"9be3d4e4","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentDistributionRoot","nameLocation":"16197:26:5","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[],"src":"16223:2:5"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"16249:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_memory_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"},"typeName":{"id":1732,"nodeType":"UserDefinedTypeName","pathNode":{"id":1731,"name":"DistributionRoot","nameLocations":["16249:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"16249:16:5"},"referencedDeclaration":1417,"src":"16249:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_storage_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"}},"visibility":"internal"}],"src":"16248:25:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1742,"nodeType":"FunctionDefinition","src":"16448:95:5","nodes":[],"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"16280:163:5","text":"@notice loop through the distribution roots from reverse and get latest root that is not disabled and activated\n i.e. a root that can be claimed against"},"functionSelector":"0e9a53cf","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentClaimableDistributionRoot","nameLocation":"16457:35:5","parameters":{"id":1737,"nodeType":"ParameterList","parameters":[],"src":"16492:2:5"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1742,"src":"16518:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_memory_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"},"typeName":{"id":1739,"nodeType":"UserDefinedTypeName","pathNode":{"id":1738,"name":"DistributionRoot","nameLocations":["16518:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"16518:16:5"},"referencedDeclaration":1417,"src":"16518:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_DistributionRoot_$1417_storage_ptr","typeString":"struct IRewardsCoordinator.DistributionRoot"}},"visibility":"internal"}],"src":"16517:25:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1750,"nodeType":"FunctionDefinition","src":"16637:79:5","nodes":[],"documentation":{"id":1743,"nodeType":"StructuredDocumentation","src":"16549:83:5","text":"@notice loop through distribution roots from reverse and return index from hash"},"functionSelector":"e810ce21","implemented":false,"kind":"function","modifiers":[],"name":"getRootIndexFromHash","nameLocation":"16646:20:5","parameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"rootHash","nameLocation":"16675:8:5","nodeType":"VariableDeclaration","scope":1750,"src":"16667:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1744,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16667:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16666:18:5"},"returnParameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1750,"src":"16708:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1747,"name":"uint32","nodeType":"ElementaryTypeName","src":"16708:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"16707:8:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1758,"nodeType":"FunctionDefinition","src":"17577:94:5","nodes":[],"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"16803:769:5","text":" @notice Creates a new rewards submission on behalf of an AVS, to be split amongst the\n set of stakers delegated to operators who are registered to the `avs`\n @param rewardsSubmissions The rewards submissions being created\n @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n @dev The tokens are sent to the `RewardsCoordinator` contract\n @dev Strategies must be in ascending order of addresses to check for duplicates\n @dev This function will revert if the `rewardsSubmission` is malformed,\n e.g. if the `strategies` and `weights` arrays are of non-equal lengths"},"functionSelector":"fce36c7d","implemented":false,"kind":"function","modifiers":[],"name":"createAVSRewardsSubmission","nameLocation":"17586:26:5","parameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"rewardsSubmissions","nameLocation":"17642:18:5","nodeType":"VariableDeclaration","scope":1758,"src":"17613:47:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":1753,"nodeType":"UserDefinedTypeName","pathNode":{"id":1752,"name":"RewardsSubmission","nameLocations":["17613:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"17613:17:5"},"referencedDeclaration":1388,"src":"17613:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":1754,"nodeType":"ArrayTypeName","src":"17613:19:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"17612:49:5"},"returnParameters":{"id":1757,"nodeType":"ParameterList","parameters":[],"src":"17670:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1766,"nodeType":"FunctionDefinition","src":"18033:96:5","nodes":[],"documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"17677:351:5","text":" @notice similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers\n rather than just those delegated to operators who are registered to a single avs and is\n a permissioned call based on isRewardsForAllSubmitter mapping.\n @param rewardsSubmission The rewards submission being created"},"functionSelector":"36af41fa","implemented":false,"kind":"function","modifiers":[],"name":"createRewardsForAllSubmission","nameLocation":"18042:29:5","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"rewardsSubmission","nameLocation":"18101:17:5","nodeType":"VariableDeclaration","scope":1766,"src":"18072:46:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":1761,"nodeType":"UserDefinedTypeName","pathNode":{"id":1760,"name":"RewardsSubmission","nameLocations":["18072:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"18072:17:5"},"referencedDeclaration":1388,"src":"18072:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":1762,"nodeType":"ArrayTypeName","src":"18072:19:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"18071:48:5"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[],"src":"18128:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1774,"nodeType":"FunctionDefinition","src":"18549:94:5","nodes":[],"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"18135:409:5","text":" @notice Creates a new rewards submission for all earners across all AVSs.\n Earners in this case indicating all operators and their delegated stakers. Undelegated stake\n is not rewarded from this RewardsSubmission. This interface is only callable\n by the token hopper contract from the Eigen Foundation\n @param rewardsSubmissions The rewards submissions being created"},"functionSelector":"ff9f6cce","implemented":false,"kind":"function","modifiers":[],"name":"createRewardsForAllEarners","nameLocation":"18558:26:5","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"rewardsSubmissions","nameLocation":"18614:18:5","nodeType":"VariableDeclaration","scope":1774,"src":"18585:47:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":1769,"nodeType":"UserDefinedTypeName","pathNode":{"id":1768,"name":"RewardsSubmission","nameLocations":["18585:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"18585:17:5"},"referencedDeclaration":1388,"src":"18585:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":1770,"nodeType":"ArrayTypeName","src":"18585:19:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"18584:49:5"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[],"src":"18642:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1784,"nodeType":"FunctionDefinition","src":"19767:177:5","nodes":[],"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"18649:1113:5","text":" @notice Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and\n set of stakers delegated to operators who are registered to the `avs`.\n @param avs The AVS on behalf of which the reward is being submitted\n @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created\n @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n @dev The tokens are sent to the `RewardsCoordinator` contract\n @dev The `RewardsCoordinator` contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.\n @dev Strategies must be in ascending order of addresses to check for duplicates\n @dev Operators must be in ascending order of addresses to check for duplicates.\n @dev This function will revert if the `operatorDirectedRewardsSubmissions` is malformed."},"functionSelector":"9cb9a5fa","implemented":false,"kind":"function","modifiers":[],"name":"createOperatorDirectedAVSRewardsSubmission","nameLocation":"19776:42:5","parameters":{"id":1782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"avs","nameLocation":"19836:3:5","nodeType":"VariableDeclaration","scope":1784,"src":"19828:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"19828:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"operatorDirectedRewardsSubmissions","nameLocation":"19894:34:5","nodeType":"VariableDeclaration","scope":1784,"src":"19849:79:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"},"typeName":{"baseType":{"id":1779,"nodeType":"UserDefinedTypeName","pathNode":{"id":1778,"name":"OperatorDirectedRewardsSubmission","nameLocations":["19849:33:5"],"nodeType":"IdentifierPath","referencedDeclaration":1407,"src":"19849:33:5"},"referencedDeclaration":1407,"src":"19849:33:5","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"}},"id":1780,"nodeType":"ArrayTypeName","src":"19849:35:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"}},"visibility":"internal"}],"src":"19818:116:5"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[],"src":"19943:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1793,"nodeType":"FunctionDefinition","src":"20822:85:5","nodes":[],"documentation":{"id":1785,"nodeType":"StructuredDocumentation","src":"19950:867:5","text":" @notice Claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n they can simply claim against the latest root and the contract will calculate the difference between\n their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n @param claim The RewardsMerkleClaim to be processed.\n Contains the root index, earner, token leaves, and required proofs\n @param recipient The address recipient that receives the ERC20 rewards\n @dev only callable by the valid claimer, that is\n if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n claimerFor[claim.earner] can claim the rewards."},"functionSelector":"3ccc861d","implemented":false,"kind":"function","modifiers":[],"name":"processClaim","nameLocation":"20831:12:5","parameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"claim","nameLocation":"20872:5:5","nodeType":"VariableDeclaration","scope":1793,"src":"20844:33:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsMerkleClaim_$1451_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim"},"typeName":{"id":1787,"nodeType":"UserDefinedTypeName","pathNode":{"id":1786,"name":"RewardsMerkleClaim","nameLocations":["20844:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1451,"src":"20844:18:5"},"referencedDeclaration":1451,"src":"20844:18:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsMerkleClaim_$1451_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"recipient","nameLocation":"20887:9:5","nodeType":"VariableDeclaration","scope":1793,"src":"20879:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1789,"name":"address","nodeType":"ElementaryTypeName","src":"20879:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20843:54:5"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[],"src":"20906:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1803,"nodeType":"FunctionDefinition","src":"21793:89:5","nodes":[],"documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"20913:875:5","text":" @notice Batch claim rewards against a given root (read from _distributionRoots[claim.rootIndex]).\n Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n they can simply claim against the latest root and the contract will calculate the difference between\n their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n @param claims The RewardsMerkleClaims to be processed.\n Contains the root index, earner, token leaves, and required proofs\n @param recipient The address recipient that receives the ERC20 rewards\n @dev only callable by the valid claimer, that is\n if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n claimerFor[claim.earner] can claim the rewards."},"functionSelector":"4596021c","implemented":false,"kind":"function","modifiers":[],"name":"processClaims","nameLocation":"21802:13:5","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"claims","nameLocation":"21846:6:5","nodeType":"VariableDeclaration","scope":1803,"src":"21816:36:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsMerkleClaim_$1451_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim[]"},"typeName":{"baseType":{"id":1796,"nodeType":"UserDefinedTypeName","pathNode":{"id":1795,"name":"RewardsMerkleClaim","nameLocations":["21816:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1451,"src":"21816:18:5"},"referencedDeclaration":1451,"src":"21816:18:5","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsMerkleClaim_$1451_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim"}},"id":1797,"nodeType":"ArrayTypeName","src":"21816:20:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsMerkleClaim_$1451_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsMerkleClaim[]"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"recipient","nameLocation":"21862:9:5","nodeType":"VariableDeclaration","scope":1803,"src":"21854:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1799,"name":"address","nodeType":"ElementaryTypeName","src":"21854:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21815:57:5"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[],"src":"21881:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1811,"nodeType":"FunctionDefinition","src":"22211:82:5","nodes":[],"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"21888:318:5","text":" @notice Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\n @param root The merkle root of the distribution\n @param rewardsCalculationEndTimestamp The timestamp until which rewards have been calculated\n @dev Only callable by the rewardsUpdater"},"functionSelector":"3efe1db6","implemented":false,"kind":"function","modifiers":[],"name":"submitRoot","nameLocation":"22220:10:5","parameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"root","nameLocation":"22239:4:5","nodeType":"VariableDeclaration","scope":1811,"src":"22231:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22231:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1808,"mutability":"mutable","name":"rewardsCalculationEndTimestamp","nameLocation":"22252:30:5","nodeType":"VariableDeclaration","scope":1811,"src":"22245:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1807,"name":"uint32","nodeType":"ElementaryTypeName","src":"22245:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"22230:53:5"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[],"src":"22292:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1817,"nodeType":"FunctionDefinition","src":"22480:48:5","nodes":[],"documentation":{"id":1812,"nodeType":"StructuredDocumentation","src":"22299:176:5","text":" @notice allow the rewardsUpdater to disable/cancel a pending root submission in case of an error\n @param rootIndex The index of the root to be disabled"},"functionSelector":"f96abf2e","implemented":false,"kind":"function","modifiers":[],"name":"disableRoot","nameLocation":"22489:11:5","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1814,"mutability":"mutable","name":"rootIndex","nameLocation":"22508:9:5","nodeType":"VariableDeclaration","scope":1817,"src":"22501:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1813,"name":"uint32","nodeType":"ElementaryTypeName","src":"22501:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"22500:18:5"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[],"src":"22527:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1823,"nodeType":"FunctionDefinition","src":"22805:49:5","nodes":[],"documentation":{"id":1818,"nodeType":"StructuredDocumentation","src":"22534:266:5","text":" @notice Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\n @param claimer The address of the entity that can call `processClaim` on behalf of the earner\n @dev Only callable by the `earner`"},"functionSelector":"a0169ddd","implemented":false,"kind":"function","modifiers":[],"name":"setClaimerFor","nameLocation":"22814:13:5","parameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"mutability":"mutable","name":"claimer","nameLocation":"22836:7:5","nodeType":"VariableDeclaration","scope":1823,"src":"22828:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"22828:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22827:17:5"},"returnParameters":{"id":1822,"nodeType":"ParameterList","parameters":[],"src":"22853:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1829,"nodeType":"FunctionDefinition","src":"23076:62:5","nodes":[],"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"22860:211:5","text":" @notice Sets the delay in timestamp before a posted root can be claimed against\n @dev Only callable by the contract owner\n @param _activationDelay The new value for activationDelay"},"functionSelector":"58baaa3e","implemented":false,"kind":"function","modifiers":[],"name":"setActivationDelay","nameLocation":"23085:18:5","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"_activationDelay","nameLocation":"23111:16:5","nodeType":"VariableDeclaration","scope":1829,"src":"23104:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1825,"name":"uint32","nodeType":"ElementaryTypeName","src":"23104:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"23103:25:5"},"returnParameters":{"id":1828,"nodeType":"ParameterList","parameters":[],"src":"23137:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1835,"nodeType":"FunctionDefinition","src":"23363:56:5","nodes":[],"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"23144:214:5","text":" @notice Sets the default split for all operators across all avss.\n @param split The default split for all operators across all avss in bips.\n @dev Only callable by the contract owner."},"functionSelector":"a50a1d9c","implemented":false,"kind":"function","modifiers":[],"name":"setDefaultOperatorSplit","nameLocation":"23372:23:5","parameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"split","nameLocation":"23403:5:5","nodeType":"VariableDeclaration","scope":1835,"src":"23396:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1831,"name":"uint16","nodeType":"ElementaryTypeName","src":"23396:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"23395:14:5"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[],"src":"23418:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1845,"nodeType":"FunctionDefinition","src":"23901:83:5","nodes":[],"documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"23425:471:5","text":" @notice Sets the split for a specific operator for a specific avs\n @param operator The operator who is setting the split\n @param avs The avs for which the split is being set by the operator\n @param split The split for the operator for the specific avs in bips.\n @dev Only callable by the operator\n @dev Split has to be between 0 and 10000 bips (inclusive)\n @dev The split will be activated after the activation delay"},"functionSelector":"dcbb03b3","implemented":false,"kind":"function","modifiers":[],"name":"setOperatorAVSSplit","nameLocation":"23910:19:5","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"operator","nameLocation":"23938:8:5","nodeType":"VariableDeclaration","scope":1845,"src":"23930:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1837,"name":"address","nodeType":"ElementaryTypeName","src":"23930:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"avs","nameLocation":"23956:3:5","nodeType":"VariableDeclaration","scope":1845,"src":"23948:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1839,"name":"address","nodeType":"ElementaryTypeName","src":"23948:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1842,"mutability":"mutable","name":"split","nameLocation":"23968:5:5","nodeType":"VariableDeclaration","scope":1845,"src":"23961:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1841,"name":"uint16","nodeType":"ElementaryTypeName","src":"23961:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"23929:45:5"},"returnParameters":{"id":1844,"nodeType":"ParameterList","parameters":[],"src":"23983:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1853,"nodeType":"FunctionDefinition","src":"24426:69:5","nodes":[],"documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"23990:431:5","text":" @notice Sets the split for a specific operator for Programmatic Incentives.\n @param operator The operator on behalf of which the split is being set.\n @param split The split for the operator for Programmatic Incentives in bips.\n @dev Only callable by the operator\n @dev Split has to be between 0 and 10000 bips (inclusive)\n @dev The split will be activated after the activation delay"},"functionSelector":"b3dbb0e0","implemented":false,"kind":"function","modifiers":[],"name":"setOperatorPISplit","nameLocation":"24435:18:5","parameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1848,"mutability":"mutable","name":"operator","nameLocation":"24462:8:5","nodeType":"VariableDeclaration","scope":1853,"src":"24454:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1847,"name":"address","nodeType":"ElementaryTypeName","src":"24454:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"split","nameLocation":"24479:5:5","nodeType":"VariableDeclaration","scope":1853,"src":"24472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1849,"name":"uint16","nodeType":"ElementaryTypeName","src":"24472:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"24453:32:5"},"returnParameters":{"id":1852,"nodeType":"ParameterList","parameters":[],"src":"24494:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1859,"nodeType":"FunctionDefinition","src":"24720:61:5","nodes":[],"documentation":{"id":1854,"nodeType":"StructuredDocumentation","src":"24501:214:5","text":" @notice Sets the permissioned `rewardsUpdater` address which can post new roots\n @dev Only callable by the contract owner\n @param _rewardsUpdater The address of the new rewardsUpdater"},"functionSelector":"863cb9a9","implemented":false,"kind":"function","modifiers":[],"name":"setRewardsUpdater","nameLocation":"24729:17:5","parameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"_rewardsUpdater","nameLocation":"24755:15:5","nodeType":"VariableDeclaration","scope":1859,"src":"24747:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1855,"name":"address","nodeType":"ElementaryTypeName","src":"24747:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24746:25:5"},"returnParameters":{"id":1858,"nodeType":"ParameterList","parameters":[],"src":"24780:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1867,"nodeType":"FunctionDefinition","src":"25102:80:5","nodes":[],"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"24787:310:5","text":" @notice Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\n @dev Only callable by the contract owner\n @param _submitter The address of the rewardsForAllSubmitter\n @param _newValue The new value for isRewardsForAllSubmitter"},"functionSelector":"0eb38345","implemented":false,"kind":"function","modifiers":[],"name":"setRewardsForAllSubmitter","nameLocation":"25111:25:5","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"_submitter","nameLocation":"25145:10:5","nodeType":"VariableDeclaration","scope":1867,"src":"25137:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1861,"name":"address","nodeType":"ElementaryTypeName","src":"25137:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"_newValue","nameLocation":"25162:9:5","nodeType":"VariableDeclaration","scope":1867,"src":"25157:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1863,"name":"bool","nodeType":"ElementaryTypeName","src":"25157:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"25136:36:5"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"25181:0:5"},"scope":1874,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1873,"nodeType":"FunctionDefinition","src":"25577:59:5","nodes":[],"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"25188:384:5","text":" @notice Getter function for the current EIP-712 domain separator for this contract.\n @dev The domain separator will change in the event of a fork that changes the ChainID.\n @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n for more detailed information please read EIP-712."},"functionSelector":"f698da25","implemented":false,"kind":"function","modifiers":[],"name":"domainSeparator","nameLocation":"25586:15:5","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"25601:2:5"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1873,"src":"25627:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25627:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"25626:9:5"},"scope":1874,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IRewardsCoordinator","contractDependencies":[],"contractKind":"interface","documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"147:507:5","text":" @title Interface for the `IRewardsCoordinator` contract.\n @author Layr Labs, Inc.\n @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n @notice Allows AVSs to make \"Rewards Submissions\", which get distributed amongst the AVSs' confirmed\n Operators and the Stakers delegated to those Operators.\n Calculations are performed based on the completed RewardsSubmission, with the results posted in\n a Merkle root against which Stakers & Operators can make claims."},"fullyImplemented":false,"linearizedBaseContracts":[1874],"name":"IRewardsCoordinator","nameLocation":"665:19:5","scope":1875,"usedErrors":[],"usedEvents":[1463,1475,1487,1501,1508,1516,1522,1528,1543,1556,1564,1575,1579,1595]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol":{"id":6,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","id":1891,"exportedSymbols":{"ISignatureUtils":[1890]},"nodeType":"SourceUnit","src":"37:1035:6","nodes":[{"id":1876,"nodeType":"PragmaDirective","src":"37:24:6","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":1890,"nodeType":"ContractDefinition","src":"237:834:6","nodes":[{"id":1882,"nodeType":"StructDefinition","src":"404:210:6","nodes":[],"canonicalName":"ISignatureUtils.SignatureWithExpiry","members":[{"constant":false,"id":1879,"mutability":"mutable","name":"signature","nameLocation":"515:9:6","nodeType":"VariableDeclaration","scope":1882,"src":"509:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1878,"name":"bytes","nodeType":"ElementaryTypeName","src":"509:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1881,"mutability":"mutable","name":"expiry","nameLocation":"601:6:6","nodeType":"VariableDeclaration","scope":1882,"src":"593:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"593:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SignatureWithExpiry","nameLocation":"411:19:6","scope":1890,"visibility":"public"},{"id":1889,"nodeType":"StructDefinition","src":"779:290:6","nodes":[],"canonicalName":"ISignatureUtils.SignatureWithSaltAndExpiry","members":[{"constant":false,"id":1884,"mutability":"mutable","name":"signature","nameLocation":"897:9:6","nodeType":"VariableDeclaration","scope":1889,"src":"891:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1883,"name":"bytes","nodeType":"ElementaryTypeName","src":"891:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"salt","nameLocation":"975:4:6","nodeType":"VariableDeclaration","scope":1889,"src":"967:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1885,"name":"bytes32","nodeType":"ElementaryTypeName","src":"967:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"expiry","nameLocation":"1056:6:6","nodeType":"VariableDeclaration","scope":1889,"src":"1048:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SignatureWithSaltAndExpiry","nameLocation":"786:26:6","scope":1890,"visibility":"public"}],"abstract":false,"baseContracts":[],"canonicalName":"ISignatureUtils","contractDependencies":[],"contractKind":"interface","documentation":{"id":1877,"nodeType":"StructuredDocumentation","src":"63:173:6","text":" @title The interface for common signature utilities.\n @author Layr Labs, Inc.\n @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service"},"fullyImplemented":true,"linearizedBaseContracts":[1890],"name":"ISignatureUtils","nameLocation":"247:15:6","scope":1891,"usedErrors":[],"usedEvents":[]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"id":7,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","id":2006,"exportedSymbols":{"IERC20":[6545],"IStrategy":[2005]},"nodeType":"SourceUnit","src":"37:6063:7","nodes":[{"id":1892,"nodeType":"PragmaDirective","src":"37:24:7","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":1893,"nodeType":"ImportDirective","src":"63:56:7","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":2006,"sourceUnit":6546,"symbolAliases":[],"unitAlias":""},{"id":2005,"nodeType":"ContractDefinition","src":"382:5717:7","nodes":[{"id":1899,"nodeType":"EventDefinition","src":"726:40:7","nodes":[],"anonymous":false,"documentation":{"id":1895,"nodeType":"StructuredDocumentation","src":"408:313:7","text":" @notice Used to emit an event for the exchange rate between 1 share and underlying token in a strategy contract\n @param rate is the exchange rate in wad 18 decimals\n @dev Tokens that do not have 18 decimals must have offchain services scale the exchange rate by the proper magnitude"},"eventSelector":"d2494f3479e5da49d386657c292c610b5b01df313d07c62eb0cfa49924a31be8","name":"ExchangeRateEmitted","nameLocation":"732:19:7","parameters":{"id":1898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"760:4:7","nodeType":"VariableDeclaration","scope":1899,"src":"752:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"751:14:7"}},{"id":1907,"nodeType":"EventDefinition","src":"1018:53:7","nodes":[],"anonymous":false,"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"772:241:7","text":" Used to emit the underlying token and its decimals on strategy creation\n @notice token\n @param token is the ERC20 token of the strategy\n @param decimals are the decimals of the ERC20 token in the strategy"},"eventSelector":"1c540707b00eb5427b6b774fc799d756516a54aee108b64b327acc55af557507","name":"StrategyTokenSet","nameLocation":"1024:16:7","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1048:5:7","nodeType":"VariableDeclaration","scope":1907,"src":"1041:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1902,"nodeType":"UserDefinedTypeName","pathNode":{"id":1901,"name":"IERC20","nameLocations":["1041:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"1041:6:7"},"referencedDeclaration":6545,"src":"1041:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1905,"indexed":false,"mutability":"mutable","name":"decimals","nameLocation":"1061:8:7","nodeType":"VariableDeclaration","scope":1907,"src":"1055:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1904,"name":"uint8","nodeType":"ElementaryTypeName","src":"1055:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1040:30:7"}},{"id":1918,"nodeType":"FunctionDefinition","src":"1592:74:7","nodes":[],"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"1077:510:7","text":" @notice Used to deposit tokens into this Strategy\n @param token is the ERC20 token being deposited\n @param amount is the amount of token being deposited\n @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n @return newShares is the number of new shares issued at the current exchange ratio."},"functionSelector":"47e7ef24","implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1601:7:7","parameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"token","nameLocation":"1616:5:7","nodeType":"VariableDeclaration","scope":1918,"src":"1609:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1910,"nodeType":"UserDefinedTypeName","pathNode":{"id":1909,"name":"IERC20","nameLocations":["1609:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"1609:6:7"},"referencedDeclaration":6545,"src":"1609:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"amount","nameLocation":"1631:6:7","nodeType":"VariableDeclaration","scope":1918,"src":"1623:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1608:30:7"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"1657:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1657:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1656:9:7"},"scope":2005,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1929,"nodeType":"FunctionDefinition","src":"2195:82:7","nodes":[],"documentation":{"id":1919,"nodeType":"StructuredDocumentation","src":"1672:518:7","text":" @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n @param recipient is the address to receive the withdrawn funds\n @param token is the ERC20 token being transferred out\n @param amountShares is the amount of shares being withdrawn\n @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n other functions, and individual share balances are recorded in the strategyManager as well."},"functionSelector":"d9caed12","implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"2204:8:7","parameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"recipient","nameLocation":"2221:9:7","nodeType":"VariableDeclaration","scope":1929,"src":"2213:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1920,"name":"address","nodeType":"ElementaryTypeName","src":"2213:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1924,"mutability":"mutable","name":"token","nameLocation":"2239:5:7","nodeType":"VariableDeclaration","scope":1929,"src":"2232:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1923,"nodeType":"UserDefinedTypeName","pathNode":{"id":1922,"name":"IERC20","nameLocations":["2232:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"2232:6:7"},"referencedDeclaration":6545,"src":"2232:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1926,"mutability":"mutable","name":"amountShares","nameLocation":"2254:12:7","nodeType":"VariableDeclaration","scope":1929,"src":"2246:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2246:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2212:55:7"},"returnParameters":{"id":1928,"nodeType":"ParameterList","parameters":[],"src":"2276:0:7"},"scope":2005,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1937,"nodeType":"FunctionDefinition","src":"2820:77:7","nodes":[],"documentation":{"id":1930,"nodeType":"StructuredDocumentation","src":"2283:532:7","text":" @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n @param amountShares is the amount of shares to calculate its conversion into the underlying token\n @return The amount of underlying tokens corresponding to the input `amountShares`\n @dev Implementation for these functions in particular may vary significantly for different strategies"},"functionSelector":"f3e73875","implemented":false,"kind":"function","modifiers":[],"name":"sharesToUnderlying","nameLocation":"2829:18:7","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1932,"mutability":"mutable","name":"amountShares","nameLocation":"2856:12:7","nodeType":"VariableDeclaration","scope":1937,"src":"2848:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"2848:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2847:22:7"},"returnParameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1937,"src":"2888:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"2888:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2887:9:7"},"scope":2005,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1945,"nodeType":"FunctionDefinition","src":"3450:81:7","nodes":[],"documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"2903:542:7","text":" @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n @return The amount of underlying tokens corresponding to the input `amountShares`\n @dev Implementation for these functions in particular may vary significantly for different strategies"},"functionSelector":"8c871019","implemented":false,"kind":"function","modifiers":[],"name":"underlyingToShares","nameLocation":"3459:18:7","parameters":{"id":1941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"amountUnderlying","nameLocation":"3486:16:7","nodeType":"VariableDeclaration","scope":1945,"src":"3478:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1939,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:26:7"},"returnParameters":{"id":1944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1945,"src":"3522:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1942,"name":"uint256","nodeType":"ElementaryTypeName","src":"3522:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3521:9:7"},"scope":2005,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1953,"nodeType":"FunctionDefinition","src":"3770:65:7","nodes":[],"documentation":{"id":1946,"nodeType":"StructuredDocumentation","src":"3537:228:7","text":" @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications"},"functionSelector":"8f6a6240","implemented":false,"kind":"function","modifiers":[],"name":"userUnderlying","nameLocation":"3779:14:7","parameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"user","nameLocation":"3802:4:7","nodeType":"VariableDeclaration","scope":1953,"src":"3794:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1947,"name":"address","nodeType":"ElementaryTypeName","src":"3794:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3793:14:7"},"returnParameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1953,"src":"3826:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1950,"name":"uint256","nodeType":"ElementaryTypeName","src":"3826:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3825:9:7"},"scope":2005,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1961,"nodeType":"FunctionDefinition","src":"4009:62:7","nodes":[],"documentation":{"id":1954,"nodeType":"StructuredDocumentation","src":"3841:163:7","text":" @notice convenience function for fetching the current total shares of `user` in this strategy, by\n querying the `strategyManager` contract"},"functionSelector":"ce7c2ac2","implemented":false,"kind":"function","modifiers":[],"name":"shares","nameLocation":"4018:6:7","parameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"user","nameLocation":"4033:4:7","nodeType":"VariableDeclaration","scope":1961,"src":"4025:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1955,"name":"address","nodeType":"ElementaryTypeName","src":"4025:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4024:14:7"},"returnParameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1961,"src":"4062:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"4062:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4061:9:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1969,"nodeType":"FunctionDefinition","src":"4604:86:7","nodes":[],"documentation":{"id":1962,"nodeType":"StructuredDocumentation","src":"4077:522:7","text":" @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n @param amountShares is the amount of shares to calculate its conversion into the underlying token\n @return The amount of shares corresponding to the input `amountUnderlying`\n @dev Implementation for these functions in particular may vary significantly for different strategies"},"functionSelector":"7a8b2637","implemented":false,"kind":"function","modifiers":[],"name":"sharesToUnderlyingView","nameLocation":"4613:22:7","parameters":{"id":1965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1964,"mutability":"mutable","name":"amountShares","nameLocation":"4644:12:7","nodeType":"VariableDeclaration","scope":1969,"src":"4636:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"4636:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4635:22:7"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1969,"src":"4681:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4680:9:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1977,"nodeType":"FunctionDefinition","src":"5233:90:7","nodes":[],"documentation":{"id":1970,"nodeType":"StructuredDocumentation","src":"4696:532:7","text":" @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n @return The amount of shares corresponding to the input `amountUnderlying`\n @dev Implementation for these functions in particular may vary significantly for different strategies"},"functionSelector":"e3dae51c","implemented":false,"kind":"function","modifiers":[],"name":"underlyingToSharesView","nameLocation":"5242:22:7","parameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"amountUnderlying","nameLocation":"5273:16:7","nodeType":"VariableDeclaration","scope":1977,"src":"5265:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"5265:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5264:26:7"},"returnParameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"5314:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"5314:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5313:9:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1985,"nodeType":"FunctionDefinition","src":"5559:74:7","nodes":[],"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"5329:225:7","text":" @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications"},"functionSelector":"553ca5f8","implemented":false,"kind":"function","modifiers":[],"name":"userUnderlyingView","nameLocation":"5568:18:7","parameters":{"id":1981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"user","nameLocation":"5595:4:7","nodeType":"VariableDeclaration","scope":1985,"src":"5587:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"5587:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5586:14:7"},"returnParameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1985,"src":"5624:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1982,"name":"uint256","nodeType":"ElementaryTypeName","src":"5624:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5623:9:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1992,"nodeType":"FunctionDefinition","src":"5704:58:7","nodes":[],"documentation":{"id":1986,"nodeType":"StructuredDocumentation","src":"5639:60:7","text":"@notice The underlying token for shares in this Strategy"},"functionSelector":"2495a599","implemented":false,"kind":"function","modifiers":[],"name":"underlyingToken","nameLocation":"5713:15:7","parameters":{"id":1987,"nodeType":"ParameterList","parameters":[],"src":"5728:2:7"},"returnParameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1992,"src":"5754:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"},"typeName":{"id":1989,"nodeType":"UserDefinedTypeName","pathNode":{"id":1988,"name":"IERC20","nameLocations":["5754:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":6545,"src":"5754:6:7"},"referencedDeclaration":6545,"src":"5754:6:7","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"5753:8:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1998,"nodeType":"FunctionDefinition","src":"5835:55:7","nodes":[],"documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"5768:62:7","text":"@notice The total number of extant shares in this Strategy"},"functionSelector":"3a98ef39","implemented":false,"kind":"function","modifiers":[],"name":"totalShares","nameLocation":"5844:11:7","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[],"src":"5855:2:7"},"returnParameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1998,"src":"5881:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"5881:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5880:9:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2004,"nodeType":"FunctionDefinition","src":"6036:61:7","nodes":[],"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"5896:135:7","text":"@notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail."},"functionSelector":"ab5921e1","implemented":false,"kind":"function","modifiers":[],"name":"explanation","nameLocation":"6045:11:7","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[],"src":"6056:2:7"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2004,"src":"6082:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2001,"name":"string","nodeType":"ElementaryTypeName","src":"6082:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6081:15:7"},"scope":2005,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IStrategy","contractDependencies":[],"contractKind":"interface","documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"121:260:7","text":" @title Minimal interface for an `Strategy` contract.\n @author Layr Labs, Inc.\n @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n @notice Custom `Strategy` implementations may expand extensively on this interface."},"fullyImplemented":false,"linearizedBaseContracts":[2005],"name":"IStrategy","nameLocation":"392:9:7","scope":2006,"usedErrors":[],"usedEvents":[1899,1907]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"id":19,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol","id":5893,"exportedSymbols":{"IERC20":[6545]},"nodeType":"SourceUnit","src":"90:61:19","nodes":[{"id":5891,"nodeType":"PragmaDirective","src":"90:23:19","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":5892,"nodeType":"ImportDirective","src":"115:35:19","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":5893,"sourceUnit":6546,"symbolAliases":[],"unitAlias":""}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"id":20,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol","id":5903,"exportedSymbols":{"IERC1822Proxiable":[5902]},"nodeType":"SourceUnit","src":"113:766:20","nodes":[{"id":5894,"nodeType":"PragmaDirective","src":"113:23:20","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":5902,"nodeType":"ContractDefinition","src":"342:536:20","nodes":[{"id":5901,"nodeType":"FunctionDefinition","src":"819:57:20","nodes":[],"documentation":{"id":5896,"nodeType":"StructuredDocumentation","src":"376:438:20","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"828:13:20","parameters":{"id":5897,"nodeType":"ParameterList","parameters":[],"src":"841:2:20"},"returnParameters":{"id":5900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5901,"src":"867:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5898,"name":"bytes32","nodeType":"ElementaryTypeName","src":"867:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"866:9:20"},"scope":5902,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":5895,"nodeType":"StructuredDocumentation","src":"138:203:20","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"linearizedBaseContracts":[5902],"name":"IERC1822Proxiable","nameLocation":"352:17:20","scope":5903,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"id":21,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol","id":5940,"exportedSymbols":{"Address":[6840],"ERC1967Proxy":[5939],"ERC1967Upgrade":[6257],"IBeacon":[6319],"IERC1822Proxiable":[5902],"Proxy":[6309],"StorageSlot":[6922]},"nodeType":"SourceUnit","src":"114:1177:21","nodes":[{"id":5904,"nodeType":"PragmaDirective","src":"114:23:21","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":5905,"nodeType":"ImportDirective","src":"139:22:21","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol","file":"../Proxy.sol","nameLocation":"-1:-1:-1","scope":5940,"sourceUnit":6310,"symbolAliases":[],"unitAlias":""},{"id":5906,"nodeType":"ImportDirective","src":"162:30:21","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"./ERC1967Upgrade.sol","nameLocation":"-1:-1:-1","scope":5940,"sourceUnit":6258,"symbolAliases":[],"unitAlias":""},{"id":5939,"nodeType":"ContractDefinition","src":"567:723:21","nodes":[{"id":5926,"nodeType":"FunctionDefinition","src":"958:112:21","nodes":[],"body":{"id":5925,"nodeType":"Block","src":"1014:56:21","nodes":[],"statements":[{"expression":{"arguments":[{"id":5920,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5914,"src":"1042:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5921,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"1050:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":5922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1057:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5919,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"1024:17:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":5923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:39:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5924,"nodeType":"ExpressionStatement","src":"1024:39:21"}]},"documentation":{"id":5912,"nodeType":"StructuredDocumentation","src":"620:333:21","text":" @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializing the storage of the proxy like a Solidity constructor."},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":5917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5914,"mutability":"mutable","name":"_logic","nameLocation":"978:6:21","nodeType":"VariableDeclaration","scope":5926,"src":"970:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5913,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5916,"mutability":"mutable","name":"_data","nameLocation":"999:5:21","nodeType":"VariableDeclaration","scope":5926,"src":"986:18:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5915,"name":"bytes","nodeType":"ElementaryTypeName","src":"986:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"969:36:21"},"returnParameters":{"id":5918,"nodeType":"ParameterList","parameters":[],"src":"1014:0:21"},"scope":5939,"stateMutability":"payable","virtual":false,"visibility":"public"},{"id":5938,"nodeType":"FunctionDefinition","src":"1148:140:21","nodes":[],"body":{"id":5937,"nodeType":"Block","src":"1229:59:21","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5933,"name":"ERC1967Upgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6257,"src":"1246:14:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Upgrade_$6257_$","typeString":"type(contract ERC1967Upgrade)"}},"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:18:21","memberName":"_getImplementation","nodeType":"MemberAccess","referencedDeclaration":5971,"src":"1246:33:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1246:35:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5932,"id":5936,"nodeType":"Return","src":"1239:42:21"}]},"baseFunctions":[6274],"documentation":{"id":5927,"nodeType":"StructuredDocumentation","src":"1076:67:21","text":" @dev Returns the current implementation address."},"implemented":true,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1157:15:21","overrides":{"id":5929,"nodeType":"OverrideSpecifier","overrides":[],"src":"1197:8:21"},"parameters":{"id":5928,"nodeType":"ParameterList","parameters":[],"src":"1172:2:21"},"returnParameters":{"id":5932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5931,"mutability":"mutable","name":"impl","nameLocation":"1223:4:21","nodeType":"VariableDeclaration","scope":5938,"src":"1215:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5930,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1214:14:21"},"scope":5939,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":5908,"name":"Proxy","nameLocations":["592:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":6309,"src":"592:5:21"},"id":5909,"nodeType":"InheritanceSpecifier","src":"592:5:21"},{"baseName":{"id":5910,"name":"ERC1967Upgrade","nameLocations":["599:14:21"],"nodeType":"IdentifierPath","referencedDeclaration":6257,"src":"599:14:21"},"id":5911,"nodeType":"InheritanceSpecifier","src":"599:14:21"}],"canonicalName":"ERC1967Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":5907,"nodeType":"StructuredDocumentation","src":"194:372:21","text":" @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."},"fullyImplemented":true,"linearizedBaseContracts":[5939,6257,6309],"name":"ERC1967Proxy","nameLocation":"576:12:21","scope":5940,"usedErrors":[],"usedEvents":[5958,6104,6169]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"id":22,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol","id":6258,"exportedSymbols":{"Address":[6840],"ERC1967Upgrade":[6257],"IBeacon":[6319],"IERC1822Proxiable":[5902],"StorageSlot":[6922]},"nodeType":"SourceUnit","src":"116:6398:22","nodes":[{"id":5941,"nodeType":"PragmaDirective","src":"116:23:22","nodes":[],"literals":["solidity","^","0.8",".2"]},{"id":5942,"nodeType":"ImportDirective","src":"141:31:22","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","nameLocation":"-1:-1:-1","scope":6258,"sourceUnit":6320,"symbolAliases":[],"unitAlias":""},{"id":5943,"nodeType":"ImportDirective","src":"173:45:22","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol","file":"../../interfaces/draft-IERC1822.sol","nameLocation":"-1:-1:-1","scope":6258,"sourceUnit":5903,"symbolAliases":[],"unitAlias":""},{"id":5944,"nodeType":"ImportDirective","src":"219:33:22","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol","file":"../../utils/Address.sol","nameLocation":"-1:-1:-1","scope":6258,"sourceUnit":6841,"symbolAliases":[],"unitAlias":""},{"id":5945,"nodeType":"ImportDirective","src":"253:37:22","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","nameLocation":"-1:-1:-1","scope":6258,"sourceUnit":6923,"symbolAliases":[],"unitAlias":""},{"id":6257,"nodeType":"ContractDefinition","src":"529:5984:22","nodes":[{"id":5949,"nodeType":"VariableDeclaration","src":"647:108:22","nodes":[],"constant":true,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"672:14:22","scope":6257,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":5948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"689:66:22","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"id":5953,"nodeType":"VariableDeclaration","src":"981:115:22","nodes":[],"constant":true,"documentation":{"id":5950,"nodeType":"StructuredDocumentation","src":"762:214:22","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1007:20:22","scope":6257,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":5952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:66:22","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"id":5958,"nodeType":"EventDefinition","src":"1176:47:22","nodes":[],"anonymous":false,"documentation":{"id":5954,"nodeType":"StructuredDocumentation","src":"1103:68:22","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","name":"Upgraded","nameLocation":"1182:8:22","parameters":{"id":5957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5956,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1207:14:22","nodeType":"VariableDeclaration","scope":5958,"src":"1191:30:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5955,"name":"address","nodeType":"ElementaryTypeName","src":"1191:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1190:32:22"}},{"id":5971,"nodeType":"FunctionDefinition","src":"1301:140:22","nodes":[],"body":{"id":5970,"nodeType":"Block","src":"1363:78:22","nodes":[],"statements":[{"expression":{"expression":{"arguments":[{"id":5966,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5953,"src":"1407:20:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5964,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"1380:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":5965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1392:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"1380:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1380:48:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":5968,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1429:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"1380:54:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5963,"id":5969,"nodeType":"Return","src":"1373:61:22"}]},"documentation":{"id":5959,"nodeType":"StructuredDocumentation","src":"1229:67:22","text":" @dev Returns the current implementation address."},"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1310:18:22","parameters":{"id":5960,"nodeType":"ParameterList","parameters":[],"src":"1328:2:22"},"returnParameters":{"id":5963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5971,"src":"1354:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5961,"name":"address","nodeType":"ElementaryTypeName","src":"1354:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1353:9:22"},"scope":6257,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":5995,"nodeType":"FunctionDefinition","src":"1532:259:22","nodes":[],"body":{"id":5994,"nodeType":"Block","src":"1595:196:22","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":5980,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"1632:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5978,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"1613:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6840_$","typeString":"type(library Address)"}},"id":5979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1621:10:22","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":6563,"src":"1613:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1613:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":5982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1652:47:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":5977,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1605:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1605:95:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5984,"nodeType":"ExpressionStatement","src":"1605:95:22"},{"expression":{"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":5988,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5953,"src":"1737:20:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":5985,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"1710:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1722:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"1710:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":5989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:48:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":5990,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1759:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"1710:54:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5991,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"1767:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1710:74:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5993,"nodeType":"ExpressionStatement","src":"1710:74:22"}]},"documentation":{"id":5972,"nodeType":"StructuredDocumentation","src":"1447:80:22","text":" @dev Stores a new address in the EIP1967 implementation slot."},"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1541:18:22","parameters":{"id":5975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5974,"mutability":"mutable","name":"newImplementation","nameLocation":"1568:17:22","nodeType":"VariableDeclaration","scope":5995,"src":"1560:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5973,"name":"address","nodeType":"ElementaryTypeName","src":"1560:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1559:27:22"},"returnParameters":{"id":5976,"nodeType":"ParameterList","parameters":[],"src":"1595:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6010,"nodeType":"FunctionDefinition","src":"1897:152:22","nodes":[],"body":{"id":6009,"nodeType":"Block","src":"1953:96:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6002,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"1982:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6001,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"1963:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1963:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6004,"nodeType":"ExpressionStatement","src":"1963:37:22"},{"eventCall":{"arguments":[{"id":6006,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"2024:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6005,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"2015:8:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6008,"nodeType":"EmitStatement","src":"2010:32:22"}]},"documentation":{"id":5996,"nodeType":"StructuredDocumentation","src":"1797:95:22","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"1906:10:22","parameters":{"id":5999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5998,"mutability":"mutable","name":"newImplementation","nameLocation":"1925:17:22","nodeType":"VariableDeclaration","scope":6010,"src":"1917:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5997,"name":"address","nodeType":"ElementaryTypeName","src":"1917:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1916:27:22"},"returnParameters":{"id":6000,"nodeType":"ParameterList","parameters":[],"src":"1953:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6040,"nodeType":"FunctionDefinition","src":"2183:295:22","nodes":[],"body":{"id":6039,"nodeType":"Block","src":"2311:167:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6021,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6013,"src":"2332:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6020,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6010,"src":"2321:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6023,"nodeType":"ExpressionStatement","src":"2321:29:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6024,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6015,"src":"2364:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2369:6:22","memberName":"length","nodeType":"MemberAccess","src":"2364:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2378:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2364:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":6028,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6017,"src":"2383:9:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2364:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6038,"nodeType":"IfStatement","src":"2360:112:22","trueBody":{"id":6037,"nodeType":"Block","src":"2394:78:22","statements":[{"expression":{"arguments":[{"id":6033,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6013,"src":"2437:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6034,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6015,"src":"2456:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6030,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"2408:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6840_$","typeString":"type(library Address)"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2416:20:22","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":6773,"src":"2408:28:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":6035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2408:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6036,"nodeType":"ExpressionStatement","src":"2408:53:22"}]}}]},"documentation":{"id":6011,"nodeType":"StructuredDocumentation","src":"2055:123:22","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2192:17:22","parameters":{"id":6018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6013,"mutability":"mutable","name":"newImplementation","nameLocation":"2227:17:22","nodeType":"VariableDeclaration","scope":6040,"src":"2219:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6012,"name":"address","nodeType":"ElementaryTypeName","src":"2219:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6015,"mutability":"mutable","name":"data","nameLocation":"2267:4:22","nodeType":"VariableDeclaration","scope":6040,"src":"2254:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6014,"name":"bytes","nodeType":"ElementaryTypeName","src":"2254:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6017,"mutability":"mutable","name":"forceCall","nameLocation":"2286:9:22","nodeType":"VariableDeclaration","scope":6040,"src":"2281:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6016,"name":"bool","nodeType":"ElementaryTypeName","src":"2281:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2209:92:22"},"returnParameters":{"id":6019,"nodeType":"ParameterList","parameters":[],"src":"2311:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6093,"nodeType":"FunctionDefinition","src":"2650:952:22","nodes":[],"body":{"id":6092,"nodeType":"Block","src":"2782:820:22","nodes":[],"statements":[{"condition":{"expression":{"arguments":[{"id":6052,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5949,"src":"3123:14:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6050,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"3096:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3108:14:22","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":6899,"src":"3096:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$6871_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:42:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$6871_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":6054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3139:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6870,"src":"3096:48:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6090,"nodeType":"Block","src":"3214:382:22","statements":[{"clauses":[{"block":{"id":6075,"nodeType":"Block","src":"3308:115:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6069,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6066,"src":"3334:4:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6070,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5953,"src":"3342:20:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3334:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":6072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3364:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":6068,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3326:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:82:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6074,"nodeType":"ExpressionStatement","src":"3326:82:22"}]},"errorName":"","id":6076,"nodeType":"TryCatchClause","parameters":{"id":6067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6066,"mutability":"mutable","name":"slot","nameLocation":"3302:4:22","nodeType":"VariableDeclaration","scope":6076,"src":"3294:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3294:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3293:14:22"},"src":"3285:138:22"},{"block":{"id":6081,"nodeType":"Block","src":"3430:89:22","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":6078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3455:48:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":6077,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3448:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":6079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:56:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6080,"nodeType":"ExpressionStatement","src":"3448:56:22"}]},"errorName":"","id":6082,"nodeType":"TryCatchClause","src":"3424:95:22"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6061,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"3250:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6060,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"3232:17:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$5902_$","typeString":"type(contract IERC1822Proxiable)"}},"id":6062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$5902","typeString":"contract IERC1822Proxiable"}},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3269:13:22","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":5901,"src":"3232:50:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:52:22","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6083,"nodeType":"TryStatement","src":"3228:291:22"},{"expression":{"arguments":[{"id":6085,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"3550:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6086,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6045,"src":"3569:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6087,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6047,"src":"3575:9:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6084,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"3532:17:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":6088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3532:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6089,"nodeType":"ExpressionStatement","src":"3532:53:22"}]},"id":6091,"nodeType":"IfStatement","src":"3092:504:22","trueBody":{"id":6059,"nodeType":"Block","src":"3146:62:22","statements":[{"expression":{"arguments":[{"id":6056,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6043,"src":"3179:17:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6055,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"3160:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3160:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6058,"nodeType":"ExpressionStatement","src":"3160:37:22"}]}}]},"documentation":{"id":6041,"nodeType":"StructuredDocumentation","src":"2484:161:22","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2659:21:22","parameters":{"id":6048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6043,"mutability":"mutable","name":"newImplementation","nameLocation":"2698:17:22","nodeType":"VariableDeclaration","scope":6093,"src":"2690:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6042,"name":"address","nodeType":"ElementaryTypeName","src":"2690:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6045,"mutability":"mutable","name":"data","nameLocation":"2738:4:22","nodeType":"VariableDeclaration","scope":6093,"src":"2725:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6044,"name":"bytes","nodeType":"ElementaryTypeName","src":"2725:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6047,"mutability":"mutable","name":"forceCall","nameLocation":"2757:9:22","nodeType":"VariableDeclaration","scope":6093,"src":"2752:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6046,"name":"bool","nodeType":"ElementaryTypeName","src":"2752:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2680:92:22"},"returnParameters":{"id":6049,"nodeType":"ParameterList","parameters":[],"src":"2782:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6097,"nodeType":"VariableDeclaration","src":"3802:106:22","nodes":[],"constant":true,"documentation":{"id":6094,"nodeType":"StructuredDocumentation","src":"3608:189:22","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3828:11:22","scope":6257,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6095,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3802:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":6096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3842:66:22","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"id":6104,"nodeType":"EventDefinition","src":"3987:60:22","nodes":[],"anonymous":false,"documentation":{"id":6098,"nodeType":"StructuredDocumentation","src":"3915:67:22","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","name":"AdminChanged","nameLocation":"3993:12:22","parameters":{"id":6103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6100,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4014:13:22","nodeType":"VariableDeclaration","scope":6104,"src":"4006:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6099,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6102,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4037:8:22","nodeType":"VariableDeclaration","scope":6104,"src":"4029:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6101,"name":"address","nodeType":"ElementaryTypeName","src":"4029:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:41:22"}},{"id":6117,"nodeType":"FunctionDefinition","src":"4108:122:22","nodes":[],"body":{"id":6116,"nodeType":"Block","src":"4161:69:22","nodes":[],"statements":[{"expression":{"expression":{"arguments":[{"id":6112,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"4205:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6110,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"4178:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":6111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4190:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"4178:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":6113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4178:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":6114,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4218:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"4178:45:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6109,"id":6115,"nodeType":"Return","src":"4171:52:22"}]},"documentation":{"id":6105,"nodeType":"StructuredDocumentation","src":"4053:50:22","text":" @dev Returns the current admin."},"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4117:9:22","parameters":{"id":6106,"nodeType":"ParameterList","parameters":[],"src":"4126:2:22"},"returnParameters":{"id":6109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6117,"src":"4152:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6107,"name":"address","nodeType":"ElementaryTypeName","src":"4152:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4151:9:22"},"scope":6257,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":6143,"nodeType":"FunctionDefinition","src":"4312:201:22","nodes":[],"body":{"id":6142,"nodeType":"Block","src":"4357:156:22","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6124,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"4375:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4395:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4387:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6125,"name":"address","nodeType":"ElementaryTypeName","src":"4387:7:22","typeDescriptions":{}}},"id":6128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4387:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4375:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":6130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4399:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":6123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4367:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6132,"nodeType":"ExpressionStatement","src":"4367:73:22"},{"expression":{"id":6140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":6136,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"4477:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6133,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"4450:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":6135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4462:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"4450:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":6137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4450:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":6138,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4490:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"4450:45:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6139,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6120,"src":"4498:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4450:56:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6141,"nodeType":"ExpressionStatement","src":"4450:56:22"}]},"documentation":{"id":6118,"nodeType":"StructuredDocumentation","src":"4236:71:22","text":" @dev Stores a new address in the EIP1967 admin slot."},"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4321:9:22","parameters":{"id":6121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6120,"mutability":"mutable","name":"newAdmin","nameLocation":"4339:8:22","nodeType":"VariableDeclaration","scope":6143,"src":"4331:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6119,"name":"address","nodeType":"ElementaryTypeName","src":"4331:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4330:18:22"},"returnParameters":{"id":6122,"nodeType":"ParameterList","parameters":[],"src":"4357:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6160,"nodeType":"FunctionDefinition","src":"4624:135:22","nodes":[],"body":{"id":6159,"nodeType":"Block","src":"4673:86:22","nodes":[],"statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":6150,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"4701:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4701:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6152,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6146,"src":"4714:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6149,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6104,"src":"4688:12:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4688:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6154,"nodeType":"EmitStatement","src":"4683:40:22"},{"expression":{"arguments":[{"id":6156,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6146,"src":"4743:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6155,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6143,"src":"4733:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4733:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6158,"nodeType":"ExpressionStatement","src":"4733:19:22"}]},"documentation":{"id":6144,"nodeType":"StructuredDocumentation","src":"4519:100:22","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4633:12:22","parameters":{"id":6147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6146,"mutability":"mutable","name":"newAdmin","nameLocation":"4654:8:22","nodeType":"VariableDeclaration","scope":6160,"src":"4646:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6145,"name":"address","nodeType":"ElementaryTypeName","src":"4646:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4645:18:22"},"returnParameters":{"id":6148,"nodeType":"ParameterList","parameters":[],"src":"4673:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6164,"nodeType":"VariableDeclaration","src":"5002:107:22","nodes":[],"constant":true,"documentation":{"id":6161,"nodeType":"StructuredDocumentation","src":"4765:232:22","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5028:12:22","scope":6257,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5002:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":6163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5043:66:22","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"id":6169,"nodeType":"EventDefinition","src":"5181:45:22","nodes":[],"anonymous":false,"documentation":{"id":6165,"nodeType":"StructuredDocumentation","src":"5116:60:22","text":" @dev Emitted when the beacon is upgraded."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","name":"BeaconUpgraded","nameLocation":"5187:14:22","parameters":{"id":6168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6167,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5218:6:22","nodeType":"VariableDeclaration","scope":6169,"src":"5202:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6166,"name":"address","nodeType":"ElementaryTypeName","src":"5202:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5201:24:22"}},{"id":6182,"nodeType":"FunctionDefinition","src":"5288:124:22","nodes":[],"body":{"id":6181,"nodeType":"Block","src":"5342:70:22","nodes":[],"statements":[{"expression":{"expression":{"arguments":[{"id":6177,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"5386:12:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6175,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"5359:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":6176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5371:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"5359:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":6178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5359:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":6179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5400:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"5359:46:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6174,"id":6180,"nodeType":"Return","src":"5352:53:22"}]},"documentation":{"id":6170,"nodeType":"StructuredDocumentation","src":"5232:51:22","text":" @dev Returns the current beacon."},"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5297:10:22","parameters":{"id":6171,"nodeType":"ParameterList","parameters":[],"src":"5307:2:22"},"returnParameters":{"id":6174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6182,"src":"5333:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6172,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5332:9:22"},"scope":6257,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":6218,"nodeType":"FunctionDefinition","src":"5494:371:22","nodes":[],"body":{"id":6217,"nodeType":"Block","src":"5541:324:22","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":6191,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"5578:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6189,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"5559:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6840_$","typeString":"type(library Address)"}},"id":6190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5567:10:22","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":6563,"src":"5559:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5559:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":6193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5590:39:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":6188,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5551:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5551:79:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6195,"nodeType":"ExpressionStatement","src":"5551:79:22"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6200,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"5688:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6199,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"5680:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$6319_$","typeString":"type(contract IBeacon)"}},"id":6201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5680:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$6319","typeString":"contract IBeacon"}},"id":6202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5699:14:22","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":6318,"src":"5680:33:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5680:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6197,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"5661:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6840_$","typeString":"type(library Address)"}},"id":6198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5669:10:22","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":6563,"src":"5661:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5661:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":6205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5730:50:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":6196,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5640:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5640:150:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6207,"nodeType":"ExpressionStatement","src":"5640:150:22"},{"expression":{"id":6215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":6211,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"5827:12:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6208,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6922,"src":"5800:11:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$6922_$","typeString":"type(library StorageSlot)"}},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5812:14:22","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":6888,"src":"5800:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$6868_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5800:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":6213,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5841:5:22","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":6867,"src":"5800:46:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6214,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"5849:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5800:58:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6216,"nodeType":"ExpressionStatement","src":"5800:58:22"}]},"documentation":{"id":6183,"nodeType":"StructuredDocumentation","src":"5418:71:22","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5503:10:22","parameters":{"id":6186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6185,"mutability":"mutable","name":"newBeacon","nameLocation":"5522:9:22","nodeType":"VariableDeclaration","scope":6218,"src":"5514:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6184,"name":"address","nodeType":"ElementaryTypeName","src":"5514:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5513:19:22"},"returnParameters":{"id":6187,"nodeType":"ParameterList","parameters":[],"src":"5541:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":6256,"nodeType":"FunctionDefinition","src":"6168:343:22","nodes":[],"body":{"id":6255,"nodeType":"Block","src":"6294:217:22","nodes":[],"statements":[{"expression":{"arguments":[{"id":6229,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"6315:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6228,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"6304:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6304:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6231,"nodeType":"ExpressionStatement","src":"6304:21:22"},{"eventCall":{"arguments":[{"id":6233,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"6355:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6232,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"6340:14:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6340:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6235,"nodeType":"EmitStatement","src":"6335:30:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6236,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"6379:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6384:6:22","memberName":"length","nodeType":"MemberAccess","src":"6379:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6393:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6379:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":6240,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6225,"src":"6398:9:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6379:28:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6254,"nodeType":"IfStatement","src":"6375:130:22","trueBody":{"id":6253,"nodeType":"Block","src":"6409:96:22","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6246,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6221,"src":"6460:9:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6245,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6319,"src":"6452:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$6319_$","typeString":"type(contract IBeacon)"}},"id":6247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6452:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$6319","typeString":"contract IBeacon"}},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6471:14:22","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":6318,"src":"6452:33:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6452:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6250,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6223,"src":"6489:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6242,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6840,"src":"6423:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$6840_$","typeString":"type(library Address)"}},"id":6244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6431:20:22","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":6773,"src":"6423:28:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:71:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6252,"nodeType":"ExpressionStatement","src":"6423:71:22"}]}}]},"documentation":{"id":6219,"nodeType":"StructuredDocumentation","src":"5871:292:22","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6177:23:22","parameters":{"id":6226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6221,"mutability":"mutable","name":"newBeacon","nameLocation":"6218:9:22","nodeType":"VariableDeclaration","scope":6256,"src":"6210:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6220,"name":"address","nodeType":"ElementaryTypeName","src":"6210:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6223,"mutability":"mutable","name":"data","nameLocation":"6250:4:22","nodeType":"VariableDeclaration","scope":6256,"src":"6237:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6222,"name":"bytes","nodeType":"ElementaryTypeName","src":"6237:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6225,"mutability":"mutable","name":"forceCall","nameLocation":"6269:9:22","nodeType":"VariableDeclaration","scope":6256,"src":"6264:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6224,"name":"bool","nodeType":"ElementaryTypeName","src":"6264:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6200:84:22"},"returnParameters":{"id":6227,"nodeType":"ParameterList","parameters":[],"src":"6294:0:22"},"scope":6257,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"ERC1967Upgrade","contractDependencies":[],"contractKind":"contract","documentation":{"id":5946,"nodeType":"StructuredDocumentation","src":"292:236:22","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"linearizedBaseContracts":[6257],"name":"ERC1967Upgrade","nameLocation":"547:14:22","scope":6258,"usedErrors":[],"usedEvents":[5958,6104,6169]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"id":23,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol","id":6310,"exportedSymbols":{"Proxy":[6309]},"nodeType":"SourceUnit","src":"99:3148:23","nodes":[{"id":6259,"nodeType":"PragmaDirective","src":"99:23:23","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6309,"nodeType":"ContractDefinition","src":"723:2523:23","nodes":[{"id":6268,"nodeType":"FunctionDefinition","src":"948:895:23","nodes":[],"body":{"id":6267,"nodeType":"Block","src":"1008:835:23","nodes":[],"statements":[{"AST":{"nativeSrc":"1027:810:23","nodeType":"YulBlock","src":"1027:810:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1280:1:23","nodeType":"YulLiteral","src":"1280:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"1283:1:23","nodeType":"YulLiteral","src":"1283:1:23","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"1286:12:23","nodeType":"YulIdentifier","src":"1286:12:23"},"nativeSrc":"1286:14:23","nodeType":"YulFunctionCall","src":"1286:14:23"}],"functionName":{"name":"calldatacopy","nativeSrc":"1267:12:23","nodeType":"YulIdentifier","src":"1267:12:23"},"nativeSrc":"1267:34:23","nodeType":"YulFunctionCall","src":"1267:34:23"},"nativeSrc":"1267:34:23","nodeType":"YulExpressionStatement","src":"1267:34:23"},{"nativeSrc":"1428:74:23","nodeType":"YulVariableDeclaration","src":"1428:74:23","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"1455:3:23","nodeType":"YulIdentifier","src":"1455:3:23"},"nativeSrc":"1455:5:23","nodeType":"YulFunctionCall","src":"1455:5:23"},{"name":"implementation","nativeSrc":"1462:14:23","nodeType":"YulIdentifier","src":"1462:14:23"},{"kind":"number","nativeSrc":"1478:1:23","nodeType":"YulLiteral","src":"1478:1:23","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"1481:12:23","nodeType":"YulIdentifier","src":"1481:12:23"},"nativeSrc":"1481:14:23","nodeType":"YulFunctionCall","src":"1481:14:23"},{"kind":"number","nativeSrc":"1497:1:23","nodeType":"YulLiteral","src":"1497:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"1500:1:23","nodeType":"YulLiteral","src":"1500:1:23","type":"","value":"0"}],"functionName":{"name":"delegatecall","nativeSrc":"1442:12:23","nodeType":"YulIdentifier","src":"1442:12:23"},"nativeSrc":"1442:60:23","nodeType":"YulFunctionCall","src":"1442:60:23"},"variables":[{"name":"result","nativeSrc":"1432:6:23","nodeType":"YulTypedName","src":"1432:6:23","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1570:1:23","nodeType":"YulLiteral","src":"1570:1:23","type":"","value":"0"},{"kind":"number","nativeSrc":"1573:1:23","nodeType":"YulLiteral","src":"1573:1:23","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"1576:14:23","nodeType":"YulIdentifier","src":"1576:14:23"},"nativeSrc":"1576:16:23","nodeType":"YulFunctionCall","src":"1576:16:23"}],"functionName":{"name":"returndatacopy","nativeSrc":"1555:14:23","nodeType":"YulIdentifier","src":"1555:14:23"},"nativeSrc":"1555:38:23","nodeType":"YulFunctionCall","src":"1555:38:23"},"nativeSrc":"1555:38:23","nodeType":"YulExpressionStatement","src":"1555:38:23"},{"cases":[{"body":{"nativeSrc":"1688:59:23","nodeType":"YulBlock","src":"1688:59:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1713:1:23","nodeType":"YulLiteral","src":"1713:1:23","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"1716:14:23","nodeType":"YulIdentifier","src":"1716:14:23"},"nativeSrc":"1716:16:23","nodeType":"YulFunctionCall","src":"1716:16:23"}],"functionName":{"name":"revert","nativeSrc":"1706:6:23","nodeType":"YulIdentifier","src":"1706:6:23"},"nativeSrc":"1706:27:23","nodeType":"YulFunctionCall","src":"1706:27:23"},"nativeSrc":"1706:27:23","nodeType":"YulExpressionStatement","src":"1706:27:23"}]},"nativeSrc":"1681:66:23","nodeType":"YulCase","src":"1681:66:23","value":{"kind":"number","nativeSrc":"1686:1:23","nodeType":"YulLiteral","src":"1686:1:23","type":"","value":"0"}},{"body":{"nativeSrc":"1768:59:23","nodeType":"YulBlock","src":"1768:59:23","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1793:1:23","nodeType":"YulLiteral","src":"1793:1:23","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"1796:14:23","nodeType":"YulIdentifier","src":"1796:14:23"},"nativeSrc":"1796:16:23","nodeType":"YulFunctionCall","src":"1796:16:23"}],"functionName":{"name":"return","nativeSrc":"1786:6:23","nodeType":"YulIdentifier","src":"1786:6:23"},"nativeSrc":"1786:27:23","nodeType":"YulFunctionCall","src":"1786:27:23"},"nativeSrc":"1786:27:23","nodeType":"YulExpressionStatement","src":"1786:27:23"}]},"nativeSrc":"1760:67:23","nodeType":"YulCase","src":"1760:67:23","value":"default"}],"expression":{"name":"result","nativeSrc":"1614:6:23","nodeType":"YulIdentifier","src":"1614:6:23"},"nativeSrc":"1607:220:23","nodeType":"YulSwitch","src":"1607:220:23"}]},"evmVersion":"cancun","externalReferences":[{"declaration":6263,"isOffset":false,"isSlot":false,"src":"1462:14:23","valueSize":1}],"id":6266,"nodeType":"InlineAssembly","src":"1018:819:23"}]},"documentation":{"id":6261,"nodeType":"StructuredDocumentation","src":"753:190:23","text":" @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."},"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"957:9:23","parameters":{"id":6264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6263,"mutability":"mutable","name":"implementation","nameLocation":"975:14:23","nodeType":"VariableDeclaration","scope":6268,"src":"967:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6262,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"966:24:23"},"returnParameters":{"id":6265,"nodeType":"ParameterList","parameters":[],"src":"1008:0:23"},"scope":6309,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":6274,"nodeType":"FunctionDefinition","src":"2027:67:23","nodes":[],"documentation":{"id":6269,"nodeType":"StructuredDocumentation","src":"1849:173:23","text":" @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n and {_fallback} should delegate."},"implemented":false,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"2036:15:23","parameters":{"id":6270,"nodeType":"ParameterList","parameters":[],"src":"2051:2:23"},"returnParameters":{"id":6273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6274,"src":"2085:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6271,"name":"address","nodeType":"ElementaryTypeName","src":"2085:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2084:9:23"},"scope":6309,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":6287,"nodeType":"FunctionDefinition","src":"2322:110:23","nodes":[],"body":{"id":6286,"nodeType":"Block","src":"2360:72:23","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6278,"name":"_beforeFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6308,"src":"2370:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2370:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6280,"nodeType":"ExpressionStatement","src":"2370:17:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":6282,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6274,"src":"2407:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:17:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6281,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"2397:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6285,"nodeType":"ExpressionStatement","src":"2397:28:23"}]},"documentation":{"id":6275,"nodeType":"StructuredDocumentation","src":"2100:217:23","text":" @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."},"implemented":true,"kind":"function","modifiers":[],"name":"_fallback","nameLocation":"2331:9:23","parameters":{"id":6276,"nodeType":"ParameterList","parameters":[],"src":"2340:2:23"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[],"src":"2360:0:23"},"scope":6309,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":6295,"nodeType":"FunctionDefinition","src":"2629:64:23","nodes":[],"body":{"id":6294,"nodeType":"Block","src":"2665:28:23","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6291,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"2675:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6293,"nodeType":"ExpressionStatement","src":"2675:11:23"}]},"documentation":{"id":6288,"nodeType":"StructuredDocumentation","src":"2438:186:23","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."},"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":6289,"nodeType":"ParameterList","parameters":[],"src":"2637:2:23"},"returnParameters":{"id":6290,"nodeType":"ParameterList","parameters":[],"src":"2665:0:23"},"scope":6309,"stateMutability":"payable","virtual":true,"visibility":"external"},{"id":6303,"nodeType":"FunctionDefinition","src":"2853:63:23","nodes":[],"body":{"id":6302,"nodeType":"Block","src":"2888:28:23","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6299,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"2898:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6301,"nodeType":"ExpressionStatement","src":"2898:11:23"}]},"documentation":{"id":6296,"nodeType":"StructuredDocumentation","src":"2699:149:23","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."},"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":6297,"nodeType":"ParameterList","parameters":[],"src":"2860:2:23"},"returnParameters":{"id":6298,"nodeType":"ParameterList","parameters":[],"src":"2888:0:23"},"scope":6309,"stateMutability":"payable","virtual":true,"visibility":"external"},{"id":6308,"nodeType":"FunctionDefinition","src":"3198:46:23","nodes":[],"body":{"id":6307,"nodeType":"Block","src":"3242:2:23","nodes":[],"statements":[]},"documentation":{"id":6304,"nodeType":"StructuredDocumentation","src":"2922:271:23","text":" @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overridden should call `super._beforeFallback()`."},"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"3207:15:23","parameters":{"id":6305,"nodeType":"ParameterList","parameters":[],"src":"3222:2:23"},"returnParameters":{"id":6306,"nodeType":"ParameterList","parameters":[],"src":"3242:0:23"},"scope":6309,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":6260,"nodeType":"StructuredDocumentation","src":"124:598:23","text":" @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."},"fullyImplemented":false,"linearizedBaseContracts":[6309],"name":"Proxy","nameLocation":"741:5:23","scope":6310,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"id":24,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol","id":6320,"exportedSymbols":{"IBeacon":[6319]},"nodeType":"SourceUnit","src":"93:357:24","nodes":[{"id":6311,"nodeType":"PragmaDirective","src":"93:23:24","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6319,"nodeType":"ContractDefinition","src":"198:251:24","nodes":[{"id":6318,"nodeType":"FunctionDefinition","src":"389:58:24","nodes":[],"documentation":{"id":6313,"nodeType":"StructuredDocumentation","src":"222:162:24","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"398:14:24","parameters":{"id":6314,"nodeType":"ParameterList","parameters":[],"src":"412:2:24"},"returnParameters":{"id":6317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6318,"src":"438:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6315,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:9:24"},"scope":6319,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":6312,"nodeType":"StructuredDocumentation","src":"118:79:24","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"linearizedBaseContracts":[6319],"name":"IBeacon","nameLocation":"208:7:24","scope":6320,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol":{"id":25,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol","id":6468,"exportedSymbols":{"Address":[6840],"ERC1967Proxy":[5939],"ERC1967Upgrade":[6257],"IBeacon":[6319],"IERC1822Proxiable":[5902],"Proxy":[6309],"StorageSlot":[6922],"TransparentUpgradeableProxy":[6467]},"nodeType":"SourceUnit","src":"133:4986:25","nodes":[{"id":6321,"nodeType":"PragmaDirective","src":"133:23:25","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6322,"nodeType":"ImportDirective","src":"158:37:25","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol","file":"../ERC1967/ERC1967Proxy.sol","nameLocation":"-1:-1:-1","scope":6468,"sourceUnit":5940,"symbolAliases":[],"unitAlias":""},{"id":6467,"nodeType":"ContractDefinition","src":"1649:3469:25","nodes":[{"id":6344,"nodeType":"FunctionDefinition","src":"1923:167:25","nodes":[],"body":{"id":6343,"nodeType":"Block","src":"2053:37:25","nodes":[],"statements":[{"expression":{"arguments":[{"id":6340,"name":"admin_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6330,"src":"2076:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6339,"name":"_changeAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"2063:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2063:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6342,"nodeType":"ExpressionStatement","src":"2063:20:25"}]},"documentation":{"id":6326,"nodeType":"StructuredDocumentation","src":"1708:210:25","text":" @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}."},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6335,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6328,"src":"2038:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6336,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6332,"src":"2046:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":6337,"kind":"baseConstructorSpecifier","modifierName":{"id":6334,"name":"ERC1967Proxy","nameLocations":["2025:12:25"],"nodeType":"IdentifierPath","referencedDeclaration":5939,"src":"2025:12:25"},"nodeType":"ModifierInvocation","src":"2025:27:25"}],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":6333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6328,"mutability":"mutable","name":"_logic","nameLocation":"1952:6:25","nodeType":"VariableDeclaration","scope":6344,"src":"1944:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6327,"name":"address","nodeType":"ElementaryTypeName","src":"1944:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6330,"mutability":"mutable","name":"admin_","nameLocation":"1976:6:25","nodeType":"VariableDeclaration","scope":6344,"src":"1968:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6329,"name":"address","nodeType":"ElementaryTypeName","src":"1968:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6332,"mutability":"mutable","name":"_data","nameLocation":"2005:5:25","nodeType":"VariableDeclaration","scope":6344,"src":"1992:18:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6331,"name":"bytes","nodeType":"ElementaryTypeName","src":"1992:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1934:82:25"},"returnParameters":{"id":6338,"nodeType":"ParameterList","parameters":[],"src":"2053:0:25"},"scope":6467,"stateMutability":"payable","virtual":false,"visibility":"public"},{"id":6360,"nodeType":"ModifierDefinition","src":"2231:134:25","nodes":[],"body":{"id":6359,"nodeType":"Block","src":"2250:115:25","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6347,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2264:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2268:6:25","memberName":"sender","nodeType":"MemberAccess","src":"2264:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6349,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"2278:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2278:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2264:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6357,"nodeType":"Block","src":"2323:36:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6354,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"2337:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2337:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6356,"nodeType":"ExpressionStatement","src":"2337:11:25"}]},"id":6358,"nodeType":"IfStatement","src":"2260:99:25","trueBody":{"id":6353,"nodeType":"Block","src":"2291:26:25","statements":[{"id":6352,"nodeType":"PlaceholderStatement","src":"2305:1:25"}]}}]},"documentation":{"id":6345,"nodeType":"StructuredDocumentation","src":"2096:130:25","text":" @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin."},"name":"ifAdmin","nameLocation":"2240:7:25","parameters":{"id":6346,"nodeType":"ParameterList","parameters":[],"src":"2247:2:25"},"virtual":false,"visibility":"internal"},{"id":6374,"nodeType":"FunctionDefinition","src":"2807:96:25","nodes":[],"body":{"id":6373,"nodeType":"Block","src":"2866:37:25","nodes":[],"statements":[{"expression":{"id":6371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6368,"name":"admin_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6366,"src":"2876:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":6369,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"2885:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2876:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6372,"nodeType":"ExpressionStatement","src":"2876:20:25"}]},"documentation":{"id":6361,"nodeType":"StructuredDocumentation","src":"2371:431:25","text":" @dev Returns the current admin.\n NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"},"functionSelector":"f851a440","implemented":true,"kind":"function","modifiers":[{"id":6364,"kind":"modifierInvocation","modifierName":{"id":6363,"name":"ifAdmin","nameLocations":["2833:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":6360,"src":"2833:7:25"},"nodeType":"ModifierInvocation","src":"2833:7:25"}],"name":"admin","nameLocation":"2816:5:25","parameters":{"id":6362,"nodeType":"ParameterList","parameters":[],"src":"2821:2:25"},"returnParameters":{"id":6367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6366,"mutability":"mutable","name":"admin_","nameLocation":"2858:6:25","nodeType":"VariableDeclaration","scope":6374,"src":"2850:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6365,"name":"address","nodeType":"ElementaryTypeName","src":"2850:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2849:16:25"},"scope":6467,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6388,"nodeType":"FunctionDefinition","src":"3363:129:25","nodes":[],"body":{"id":6387,"nodeType":"Block","src":"3440:52:25","nodes":[],"statements":[{"expression":{"id":6385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6382,"name":"implementation_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"3450:15:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":6383,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[5938],"referencedDeclaration":5938,"src":"3468:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3468:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3450:35:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6386,"nodeType":"ExpressionStatement","src":"3450:35:25"}]},"documentation":{"id":6375,"nodeType":"StructuredDocumentation","src":"2909:449:25","text":" @dev Returns the current implementation.\n NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"},"functionSelector":"5c60da1b","implemented":true,"kind":"function","modifiers":[{"id":6378,"kind":"modifierInvocation","modifierName":{"id":6377,"name":"ifAdmin","nameLocations":["3398:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":6360,"src":"3398:7:25"},"nodeType":"ModifierInvocation","src":"3398:7:25"}],"name":"implementation","nameLocation":"3372:14:25","parameters":{"id":6376,"nodeType":"ParameterList","parameters":[],"src":"3386:2:25"},"returnParameters":{"id":6381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6380,"mutability":"mutable","name":"implementation_","nameLocation":"3423:15:25","nodeType":"VariableDeclaration","scope":6388,"src":"3415:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6379,"name":"address","nodeType":"ElementaryTypeName","src":"3415:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3414:25:25"},"scope":6467,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6401,"nodeType":"FunctionDefinition","src":"3697:103:25","nodes":[],"body":{"id":6400,"nodeType":"Block","src":"3761:39:25","nodes":[],"statements":[{"expression":{"arguments":[{"id":6397,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6391,"src":"3784:8:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6396,"name":"_changeAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"3771:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3771:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6399,"nodeType":"ExpressionStatement","src":"3771:22:25"}]},"documentation":{"id":6389,"nodeType":"StructuredDocumentation","src":"3498:194:25","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event.\n NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."},"functionSelector":"8f283970","implemented":true,"kind":"function","modifiers":[{"id":6394,"kind":"modifierInvocation","modifierName":{"id":6393,"name":"ifAdmin","nameLocations":["3753:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":6360,"src":"3753:7:25"},"nodeType":"ModifierInvocation","src":"3753:7:25"}],"name":"changeAdmin","nameLocation":"3706:11:25","parameters":{"id":6392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6391,"mutability":"mutable","name":"newAdmin","nameLocation":"3726:8:25","nodeType":"VariableDeclaration","scope":6401,"src":"3718:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6390,"name":"address","nodeType":"ElementaryTypeName","src":"3718:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3717:18:25"},"returnParameters":{"id":6395,"nodeType":"ParameterList","parameters":[],"src":"3761:0:25"},"scope":6467,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":6419,"nodeType":"FunctionDefinition","src":"3960:134:25","nodes":[],"body":{"id":6418,"nodeType":"Block","src":"4023:71:25","nodes":[],"statements":[{"expression":{"arguments":[{"id":6410,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6404,"src":"4051:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"","id":6413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4076:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":6412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4070:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6411,"name":"bytes","nodeType":"ElementaryTypeName","src":"4070:5:25","typeDescriptions":{}}},"id":6414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4070:9:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":6415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4081:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6409,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"4033:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4033:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6417,"nodeType":"ExpressionStatement","src":"4033:54:25"}]},"documentation":{"id":6402,"nodeType":"StructuredDocumentation","src":"3806:149:25","text":" @dev Upgrade the implementation of the proxy.\n NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."},"functionSelector":"3659cfe6","implemented":true,"kind":"function","modifiers":[{"id":6407,"kind":"modifierInvocation","modifierName":{"id":6406,"name":"ifAdmin","nameLocations":["4015:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":6360,"src":"4015:7:25"},"nodeType":"ModifierInvocation","src":"4015:7:25"}],"name":"upgradeTo","nameLocation":"3969:9:25","parameters":{"id":6405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6404,"mutability":"mutable","name":"newImplementation","nameLocation":"3987:17:25","nodeType":"VariableDeclaration","scope":6419,"src":"3979:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6403,"name":"address","nodeType":"ElementaryTypeName","src":"3979:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3978:27:25"},"returnParameters":{"id":6408,"nodeType":"ParameterList","parameters":[],"src":"4023:0:25"},"scope":6467,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6436,"nodeType":"FunctionDefinition","src":"4470:164:25","nodes":[],"body":{"id":6435,"nodeType":"Block","src":"4569:65:25","nodes":[],"statements":[{"expression":{"arguments":[{"id":6430,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6422,"src":"4597:17:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6431,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6424,"src":"4616:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"hexValue":"74727565","id":6432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4622:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6429,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"4579:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":6433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4579:48:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6434,"nodeType":"ExpressionStatement","src":"4579:48:25"}]},"documentation":{"id":6420,"nodeType":"StructuredDocumentation","src":"4100:365:25","text":" @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n proxied contract.\n NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."},"functionSelector":"4f1ef286","implemented":true,"kind":"function","modifiers":[{"id":6427,"kind":"modifierInvocation","modifierName":{"id":6426,"name":"ifAdmin","nameLocations":["4561:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":6360,"src":"4561:7:25"},"nodeType":"ModifierInvocation","src":"4561:7:25"}],"name":"upgradeToAndCall","nameLocation":"4479:16:25","parameters":{"id":6425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6422,"mutability":"mutable","name":"newImplementation","nameLocation":"4504:17:25","nodeType":"VariableDeclaration","scope":6436,"src":"4496:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6421,"name":"address","nodeType":"ElementaryTypeName","src":"4496:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6424,"mutability":"mutable","name":"data","nameLocation":"4538:4:25","nodeType":"VariableDeclaration","scope":6436,"src":"4523:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6423,"name":"bytes","nodeType":"ElementaryTypeName","src":"4523:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4495:48:25"},"returnParameters":{"id":6428,"nodeType":"ParameterList","parameters":[],"src":"4569:0:25"},"scope":6467,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":6446,"nodeType":"FunctionDefinition","src":"4695:93:25","nodes":[],"body":{"id":6445,"nodeType":"Block","src":"4753:35:25","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6442,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"4770:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4770:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6441,"id":6444,"nodeType":"Return","src":"4763:18:25"}]},"documentation":{"id":6437,"nodeType":"StructuredDocumentation","src":"4640:50:25","text":" @dev Returns the current admin."},"implemented":true,"kind":"function","modifiers":[],"name":"_admin","nameLocation":"4704:6:25","parameters":{"id":6438,"nodeType":"ParameterList","parameters":[],"src":"4710:2:25"},"returnParameters":{"id":6441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6446,"src":"4744:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6439,"name":"address","nodeType":"ElementaryTypeName","src":"4744:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4743:9:25"},"scope":6467,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":6466,"nodeType":"FunctionDefinition","src":"4909:207:25","nodes":[],"body":{"id":6465,"nodeType":"Block","src":"4962:154:25","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6452,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4980:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4984:6:25","memberName":"sender","nodeType":"MemberAccess","src":"4980:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6454,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"4994:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4994:11:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4980:25:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73706172656e745570677261646561626c6550726f78793a2061646d696e2063616e6e6f742066616c6c6261636b20746f2070726f787920746172676574","id":6457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5007:68:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_f5d2ea39d7e6c7d19dc32ccc2bd7ca26b7aa4a603ef4aa6f2b205c93c3ffe43d","typeString":"literal_string \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\""},"value":"TransparentUpgradeableProxy: admin cannot fallback to proxy target"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f5d2ea39d7e6c7d19dc32ccc2bd7ca26b7aa4a603ef4aa6f2b205c93c3ffe43d","typeString":"literal_string \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\""}],"id":6451,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4972:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4972:104:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6459,"nodeType":"ExpressionStatement","src":"4972:104:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6460,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5086:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_TransparentUpgradeableProxy_$6467_$","typeString":"type(contract super TransparentUpgradeableProxy)"}},"id":6462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5092:15:25","memberName":"_beforeFallback","nodeType":"MemberAccess","referencedDeclaration":6308,"src":"5086:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5086:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6464,"nodeType":"ExpressionStatement","src":"5086:23:25"}]},"baseFunctions":[6308],"documentation":{"id":6447,"nodeType":"StructuredDocumentation","src":"4794:110:25","text":" @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}."},"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"4918:15:25","overrides":{"id":6449,"nodeType":"OverrideSpecifier","overrides":[],"src":"4953:8:25"},"parameters":{"id":6448,"nodeType":"ParameterList","parameters":[],"src":"4933:2:25"},"returnParameters":{"id":6450,"nodeType":"ParameterList","parameters":[],"src":"4962:0:25"},"scope":6467,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":6324,"name":"ERC1967Proxy","nameLocations":["1689:12:25"],"nodeType":"IdentifierPath","referencedDeclaration":5939,"src":"1689:12:25"},"id":6325,"nodeType":"InheritanceSpecifier","src":"1689:12:25"}],"canonicalName":"TransparentUpgradeableProxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":6323,"nodeType":"StructuredDocumentation","src":"197:1451:25","text":" @dev This contract implements a proxy that is upgradeable by an admin.\n To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n clashing], which can potentially be used in an attack, this contract uses the\n https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n things that go hand in hand:\n 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n that call matches one of the admin functions exposed by the proxy itself.\n 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n \"admin cannot fallback to proxy target\".\n These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n to sudden errors when trying to call a function from the proxy implementation.\n Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy."},"fullyImplemented":true,"linearizedBaseContracts":[6467,5939,6257,6309],"name":"TransparentUpgradeableProxy","nameLocation":"1658:27:25","scope":6468,"usedErrors":[],"usedEvents":[5958,6104,6169]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"id":26,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","id":6546,"exportedSymbols":{"IERC20":[6545]},"nodeType":"SourceUnit","src":"106:2661:26","nodes":[{"id":6469,"nodeType":"PragmaDirective","src":"106:23:26","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6545,"nodeType":"ContractDefinition","src":"202:2564:26","nodes":[{"id":6479,"nodeType":"EventDefinition","src":"388:72:26","nodes":[],"anonymous":false,"documentation":{"id":6471,"nodeType":"StructuredDocumentation","src":"225:158:26","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","name":"Transfer","nameLocation":"394:8:26","parameters":{"id":6478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6473,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:26","nodeType":"VariableDeclaration","scope":6479,"src":"403:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6472,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6475,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:26","nodeType":"VariableDeclaration","scope":6479,"src":"425:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6474,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6477,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:26","nodeType":"VariableDeclaration","scope":6479,"src":"445:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6476,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:26"}},{"id":6488,"nodeType":"EventDefinition","src":"619:78:26","nodes":[],"anonymous":false,"documentation":{"id":6480,"nodeType":"StructuredDocumentation","src":"466:148:26","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","name":"Approval","nameLocation":"625:8:26","parameters":{"id":6487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6482,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:26","nodeType":"VariableDeclaration","scope":6488,"src":"634:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6481,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6484,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:26","nodeType":"VariableDeclaration","scope":6488,"src":"657:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6483,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6486,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:26","nodeType":"VariableDeclaration","scope":6488,"src":"682:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6485,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:26"}},{"id":6494,"nodeType":"FunctionDefinition","src":"774:55:26","nodes":[],"documentation":{"id":6489,"nodeType":"StructuredDocumentation","src":"703:66:26","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:26","parameters":{"id":6490,"nodeType":"ParameterList","parameters":[],"src":"794:2:26"},"returnParameters":{"id":6493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6494,"src":"820:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6491,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:26"},"scope":6545,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":6502,"nodeType":"FunctionDefinition","src":"912:68:26","nodes":[],"documentation":{"id":6495,"nodeType":"StructuredDocumentation","src":"835:72:26","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:26","parameters":{"id":6498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6497,"mutability":"mutable","name":"account","nameLocation":"939:7:26","nodeType":"VariableDeclaration","scope":6502,"src":"931:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6496,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:26"},"returnParameters":{"id":6501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6502,"src":"971:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6499,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:26"},"scope":6545,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":6512,"nodeType":"FunctionDefinition","src":"1193:70:26","nodes":[],"documentation":{"id":6503,"nodeType":"StructuredDocumentation","src":"986:202:26","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:26","parameters":{"id":6508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6505,"mutability":"mutable","name":"to","nameLocation":"1219:2:26","nodeType":"VariableDeclaration","scope":6512,"src":"1211:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6504,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6507,"mutability":"mutable","name":"amount","nameLocation":"1231:6:26","nodeType":"VariableDeclaration","scope":6512,"src":"1223:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:26"},"returnParameters":{"id":6511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6512,"src":"1257:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6509,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:26"},"scope":6545,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6522,"nodeType":"FunctionDefinition","src":"1538:83:26","nodes":[],"documentation":{"id":6513,"nodeType":"StructuredDocumentation","src":"1269:264:26","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:26","parameters":{"id":6518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6515,"mutability":"mutable","name":"owner","nameLocation":"1565:5:26","nodeType":"VariableDeclaration","scope":6522,"src":"1557:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6514,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6517,"mutability":"mutable","name":"spender","nameLocation":"1580:7:26","nodeType":"VariableDeclaration","scope":6522,"src":"1572:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6516,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:26"},"returnParameters":{"id":6521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6522,"src":"1612:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6519,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:26"},"scope":6545,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":6532,"nodeType":"FunctionDefinition","src":"2274:74:26","nodes":[],"documentation":{"id":6523,"nodeType":"StructuredDocumentation","src":"1627:642:26","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:26","parameters":{"id":6528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6525,"mutability":"mutable","name":"spender","nameLocation":"2299:7:26","nodeType":"VariableDeclaration","scope":6532,"src":"2291:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6524,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6527,"mutability":"mutable","name":"amount","nameLocation":"2316:6:26","nodeType":"VariableDeclaration","scope":6532,"src":"2308:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6526,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:26"},"returnParameters":{"id":6531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6532,"src":"2342:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6529,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:26"},"scope":6545,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":6544,"nodeType":"FunctionDefinition","src":"2646:118:26","nodes":[],"documentation":{"id":6533,"nodeType":"StructuredDocumentation","src":"2354:287:26","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:26","parameters":{"id":6540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6535,"mutability":"mutable","name":"from","nameLocation":"2685:4:26","nodeType":"VariableDeclaration","scope":6544,"src":"2677:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6534,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6537,"mutability":"mutable","name":"to","nameLocation":"2707:2:26","nodeType":"VariableDeclaration","scope":6544,"src":"2699:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6536,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6539,"mutability":"mutable","name":"amount","nameLocation":"2727:6:26","nodeType":"VariableDeclaration","scope":6544,"src":"2719:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:26"},"returnParameters":{"id":6543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6544,"src":"2758:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6541,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:26"},"scope":6545,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":6470,"nodeType":"StructuredDocumentation","src":"131:70:26","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"linearizedBaseContracts":[6545],"name":"IERC20","nameLocation":"212:6:26","scope":6546,"usedErrors":[],"usedEvents":[6479,6488]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"id":27,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol","id":6841,"exportedSymbols":{"Address":[6840]},"nodeType":"SourceUnit","src":"101:8205:27","nodes":[{"id":6547,"nodeType":"PragmaDirective","src":"101:23:27","nodes":[],"literals":["solidity","^","0.8",".1"]},{"id":6840,"nodeType":"ContractDefinition","src":"194:8111:27","nodes":[{"id":6563,"nodeType":"FunctionDefinition","src":"1175:320:27","nodes":[],"body":{"id":6562,"nodeType":"Block","src":"1241:254:27","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":6556,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"1465:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:27","memberName":"code","nodeType":"MemberAccess","src":"1465:12:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:27","memberName":"length","nodeType":"MemberAccess","src":"1465:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6555,"id":6561,"nodeType":"Return","src":"1458:30:27"}]},"documentation":{"id":6549,"nodeType":"StructuredDocumentation","src":"216:954:27","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:27","parameters":{"id":6552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6551,"mutability":"mutable","name":"account","nameLocation":"1203:7:27","nodeType":"VariableDeclaration","scope":6563,"src":"1195:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6550,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:27"},"returnParameters":{"id":6555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6563,"src":"1235:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6553,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:27"},"scope":6840,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":6597,"nodeType":"FunctionDefinition","src":"2412:312:27","nodes":[],"body":{"id":6596,"nodeType":"Block","src":"2483:241:27","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":6574,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6840","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6840","typeString":"library Address"}],"id":6573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6572,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:27","typeDescriptions":{}}},"id":6575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:27","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6577,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6568,"src":"2526:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":6579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":6571,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2493:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6581,"nodeType":"ExpressionStatement","src":"2493:73:27"},{"assignments":[6583,null],"declarations":[{"constant":false,"id":6583,"mutability":"mutable","name":"success","nameLocation":"2583:7:27","nodeType":"VariableDeclaration","scope":6596,"src":"2578:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6582,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6590,"initialValue":{"arguments":[{"hexValue":"","id":6588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":6584,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6566,"src":"2596:9:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":6585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:27","memberName":"call","nodeType":"MemberAccess","src":"2596:14:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6586,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6568,"src":"2618:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:27"},{"expression":{"arguments":[{"id":6592,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6583,"src":"2647:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":6593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":6591,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2639:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6595,"nodeType":"ExpressionStatement","src":"2639:78:27"}]},"documentation":{"id":6564,"nodeType":"StructuredDocumentation","src":"1501:906:27","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:27","parameters":{"id":6569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6566,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:27","nodeType":"VariableDeclaration","scope":6597,"src":"2431:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6565,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":6568,"mutability":"mutable","name":"amount","nameLocation":"2466:6:27","nodeType":"VariableDeclaration","scope":6597,"src":"2458:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6567,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:27"},"returnParameters":{"id":6570,"nodeType":"ParameterList","parameters":[],"src":"2483:0:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6614,"nodeType":"FunctionDefinition","src":"3466:173:27","nodes":[],"body":{"id":6613,"nodeType":"Block","src":"3555:84:27","nodes":[],"statements":[{"expression":{"arguments":[{"id":6608,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6600,"src":"3585:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6609,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6602,"src":"3593:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":6610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3599:32:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":6607,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[6614,6634],"referencedDeclaration":6634,"src":"3572:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":6611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6606,"id":6612,"nodeType":"Return","src":"3565:67:27"}]},"documentation":{"id":6598,"nodeType":"StructuredDocumentation","src":"2730:731:27","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:27","parameters":{"id":6603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6600,"mutability":"mutable","name":"target","nameLocation":"3496:6:27","nodeType":"VariableDeclaration","scope":6614,"src":"3488:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6599,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6602,"mutability":"mutable","name":"data","nameLocation":"3517:4:27","nodeType":"VariableDeclaration","scope":6614,"src":"3504:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6601,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:27"},"returnParameters":{"id":6606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6614,"src":"3541:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6604,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6634,"nodeType":"FunctionDefinition","src":"3861:223:27","nodes":[],"body":{"id":6633,"nodeType":"Block","src":"4008:76:27","nodes":[],"statements":[{"expression":{"arguments":[{"id":6627,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6617,"src":"4047:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6628,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"4055:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":6629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4061:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":6630,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6621,"src":"4064:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6626,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[6654,6704],"referencedDeclaration":6704,"src":"4025:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":6631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4025:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6625,"id":6632,"nodeType":"Return","src":"4018:59:27"}]},"documentation":{"id":6615,"nodeType":"StructuredDocumentation","src":"3645:211:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3870:12:27","parameters":{"id":6622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6617,"mutability":"mutable","name":"target","nameLocation":"3900:6:27","nodeType":"VariableDeclaration","scope":6634,"src":"3892:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6616,"name":"address","nodeType":"ElementaryTypeName","src":"3892:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6619,"mutability":"mutable","name":"data","nameLocation":"3929:4:27","nodeType":"VariableDeclaration","scope":6634,"src":"3916:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6618,"name":"bytes","nodeType":"ElementaryTypeName","src":"3916:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6621,"mutability":"mutable","name":"errorMessage","nameLocation":"3957:12:27","nodeType":"VariableDeclaration","scope":6634,"src":"3943:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6620,"name":"string","nodeType":"ElementaryTypeName","src":"3943:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3882:93:27"},"returnParameters":{"id":6625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6634,"src":"3994:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6623,"name":"bytes","nodeType":"ElementaryTypeName","src":"3994:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3993:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6654,"nodeType":"FunctionDefinition","src":"4446:254:27","nodes":[],"body":{"id":6653,"nodeType":"Block","src":"4589:111:27","nodes":[],"statements":[{"expression":{"arguments":[{"id":6647,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"4628:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6648,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6639,"src":"4636:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6641,"src":"4642:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":6650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4649:43:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":6646,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[6654,6704],"referencedDeclaration":6704,"src":"4606:21:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":6651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4606:87:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6645,"id":6652,"nodeType":"Return","src":"4599:94:27"}]},"documentation":{"id":6635,"nodeType":"StructuredDocumentation","src":"4090:351:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4455:21:27","parameters":{"id":6642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6637,"mutability":"mutable","name":"target","nameLocation":"4494:6:27","nodeType":"VariableDeclaration","scope":6654,"src":"4486:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6636,"name":"address","nodeType":"ElementaryTypeName","src":"4486:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6639,"mutability":"mutable","name":"data","nameLocation":"4523:4:27","nodeType":"VariableDeclaration","scope":6654,"src":"4510:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6638,"name":"bytes","nodeType":"ElementaryTypeName","src":"4510:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6641,"mutability":"mutable","name":"value","nameLocation":"4545:5:27","nodeType":"VariableDeclaration","scope":6654,"src":"4537:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6640,"name":"uint256","nodeType":"ElementaryTypeName","src":"4537:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4476:80:27"},"returnParameters":{"id":6645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6644,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6654,"src":"4575:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6643,"name":"bytes","nodeType":"ElementaryTypeName","src":"4575:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4574:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6704,"nodeType":"FunctionDefinition","src":"4948:499:27","nodes":[],"body":{"id":6703,"nodeType":"Block","src":"5127:320:27","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":6671,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5153:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$6840","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$6840","typeString":"library Address"}],"id":6670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5145:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6669,"name":"address","nodeType":"ElementaryTypeName","src":"5145:7:27","typeDescriptions":{}}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5145:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5159:7:27","memberName":"balance","nodeType":"MemberAccess","src":"5145:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6674,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6661,"src":"5170:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5145:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":6676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5177:40:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":6668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5137:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:81:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6678,"nodeType":"ExpressionStatement","src":"5137:81:27"},{"expression":{"arguments":[{"arguments":[{"id":6681,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6657,"src":"5247:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6680,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6563,"src":"5236:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5236:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":6683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5256:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":6679,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5228:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5228:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6685,"nodeType":"ExpressionStatement","src":"5228:60:27"},{"assignments":[6687,6689],"declarations":[{"constant":false,"id":6687,"mutability":"mutable","name":"success","nameLocation":"5305:7:27","nodeType":"VariableDeclaration","scope":6703,"src":"5300:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6686,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6689,"mutability":"mutable","name":"returndata","nameLocation":"5327:10:27","nodeType":"VariableDeclaration","scope":6703,"src":"5314:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6688,"name":"bytes","nodeType":"ElementaryTypeName","src":"5314:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6696,"initialValue":{"arguments":[{"id":6694,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6659,"src":"5367:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6690,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6657,"src":"5341:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5348:4:27","memberName":"call","nodeType":"MemberAccess","src":"5341:11:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6661,"src":"5360:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5341:25:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5299:73:27"},{"expression":{"arguments":[{"id":6698,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6687,"src":"5406:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6699,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"5415:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6700,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"5427:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6697,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6839,"src":"5389:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":6701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6667,"id":6702,"nodeType":"Return","src":"5382:58:27"}]},"documentation":{"id":6655,"nodeType":"StructuredDocumentation","src":"4706:237:27","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4957:21:27","parameters":{"id":6664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6657,"mutability":"mutable","name":"target","nameLocation":"4996:6:27","nodeType":"VariableDeclaration","scope":6704,"src":"4988:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6656,"name":"address","nodeType":"ElementaryTypeName","src":"4988:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6659,"mutability":"mutable","name":"data","nameLocation":"5025:4:27","nodeType":"VariableDeclaration","scope":6704,"src":"5012:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6658,"name":"bytes","nodeType":"ElementaryTypeName","src":"5012:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6661,"mutability":"mutable","name":"value","nameLocation":"5047:5:27","nodeType":"VariableDeclaration","scope":6704,"src":"5039:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6660,"name":"uint256","nodeType":"ElementaryTypeName","src":"5039:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6663,"mutability":"mutable","name":"errorMessage","nameLocation":"5076:12:27","nodeType":"VariableDeclaration","scope":6704,"src":"5062:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6662,"name":"string","nodeType":"ElementaryTypeName","src":"5062:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4978:116:27"},"returnParameters":{"id":6667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6704,"src":"5113:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6665,"name":"bytes","nodeType":"ElementaryTypeName","src":"5113:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5112:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6721,"nodeType":"FunctionDefinition","src":"5624:197:27","nodes":[],"body":{"id":6720,"nodeType":"Block","src":"5724:97:27","nodes":[],"statements":[{"expression":{"arguments":[{"id":6715,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6707,"src":"5760:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6716,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6709,"src":"5768:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":6717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5774:39:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":6714,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[6721,6756],"referencedDeclaration":6756,"src":"5741:18:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":6718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5741:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6713,"id":6719,"nodeType":"Return","src":"5734:80:27"}]},"documentation":{"id":6705,"nodeType":"StructuredDocumentation","src":"5453:166:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5633:18:27","parameters":{"id":6710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6707,"mutability":"mutable","name":"target","nameLocation":"5660:6:27","nodeType":"VariableDeclaration","scope":6721,"src":"5652:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6706,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6709,"mutability":"mutable","name":"data","nameLocation":"5681:4:27","nodeType":"VariableDeclaration","scope":6721,"src":"5668:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6708,"name":"bytes","nodeType":"ElementaryTypeName","src":"5668:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5651:35:27"},"returnParameters":{"id":6713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6721,"src":"5710:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6711,"name":"bytes","nodeType":"ElementaryTypeName","src":"5710:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5709:14:27"},"scope":6840,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":6756,"nodeType":"FunctionDefinition","src":"6005:386:27","nodes":[],"body":{"id":6755,"nodeType":"Block","src":"6163:228:27","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":6735,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6724,"src":"6192:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6734,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6563,"src":"6181:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6181:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":6737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6201:38:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":6733,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6173:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6173:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6739,"nodeType":"ExpressionStatement","src":"6173:67:27"},{"assignments":[6741,6743],"declarations":[{"constant":false,"id":6741,"mutability":"mutable","name":"success","nameLocation":"6257:7:27","nodeType":"VariableDeclaration","scope":6755,"src":"6252:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6740,"name":"bool","nodeType":"ElementaryTypeName","src":"6252:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6743,"mutability":"mutable","name":"returndata","nameLocation":"6279:10:27","nodeType":"VariableDeclaration","scope":6755,"src":"6266:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6742,"name":"bytes","nodeType":"ElementaryTypeName","src":"6266:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6748,"initialValue":{"arguments":[{"id":6746,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6726,"src":"6311:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6744,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6724,"src":"6293:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6300:10:27","memberName":"staticcall","nodeType":"MemberAccess","src":"6293:17:27","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":6747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6251:65:27"},{"expression":{"arguments":[{"id":6750,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6741,"src":"6350:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6751,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6743,"src":"6359:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6752,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"6371:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6749,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6839,"src":"6333:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":6753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6732,"id":6754,"nodeType":"Return","src":"6326:58:27"}]},"documentation":{"id":6722,"nodeType":"StructuredDocumentation","src":"5827:173:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6014:18:27","parameters":{"id":6729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6724,"mutability":"mutable","name":"target","nameLocation":"6050:6:27","nodeType":"VariableDeclaration","scope":6756,"src":"6042:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6723,"name":"address","nodeType":"ElementaryTypeName","src":"6042:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6726,"mutability":"mutable","name":"data","nameLocation":"6079:4:27","nodeType":"VariableDeclaration","scope":6756,"src":"6066:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6725,"name":"bytes","nodeType":"ElementaryTypeName","src":"6066:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6728,"mutability":"mutable","name":"errorMessage","nameLocation":"6107:12:27","nodeType":"VariableDeclaration","scope":6756,"src":"6093:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6727,"name":"string","nodeType":"ElementaryTypeName","src":"6093:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6032:93:27"},"returnParameters":{"id":6732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6756,"src":"6149:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6730,"name":"bytes","nodeType":"ElementaryTypeName","src":"6149:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6148:14:27"},"scope":6840,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":6773,"nodeType":"FunctionDefinition","src":"6570:198:27","nodes":[],"body":{"id":6772,"nodeType":"Block","src":"6667:101:27","nodes":[],"statements":[{"expression":{"arguments":[{"id":6767,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6759,"src":"6705:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6768,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"6713:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":6769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6719:41:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":6766,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[6773,6808],"referencedDeclaration":6808,"src":"6684:20:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":6770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6684:77:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6765,"id":6771,"nodeType":"Return","src":"6677:84:27"}]},"documentation":{"id":6757,"nodeType":"StructuredDocumentation","src":"6397:168:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6579:20:27","parameters":{"id":6762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6759,"mutability":"mutable","name":"target","nameLocation":"6608:6:27","nodeType":"VariableDeclaration","scope":6773,"src":"6600:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6758,"name":"address","nodeType":"ElementaryTypeName","src":"6600:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6761,"mutability":"mutable","name":"data","nameLocation":"6629:4:27","nodeType":"VariableDeclaration","scope":6773,"src":"6616:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6760,"name":"bytes","nodeType":"ElementaryTypeName","src":"6616:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6599:35:27"},"returnParameters":{"id":6765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6773,"src":"6653:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6763,"name":"bytes","nodeType":"ElementaryTypeName","src":"6653:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6652:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6808,"nodeType":"FunctionDefinition","src":"6954:387:27","nodes":[],"body":{"id":6807,"nodeType":"Block","src":"7109:232:27","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":6787,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6776,"src":"7138:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6786,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6563,"src":"7127:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":6788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7127:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":6789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7147:40:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":6785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7119:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7119:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6791,"nodeType":"ExpressionStatement","src":"7119:69:27"},{"assignments":[6793,6795],"declarations":[{"constant":false,"id":6793,"mutability":"mutable","name":"success","nameLocation":"7205:7:27","nodeType":"VariableDeclaration","scope":6807,"src":"7200:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6792,"name":"bool","nodeType":"ElementaryTypeName","src":"7200:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6795,"mutability":"mutable","name":"returndata","nameLocation":"7227:10:27","nodeType":"VariableDeclaration","scope":6807,"src":"7214:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6794,"name":"bytes","nodeType":"ElementaryTypeName","src":"7214:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6800,"initialValue":{"arguments":[{"id":6798,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6778,"src":"7261:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6796,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6776,"src":"7241:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7248:12:27","memberName":"delegatecall","nodeType":"MemberAccess","src":"7241:19:27","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":6799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7241:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7199:67:27"},{"expression":{"arguments":[{"id":6802,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6793,"src":"7300:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6803,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6795,"src":"7309:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":6804,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6780,"src":"7321:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6801,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6839,"src":"7283:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":6805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6784,"id":6806,"nodeType":"Return","src":"7276:58:27"}]},"documentation":{"id":6774,"nodeType":"StructuredDocumentation","src":"6774:175:27","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6963:20:27","parameters":{"id":6781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6776,"mutability":"mutable","name":"target","nameLocation":"7001:6:27","nodeType":"VariableDeclaration","scope":6808,"src":"6993:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6775,"name":"address","nodeType":"ElementaryTypeName","src":"6993:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6778,"mutability":"mutable","name":"data","nameLocation":"7030:4:27","nodeType":"VariableDeclaration","scope":6808,"src":"7017:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6777,"name":"bytes","nodeType":"ElementaryTypeName","src":"7017:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6780,"mutability":"mutable","name":"errorMessage","nameLocation":"7058:12:27","nodeType":"VariableDeclaration","scope":6808,"src":"7044:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6779,"name":"string","nodeType":"ElementaryTypeName","src":"7044:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6983:93:27"},"returnParameters":{"id":6784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6808,"src":"7095:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6782,"name":"bytes","nodeType":"ElementaryTypeName","src":"7095:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7094:14:27"},"scope":6840,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":6839,"nodeType":"FunctionDefinition","src":"7561:742:27","nodes":[],"body":{"id":6838,"nodeType":"Block","src":"7721:582:27","nodes":[],"statements":[{"condition":{"id":6820,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6811,"src":"7735:7:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6836,"nodeType":"Block","src":"7792:505:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6824,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6813,"src":"7876:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7887:6:27","memberName":"length","nodeType":"MemberAccess","src":"7876:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7876:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6834,"nodeType":"Block","src":"8234:53:27","statements":[{"expression":{"arguments":[{"id":6831,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6815,"src":"8259:12:27","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6830,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8252:6:27","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":6832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8252:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6833,"nodeType":"ExpressionStatement","src":"8252:20:27"}]},"id":6835,"nodeType":"IfStatement","src":"7872:415:27","trueBody":{"id":6829,"nodeType":"Block","src":"7899:329:27","statements":[{"AST":{"nativeSrc":"8069:145:27","nodeType":"YulBlock","src":"8069:145:27","statements":[{"nativeSrc":"8091:40:27","nodeType":"YulVariableDeclaration","src":"8091:40:27","value":{"arguments":[{"name":"returndata","nativeSrc":"8120:10:27","nodeType":"YulIdentifier","src":"8120:10:27"}],"functionName":{"name":"mload","nativeSrc":"8114:5:27","nodeType":"YulIdentifier","src":"8114:5:27"},"nativeSrc":"8114:17:27","nodeType":"YulFunctionCall","src":"8114:17:27"},"variables":[{"name":"returndata_size","nativeSrc":"8095:15:27","nodeType":"YulTypedName","src":"8095:15:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"8163:2:27","nodeType":"YulLiteral","src":"8163:2:27","type":"","value":"32"},{"name":"returndata","nativeSrc":"8167:10:27","nodeType":"YulIdentifier","src":"8167:10:27"}],"functionName":{"name":"add","nativeSrc":"8159:3:27","nodeType":"YulIdentifier","src":"8159:3:27"},"nativeSrc":"8159:19:27","nodeType":"YulFunctionCall","src":"8159:19:27"},{"name":"returndata_size","nativeSrc":"8180:15:27","nodeType":"YulIdentifier","src":"8180:15:27"}],"functionName":{"name":"revert","nativeSrc":"8152:6:27","nodeType":"YulIdentifier","src":"8152:6:27"},"nativeSrc":"8152:44:27","nodeType":"YulFunctionCall","src":"8152:44:27"},"nativeSrc":"8152:44:27","nodeType":"YulExpressionStatement","src":"8152:44:27"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6813,"isOffset":false,"isSlot":false,"src":"8120:10:27","valueSize":1},{"declaration":6813,"isOffset":false,"isSlot":false,"src":"8167:10:27","valueSize":1}],"id":6828,"nodeType":"InlineAssembly","src":"8060:154:27"}]}}]},"id":6837,"nodeType":"IfStatement","src":"7731:566:27","trueBody":{"id":6823,"nodeType":"Block","src":"7744:42:27","statements":[{"expression":{"id":6821,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6813,"src":"7765:10:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":6819,"id":6822,"nodeType":"Return","src":"7758:17:27"}]}}]},"documentation":{"id":6809,"nodeType":"StructuredDocumentation","src":"7347:209:27","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7570:16:27","parameters":{"id":6816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6811,"mutability":"mutable","name":"success","nameLocation":"7601:7:27","nodeType":"VariableDeclaration","scope":6839,"src":"7596:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6810,"name":"bool","nodeType":"ElementaryTypeName","src":"7596:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6813,"mutability":"mutable","name":"returndata","nameLocation":"7631:10:27","nodeType":"VariableDeclaration","scope":6839,"src":"7618:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6812,"name":"bytes","nodeType":"ElementaryTypeName","src":"7618:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6815,"mutability":"mutable","name":"errorMessage","nameLocation":"7665:12:27","nodeType":"VariableDeclaration","scope":6839,"src":"7651:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6814,"name":"string","nodeType":"ElementaryTypeName","src":"7651:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7586:97:27"},"returnParameters":{"id":6819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6839,"src":"7707:12:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6817,"name":"bytes","nodeType":"ElementaryTypeName","src":"7707:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7706:14:27"},"scope":6840,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":6548,"nodeType":"StructuredDocumentation","src":"126:67:27","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"linearizedBaseContracts":[6840],"name":"Address","nameLocation":"202:7:27","scope":6841,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"id":28,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Context.sol","id":6863,"exportedSymbols":{"Context":[6862]},"nodeType":"SourceUnit","src":"86:758:28","nodes":[{"id":6842,"nodeType":"PragmaDirective","src":"86:23:28","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6862,"nodeType":"ContractDefinition","src":"608:235:28","nodes":[{"id":6852,"nodeType":"FunctionDefinition","src":"640:96:28","nodes":[],"body":{"id":6851,"nodeType":"Block","src":"702:34:28","nodes":[],"statements":[{"expression":{"expression":{"id":6848,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:28","memberName":"sender","nodeType":"MemberAccess","src":"719:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6847,"id":6850,"nodeType":"Return","src":"712:17:28"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:28","parameters":{"id":6844,"nodeType":"ParameterList","parameters":[],"src":"659:2:28"},"returnParameters":{"id":6847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6852,"src":"693:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6845,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:28"},"scope":6862,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":6861,"nodeType":"FunctionDefinition","src":"742:99:28","nodes":[],"body":{"id":6860,"nodeType":"Block","src":"809:32:28","nodes":[],"statements":[{"expression":{"expression":{"id":6857,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:28","memberName":"data","nodeType":"MemberAccess","src":"826:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":6856,"id":6859,"nodeType":"Return","src":"819:15:28"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:28","parameters":{"id":6853,"nodeType":"ParameterList","parameters":[],"src":"759:2:28"},"returnParameters":{"id":6856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6861,"src":"793:14:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":6854,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:28"},"scope":6862,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":6843,"nodeType":"StructuredDocumentation","src":"111:496:28","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"linearizedBaseContracts":[6862],"name":"Context","nameLocation":"626:7:28","scope":6863,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"id":29,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol","id":6923,"exportedSymbols":{"StorageSlot":[6922]},"nodeType":"SourceUnit","src":"105:2566:29","nodes":[{"id":6864,"nodeType":"PragmaDirective","src":"105:23:29","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":6922,"nodeType":"ContractDefinition","src":"1279:1391:29","nodes":[{"id":6868,"nodeType":"StructDefinition","src":"1305:49:29","nodes":[],"canonicalName":"StorageSlot.AddressSlot","members":[{"constant":false,"id":6867,"mutability":"mutable","name":"value","nameLocation":"1342:5:29","nodeType":"VariableDeclaration","scope":6868,"src":"1334:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6866,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:29","scope":6922,"visibility":"public"},{"id":6871,"nodeType":"StructDefinition","src":"1360:46:29","nodes":[],"canonicalName":"StorageSlot.BooleanSlot","members":[{"constant":false,"id":6870,"mutability":"mutable","name":"value","nameLocation":"1394:5:29","nodeType":"VariableDeclaration","scope":6871,"src":"1389:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6869,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:29","scope":6922,"visibility":"public"},{"id":6874,"nodeType":"StructDefinition","src":"1412:49:29","nodes":[],"canonicalName":"StorageSlot.Bytes32Slot","members":[{"constant":false,"id":6873,"mutability":"mutable","name":"value","nameLocation":"1449:5:29","nodeType":"VariableDeclaration","scope":6874,"src":"1441:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:29","scope":6922,"visibility":"public"},{"id":6877,"nodeType":"StructDefinition","src":"1467:49:29","nodes":[],"canonicalName":"StorageSlot.Uint256Slot","members":[{"constant":false,"id":6876,"mutability":"mutable","name":"value","nameLocation":"1504:5:29","nodeType":"VariableDeclaration","scope":6877,"src":"1496:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:29","scope":6922,"visibility":"public"},{"id":6888,"nodeType":"FunctionDefinition","src":"1614:190:29","nodes":[],"body":{"id":6887,"nodeType":"Block","src":"1698:106:29","nodes":[],"statements":[{"AST":{"nativeSrc":"1760:38:29","nodeType":"YulBlock","src":"1760:38:29","statements":[{"nativeSrc":"1774:14:29","nodeType":"YulAssignment","src":"1774:14:29","value":{"name":"slot","nativeSrc":"1784:4:29","nodeType":"YulIdentifier","src":"1784:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:29","nodeType":"YulIdentifier","src":"1774:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6884,"isOffset":false,"isSlot":true,"src":"1774:6:29","suffix":"slot","valueSize":1},{"declaration":6880,"isOffset":false,"isSlot":false,"src":"1784:4:29","valueSize":1}],"id":6886,"nodeType":"InlineAssembly","src":"1751:47:29"}]},"documentation":{"id":6878,"nodeType":"StructuredDocumentation","src":"1522:87:29","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:29","parameters":{"id":6881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6880,"mutability":"mutable","name":"slot","nameLocation":"1646:4:29","nodeType":"VariableDeclaration","scope":6888,"src":"1638:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:29"},"returnParameters":{"id":6885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6884,"mutability":"mutable","name":"r","nameLocation":"1695:1:29","nodeType":"VariableDeclaration","scope":6888,"src":"1675:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":6883,"nodeType":"UserDefinedTypeName","pathNode":{"id":6882,"name":"AddressSlot","nameLocations":["1675:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":6868,"src":"1675:11:29"},"referencedDeclaration":6868,"src":"1675:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$6868_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:29"},"scope":6922,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":6899,"nodeType":"FunctionDefinition","src":"1902:190:29","nodes":[],"body":{"id":6898,"nodeType":"Block","src":"1986:106:29","nodes":[],"statements":[{"AST":{"nativeSrc":"2048:38:29","nodeType":"YulBlock","src":"2048:38:29","statements":[{"nativeSrc":"2062:14:29","nodeType":"YulAssignment","src":"2062:14:29","value":{"name":"slot","nativeSrc":"2072:4:29","nodeType":"YulIdentifier","src":"2072:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:29","nodeType":"YulIdentifier","src":"2062:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6895,"isOffset":false,"isSlot":true,"src":"2062:6:29","suffix":"slot","valueSize":1},{"declaration":6891,"isOffset":false,"isSlot":false,"src":"2072:4:29","valueSize":1}],"id":6897,"nodeType":"InlineAssembly","src":"2039:47:29"}]},"documentation":{"id":6889,"nodeType":"StructuredDocumentation","src":"1810:87:29","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:29","parameters":{"id":6892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6891,"mutability":"mutable","name":"slot","nameLocation":"1934:4:29","nodeType":"VariableDeclaration","scope":6899,"src":"1926:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:29"},"returnParameters":{"id":6896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6895,"mutability":"mutable","name":"r","nameLocation":"1983:1:29","nodeType":"VariableDeclaration","scope":6899,"src":"1963:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$6871_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":6894,"nodeType":"UserDefinedTypeName","pathNode":{"id":6893,"name":"BooleanSlot","nameLocations":["1963:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":6871,"src":"1963:11:29"},"referencedDeclaration":6871,"src":"1963:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$6871_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:29"},"scope":6922,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":6910,"nodeType":"FunctionDefinition","src":"2190:190:29","nodes":[],"body":{"id":6909,"nodeType":"Block","src":"2274:106:29","nodes":[],"statements":[{"AST":{"nativeSrc":"2336:38:29","nodeType":"YulBlock","src":"2336:38:29","statements":[{"nativeSrc":"2350:14:29","nodeType":"YulAssignment","src":"2350:14:29","value":{"name":"slot","nativeSrc":"2360:4:29","nodeType":"YulIdentifier","src":"2360:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:29","nodeType":"YulIdentifier","src":"2350:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6906,"isOffset":false,"isSlot":true,"src":"2350:6:29","suffix":"slot","valueSize":1},{"declaration":6902,"isOffset":false,"isSlot":false,"src":"2360:4:29","valueSize":1}],"id":6908,"nodeType":"InlineAssembly","src":"2327:47:29"}]},"documentation":{"id":6900,"nodeType":"StructuredDocumentation","src":"2098:87:29","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:29","parameters":{"id":6903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6902,"mutability":"mutable","name":"slot","nameLocation":"2222:4:29","nodeType":"VariableDeclaration","scope":6910,"src":"2214:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:29"},"returnParameters":{"id":6907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6906,"mutability":"mutable","name":"r","nameLocation":"2271:1:29","nodeType":"VariableDeclaration","scope":6910,"src":"2251:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$6874_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":6905,"nodeType":"UserDefinedTypeName","pathNode":{"id":6904,"name":"Bytes32Slot","nameLocations":["2251:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":6874,"src":"2251:11:29"},"referencedDeclaration":6874,"src":"2251:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$6874_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:29"},"scope":6922,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":6921,"nodeType":"FunctionDefinition","src":"2478:190:29","nodes":[],"body":{"id":6920,"nodeType":"Block","src":"2562:106:29","nodes":[],"statements":[{"AST":{"nativeSrc":"2624:38:29","nodeType":"YulBlock","src":"2624:38:29","statements":[{"nativeSrc":"2638:14:29","nodeType":"YulAssignment","src":"2638:14:29","value":{"name":"slot","nativeSrc":"2648:4:29","nodeType":"YulIdentifier","src":"2648:4:29"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:29","nodeType":"YulIdentifier","src":"2638:6:29"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":6917,"isOffset":false,"isSlot":true,"src":"2638:6:29","suffix":"slot","valueSize":1},{"declaration":6913,"isOffset":false,"isSlot":false,"src":"2648:4:29","valueSize":1}],"id":6919,"nodeType":"InlineAssembly","src":"2615:47:29"}]},"documentation":{"id":6911,"nodeType":"StructuredDocumentation","src":"2386:87:29","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:29","parameters":{"id":6914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6913,"mutability":"mutable","name":"slot","nameLocation":"2510:4:29","nodeType":"VariableDeclaration","scope":6921,"src":"2502:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:29"},"returnParameters":{"id":6918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6917,"mutability":"mutable","name":"r","nameLocation":"2559:1:29","nodeType":"VariableDeclaration","scope":6921,"src":"2539:21:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$6877_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":6916,"nodeType":"UserDefinedTypeName","pathNode":{"id":6915,"name":"Uint256Slot","nameLocations":["2539:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":6877,"src":"2539:11:29"},"referencedDeclaration":6877,"src":"2539:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$6877_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:29"},"scope":6922,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":6865,"nodeType":"StructuredDocumentation","src":"130:1148:29","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"linearizedBaseContracts":[6922],"name":"StorageSlot","nameLocation":"1287:11:29","scope":6923,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"id":30,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol","id":7149,"exportedSymbols":{"Strings":[7148]},"nodeType":"SourceUnit","src":"101:2296:30","nodes":[{"id":6924,"nodeType":"PragmaDirective","src":"101:23:30","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":7148,"nodeType":"ContractDefinition","src":"161:2235:30","nodes":[{"id":6928,"nodeType":"VariableDeclaration","src":"183:58:30","nodes":[],"constant":true,"mutability":"constant","name":"_HEX_SYMBOLS","nameLocation":"208:12:30","scope":7148,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":6926,"name":"bytes16","nodeType":"ElementaryTypeName","src":"183:7:30","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":6927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"223:18:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"id":6931,"nodeType":"VariableDeclaration","src":"247:43:30","nodes":[],"constant":true,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"270:15:30","scope":7148,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6929,"name":"uint8","nodeType":"ElementaryTypeName","src":"247:5:30","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":6930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"288:2:30","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"id":7010,"nodeType":"FunctionDefinition","src":"392:703:30","nodes":[],"body":{"id":7009,"nodeType":"Block","src":"463:632:30","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6934,"src":"665:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"674:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"665:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6945,"nodeType":"IfStatement","src":"661:51:30","trueBody":{"id":6944,"nodeType":"Block","src":"677:35:30","statements":[{"expression":{"hexValue":"30","id":6942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"698:3:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":6938,"id":6943,"nodeType":"Return","src":"691:10:30"}]}},{"assignments":[6947],"declarations":[{"constant":false,"id":6947,"mutability":"mutable","name":"temp","nameLocation":"729:4:30","nodeType":"VariableDeclaration","scope":7009,"src":"721:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6946,"name":"uint256","nodeType":"ElementaryTypeName","src":"721:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6949,"initialValue":{"id":6948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6934,"src":"736:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"721:20:30"},{"assignments":[6951],"declarations":[{"constant":false,"id":6951,"mutability":"mutable","name":"digits","nameLocation":"759:6:30","nodeType":"VariableDeclaration","scope":7009,"src":"751:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6950,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6952,"nodeType":"VariableDeclarationStatement","src":"751:14:30"},{"body":{"id":6963,"nodeType":"Block","src":"793:57:30","statements":[{"expression":{"id":6957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"807:8:30","subExpression":{"id":6956,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6951,"src":"807:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6958,"nodeType":"ExpressionStatement","src":"807:8:30"},{"expression":{"id":6961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6959,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"829:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":6960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"837:2:30","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"829:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6962,"nodeType":"ExpressionStatement","src":"829:10:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6953,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"782:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"790:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"782:9:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6964,"nodeType":"WhileStatement","src":"775:75:30"},{"assignments":[6966],"declarations":[{"constant":false,"id":6966,"mutability":"mutable","name":"buffer","nameLocation":"872:6:30","nodeType":"VariableDeclaration","scope":7009,"src":"859:19:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6965,"name":"bytes","nodeType":"ElementaryTypeName","src":"859:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6971,"initialValue":{"arguments":[{"id":6969,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6951,"src":"891:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"881:9:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":6967,"name":"bytes","nodeType":"ElementaryTypeName","src":"885:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":6970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:17:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"859:39:30"},{"body":{"id":7002,"nodeType":"Block","src":"927:131:30","statements":[{"expression":{"id":6977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6975,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6951,"src":"941:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":6976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"941:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6978,"nodeType":"ExpressionStatement","src":"941:11:30"},{"expression":{"id":6996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6979,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6966,"src":"966:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6981,"indexExpression":{"id":6980,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6951,"src":"973:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"966:14:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":6986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:2:30","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6934,"src":"1009:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3130","id":6990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1017:2:30","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1009:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1001:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6987,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:30","typeDescriptions":{}}},"id":6992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"996:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"990:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":6984,"name":"uint8","nodeType":"ElementaryTypeName","src":"990:5:30","typeDescriptions":{}}},"id":6994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"990:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":6983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"983:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":6982,"name":"bytes1","nodeType":"ElementaryTypeName","src":"983:6:30","typeDescriptions":{}}},"id":6995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"983:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"966:56:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":6997,"nodeType":"ExpressionStatement","src":"966:56:30"},{"expression":{"id":7000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6934,"src":"1036:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":6999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:30","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7001,"nodeType":"ExpressionStatement","src":"1036:11:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6934,"src":"915:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":6973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"924:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"915:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7003,"nodeType":"WhileStatement","src":"908:150:30"},{"expression":{"arguments":[{"id":7006,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6966,"src":"1081:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1074:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7004,"name":"string","nodeType":"ElementaryTypeName","src":"1074:6:30","typeDescriptions":{}}},"id":7007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1074:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":6938,"id":7008,"nodeType":"Return","src":"1067:21:30"}]},"documentation":{"id":6932,"nodeType":"StructuredDocumentation","src":"297:90:30","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"401:8:30","parameters":{"id":6935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6934,"mutability":"mutable","name":"value","nameLocation":"418:5:30","nodeType":"VariableDeclaration","scope":7010,"src":"410:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6933,"name":"uint256","nodeType":"ElementaryTypeName","src":"410:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"409:15:30"},"returnParameters":{"id":6938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7010,"src":"448:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6936,"name":"string","nodeType":"ElementaryTypeName","src":"448:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"447:15:30"},"scope":7148,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7051,"nodeType":"FunctionDefinition","src":"1200:329:30","nodes":[],"body":{"id":7050,"nodeType":"Block","src":"1274:255:30","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7013,"src":"1288:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1288:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7024,"nodeType":"IfStatement","src":"1284:54:30","trueBody":{"id":7023,"nodeType":"Block","src":"1300:38:30","statements":[{"expression":{"hexValue":"30783030","id":7021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1321:6:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"functionReturnParameters":7017,"id":7022,"nodeType":"Return","src":"1314:13:30"}]}},{"assignments":[7026],"declarations":[{"constant":false,"id":7026,"mutability":"mutable","name":"temp","nameLocation":"1355:4:30","nodeType":"VariableDeclaration","scope":7050,"src":"1347:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7025,"name":"uint256","nodeType":"ElementaryTypeName","src":"1347:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7028,"initialValue":{"id":7027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7013,"src":"1362:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1347:20:30"},{"assignments":[7030],"declarations":[{"constant":false,"id":7030,"mutability":"mutable","name":"length","nameLocation":"1385:6:30","nodeType":"VariableDeclaration","scope":7050,"src":"1377:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7029,"name":"uint256","nodeType":"ElementaryTypeName","src":"1377:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7032,"initialValue":{"hexValue":"30","id":7031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1394:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1377:18:30"},{"body":{"id":7043,"nodeType":"Block","src":"1423:57:30","statements":[{"expression":{"id":7037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1437:8:30","subExpression":{"id":7036,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7030,"src":"1437:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7038,"nodeType":"ExpressionStatement","src":"1437:8:30"},{"expression":{"id":7041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7039,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7026,"src":"1459:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":7040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1468:1:30","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1459:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7042,"nodeType":"ExpressionStatement","src":"1459:10:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7033,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7026,"src":"1412:4:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":7034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1420:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1412:9:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7044,"nodeType":"WhileStatement","src":"1405:75:30"},{"expression":{"arguments":[{"id":7046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7013,"src":"1508:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7047,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7030,"src":"1515:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7045,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[7051,7127,7147],"referencedDeclaration":7127,"src":"1496:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":7048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1496:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7017,"id":7049,"nodeType":"Return","src":"1489:33:30"}]},"documentation":{"id":7011,"nodeType":"StructuredDocumentation","src":"1101:94:30","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1209:11:30","parameters":{"id":7014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7013,"mutability":"mutable","name":"value","nameLocation":"1229:5:30","nodeType":"VariableDeclaration","scope":7051,"src":"1221:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7012,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:15:30"},"returnParameters":{"id":7017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7051,"src":"1259:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7015,"name":"string","nodeType":"ElementaryTypeName","src":"1259:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:15:30"},"scope":7148,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7127,"nodeType":"FunctionDefinition","src":"1652:441:30","nodes":[],"body":{"id":7126,"nodeType":"Block","src":"1742:351:30","nodes":[],"statements":[{"assignments":[7062],"declarations":[{"constant":false,"id":7062,"mutability":"mutable","name":"buffer","nameLocation":"1765:6:30","nodeType":"VariableDeclaration","scope":7126,"src":"1752:19:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7061,"name":"bytes","nodeType":"ElementaryTypeName","src":"1752:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":7071,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":7065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1784:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7066,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7056,"src":"1788:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1784:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":7068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1797:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1784:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1774:9:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":7063,"name":"bytes","nodeType":"ElementaryTypeName","src":"1778:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":7070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1774:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1752:47:30"},{"expression":{"id":7076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7072,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"1809:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7074,"indexExpression":{"hexValue":"30","id":7073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1816:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1809:9:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":7075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1821:3:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1809:15:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":7077,"nodeType":"ExpressionStatement","src":"1809:15:30"},{"expression":{"id":7082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7078,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"1834:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7080,"indexExpression":{"hexValue":"31","id":7079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1841:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1834:9:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":7081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1846:3:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1834:15:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":7083,"nodeType":"ExpressionStatement","src":"1834:15:30"},{"body":{"id":7112,"nodeType":"Block","src":"1904:87:30","statements":[{"expression":{"id":7106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7098,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"1918:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":7100,"indexExpression":{"id":7099,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"1925:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1918:9:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7101,"name":"_HEX_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"1930:12:30","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":7105,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7054,"src":"1943:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":7103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1951:3:30","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1943:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1930:25:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1918:37:30","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":7107,"nodeType":"ExpressionStatement","src":"1918:37:30"},{"expression":{"id":7110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7054,"src":"1969:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":7109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1979:1:30","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1969:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7111,"nodeType":"ExpressionStatement","src":"1969:11:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"1892:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":7093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1896:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1892:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7113,"initializationExpression":{"assignments":[7085],"declarations":[{"constant":false,"id":7085,"mutability":"mutable","name":"i","nameLocation":"1872:1:30","nodeType":"VariableDeclaration","scope":7113,"src":"1864:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7091,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":7086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1876:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7087,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7056,"src":"1880:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1876:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":7089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1876:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1864:26:30"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":7096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1899:3:30","subExpression":{"id":7095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"1901:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7097,"nodeType":"ExpressionStatement","src":"1899:3:30"},"nodeType":"ForStatement","src":"1859:132:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7054,"src":"2008:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2017:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2008:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":7118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2020:34:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":7114,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2000:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2000:55:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7120,"nodeType":"ExpressionStatement","src":"2000:55:30"},{"expression":{"arguments":[{"id":7123,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7062,"src":"2079:6:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2072:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7121,"name":"string","nodeType":"ElementaryTypeName","src":"2072:6:30","typeDescriptions":{}}},"id":7124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2072:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7060,"id":7125,"nodeType":"Return","src":"2065:21:30"}]},"documentation":{"id":7052,"nodeType":"StructuredDocumentation","src":"1535:112:30","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1661:11:30","parameters":{"id":7057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7054,"mutability":"mutable","name":"value","nameLocation":"1681:5:30","nodeType":"VariableDeclaration","scope":7127,"src":"1673:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7053,"name":"uint256","nodeType":"ElementaryTypeName","src":"1673:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7056,"mutability":"mutable","name":"length","nameLocation":"1696:6:30","nodeType":"VariableDeclaration","scope":7127,"src":"1688:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1688:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1672:31:30"},"returnParameters":{"id":7060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7127,"src":"1727:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7058,"name":"string","nodeType":"ElementaryTypeName","src":"1727:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1726:15:30"},"scope":7148,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":7147,"nodeType":"FunctionDefinition","src":"2245:149:30","nodes":[],"body":{"id":7146,"nodeType":"Block","src":"2318:76:30","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":7140,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7130,"src":"2363:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2355:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7138,"name":"uint160","nodeType":"ElementaryTypeName","src":"2355:7:30","typeDescriptions":{}}},"id":7141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2355:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2347:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7136,"name":"uint256","nodeType":"ElementaryTypeName","src":"2347:7:30","typeDescriptions":{}}},"id":7142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2347:22:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7143,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6931,"src":"2371:15:30","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":7135,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[7051,7127,7147],"referencedDeclaration":7127,"src":"2335:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":7144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:52:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7134,"id":7145,"nodeType":"Return","src":"2328:59:30"}]},"documentation":{"id":7128,"nodeType":"StructuredDocumentation","src":"2099:141:30","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2254:11:30","parameters":{"id":7131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7130,"mutability":"mutable","name":"addr","nameLocation":"2274:4:30","nodeType":"VariableDeclaration","scope":7147,"src":"2266:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7129,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2265:14:30"},"returnParameters":{"id":7134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7147,"src":"2303:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7132,"name":"string","nodeType":"ElementaryTypeName","src":"2303:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2302:15:30"},"scope":7148,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":6925,"nodeType":"StructuredDocumentation","src":"126:34:30","text":" @dev String operations."},"fullyImplemented":true,"linearizedBaseContracts":[7148],"name":"Strings","nameLocation":"169:7:30","scope":7149,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"id":8,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol","id":2138,"exportedSymbols":{"AddressUpgradeable":[2545],"ContextUpgradeable":[2821],"Initializable":[2302],"OwnableUpgradeable":[2137]},"nodeType":"SourceUnit","src":"102:3052:8","nodes":[{"id":2007,"nodeType":"PragmaDirective","src":"102:23:8","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":2008,"nodeType":"ImportDirective","src":"127:41:8","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","nameLocation":"-1:-1:-1","scope":2138,"sourceUnit":2822,"symbolAliases":[],"unitAlias":""},{"id":2009,"nodeType":"ImportDirective","src":"169:42:8","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","nameLocation":"-1:-1:-1","scope":2138,"sourceUnit":2303,"symbolAliases":[],"unitAlias":""},{"id":2137,"nodeType":"ContractDefinition","src":"708:2445:8","nodes":[{"id":2016,"nodeType":"VariableDeclaration","src":"788:22:8","nodes":[],"constant":false,"mutability":"mutable","name":"_owner","nameLocation":"804:6:8","scope":2137,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2015,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"id":2022,"nodeType":"EventDefinition","src":"817:84:8","nodes":[],"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","name":"OwnershipTransferred","nameLocation":"823:20:8","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:8","nodeType":"VariableDeclaration","scope":2022,"src":"844:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2020,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:8","nodeType":"VariableDeclaration","scope":2022,"src":"875:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:8"}},{"id":2032,"nodeType":"FunctionDefinition","src":"1003:95:8","nodes":[],"body":{"id":2031,"nodeType":"Block","src":"1055:43:8","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2028,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"1065:24:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2030,"nodeType":"ExpressionStatement","src":"1065:26:8"}]},"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"907:91:8","text":" @dev Initializes the contract setting the deployer as the initial owner."},"implemented":true,"kind":"function","modifiers":[{"id":2026,"kind":"modifierInvocation","modifierName":{"id":2025,"name":"onlyInitializing","nameLocations":["1038:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"1038:16:8"},"nodeType":"ModifierInvocation","src":"1038:16:8"}],"name":"__Ownable_init","nameLocation":"1012:14:8","parameters":{"id":2024,"nodeType":"ParameterList","parameters":[],"src":"1026:2:8"},"returnParameters":{"id":2027,"nodeType":"ParameterList","parameters":[],"src":"1055:0:8"},"scope":2137,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2043,"nodeType":"FunctionDefinition","src":"1104:111:8","nodes":[],"body":{"id":2042,"nodeType":"Block","src":"1166:49:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2038,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"1195:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2037,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"1176:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2041,"nodeType":"ExpressionStatement","src":"1176:32:8"}]},"implemented":true,"kind":"function","modifiers":[{"id":2035,"kind":"modifierInvocation","modifierName":{"id":2034,"name":"onlyInitializing","nameLocations":["1149:16:8"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"1149:16:8"},"nodeType":"ModifierInvocation","src":"1149:16:8"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:8","parameters":{"id":2033,"nodeType":"ParameterList","parameters":[],"src":"1137:2:8"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[],"src":"1166:0:8"},"scope":2137,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2051,"nodeType":"ModifierDefinition","src":"1303:62:8","nodes":[],"body":{"id":2050,"nodeType":"Block","src":"1324:41:8","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2046,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"1334:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2048,"nodeType":"ExpressionStatement","src":"1334:13:8"},{"id":2049,"nodeType":"PlaceholderStatement","src":"1357:1:8"}]},"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"1221:77:8","text":" @dev Throws if called by any account other than the owner."},"name":"onlyOwner","nameLocation":"1312:9:8","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[],"src":"1321:2:8"},"virtual":false,"visibility":"internal"},{"id":2060,"nodeType":"FunctionDefinition","src":"1441:85:8","nodes":[],"body":{"id":2059,"nodeType":"Block","src":"1496:30:8","nodes":[],"statements":[{"expression":{"id":2057,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"1513:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2056,"id":2058,"nodeType":"Return","src":"1506:13:8"}]},"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"1371:65:8","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:8","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[],"src":"1455:2:8"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2060,"src":"1487:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2054,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:8"},"scope":2137,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":2074,"nodeType":"FunctionDefinition","src":"1599:130:8","nodes":[],"body":{"id":2073,"nodeType":"Block","src":"1644:85:8","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2065,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"1662:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2067,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"1673:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2064,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1654:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2072,"nodeType":"ExpressionStatement","src":"1654:68:8"}]},"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"1532:62:8","text":" @dev Throws if the sender is not the owner."},"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:8","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[],"src":"1619:2:8"},"returnParameters":{"id":2063,"nodeType":"ParameterList","parameters":[],"src":"1644:0:8"},"scope":2137,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":2088,"nodeType":"FunctionDefinition","src":"2071:101:8","nodes":[],"body":{"id":2087,"nodeType":"Block","src":"2125:47:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2162:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2154:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2081,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:8","typeDescriptions":{}}},"id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2080,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"2135:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2135:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"ExpressionStatement","src":"2135:30:8"}]},"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"1735:331:8","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","implemented":true,"kind":"function","modifiers":[{"id":2078,"kind":"modifierInvocation","modifierName":{"id":2077,"name":"onlyOwner","nameLocations":["2115:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"2115:9:8"},"nodeType":"ModifierInvocation","src":"2115:9:8"}],"name":"renounceOwnership","nameLocation":"2080:17:8","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[],"src":"2097:2:8"},"returnParameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"2125:0:8"},"scope":2137,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":2111,"nodeType":"FunctionDefinition","src":"2321:198:8","nodes":[],"body":{"id":2110,"nodeType":"Block","src":"2391:128:8","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"2409:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2429:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:8","typeDescriptions":{}}},"id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2421:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2433:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2096,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2401:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2105,"nodeType":"ExpressionStatement","src":"2401:73:8"},{"expression":{"arguments":[{"id":2107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"2503:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2106,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"2484:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"ExpressionStatement","src":"2484:28:8"}]},"documentation":{"id":2089,"nodeType":"StructuredDocumentation","src":"2178:138:8","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","implemented":true,"kind":"function","modifiers":[{"id":2094,"kind":"modifierInvocation","modifierName":{"id":2093,"name":"onlyOwner","nameLocations":["2381:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"2381:9:8"},"nodeType":"ModifierInvocation","src":"2381:9:8"}],"name":"transferOwnership","nameLocation":"2330:17:8","parameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"newOwner","nameLocation":"2356:8:8","nodeType":"VariableDeclaration","scope":2111,"src":"2348:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2090,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2347:18:8"},"returnParameters":{"id":2095,"nodeType":"ParameterList","parameters":[],"src":"2391:0:8"},"scope":2137,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":2131,"nodeType":"FunctionDefinition","src":"2673:187:8","nodes":[],"body":{"id":2130,"nodeType":"Block","src":"2736:124:8","nodes":[],"statements":[{"assignments":[2118],"declarations":[{"constant":false,"id":2118,"mutability":"mutable","name":"oldOwner","nameLocation":"2754:8:8","nodeType":"VariableDeclaration","scope":2130,"src":"2746:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2117,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2120,"initialValue":{"id":2119,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"2765:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2746:25:8"},{"expression":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2121,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"2781:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"2790:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2781:17:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2124,"nodeType":"ExpressionStatement","src":"2781:17:8"},{"eventCall":{"arguments":[{"id":2126,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2834:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2127,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"2844:8:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2125,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"2813:20:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2813:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2129,"nodeType":"EmitStatement","src":"2808:45:8"}]},"documentation":{"id":2112,"nodeType":"StructuredDocumentation","src":"2525:143:8","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2682:18:8","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2114,"mutability":"mutable","name":"newOwner","nameLocation":"2709:8:8","nodeType":"VariableDeclaration","scope":2131,"src":"2701:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2113,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2700:18:8"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"2736:0:8"},"scope":2137,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":2136,"nodeType":"VariableDeclaration","src":"3125:25:8","nodes":[],"constant":false,"documentation":{"id":2132,"nodeType":"StructuredDocumentation","src":"2866:254:8","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"mutability":"mutable","name":"__gap","nameLocation":"3145:5:8","scope":2137,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"length":{"hexValue":"3439","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:2:8","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3125:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":2011,"name":"Initializable","nameLocations":["748:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":2302,"src":"748:13:8"},"id":2012,"nodeType":"InheritanceSpecifier","src":"748:13:8"},{"baseName":{"id":2013,"name":"ContextUpgradeable","nameLocations":["763:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":2821,"src":"763:18:8"},"id":2014,"nodeType":"InheritanceSpecifier","src":"763:18:8"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2010,"nodeType":"StructuredDocumentation","src":"213:494:8","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"linearizedBaseContracts":[2137,2821,2302],"name":"OwnableUpgradeable","nameLocation":"726:18:8","scope":2138,"usedErrors":[],"usedEvents":[2022,2166]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol":{"id":9,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol","id":2152,"exportedSymbols":{"IERC1271Upgradeable":[2151]},"nodeType":"SourceUnit","src":"92:585:9","nodes":[{"id":2139,"nodeType":"PragmaDirective","src":"92:23:9","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":2151,"nodeType":"ContractDefinition","src":"307:369:9","nodes":[{"id":2150,"nodeType":"FunctionDefinition","src":"568:106:9","nodes":[],"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"343:220:9","text":" @dev Should return whether the signature provided is valid for the provided data\n @param hash      Hash of the data to be signed\n @param signature Signature byte array associated with _data"},"functionSelector":"1626ba7e","implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"577:16:9","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"hash","nameLocation":"602:4:9","nodeType":"VariableDeclaration","scope":2150,"src":"594:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2142,"name":"bytes32","nodeType":"ElementaryTypeName","src":"594:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"signature","nameLocation":"621:9:9","nodeType":"VariableDeclaration","scope":2150,"src":"608:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2144,"name":"bytes","nodeType":"ElementaryTypeName","src":"608:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"593:38:9"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"magicValue","nameLocation":"662:10:9","nodeType":"VariableDeclaration","scope":2150,"src":"655:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2147,"name":"bytes4","nodeType":"ElementaryTypeName","src":"655:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"654:19:9"},"scope":2151,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IERC1271Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2140,"nodeType":"StructuredDocumentation","src":"117:189:9","text":" @dev Interface of the ERC1271 standard signature validation method for\n contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n _Available since v4.1._"},"fullyImplemented":false,"linearizedBaseContracts":[2151],"name":"IERC1271Upgradeable","nameLocation":"317:19:9","scope":2152,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"id":10,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","id":2303,"exportedSymbols":{"AddressUpgradeable":[2545],"Initializable":[2302]},"nodeType":"SourceUnit","src":"113:5557:10","nodes":[{"id":2153,"nodeType":"PragmaDirective","src":"113:23:10","nodes":[],"literals":["solidity","^","0.8",".2"]},{"id":2154,"nodeType":"ImportDirective","src":"138:44:10","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","nameLocation":"-1:-1:-1","scope":2303,"sourceUnit":2546,"symbolAliases":[],"unitAlias":""},{"id":2302,"nodeType":"ContractDefinition","src":"2383:3286:10","nodes":[{"id":2158,"nodeType":"VariableDeclaration","src":"2535:26:10","nodes":[],"constant":false,"documentation":{"id":2156,"nodeType":"StructuredDocumentation","src":"2421:109:10","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:10","scope":2302,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2157,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"id":2161,"nodeType":"VariableDeclaration","src":"2664:26:10","nodes":[],"constant":false,"documentation":{"id":2159,"nodeType":"StructuredDocumentation","src":"2568:91:10","text":" @dev Indicates that the contract is in the process of being initialized."},"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:10","scope":2302,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2160,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"id":2166,"nodeType":"EventDefinition","src":"2792:33:10","nodes":[],"anonymous":false,"documentation":{"id":2162,"nodeType":"StructuredDocumentation","src":"2697:90:10","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","name":"Initialized","nameLocation":"2798:11:10","parameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:10","nodeType":"VariableDeclaration","scope":2166,"src":"2810:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2163,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:10"}},{"id":2222,"nodeType":"ModifierDefinition","src":"3078:506:10","nodes":[],"body":{"id":2221,"nodeType":"Block","src":"3101:483:10","nodes":[],"statements":[{"assignments":[2170],"declarations":[{"constant":false,"id":2170,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3116:14:10","nodeType":"VariableDeclaration","scope":2221,"src":"3111:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2169,"name":"bool","nodeType":"ElementaryTypeName","src":"3111:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2173,"initialValue":{"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3133:14:10","subExpression":{"id":2171,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3134:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3111:36:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"3179:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2176,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3197:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3212:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3197:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3179:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3178:36:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3219:45:10","subExpression":{"arguments":[{"arguments":[{"id":2185,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3258:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$2302","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$2302","typeString":"contract Initializable"}],"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3250:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2183,"name":"address","nodeType":"ElementaryTypeName","src":"3250:7:10","typeDescriptions":{}}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3250:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2181,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"3220:18:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2545_$","typeString":"type(library AddressUpgradeable)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3239:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2320,"src":"3220:29:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3220:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2189,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3268:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3284:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3268:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3219:66:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2193,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3218:68:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3178:108:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3300:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":2174,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3157:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3157:201:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2197,"nodeType":"ExpressionStatement","src":"3157:201:10"},{"expression":{"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2198,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3368:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3383:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3368:16:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2201,"nodeType":"ExpressionStatement","src":"3368:16:10"},{"condition":{"id":2202,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"3398:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2208,"nodeType":"IfStatement","src":"3394:65:10","trueBody":{"id":2207,"nodeType":"Block","src":"3414:45:10","statements":[{"expression":{"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2203,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3428:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3444:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3428:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2206,"nodeType":"ExpressionStatement","src":"3428:20:10"}]}},{"id":2209,"nodeType":"PlaceholderStatement","src":"3468:1:10"},{"condition":{"id":2210,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"3483:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2220,"nodeType":"IfStatement","src":"3479:99:10","trueBody":{"id":2219,"nodeType":"Block","src":"3499:79:10","statements":[{"expression":{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2211,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3513:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3529:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3513:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2214,"nodeType":"ExpressionStatement","src":"3513:21:10"},{"eventCall":{"arguments":[{"hexValue":"31","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3565:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2215,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"3553:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3553:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2218,"nodeType":"EmitStatement","src":"3548:19:10"}]}}]},"documentation":{"id":2167,"nodeType":"StructuredDocumentation","src":"2831:242:10","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."},"name":"initializer","nameLocation":"3087:11:10","parameters":{"id":2168,"nodeType":"ParameterList","parameters":[],"src":"3098:2:10"},"virtual":false,"visibility":"internal"},{"id":2255,"nodeType":"ModifierDefinition","src":"4361:293:10","nodes":[],"body":{"id":2254,"nodeType":"Block","src":"4399:255:10","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4417:14:10","subExpression":{"id":2228,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"4418:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2230,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4435:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"4450:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4435:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4417:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4459:48:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":2227,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4409:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:99:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2236,"nodeType":"ExpressionStatement","src":"4409:99:10"},{"expression":{"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2237,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4518:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2238,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"4533:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4518:22:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2240,"nodeType":"ExpressionStatement","src":"4518:22:10"},{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2241,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"4550:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4566:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4550:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2244,"nodeType":"ExpressionStatement","src":"4550:20:10"},{"id":2245,"nodeType":"PlaceholderStatement","src":"4580:1:10"},{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2246,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"4591:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4607:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4591:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"ExpressionStatement","src":"4591:21:10"},{"eventCall":{"arguments":[{"id":2251,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"4639:7:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2250,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"4627:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4627:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2253,"nodeType":"EmitStatement","src":"4622:25:10"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"3590:766:10","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."},"name":"reinitializer","nameLocation":"4370:13:10","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"version","nameLocation":"4390:7:10","nodeType":"VariableDeclaration","scope":2255,"src":"4384:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2224,"name":"uint8","nodeType":"ElementaryTypeName","src":"4384:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4383:15:10"},"virtual":false,"visibility":"internal"},{"id":2265,"nodeType":"ModifierDefinition","src":"4864:125:10","nodes":[],"body":{"id":2264,"nodeType":"Block","src":"4892:97:10","nodes":[],"statements":[{"expression":{"arguments":[{"id":2259,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"4910:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4925:45:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":2258,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4902:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4902:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"4902:69:10"},{"id":2263,"nodeType":"PlaceholderStatement","src":"4981:1:10"}]},"documentation":{"id":2256,"nodeType":"StructuredDocumentation","src":"4660:199:10","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"name":"onlyInitializing","nameLocation":"4873:16:10","parameters":{"id":2257,"nodeType":"ParameterList","parameters":[],"src":"4889:2:10"},"virtual":false,"visibility":"internal"},{"id":2301,"nodeType":"FunctionDefinition","src":"5388:279:10","nodes":[],"body":{"id":2300,"nodeType":"Block","src":"5437:230:10","nodes":[],"statements":[{"expression":{"arguments":[{"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5455:14:10","subExpression":{"id":2270,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5456:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5471:41:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":2269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5447:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2274,"nodeType":"ExpressionStatement","src":"5447:66:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2275,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"5527:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":2278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5547:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2277,"name":"uint8","nodeType":"ElementaryTypeName","src":"5547:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2276,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5542:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5542:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5554:3:10","memberName":"max","nodeType":"MemberAccess","src":"5542:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5527:30:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2299,"nodeType":"IfStatement","src":"5523:138:10","trueBody":{"id":2298,"nodeType":"Block","src":"5559:102:10","statements":[{"expression":{"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2282,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"5573:12:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5593:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2284,"name":"uint8","nodeType":"ElementaryTypeName","src":"5593:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2283,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5588:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5588:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5600:3:10","memberName":"max","nodeType":"MemberAccess","src":"5588:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5573:30:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2289,"nodeType":"ExpressionStatement","src":"5573:30:10"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":2293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5639:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2292,"name":"uint8","nodeType":"ElementaryTypeName","src":"5639:5:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":2291,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5634:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5634:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5646:3:10","memberName":"max","nodeType":"MemberAccess","src":"5634:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2290,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"5622:11:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5622:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2297,"nodeType":"EmitStatement","src":"5617:33:10"}]}}]},"documentation":{"id":2266,"nodeType":"StructuredDocumentation","src":"4995:388:10","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."},"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5397:20:10","parameters":{"id":2267,"nodeType":"ParameterList","parameters":[],"src":"5417:2:10"},"returnParameters":{"id":2268,"nodeType":"ParameterList","parameters":[],"src":"5437:0:10"},"scope":2302,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"184:2198:10","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"linearizedBaseContracts":[2302],"name":"Initializable","nameLocation":"2401:13:10","scope":2303,"usedErrors":[],"usedEvents":[2166]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"id":11,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol","id":2546,"exportedSymbols":{"AddressUpgradeable":[2545]},"nodeType":"SourceUnit","src":"101:7266:11","nodes":[{"id":2304,"nodeType":"PragmaDirective","src":"101:23:11","nodes":[],"literals":["solidity","^","0.8",".1"]},{"id":2545,"nodeType":"ContractDefinition","src":"194:7172:11","nodes":[{"id":2320,"nodeType":"FunctionDefinition","src":"1186:320:11","nodes":[],"body":{"id":2319,"nodeType":"Block","src":"1252:254:11","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2313,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"1476:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:11","memberName":"code","nodeType":"MemberAccess","src":"1476:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:11","memberName":"length","nodeType":"MemberAccess","src":"1476:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2312,"id":2318,"nodeType":"Return","src":"1469:30:11"}]},"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"227:954:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:11","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"account","nameLocation":"1214:7:11","nodeType":"VariableDeclaration","scope":2320,"src":"1206:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2307,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:11"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"1246:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2310,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:11"},"scope":2545,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":2354,"nodeType":"FunctionDefinition","src":"2423:312:11","nodes":[],"body":{"id":2353,"nodeType":"Block","src":"2494:241:11","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2331,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2545","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2545","typeString":"library AddressUpgradeable"}],"id":2330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2329,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:11","typeDescriptions":{}}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:11","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2334,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"2537:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2328,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2504:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2338,"nodeType":"ExpressionStatement","src":"2504:73:11"},{"assignments":[2340,null],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"success","nameLocation":"2594:7:11","nodeType":"VariableDeclaration","scope":2353,"src":"2589:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2339,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2347,"initialValue":{"arguments":[{"hexValue":"","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2341,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"2607:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:11","memberName":"call","nodeType":"MemberAccess","src":"2607:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2343,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"2629:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:11"},{"expression":{"arguments":[{"id":2349,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"2658:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2348,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2650:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"2650:78:11"}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"1512:906:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:11","parameters":{"id":2326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:11","nodeType":"VariableDeclaration","scope":2354,"src":"2442:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2322,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2325,"mutability":"mutable","name":"amount","nameLocation":"2477:6:11","nodeType":"VariableDeclaration","scope":2354,"src":"2469:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2324,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:11"},"returnParameters":{"id":2327,"nodeType":"ParameterList","parameters":[],"src":"2494:0:11"},"scope":2545,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2371,"nodeType":"FunctionDefinition","src":"3477:173:11","nodes":[],"body":{"id":2370,"nodeType":"Block","src":"3566:84:11","nodes":[],"statements":[{"expression":{"arguments":[{"id":2365,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"3596:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2366,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"3604:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3610:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2364,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[2371,2391],"referencedDeclaration":2391,"src":"3583:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2363,"id":2369,"nodeType":"Return","src":"3576:67:11"}]},"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"2741:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:11","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"target","nameLocation":"3507:6:11","nodeType":"VariableDeclaration","scope":2371,"src":"3499:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"data","nameLocation":"3528:4:11","nodeType":"VariableDeclaration","scope":2371,"src":"3515:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2358,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:11"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2371,"src":"3552:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2361,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:11"},"scope":2545,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2391,"nodeType":"FunctionDefinition","src":"3872:223:11","nodes":[],"body":{"id":2390,"nodeType":"Block","src":"4019:76:11","nodes":[],"statements":[{"expression":{"arguments":[{"id":2384,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"4058:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2385,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"4066:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4072:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2387,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"4075:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2383,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2411,2461],"referencedDeclaration":2461,"src":"4036:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4036:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2382,"id":2389,"nodeType":"Return","src":"4029:59:11"}]},"documentation":{"id":2372,"nodeType":"StructuredDocumentation","src":"3656:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3881:12:11","parameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"target","nameLocation":"3911:6:11","nodeType":"VariableDeclaration","scope":2391,"src":"3903:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"3903:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"data","nameLocation":"3940:4:11","nodeType":"VariableDeclaration","scope":2391,"src":"3927:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2375,"name":"bytes","nodeType":"ElementaryTypeName","src":"3927:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2378,"mutability":"mutable","name":"errorMessage","nameLocation":"3968:12:11","nodeType":"VariableDeclaration","scope":2391,"src":"3954:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2377,"name":"string","nodeType":"ElementaryTypeName","src":"3954:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3893:93:11"},"returnParameters":{"id":2382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2391,"src":"4005:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2380,"name":"bytes","nodeType":"ElementaryTypeName","src":"4005:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4004:14:11"},"scope":2545,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2411,"nodeType":"FunctionDefinition","src":"4457:254:11","nodes":[],"body":{"id":2410,"nodeType":"Block","src":"4600:111:11","nodes":[],"statements":[{"expression":{"arguments":[{"id":2404,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"4639:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2405,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"4647:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"4653:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4660:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2403,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2411,2461],"referencedDeclaration":2461,"src":"4617:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2402,"id":2409,"nodeType":"Return","src":"4610:94:11"}]},"documentation":{"id":2392,"nodeType":"StructuredDocumentation","src":"4101:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4466:21:11","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"target","nameLocation":"4505:6:11","nodeType":"VariableDeclaration","scope":2411,"src":"4497:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2393,"name":"address","nodeType":"ElementaryTypeName","src":"4497:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2396,"mutability":"mutable","name":"data","nameLocation":"4534:4:11","nodeType":"VariableDeclaration","scope":2411,"src":"4521:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2395,"name":"bytes","nodeType":"ElementaryTypeName","src":"4521:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"value","nameLocation":"4556:5:11","nodeType":"VariableDeclaration","scope":2411,"src":"4548:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"4548:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4487:80:11"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2411,"src":"4586:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2400,"name":"bytes","nodeType":"ElementaryTypeName","src":"4586:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4585:14:11"},"scope":2545,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2461,"nodeType":"FunctionDefinition","src":"4959:499:11","nodes":[],"body":{"id":2460,"nodeType":"Block","src":"5138:320:11","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2428,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5164:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2545","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2545","typeString":"library AddressUpgradeable"}],"id":2427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5156:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2426,"name":"address","nodeType":"ElementaryTypeName","src":"5156:7:11","typeDescriptions":{}}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5156:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5170:7:11","memberName":"balance","nodeType":"MemberAccess","src":"5156:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"5181:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5156:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5188:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5148:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5148:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2435,"nodeType":"ExpressionStatement","src":"5148:81:11"},{"expression":{"arguments":[{"arguments":[{"id":2438,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"5258:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2437,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"5247:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5247:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5267:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2436,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5239:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5239:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2442,"nodeType":"ExpressionStatement","src":"5239:60:11"},{"assignments":[2444,2446],"declarations":[{"constant":false,"id":2444,"mutability":"mutable","name":"success","nameLocation":"5316:7:11","nodeType":"VariableDeclaration","scope":2460,"src":"5311:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2443,"name":"bool","nodeType":"ElementaryTypeName","src":"5311:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"returndata","nameLocation":"5338:10:11","nodeType":"VariableDeclaration","scope":2460,"src":"5325:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2445,"name":"bytes","nodeType":"ElementaryTypeName","src":"5325:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2453,"initialValue":{"arguments":[{"id":2451,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"5378:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2447,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"5352:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5359:4:11","memberName":"call","nodeType":"MemberAccess","src":"5352:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"5371:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5352:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5352:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5310:73:11"},{"expression":{"arguments":[{"id":2455,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"5417:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2456,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"5426:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2457,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"5438:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2454,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"5400:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5400:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2424,"id":2459,"nodeType":"Return","src":"5393:58:11"}]},"documentation":{"id":2412,"nodeType":"StructuredDocumentation","src":"4717:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4968:21:11","parameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2414,"mutability":"mutable","name":"target","nameLocation":"5007:6:11","nodeType":"VariableDeclaration","scope":2461,"src":"4999:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"4999:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2416,"mutability":"mutable","name":"data","nameLocation":"5036:4:11","nodeType":"VariableDeclaration","scope":2461,"src":"5023:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2415,"name":"bytes","nodeType":"ElementaryTypeName","src":"5023:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2418,"mutability":"mutable","name":"value","nameLocation":"5058:5:11","nodeType":"VariableDeclaration","scope":2461,"src":"5050:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"5050:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"errorMessage","nameLocation":"5087:12:11","nodeType":"VariableDeclaration","scope":2461,"src":"5073:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2419,"name":"string","nodeType":"ElementaryTypeName","src":"5073:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4989:116:11"},"returnParameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2461,"src":"5124:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2422,"name":"bytes","nodeType":"ElementaryTypeName","src":"5124:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5123:14:11"},"scope":2545,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2478,"nodeType":"FunctionDefinition","src":"5635:197:11","nodes":[],"body":{"id":2477,"nodeType":"Block","src":"5735:97:11","nodes":[],"statements":[{"expression":{"arguments":[{"id":2472,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"5771:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2473,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"5779:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5785:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2471,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2478,2513],"referencedDeclaration":2513,"src":"5752:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5752:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2470,"id":2476,"nodeType":"Return","src":"5745:80:11"}]},"documentation":{"id":2462,"nodeType":"StructuredDocumentation","src":"5464:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5644:18:11","parameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"target","nameLocation":"5671:6:11","nodeType":"VariableDeclaration","scope":2478,"src":"5663:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2463,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2466,"mutability":"mutable","name":"data","nameLocation":"5692:4:11","nodeType":"VariableDeclaration","scope":2478,"src":"5679:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2465,"name":"bytes","nodeType":"ElementaryTypeName","src":"5679:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5662:35:11"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2478,"src":"5721:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2468,"name":"bytes","nodeType":"ElementaryTypeName","src":"5721:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5720:14:11"},"scope":2545,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":2513,"nodeType":"FunctionDefinition","src":"6016:386:11","nodes":[],"body":{"id":2512,"nodeType":"Block","src":"6174:228:11","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":2492,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"6203:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2491,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"6192:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6192:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6212:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":2490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6184:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6184:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2496,"nodeType":"ExpressionStatement","src":"6184:67:11"},{"assignments":[2498,2500],"declarations":[{"constant":false,"id":2498,"mutability":"mutable","name":"success","nameLocation":"6268:7:11","nodeType":"VariableDeclaration","scope":2512,"src":"6263:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2497,"name":"bool","nodeType":"ElementaryTypeName","src":"6263:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2500,"mutability":"mutable","name":"returndata","nameLocation":"6290:10:11","nodeType":"VariableDeclaration","scope":2512,"src":"6277:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2499,"name":"bytes","nodeType":"ElementaryTypeName","src":"6277:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2505,"initialValue":{"arguments":[{"id":2503,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"6322:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2501,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"6304:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6311:10:11","memberName":"staticcall","nodeType":"MemberAccess","src":"6304:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6304:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6262:65:11"},{"expression":{"arguments":[{"id":2507,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"6361:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2508,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"6370:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2509,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"6382:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2506,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"6344:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6344:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2489,"id":2511,"nodeType":"Return","src":"6337:58:11"}]},"documentation":{"id":2479,"nodeType":"StructuredDocumentation","src":"5838:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6025:18:11","parameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"target","nameLocation":"6061:6:11","nodeType":"VariableDeclaration","scope":2513,"src":"6053:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2480,"name":"address","nodeType":"ElementaryTypeName","src":"6053:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"data","nameLocation":"6090:4:11","nodeType":"VariableDeclaration","scope":2513,"src":"6077:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2482,"name":"bytes","nodeType":"ElementaryTypeName","src":"6077:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2485,"mutability":"mutable","name":"errorMessage","nameLocation":"6118:12:11","nodeType":"VariableDeclaration","scope":2513,"src":"6104:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2484,"name":"string","nodeType":"ElementaryTypeName","src":"6104:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6043:93:11"},"returnParameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2513,"src":"6160:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2487,"name":"bytes","nodeType":"ElementaryTypeName","src":"6160:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6159:14:11"},"scope":2545,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":2544,"nodeType":"FunctionDefinition","src":"6622:742:11","nodes":[],"body":{"id":2543,"nodeType":"Block","src":"6782:582:11","nodes":[],"statements":[{"condition":{"id":2525,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"6796:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2541,"nodeType":"Block","src":"6853:505:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2529,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6937:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6948:6:11","memberName":"length","nodeType":"MemberAccess","src":"6937:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6957:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6937:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2539,"nodeType":"Block","src":"7295:53:11","statements":[{"expression":{"arguments":[{"id":2536,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"7320:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2535,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7313:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7313:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2538,"nodeType":"ExpressionStatement","src":"7313:20:11"}]},"id":2540,"nodeType":"IfStatement","src":"6933:415:11","trueBody":{"id":2534,"nodeType":"Block","src":"6960:329:11","statements":[{"AST":{"nativeSrc":"7130:145:11","nodeType":"YulBlock","src":"7130:145:11","statements":[{"nativeSrc":"7152:40:11","nodeType":"YulVariableDeclaration","src":"7152:40:11","value":{"arguments":[{"name":"returndata","nativeSrc":"7181:10:11","nodeType":"YulIdentifier","src":"7181:10:11"}],"functionName":{"name":"mload","nativeSrc":"7175:5:11","nodeType":"YulIdentifier","src":"7175:5:11"},"nativeSrc":"7175:17:11","nodeType":"YulFunctionCall","src":"7175:17:11"},"variables":[{"name":"returndata_size","nativeSrc":"7156:15:11","nodeType":"YulTypedName","src":"7156:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7224:2:11","nodeType":"YulLiteral","src":"7224:2:11","type":"","value":"32"},{"name":"returndata","nativeSrc":"7228:10:11","nodeType":"YulIdentifier","src":"7228:10:11"}],"functionName":{"name":"add","nativeSrc":"7220:3:11","nodeType":"YulIdentifier","src":"7220:3:11"},"nativeSrc":"7220:19:11","nodeType":"YulFunctionCall","src":"7220:19:11"},{"name":"returndata_size","nativeSrc":"7241:15:11","nodeType":"YulIdentifier","src":"7241:15:11"}],"functionName":{"name":"revert","nativeSrc":"7213:6:11","nodeType":"YulIdentifier","src":"7213:6:11"},"nativeSrc":"7213:44:11","nodeType":"YulFunctionCall","src":"7213:44:11"},"nativeSrc":"7213:44:11","nodeType":"YulExpressionStatement","src":"7213:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":2518,"isOffset":false,"isSlot":false,"src":"7181:10:11","valueSize":1},{"declaration":2518,"isOffset":false,"isSlot":false,"src":"7228:10:11","valueSize":1}],"id":2533,"nodeType":"InlineAssembly","src":"7121:154:11"}]}}]},"id":2542,"nodeType":"IfStatement","src":"6792:566:11","trueBody":{"id":2528,"nodeType":"Block","src":"6805:42:11","statements":[{"expression":{"id":2526,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6826:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2524,"id":2527,"nodeType":"Return","src":"6819:17:11"}]}}]},"documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"6408:209:11","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"6631:16:11","parameters":{"id":2521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2516,"mutability":"mutable","name":"success","nameLocation":"6662:7:11","nodeType":"VariableDeclaration","scope":2544,"src":"6657:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2515,"name":"bool","nodeType":"ElementaryTypeName","src":"6657:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2518,"mutability":"mutable","name":"returndata","nameLocation":"6692:10:11","nodeType":"VariableDeclaration","scope":2544,"src":"6679:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2517,"name":"bytes","nodeType":"ElementaryTypeName","src":"6679:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"errorMessage","nameLocation":"6726:12:11","nodeType":"VariableDeclaration","scope":2544,"src":"6712:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2519,"name":"string","nodeType":"ElementaryTypeName","src":"6712:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6647:97:11"},"returnParameters":{"id":2524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"6768:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2522,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:11"},"scope":2545,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2305,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"linearizedBaseContracts":[2545],"name":"AddressUpgradeable","nameLocation":"202:18:11","scope":2546,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol":{"id":12,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol","id":2780,"exportedSymbols":{"CheckpointsUpgradeable":[2779],"MathUpgradeable":[4038],"SafeCastUpgradeable":[5889]},"nodeType":"SourceUnit","src":"104:3028:12","nodes":[{"id":2547,"nodeType":"PragmaDirective","src":"104:23:12","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":2548,"nodeType":"ImportDirective","src":"129:36:12","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","nameLocation":"-1:-1:-1","scope":2780,"sourceUnit":4039,"symbolAliases":[],"unitAlias":""},{"id":2549,"nodeType":"ImportDirective","src":"166:40:12","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol","file":"./math/SafeCastUpgradeable.sol","nameLocation":"-1:-1:-1","scope":2780,"sourceUnit":5890,"symbolAliases":[],"unitAlias":""},{"id":2779,"nodeType":"ContractDefinition","src":"641:2490:12","nodes":[{"id":2555,"nodeType":"StructDefinition","src":"678:78:12","nodes":[],"canonicalName":"CheckpointsUpgradeable.Checkpoint","members":[{"constant":false,"id":2552,"mutability":"mutable","name":"_blockNumber","nameLocation":"713:12:12","nodeType":"VariableDeclaration","scope":2555,"src":"706:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2551,"name":"uint32","nodeType":"ElementaryTypeName","src":"706:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"_value","nameLocation":"743:6:12","nodeType":"VariableDeclaration","scope":2555,"src":"735:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":2553,"name":"uint224","nodeType":"ElementaryTypeName","src":"735:7:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"name":"Checkpoint","nameLocation":"685:10:12","scope":2779,"visibility":"public"},{"id":2560,"nodeType":"StructDefinition","src":"762:57:12","nodes":[],"canonicalName":"CheckpointsUpgradeable.History","members":[{"constant":false,"id":2559,"mutability":"mutable","name":"_checkpoints","nameLocation":"800:12:12","nodeType":"VariableDeclaration","scope":2560,"src":"787:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage_ptr","typeString":"struct CheckpointsUpgradeable.Checkpoint[]"},"typeName":{"baseType":{"id":2557,"nodeType":"UserDefinedTypeName","pathNode":{"id":2556,"name":"Checkpoint","nameLocations":["787:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":2555,"src":"787:10:12"},"referencedDeclaration":2555,"src":"787:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage_ptr","typeString":"struct CheckpointsUpgradeable.Checkpoint"}},"id":2558,"nodeType":"ArrayTypeName","src":"787:12:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage_ptr","typeString":"struct CheckpointsUpgradeable.Checkpoint[]"}},"visibility":"internal"}],"name":"History","nameLocation":"769:7:12","scope":2779,"visibility":"public"},{"id":2589,"nodeType":"FunctionDefinition","src":"934:190:12","nodes":[],"body":{"id":2588,"nodeType":"Block","src":"1004:120:12","nodes":[],"statements":[{"assignments":[2570],"declarations":[{"constant":false,"id":2570,"mutability":"mutable","name":"pos","nameLocation":"1022:3:12","nodeType":"VariableDeclaration","scope":2588,"src":"1014:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2569,"name":"uint256","nodeType":"ElementaryTypeName","src":"1014:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2574,"initialValue":{"expression":{"expression":{"id":2571,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1028:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2572,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1033:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"1028:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1046:6:12","memberName":"length","nodeType":"MemberAccess","src":"1028:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1014:38:12"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"1069:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1076:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"baseExpression":{"expression":{"id":2579,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1084:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2580,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1089:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"1084:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2584,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2581,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"1102:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1108:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1102:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1084:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref"}},"id":2585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1111:6:12","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2554,"src":"1084:33:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1069:48:12","trueExpression":{"hexValue":"30","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1080:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":2568,"id":2587,"nodeType":"Return","src":"1062:55:12"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"825:104:12","text":" @dev Returns the value in the latest checkpoint, or zero if there are no checkpoints."},"implemented":true,"kind":"function","modifiers":[],"name":"latest","nameLocation":"943:6:12","parameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"self","nameLocation":"966:4:12","nodeType":"VariableDeclaration","scope":2589,"src":"950:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":2563,"nodeType":"UserDefinedTypeName","pathNode":{"id":2562,"name":"History","nameLocations":["950:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"950:7:12"},"referencedDeclaration":2560,"src":"950:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"}],"src":"949:22:12"},"returnParameters":{"id":2568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2589,"src":"995:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"994:9:12"},"scope":2779,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":2665,"nodeType":"FunctionDefinition","src":"1314:589:12","nodes":[],"body":{"id":2664,"nodeType":"Block","src":"1409:494:12","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"1427:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2602,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1441:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1447:6:12","memberName":"number","nodeType":"MemberAccess","src":"1441:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1427:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e6564","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1455:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_65bd29ebd873d82da6b3634513fc6582859c8e00f2a09cb4bdbeddf7d05eb5be","typeString":"literal_string \"Checkpoints: block not yet mined\""},"value":"Checkpoints: block not yet mined"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_65bd29ebd873d82da6b3634513fc6582859c8e00f2a09cb4bdbeddf7d05eb5be","typeString":"literal_string \"Checkpoints: block not yet mined\""}],"id":2600,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1419:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1419:71:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2607,"nodeType":"ExpressionStatement","src":"1419:71:12"},{"assignments":[2609],"declarations":[{"constant":false,"id":2609,"mutability":"mutable","name":"high","nameLocation":"1509:4:12","nodeType":"VariableDeclaration","scope":2664,"src":"1501:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1501:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2613,"initialValue":{"expression":{"expression":{"id":2610,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"1516:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1521:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"1516:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1534:6:12","memberName":"length","nodeType":"MemberAccess","src":"1516:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1501:39:12"},{"assignments":[2615],"declarations":[{"constant":false,"id":2615,"mutability":"mutable","name":"low","nameLocation":"1558:3:12","nodeType":"VariableDeclaration","scope":2664,"src":"1550:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2617,"initialValue":{"hexValue":"30","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1550:15:12"},{"body":{"id":2649,"nodeType":"Block","src":"1594:236:12","statements":[{"assignments":[2622],"declarations":[{"constant":false,"id":2622,"mutability":"mutable","name":"mid","nameLocation":"1616:3:12","nodeType":"VariableDeclaration","scope":2649,"src":"1608:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1608:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2628,"initialValue":{"arguments":[{"id":2625,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"1646:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2626,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"1651:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2623,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"1622:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4038_$","typeString":"type(library MathUpgradeable)"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1638:7:12","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"1622:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1622:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1608:48:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2629,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"1674:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1679:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"1674:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2632,"indexExpression":{"id":2631,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1692:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1674:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref"}},"id":2633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1697:12:12","memberName":"_blockNumber","nodeType":"MemberAccess","referencedDeclaration":2552,"src":"1674:35:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2634,"name":"blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"1712:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1674:49:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2647,"nodeType":"Block","src":"1774:46:12","statements":[{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2641,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"1792:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2642,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1798:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1804:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1798:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1792:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2646,"nodeType":"ExpressionStatement","src":"1792:13:12"}]},"id":2648,"nodeType":"IfStatement","src":"1670:150:12","trueBody":{"id":2640,"nodeType":"Block","src":"1725:43:12","statements":[{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2636,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"1743:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2637,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"1750:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1743:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2639,"nodeType":"ExpressionStatement","src":"1743:10:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"1582:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2619,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"1588:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1582:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2650,"nodeType":"WhileStatement","src":"1575:255:12"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2651,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"1846:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"baseExpression":{"expression":{"id":2655,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"1862:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1867:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"1862:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2660,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2657,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"1880:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1880:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1862:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref"}},"id":2661,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1890:6:12","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2554,"src":"1862:34:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1846:50:12","trueExpression":{"hexValue":"30","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1858:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":2599,"id":2663,"nodeType":"Return","src":"1839:57:12"}]},"documentation":{"id":2590,"nodeType":"StructuredDocumentation","src":"1130:179:12","text":" @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n before it is returned, or zero otherwise."},"implemented":true,"kind":"function","modifiers":[],"name":"getAtBlock","nameLocation":"1323:10:12","parameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"self","nameLocation":"1350:4:12","nodeType":"VariableDeclaration","scope":2665,"src":"1334:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":2592,"nodeType":"UserDefinedTypeName","pathNode":{"id":2591,"name":"History","nameLocations":["1334:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1334:7:12"},"referencedDeclaration":2560,"src":"1334:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"blockNumber","nameLocation":"1364:11:12","nodeType":"VariableDeclaration","scope":2665,"src":"1356:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"1356:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1333:43:12"},"returnParameters":{"id":2599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2665,"src":"1400:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"1400:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:9:12"},"scope":2779,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":2744,"nodeType":"FunctionDefinition","src":"2081:586:12","nodes":[],"body":{"id":2743,"nodeType":"Block","src":"2168:499:12","nodes":[],"statements":[{"assignments":[2679],"declarations":[{"constant":false,"id":2679,"mutability":"mutable","name":"pos","nameLocation":"2186:3:12","nodeType":"VariableDeclaration","scope":2743,"src":"2178:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"2178:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2683,"initialValue":{"expression":{"expression":{"id":2680,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2192:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2681,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2197:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"2192:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2210:6:12","memberName":"length","nodeType":"MemberAccess","src":"2192:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2178:38:12"},{"assignments":[2685],"declarations":[{"constant":false,"id":2685,"mutability":"mutable","name":"old","nameLocation":"2234:3:12","nodeType":"VariableDeclaration","scope":2743,"src":"2226:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2684,"name":"uint256","nodeType":"ElementaryTypeName","src":"2226:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2689,"initialValue":{"arguments":[{"id":2687,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2247:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}],"id":2686,"name":"latest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"2240:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2226:26:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"2266:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2272:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2266:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2693,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2277:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2282:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"2277:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2698,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"2295:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2301:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2295:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2277:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref"}},"id":2699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2304:12:12","memberName":"_blockNumber","nodeType":"MemberAccess","referencedDeclaration":2552,"src":"2277:39:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2700,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2320:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:6:12","memberName":"number","nodeType":"MemberAccess","src":"2320:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2277:55:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2266:66:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2737,"nodeType":"Block","src":"2437:195:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2727,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2546:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2552:6:12","memberName":"number","nodeType":"MemberAccess","src":"2546:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2725,"name":"SafeCastUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"2517:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCastUpgradeable_$5889_$","typeString":"type(library SafeCastUpgradeable)"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2537:8:12","memberName":"toUint32","nodeType":"MemberAccess","referencedDeclaration":4741,"src":"2517:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint32_$","typeString":"function (uint256) pure returns (uint32)"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"id":2732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2599:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2730,"name":"SafeCastUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"2569:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCastUpgradeable_$5889_$","typeString":"type(library SafeCastUpgradeable)"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2589:9:12","memberName":"toUint224","nodeType":"MemberAccess","referencedDeclaration":4141,"src":"2569:29:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint224_$","typeString":"function (uint256) pure returns (uint224)"}},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2569:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint224","typeString":"uint224"}],"id":2724,"name":"Checkpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"2491:10:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Checkpoint_$2555_storage_ptr_$","typeString":"type(struct CheckpointsUpgradeable.Checkpoint storage pointer)"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2503:12:12","2561:6:12"],"names":["_blockNumber","_value"],"nodeType":"FunctionCall","src":"2491:116:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_memory_ptr","typeString":"struct CheckpointsUpgradeable.Checkpoint memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Checkpoint_$2555_memory_ptr","typeString":"struct CheckpointsUpgradeable.Checkpoint memory"}],"expression":{"expression":{"id":2719,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2451:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2456:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"2451:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2469:4:12","memberName":"push","nodeType":"MemberAccess","src":"2451:22:12","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage_ptr_$_t_struct$_Checkpoint_$2555_storage_$returns$__$attached_to$_t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.Checkpoint storage ref[] storage pointer,struct CheckpointsUpgradeable.Checkpoint storage ref)"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2451:170:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2736,"nodeType":"ExpressionStatement","src":"2451:170:12"}]},"id":2738,"nodeType":"IfStatement","src":"2262:370:12","trueBody":{"id":2718,"nodeType":"Block","src":"2334:97:12","statements":[{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":2704,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"2348:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},"id":2709,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2353:12:12","memberName":"_checkpoints","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"2348:17:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Checkpoint_$2555_storage_$dyn_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref[] storage ref"}},"id":2710,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"pos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"2366:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2372:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2366:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2348:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Checkpoint_$2555_storage","typeString":"struct CheckpointsUpgradeable.Checkpoint storage ref"}},"id":2711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2375:6:12","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2554,"src":"2348:33:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2414:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2712,"name":"SafeCastUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5889,"src":"2384:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCastUpgradeable_$5889_$","typeString":"type(library SafeCastUpgradeable)"}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2404:9:12","memberName":"toUint224","nodeType":"MemberAccess","referencedDeclaration":4141,"src":"2384:29:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint224_$","typeString":"function (uint256) pure returns (uint224)"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2384:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"2348:72:12","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"id":2717,"nodeType":"ExpressionStatement","src":"2348:72:12"}]}},{"expression":{"components":[{"id":2739,"name":"old","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"2649:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2654:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2648:12:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2677,"id":2742,"nodeType":"Return","src":"2641:19:12"}]},"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"1909:167:12","text":" @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n Returns previous value and new value."},"implemented":true,"kind":"function","modifiers":[],"name":"push","nameLocation":"2090:4:12","parameters":{"id":2672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"self","nameLocation":"2111:4:12","nodeType":"VariableDeclaration","scope":2744,"src":"2095:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":2668,"nodeType":"UserDefinedTypeName","pathNode":{"id":2667,"name":"History","nameLocations":["2095:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"2095:7:12"},"referencedDeclaration":2560,"src":"2095:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"},{"constant":false,"id":2671,"mutability":"mutable","name":"value","nameLocation":"2125:5:12","nodeType":"VariableDeclaration","scope":2744,"src":"2117:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"2117:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2094:37:12"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2744,"src":"2150:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"2150:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2744,"src":"2159:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"2159:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2149:18:12"},"scope":2779,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2778,"nodeType":"FunctionDefinition","src":"2899:230:12","nodes":[],"body":{"id":2777,"nodeType":"Block","src":"3070:59:12","nodes":[],"statements":[{"expression":{"arguments":[{"id":2768,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"3092:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}},{"arguments":[{"arguments":[{"id":2771,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"3108:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"}],"id":2770,"name":"latest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"3101:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3101:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2773,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"3115:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2769,"name":"op","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"3098:2:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3098:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2767,"name":"push","nodeType":"Identifier","overloadedDeclarations":[2744,2778],"referencedDeclaration":2744,"src":"3087:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3087:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2766,"id":2776,"nodeType":"Return","src":"3080:42:12"}]},"documentation":{"id":2745,"nodeType":"StructuredDocumentation","src":"2673:221:12","text":" @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n be set to `op(latest, delta)`.\n Returns previous value and new value."},"implemented":true,"kind":"function","modifiers":[],"name":"push","nameLocation":"2908:4:12","parameters":{"id":2761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"self","nameLocation":"2938:4:12","nodeType":"VariableDeclaration","scope":2778,"src":"2922:20:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":2747,"nodeType":"UserDefinedTypeName","pathNode":{"id":2746,"name":"History","nameLocations":["2922:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"2922:7:12"},"referencedDeclaration":2560,"src":"2922:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"},{"constant":false,"id":2758,"mutability":"mutable","name":"op","nameLocation":"3002:2:12","nodeType":"VariableDeclaration","scope":2778,"src":"2952:52:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"},"typeName":{"id":2757,"nodeType":"FunctionTypeName","parameterTypes":{"id":2753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2757,"src":"2961:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2749,"name":"uint256","nodeType":"ElementaryTypeName","src":"2961:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2757,"src":"2970:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"2970:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2960:18:12"},"returnParameterTypes":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2757,"src":"2993:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint256","nodeType":"ElementaryTypeName","src":"2993:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2992:9:12"},"src":"2952:52:12","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"},"visibility":"internal"},"visibility":"internal"},{"constant":false,"id":2760,"mutability":"mutable","name":"delta","nameLocation":"3022:5:12","nodeType":"VariableDeclaration","scope":2778,"src":"3014:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2759,"name":"uint256","nodeType":"ElementaryTypeName","src":"3014:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2912:121:12"},"returnParameters":{"id":2766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2778,"src":"3052:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"3052:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2778,"src":"3061:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"3061:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3051:18:12"},"scope":2779,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"CheckpointsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2550,"nodeType":"StructuredDocumentation","src":"208:432:12","text":" @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n time, and later looking up past values by block number. See {Votes} as an example.\n To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n checkpoint for the current transaction block using the {push} function.\n _Available since v4.5._"},"fullyImplemented":true,"linearizedBaseContracts":[2779],"name":"CheckpointsUpgradeable","nameLocation":"649:22:12","scope":2780,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"id":13,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol","id":2822,"exportedSymbols":{"AddressUpgradeable":[2545],"ContextUpgradeable":[2821],"Initializable":[2302]},"nodeType":"SourceUnit","src":"86:1259:13","nodes":[{"id":2781,"nodeType":"PragmaDirective","src":"86:23:13","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":2782,"nodeType":"ImportDirective","src":"110:42:13","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","nameLocation":"-1:-1:-1","scope":2822,"sourceUnit":2303,"symbolAliases":[],"unitAlias":""},{"id":2821,"nodeType":"ContractDefinition","src":"651:693:13","nodes":[{"id":2791,"nodeType":"FunctionDefinition","src":"711:59:13","nodes":[],"body":{"id":2790,"nodeType":"Block","src":"763:7:13","nodes":[],"statements":[]},"implemented":true,"kind":"function","modifiers":[{"id":2788,"kind":"modifierInvocation","modifierName":{"id":2787,"name":"onlyInitializing","nameLocations":["746:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"746:16:13"},"nodeType":"ModifierInvocation","src":"746:16:13"}],"name":"__Context_init","nameLocation":"720:14:13","parameters":{"id":2786,"nodeType":"ParameterList","parameters":[],"src":"734:2:13"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[],"src":"763:0:13"},"scope":2821,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2797,"nodeType":"FunctionDefinition","src":"776:69:13","nodes":[],"body":{"id":2796,"nodeType":"Block","src":"838:7:13","nodes":[],"statements":[]},"implemented":true,"kind":"function","modifiers":[{"id":2794,"kind":"modifierInvocation","modifierName":{"id":2793,"name":"onlyInitializing","nameLocations":["821:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"821:16:13"},"nodeType":"ModifierInvocation","src":"821:16:13"}],"name":"__Context_init_unchained","nameLocation":"785:24:13","parameters":{"id":2792,"nodeType":"ParameterList","parameters":[],"src":"809:2:13"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"838:0:13"},"scope":2821,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":2806,"nodeType":"FunctionDefinition","src":"850:96:13","nodes":[],"body":{"id":2805,"nodeType":"Block","src":"912:34:13","nodes":[],"statements":[{"expression":{"expression":{"id":2802,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:13","memberName":"sender","nodeType":"MemberAccess","src":"929:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2801,"id":2804,"nodeType":"Return","src":"922:17:13"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:13","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[],"src":"869:2:13"},"returnParameters":{"id":2801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2806,"src":"903:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2799,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:13"},"scope":2821,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":2815,"nodeType":"FunctionDefinition","src":"952:99:13","nodes":[],"body":{"id":2814,"nodeType":"Block","src":"1019:32:13","nodes":[],"statements":[{"expression":{"expression":{"id":2811,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:13","memberName":"data","nodeType":"MemberAccess","src":"1036:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2810,"id":2813,"nodeType":"Return","src":"1029:15:13"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:13","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[],"src":"969:2:13"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2815,"src":"1003:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2808,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:13"},"scope":2821,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":2820,"nodeType":"VariableDeclaration","src":"1316:25:13","nodes":[],"constant":false,"documentation":{"id":2816,"nodeType":"StructuredDocumentation","src":"1057:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"mutability":"mutable","name":"__gap","nameLocation":"1336:5:13","scope":2821,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2819,"length":{"hexValue":"3530","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":2784,"name":"Initializable","nameLocations":["691:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":2302,"src":"691:13:13"},"id":2785,"nodeType":"InheritanceSpecifier","src":"691:13:13"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"154:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"linearizedBaseContracts":[2821,2302],"name":"ContextUpgradeable","nameLocation":"669:18:13","scope":2822,"usedErrors":[],"usedEvents":[2166]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"id":14,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol","id":3048,"exportedSymbols":{"StringsUpgradeable":[3047]},"nodeType":"SourceUnit","src":"101:2307:14","nodes":[{"id":2823,"nodeType":"PragmaDirective","src":"101:23:14","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":3047,"nodeType":"ContractDefinition","src":"161:2246:14","nodes":[{"id":2827,"nodeType":"VariableDeclaration","src":"194:58:14","nodes":[],"constant":true,"mutability":"constant","name":"_HEX_SYMBOLS","nameLocation":"219:12:14","scope":3047,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2825,"name":"bytes16","nodeType":"ElementaryTypeName","src":"194:7:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"234:18:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"id":2830,"nodeType":"VariableDeclaration","src":"258:43:14","nodes":[],"constant":true,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"281:15:14","scope":3047,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2828,"name":"uint8","nodeType":"ElementaryTypeName","src":"258:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"299:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"id":2909,"nodeType":"FunctionDefinition","src":"403:703:14","nodes":[],"body":{"id":2908,"nodeType":"Block","src":"474:632:14","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"676:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"685:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"676:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2844,"nodeType":"IfStatement","src":"672:51:14","trueBody":{"id":2843,"nodeType":"Block","src":"688:35:14","statements":[{"expression":{"hexValue":"30","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"709:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":2837,"id":2842,"nodeType":"Return","src":"702:10:14"}]}},{"assignments":[2846],"declarations":[{"constant":false,"id":2846,"mutability":"mutable","name":"temp","nameLocation":"740:4:14","nodeType":"VariableDeclaration","scope":2908,"src":"732:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2845,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2848,"initialValue":{"id":2847,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"747:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"732:20:14"},{"assignments":[2850],"declarations":[{"constant":false,"id":2850,"mutability":"mutable","name":"digits","nameLocation":"770:6:14","nodeType":"VariableDeclaration","scope":2908,"src":"762:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2851,"nodeType":"VariableDeclarationStatement","src":"762:14:14"},{"body":{"id":2862,"nodeType":"Block","src":"804:57:14","statements":[{"expression":{"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"818:8:14","subExpression":{"id":2855,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"818:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2857,"nodeType":"ExpressionStatement","src":"818:8:14"},{"expression":{"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2858,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"840:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"848:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"840:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2861,"nodeType":"ExpressionStatement","src":"840:10:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2852,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"793:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"801:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"793:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2863,"nodeType":"WhileStatement","src":"786:75:14"},{"assignments":[2865],"declarations":[{"constant":false,"id":2865,"mutability":"mutable","name":"buffer","nameLocation":"883:6:14","nodeType":"VariableDeclaration","scope":2908,"src":"870:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2864,"name":"bytes","nodeType":"ElementaryTypeName","src":"870:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2870,"initialValue":{"arguments":[{"id":2868,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"902:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"892:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2866,"name":"bytes","nodeType":"ElementaryTypeName","src":"896:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"892:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"870:39:14"},{"body":{"id":2901,"nodeType":"Block","src":"938:131:14","statements":[{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2874,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"952:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"962:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"952:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2877,"nodeType":"ExpressionStatement","src":"952:11:14"},{"expression":{"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2878,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"977:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2880,"indexExpression":{"id":2879,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"984:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"977:14:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1007:2:14","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"1020:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3130","id":2889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1028:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1020:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1012:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:14","typeDescriptions":{}}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1012:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1007:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1001:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2883,"name":"uint8","nodeType":"ElementaryTypeName","src":"1001:5:14","typeDescriptions":{}}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"994:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":2881,"name":"bytes1","nodeType":"ElementaryTypeName","src":"994:6:14","typeDescriptions":{}}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"994:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"977:56:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2896,"nodeType":"ExpressionStatement","src":"977:56:14"},{"expression":{"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"1047:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1056:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1047:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2900,"nodeType":"ExpressionStatement","src":"1047:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"926:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"935:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"926:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2902,"nodeType":"WhileStatement","src":"919:150:14"},{"expression":{"arguments":[{"id":2905,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"1092:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1085:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2903,"name":"string","nodeType":"ElementaryTypeName","src":"1085:6:14","typeDescriptions":{}}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1085:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2837,"id":2907,"nodeType":"Return","src":"1078:21:14"}]},"documentation":{"id":2831,"nodeType":"StructuredDocumentation","src":"308:90:14","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"412:8:14","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2833,"mutability":"mutable","name":"value","nameLocation":"429:5:14","nodeType":"VariableDeclaration","scope":2909,"src":"421:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2832,"name":"uint256","nodeType":"ElementaryTypeName","src":"421:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"420:15:14"},"returnParameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2909,"src":"459:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2835,"name":"string","nodeType":"ElementaryTypeName","src":"459:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"458:15:14"},"scope":3047,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":2950,"nodeType":"FunctionDefinition","src":"1211:329:14","nodes":[],"body":{"id":2949,"nodeType":"Block","src":"1285:255:14","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"1299:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1308:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1299:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2923,"nodeType":"IfStatement","src":"1295:54:14","trueBody":{"id":2922,"nodeType":"Block","src":"1311:38:14","statements":[{"expression":{"hexValue":"30783030","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1332:6:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"functionReturnParameters":2916,"id":2921,"nodeType":"Return","src":"1325:13:14"}]}},{"assignments":[2925],"declarations":[{"constant":false,"id":2925,"mutability":"mutable","name":"temp","nameLocation":"1366:4:14","nodeType":"VariableDeclaration","scope":2949,"src":"1358:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2927,"initialValue":{"id":2926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"1373:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1358:20:14"},{"assignments":[2929],"declarations":[{"constant":false,"id":2929,"mutability":"mutable","name":"length","nameLocation":"1396:6:14","nodeType":"VariableDeclaration","scope":2949,"src":"1388:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1388:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2931,"initialValue":{"hexValue":"30","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1405:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1388:18:14"},{"body":{"id":2942,"nodeType":"Block","src":"1434:57:14","statements":[{"expression":{"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1448:8:14","subExpression":{"id":2935,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"1448:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2937,"nodeType":"ExpressionStatement","src":"1448:8:14"},{"expression":{"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2938,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"1470:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1479:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1470:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2941,"nodeType":"ExpressionStatement","src":"1470:10:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2932,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"1423:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1431:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1423:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"WhileStatement","src":"1416:75:14"},{"expression":{"arguments":[{"id":2945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"1519:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2946,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"1526:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2944,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2950,3026,3046],"referencedDeclaration":3026,"src":"1507:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2916,"id":2948,"nodeType":"Return","src":"1500:33:14"}]},"documentation":{"id":2910,"nodeType":"StructuredDocumentation","src":"1112:94:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1220:11:14","parameters":{"id":2913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2912,"mutability":"mutable","name":"value","nameLocation":"1240:5:14","nodeType":"VariableDeclaration","scope":2950,"src":"1232:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1232:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1231:15:14"},"returnParameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"1270:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2914,"name":"string","nodeType":"ElementaryTypeName","src":"1270:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1269:15:14"},"scope":3047,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3026,"nodeType":"FunctionDefinition","src":"1663:441:14","nodes":[],"body":{"id":3025,"nodeType":"Block","src":"1753:351:14","nodes":[],"statements":[{"assignments":[2961],"declarations":[{"constant":false,"id":2961,"mutability":"mutable","name":"buffer","nameLocation":"1776:6:14","nodeType":"VariableDeclaration","scope":3025,"src":"1763:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2960,"name":"bytes","nodeType":"ElementaryTypeName","src":"1763:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2970,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1795:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2965,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"1799:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1795:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1795:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1785:9:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2962,"name":"bytes","nodeType":"ElementaryTypeName","src":"1789:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1763:47:14"},{"expression":{"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2971,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"1820:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2973,"indexExpression":{"hexValue":"30","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1827:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1820:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1832:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1820:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2976,"nodeType":"ExpressionStatement","src":"1820:15:14"},{"expression":{"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2977,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"1845:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2979,"indexExpression":{"hexValue":"31","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1845:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1857:3:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1845:15:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2982,"nodeType":"ExpressionStatement","src":"1845:15:14"},{"body":{"id":3011,"nodeType":"Block","src":"1915:87:14","statements":[{"expression":{"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2997,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"1929:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2999,"indexExpression":{"id":2998,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"1936:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1929:9:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3000,"name":"_HEX_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"1941:12:14","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3004,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"1954:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1962:3:14","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1954:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1941:25:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1929:37:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3006,"nodeType":"ExpressionStatement","src":"1929:37:14"},{"expression":{"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"1980:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1990:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1980:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3010,"nodeType":"ExpressionStatement","src":"1980:11:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2991,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"1903:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1907:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1903:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3012,"initializationExpression":{"assignments":[2984],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"i","nameLocation":"1883:1:14","nodeType":"VariableDeclaration","scope":3012,"src":"1875:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1875:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2990,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2986,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"1891:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1887:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1900:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1887:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1875:26:14"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1910:3:14","subExpression":{"id":2994,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"1912:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2996,"nodeType":"ExpressionStatement","src":"1910:3:14"},"nodeType":"ForStatement","src":"1870:132:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"2019:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2028:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2019:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2031:34:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3013,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2011:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3019,"nodeType":"ExpressionStatement","src":"2011:55:14"},{"expression":{"arguments":[{"id":3022,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2090:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2083:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3020,"name":"string","nodeType":"ElementaryTypeName","src":"2083:6:14","typeDescriptions":{}}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2083:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2959,"id":3024,"nodeType":"Return","src":"2076:21:14"}]},"documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"1546:112:14","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1672:11:14","parameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"value","nameLocation":"1692:5:14","nodeType":"VariableDeclaration","scope":3026,"src":"1684:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2955,"mutability":"mutable","name":"length","nameLocation":"1707:6:14","nodeType":"VariableDeclaration","scope":3026,"src":"1699:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1699:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:31:14"},"returnParameters":{"id":2959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3026,"src":"1738:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2957,"name":"string","nodeType":"ElementaryTypeName","src":"1738:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1737:15:14"},"scope":3047,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3046,"nodeType":"FunctionDefinition","src":"2256:149:14","nodes":[],"body":{"id":3045,"nodeType":"Block","src":"2329:76:14","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3039,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"2374:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2366:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3037,"name":"uint160","nodeType":"ElementaryTypeName","src":"2366:7:14","typeDescriptions":{}}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2366:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2358:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3035,"name":"uint256","nodeType":"ElementaryTypeName","src":"2358:7:14","typeDescriptions":{}}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2358:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3042,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"2382:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3034,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2950,3026,3046],"referencedDeclaration":3026,"src":"2346:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2346:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3033,"id":3044,"nodeType":"Return","src":"2339:59:14"}]},"documentation":{"id":3027,"nodeType":"StructuredDocumentation","src":"2110:141:14","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2265:11:14","parameters":{"id":3030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3029,"mutability":"mutable","name":"addr","nameLocation":"2285:4:14","nodeType":"VariableDeclaration","scope":3046,"src":"2277:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3028,"name":"address","nodeType":"ElementaryTypeName","src":"2277:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2276:14:14"},"returnParameters":{"id":3033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"2314:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3031,"name":"string","nodeType":"ElementaryTypeName","src":"2314:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2313:15:14"},"scope":3047,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2824,"nodeType":"StructuredDocumentation","src":"126:34:14","text":" @dev String operations."},"fullyImplemented":true,"linearizedBaseContracts":[3047],"name":"StringsUpgradeable","nameLocation":"169:18:14","scope":3048,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"id":15,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol","id":3455,"exportedSymbols":{"ECDSAUpgradeable":[3454],"StringsUpgradeable":[3047]},"nodeType":"SourceUnit","src":"112:9309:15","nodes":[{"id":3049,"nodeType":"PragmaDirective","src":"112:23:15","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":3050,"nodeType":"ImportDirective","src":"137:35:15","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","nameLocation":"-1:-1:-1","scope":3455,"sourceUnit":3048,"symbolAliases":[],"unitAlias":""},{"id":3454,"nodeType":"ContractDefinition","src":"380:9040:15","nodes":[{"id":3057,"nodeType":"EnumDefinition","src":"411:153:15","nodes":[],"canonicalName":"ECDSAUpgradeable.RecoverError","members":[{"id":3052,"name":"NoError","nameLocation":"439:7:15","nodeType":"EnumValue","src":"439:7:15"},{"id":3053,"name":"InvalidSignature","nameLocation":"456:16:15","nodeType":"EnumValue","src":"456:16:15"},{"id":3054,"name":"InvalidSignatureLength","nameLocation":"482:22:15","nodeType":"EnumValue","src":"482:22:15"},{"id":3055,"name":"InvalidSignatureS","nameLocation":"514:17:15","nodeType":"EnumValue","src":"514:17:15"},{"id":3056,"name":"InvalidSignatureV","nameLocation":"541:17:15","nodeType":"EnumValue","src":"541:17:15"}],"name":"RecoverError","nameLocation":"416:12:15"},{"id":3111,"nodeType":"FunctionDefinition","src":"570:631:15","nodes":[],"body":{"id":3110,"nodeType":"Block","src":"624:577:15","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3063,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"638:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3064,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"647:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"647:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"638:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3069,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"734:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3070,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"743:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3053,"src":"743:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"734:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3078,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"843:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3079,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"852:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"852:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"843:44:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"965:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3088,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"974:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3055,"src":"974:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"965:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"1085:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3097,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"1094:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1107:17:15","memberName":"InvalidSignatureV","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"1094:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"1085:39:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3105,"nodeType":"IfStatement","src":"1081:114:15","trueBody":{"id":3104,"nodeType":"Block","src":"1126:69:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202776272076616c7565","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1147:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4","typeString":"literal_string \"ECDSA: invalid signature 'v' value\""},"value":"ECDSA: invalid signature 'v' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4","typeString":"literal_string \"ECDSA: invalid signature 'v' value\""}],"id":3100,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1140:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1140:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3103,"nodeType":"ExpressionStatement","src":"1140:44:15"}]}},"id":3106,"nodeType":"IfStatement","src":"961:234:15","trueBody":{"id":3095,"nodeType":"Block","src":"1006:69:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3091,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3094,"nodeType":"ExpressionStatement","src":"1020:44:15"}]}},"id":3107,"nodeType":"IfStatement","src":"839:356:15","trueBody":{"id":3086,"nodeType":"Block","src":"889:66:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3082,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3085,"nodeType":"ExpressionStatement","src":"903:41:15"}]}},"id":3108,"nodeType":"IfStatement","src":"730:465:15","trueBody":{"id":3077,"nodeType":"Block","src":"774:59:15","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3073,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3076,"nodeType":"ExpressionStatement","src":"788:34:15"}]}},"id":3109,"nodeType":"IfStatement","src":"634:561:15","trueBody":{"id":3068,"nodeType":"Block","src":"669:55:15","statements":[{"functionReturnParameters":3062,"id":3067,"nodeType":"Return","src":"683:7:15"}]}}]},"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:15","parameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"error","nameLocation":"604:5:15","nodeType":"VariableDeclaration","scope":3111,"src":"591:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3059,"nodeType":"UserDefinedTypeName","pathNode":{"id":3058,"name":"RecoverError","nameLocations":["591:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"591:12:15"},"referencedDeclaration":3057,"src":"591:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"590:20:15"},"returnParameters":{"id":3062,"nodeType":"ParameterList","parameters":[],"src":"624:0:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"private"},{"id":3176,"nodeType":"FunctionDefinition","src":"2265:1373:15","nodes":[],"body":{"id":3175,"nodeType":"Block","src":"2369:1269:15","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3124,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"2576:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:6:15","memberName":"length","nodeType":"MemberAccess","src":"2576:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2596:2:15","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2576:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3146,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"3105:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3115:6:15","memberName":"length","nodeType":"MemberAccess","src":"3105:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3634","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"3105:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3172,"nodeType":"Block","src":"3551:81:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3581:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3573:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"3573:7:15","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3573:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3168,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"3585:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3598:22:15","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"3585:35:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3572:49:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3123,"id":3171,"nodeType":"Return","src":"3565:56:15"}]},"id":3173,"nodeType":"IfStatement","src":"3101:531:15","trueBody":{"id":3163,"nodeType":"Block","src":"3129:416:15","statements":[{"assignments":[3151],"declarations":[{"constant":false,"id":3151,"mutability":"mutable","name":"r","nameLocation":"3151:1:15","nodeType":"VariableDeclaration","scope":3163,"src":"3143:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3143:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3152,"nodeType":"VariableDeclarationStatement","src":"3143:9:15"},{"assignments":[3154],"declarations":[{"constant":false,"id":3154,"mutability":"mutable","name":"vs","nameLocation":"3174:2:15","nodeType":"VariableDeclaration","scope":3163,"src":"3166:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3166:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3155,"nodeType":"VariableDeclarationStatement","src":"3166:10:15"},{"AST":{"nativeSrc":"3377:114:15","nodeType":"YulBlock","src":"3377:114:15","statements":[{"nativeSrc":"3395:32:15","nodeType":"YulAssignment","src":"3395:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"3410:9:15","nodeType":"YulIdentifier","src":"3410:9:15"},{"kind":"number","nativeSrc":"3421:4:15","nodeType":"YulLiteral","src":"3421:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3406:3:15","nodeType":"YulIdentifier","src":"3406:3:15"},"nativeSrc":"3406:20:15","nodeType":"YulFunctionCall","src":"3406:20:15"}],"functionName":{"name":"mload","nativeSrc":"3400:5:15","nodeType":"YulIdentifier","src":"3400:5:15"},"nativeSrc":"3400:27:15","nodeType":"YulFunctionCall","src":"3400:27:15"},"variableNames":[{"name":"r","nativeSrc":"3395:1:15","nodeType":"YulIdentifier","src":"3395:1:15"}]},{"nativeSrc":"3444:33:15","nodeType":"YulAssignment","src":"3444:33:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"3460:9:15","nodeType":"YulIdentifier","src":"3460:9:15"},{"kind":"number","nativeSrc":"3471:4:15","nodeType":"YulLiteral","src":"3471:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"3456:3:15","nodeType":"YulIdentifier","src":"3456:3:15"},"nativeSrc":"3456:20:15","nodeType":"YulFunctionCall","src":"3456:20:15"}],"functionName":{"name":"mload","nativeSrc":"3450:5:15","nodeType":"YulIdentifier","src":"3450:5:15"},"nativeSrc":"3450:27:15","nodeType":"YulFunctionCall","src":"3450:27:15"},"variableNames":[{"name":"vs","nativeSrc":"3444:2:15","nodeType":"YulIdentifier","src":"3444:2:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":3151,"isOffset":false,"isSlot":false,"src":"3395:1:15","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3410:9:15","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3460:9:15","valueSize":1},{"declaration":3154,"isOffset":false,"isSlot":false,"src":"3444:2:15","valueSize":1}],"id":3156,"nodeType":"InlineAssembly","src":"3368:123:15"},{"expression":{"arguments":[{"id":3158,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"3522:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3159,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3528:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3160,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"3531:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3157,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3250,"src":"3511:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3511:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3123,"id":3162,"nodeType":"Return","src":"3504:30:15"}]}},"id":3174,"nodeType":"IfStatement","src":"2572:1060:15","trueBody":{"id":3145,"nodeType":"Block","src":"2600:495:15","statements":[{"assignments":[3129],"declarations":[{"constant":false,"id":3129,"mutability":"mutable","name":"r","nameLocation":"2622:1:15","nodeType":"VariableDeclaration","scope":3145,"src":"2614:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3128,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2614:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3130,"nodeType":"VariableDeclarationStatement","src":"2614:9:15"},{"assignments":[3132],"declarations":[{"constant":false,"id":3132,"mutability":"mutable","name":"s","nameLocation":"2645:1:15","nodeType":"VariableDeclaration","scope":3145,"src":"2637:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2637:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3133,"nodeType":"VariableDeclarationStatement","src":"2637:9:15"},{"assignments":[3135],"declarations":[{"constant":false,"id":3135,"mutability":"mutable","name":"v","nameLocation":"2666:1:15","nodeType":"VariableDeclaration","scope":3145,"src":"2660:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3134,"name":"uint8","nodeType":"ElementaryTypeName","src":"2660:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3136,"nodeType":"VariableDeclarationStatement","src":"2660:7:15"},{"AST":{"nativeSrc":"2868:171:15","nodeType":"YulBlock","src":"2868:171:15","statements":[{"nativeSrc":"2886:32:15","nodeType":"YulAssignment","src":"2886:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2901:9:15","nodeType":"YulIdentifier","src":"2901:9:15"},{"kind":"number","nativeSrc":"2912:4:15","nodeType":"YulLiteral","src":"2912:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2897:3:15","nodeType":"YulIdentifier","src":"2897:3:15"},"nativeSrc":"2897:20:15","nodeType":"YulFunctionCall","src":"2897:20:15"}],"functionName":{"name":"mload","nativeSrc":"2891:5:15","nodeType":"YulIdentifier","src":"2891:5:15"},"nativeSrc":"2891:27:15","nodeType":"YulFunctionCall","src":"2891:27:15"},"variableNames":[{"name":"r","nativeSrc":"2886:1:15","nodeType":"YulIdentifier","src":"2886:1:15"}]},{"nativeSrc":"2935:32:15","nodeType":"YulAssignment","src":"2935:32:15","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2950:9:15","nodeType":"YulIdentifier","src":"2950:9:15"},{"kind":"number","nativeSrc":"2961:4:15","nodeType":"YulLiteral","src":"2961:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2946:3:15","nodeType":"YulIdentifier","src":"2946:3:15"},"nativeSrc":"2946:20:15","nodeType":"YulFunctionCall","src":"2946:20:15"}],"functionName":{"name":"mload","nativeSrc":"2940:5:15","nodeType":"YulIdentifier","src":"2940:5:15"},"nativeSrc":"2940:27:15","nodeType":"YulFunctionCall","src":"2940:27:15"},"variableNames":[{"name":"s","nativeSrc":"2935:1:15","nodeType":"YulIdentifier","src":"2935:1:15"}]},{"nativeSrc":"2984:41:15","nodeType":"YulAssignment","src":"2984:41:15","value":{"arguments":[{"kind":"number","nativeSrc":"2994:1:15","nodeType":"YulLiteral","src":"2994:1:15","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"3007:9:15","nodeType":"YulIdentifier","src":"3007:9:15"},{"kind":"number","nativeSrc":"3018:4:15","nodeType":"YulLiteral","src":"3018:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"3003:3:15","nodeType":"YulIdentifier","src":"3003:3:15"},"nativeSrc":"3003:20:15","nodeType":"YulFunctionCall","src":"3003:20:15"}],"functionName":{"name":"mload","nativeSrc":"2997:5:15","nodeType":"YulIdentifier","src":"2997:5:15"},"nativeSrc":"2997:27:15","nodeType":"YulFunctionCall","src":"2997:27:15"}],"functionName":{"name":"byte","nativeSrc":"2989:4:15","nodeType":"YulIdentifier","src":"2989:4:15"},"nativeSrc":"2989:36:15","nodeType":"YulFunctionCall","src":"2989:36:15"},"variableNames":[{"name":"v","nativeSrc":"2984:1:15","nodeType":"YulIdentifier","src":"2984:1:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"cancun","externalReferences":[{"declaration":3129,"isOffset":false,"isSlot":false,"src":"2886:1:15","valueSize":1},{"declaration":3132,"isOffset":false,"isSlot":false,"src":"2935:1:15","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"2901:9:15","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"2950:9:15","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3007:9:15","valueSize":1},{"declaration":3135,"isOffset":false,"isSlot":false,"src":"2984:1:15","valueSize":1}],"id":3137,"nodeType":"InlineAssembly","src":"2859:180:15"},{"expression":{"arguments":[{"id":3139,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"3070:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3140,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"3076:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3141,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3129,"src":"3079:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3142,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"3082:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3138,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3361,"src":"3059:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3059:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3123,"id":3144,"nodeType":"Return","src":"3052:32:15"}]}}]},"documentation":{"id":3112,"nodeType":"StructuredDocumentation","src":"1207:1053:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2274:10:15","parameters":{"id":3117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3114,"mutability":"mutable","name":"hash","nameLocation":"2293:4:15","nodeType":"VariableDeclaration","scope":3176,"src":"2285:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2285:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"signature","nameLocation":"2312:9:15","nodeType":"VariableDeclaration","scope":3176,"src":"2299:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3115,"name":"bytes","nodeType":"ElementaryTypeName","src":"2299:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2284:38:15"},"returnParameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3176,"src":"2346:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3118,"name":"address","nodeType":"ElementaryTypeName","src":"2346:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3176,"src":"2355:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"RecoverError","nameLocations":["2355:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"2355:12:15"},"referencedDeclaration":3057,"src":"2355:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2345:23:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3203,"nodeType":"FunctionDefinition","src":"4424:227:15","nodes":[],"body":{"id":3202,"nodeType":"Block","src":"4511:140:15","nodes":[],"statements":[{"assignments":[3187,3190],"declarations":[{"constant":false,"id":3187,"mutability":"mutable","name":"recovered","nameLocation":"4530:9:15","nodeType":"VariableDeclaration","scope":3202,"src":"4522:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3186,"name":"address","nodeType":"ElementaryTypeName","src":"4522:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"error","nameLocation":"4554:5:15","nodeType":"VariableDeclaration","scope":3202,"src":"4541:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3189,"nodeType":"UserDefinedTypeName","pathNode":{"id":3188,"name":"RecoverError","nameLocations":["4541:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"4541:12:15"},"referencedDeclaration":3057,"src":"4541:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3195,"initialValue":{"arguments":[{"id":3192,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"4574:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3193,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"4580:9:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3191,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3176,"src":"4563:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4563:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4521:69:15"},{"expression":{"arguments":[{"id":3197,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"4612:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3196,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"4600:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3057_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4600:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3199,"nodeType":"ExpressionStatement","src":"4600:18:15"},{"expression":{"id":3200,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"4635:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3185,"id":3201,"nodeType":"Return","src":"4628:16:15"}]},"documentation":{"id":3177,"nodeType":"StructuredDocumentation","src":"3644:775:15","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4433:7:15","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"hash","nameLocation":"4449:4:15","nodeType":"VariableDeclaration","scope":3203,"src":"4441:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3178,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4441:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"signature","nameLocation":"4468:9:15","nodeType":"VariableDeclaration","scope":3203,"src":"4455:22:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3180,"name":"bytes","nodeType":"ElementaryTypeName","src":"4455:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4440:38:15"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3203,"src":"4502:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3183,"name":"address","nodeType":"ElementaryTypeName","src":"4502:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4501:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3250,"nodeType":"FunctionDefinition","src":"4905:336:15","nodes":[],"body":{"id":3249,"nodeType":"Block","src":"5038:203:15","nodes":[],"statements":[{"assignments":[3219],"declarations":[{"constant":false,"id":3219,"mutability":"mutable","name":"s","nameLocation":"5056:1:15","nodeType":"VariableDeclaration","scope":3249,"src":"5048:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5048:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3226,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3220,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"5060:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5073:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5065:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5065:7:15","typeDescriptions":{}}},"id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:75:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5060:80:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5048:92:15"},{"assignments":[3228],"declarations":[{"constant":false,"id":3228,"mutability":"mutable","name":"v","nameLocation":"5156:1:15","nodeType":"VariableDeclaration","scope":3249,"src":"5150:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3227,"name":"uint8","nodeType":"ElementaryTypeName","src":"5150:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3241,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3233,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"5175:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5167:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3231,"name":"uint256","nodeType":"ElementaryTypeName","src":"5167:7:15","typeDescriptions":{}}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5167:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5182:3:15","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"5167:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5166:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5189:2:15","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"5166:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5160:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3229,"name":"uint8","nodeType":"ElementaryTypeName","src":"5160:5:15","typeDescriptions":{}}},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"5150:42:15"},{"expression":{"arguments":[{"id":3243,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"5220:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3244,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"5226:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3245,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"5229:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3246,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"5232:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3242,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3361,"src":"5209:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3217,"id":3248,"nodeType":"Return","src":"5202:32:15"}]},"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"4657:243:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4914:10:15","parameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"hash","nameLocation":"4942:4:15","nodeType":"VariableDeclaration","scope":3250,"src":"4934:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4934:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3208,"mutability":"mutable","name":"r","nameLocation":"4964:1:15","nodeType":"VariableDeclaration","scope":3250,"src":"4956:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3207,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4956:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3210,"mutability":"mutable","name":"vs","nameLocation":"4983:2:15","nodeType":"VariableDeclaration","scope":3250,"src":"4975:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4975:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4924:67:15"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3250,"src":"5015:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3212,"name":"address","nodeType":"ElementaryTypeName","src":"5015:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3250,"src":"5024:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3215,"nodeType":"UserDefinedTypeName","pathNode":{"id":3214,"name":"RecoverError","nameLocations":["5024:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"5024:12:15"},"referencedDeclaration":3057,"src":"5024:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5014:23:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3280,"nodeType":"FunctionDefinition","src":"5406:252:15","nodes":[],"body":{"id":3279,"nodeType":"Block","src":"5522:136:15","nodes":[],"statements":[{"assignments":[3263,3266],"declarations":[{"constant":false,"id":3263,"mutability":"mutable","name":"recovered","nameLocation":"5541:9:15","nodeType":"VariableDeclaration","scope":3279,"src":"5533:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3262,"name":"address","nodeType":"ElementaryTypeName","src":"5533:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3266,"mutability":"mutable","name":"error","nameLocation":"5565:5:15","nodeType":"VariableDeclaration","scope":3279,"src":"5552:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3265,"nodeType":"UserDefinedTypeName","pathNode":{"id":3264,"name":"RecoverError","nameLocations":["5552:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"5552:12:15"},"referencedDeclaration":3057,"src":"5552:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3272,"initialValue":{"arguments":[{"id":3268,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"5585:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3269,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"5591:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3270,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"5594:2:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3267,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3250,"src":"5574:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5574:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"5532:65:15"},{"expression":{"arguments":[{"id":3274,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"5619:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3273,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"5607:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3057_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5607:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3276,"nodeType":"ExpressionStatement","src":"5607:18:15"},{"expression":{"id":3277,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3263,"src":"5642:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3261,"id":3278,"nodeType":"Return","src":"5635:16:15"}]},"documentation":{"id":3251,"nodeType":"StructuredDocumentation","src":"5247:154:15","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"5415:7:15","parameters":{"id":3258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"hash","nameLocation":"5440:4:15","nodeType":"VariableDeclaration","scope":3280,"src":"5432:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5432:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"r","nameLocation":"5462:1:15","nodeType":"VariableDeclaration","scope":3280,"src":"5454:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5454:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3257,"mutability":"mutable","name":"vs","nameLocation":"5481:2:15","nodeType":"VariableDeclaration","scope":3280,"src":"5473:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5473:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5422:67:15"},"returnParameters":{"id":3261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3280,"src":"5513:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3259,"name":"address","nodeType":"ElementaryTypeName","src":"5513:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5512:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3361,"nodeType":"FunctionDefinition","src":"5832:1603:15","nodes":[],"body":{"id":3360,"nodeType":"Block","src":"5981:1454:15","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3299,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"6877:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6869:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3297,"name":"uint256","nodeType":"ElementaryTypeName","src":"6869:7:15","typeDescriptions":{}}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6869:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6882:66:15","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6869:79:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3312,"nodeType":"IfStatement","src":"6865:161:15","trueBody":{"id":3311,"nodeType":"Block","src":"6950:76:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6980:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6972:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3303,"name":"address","nodeType":"ElementaryTypeName","src":"6972:7:15","typeDescriptions":{}}},"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6972:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3307,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"6984:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6997:17:15","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3055,"src":"6984:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6971:44:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3296,"id":3310,"nodeType":"Return","src":"6964:51:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3313,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7039:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3237","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7044:2:15","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"7039:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3316,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7050:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3238","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7055:2:15","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"src":"7050:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7039:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3329,"nodeType":"IfStatement","src":"7035:100:15","trueBody":{"id":3328,"nodeType":"Block","src":"7059:76:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7089:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7081:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"7081:7:15","typeDescriptions":{}}},"id":3323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7081:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3324,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"7093:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7106:17:15","memberName":"InvalidSignatureV","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"7093:30:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7080:44:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3296,"id":3327,"nodeType":"Return","src":"7073:51:15"}]}},{"assignments":[3331],"declarations":[{"constant":false,"id":3331,"mutability":"mutable","name":"signer","nameLocation":"7237:6:15","nodeType":"VariableDeclaration","scope":3360,"src":"7229:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3330,"name":"address","nodeType":"ElementaryTypeName","src":"7229:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3338,"initialValue":{"arguments":[{"id":3333,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"7256:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3334,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7262:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3335,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"7265:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3336,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"7268:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3332,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"7246:9:15","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7246:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7229:41:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3339,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"7284:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7302:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7294:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3340,"name":"address","nodeType":"ElementaryTypeName","src":"7294:7:15","typeDescriptions":{}}},"id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7294:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7284:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3354,"nodeType":"IfStatement","src":"7280:101:15","trueBody":{"id":3353,"nodeType":"Block","src":"7306:75:15","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7336:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7328:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3345,"name":"address","nodeType":"ElementaryTypeName","src":"7328:7:15","typeDescriptions":{}}},"id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7328:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3349,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"7340:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7353:16:15","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3053,"src":"7340:29:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7327:43:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3296,"id":3352,"nodeType":"Return","src":"7320:50:15"}]}},{"expression":{"components":[{"id":3355,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"7399:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3356,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"7407:12:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7420:7:15","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"7407:20:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":3358,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7398:30:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":3296,"id":3359,"nodeType":"Return","src":"7391:37:15"}]},"documentation":{"id":3281,"nodeType":"StructuredDocumentation","src":"5664:163:15","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5841:10:15","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3283,"mutability":"mutable","name":"hash","nameLocation":"5869:4:15","nodeType":"VariableDeclaration","scope":3361,"src":"5861:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5861:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3285,"mutability":"mutable","name":"v","nameLocation":"5889:1:15","nodeType":"VariableDeclaration","scope":3361,"src":"5883:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3284,"name":"uint8","nodeType":"ElementaryTypeName","src":"5883:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"r","nameLocation":"5908:1:15","nodeType":"VariableDeclaration","scope":3361,"src":"5900:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5900:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"s","nameLocation":"5927:1:15","nodeType":"VariableDeclaration","scope":3361,"src":"5919:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5919:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5851:83:15"},"returnParameters":{"id":3296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3361,"src":"5958:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3291,"name":"address","nodeType":"ElementaryTypeName","src":"5958:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3361,"src":"5967:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3294,"nodeType":"UserDefinedTypeName","pathNode":{"id":3293,"name":"RecoverError","nameLocations":["5967:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"5967:12:15"},"referencedDeclaration":3057,"src":"5967:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5957:23:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3394,"nodeType":"FunctionDefinition","src":"7568:270:15","nodes":[],"body":{"id":3393,"nodeType":"Block","src":"7700:138:15","nodes":[],"statements":[{"assignments":[3376,3379],"declarations":[{"constant":false,"id":3376,"mutability":"mutable","name":"recovered","nameLocation":"7719:9:15","nodeType":"VariableDeclaration","scope":3393,"src":"7711:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3375,"name":"address","nodeType":"ElementaryTypeName","src":"7711:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3379,"mutability":"mutable","name":"error","nameLocation":"7743:5:15","nodeType":"VariableDeclaration","scope":3393,"src":"7730:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3378,"nodeType":"UserDefinedTypeName","pathNode":{"id":3377,"name":"RecoverError","nameLocations":["7730:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"7730:12:15"},"referencedDeclaration":3057,"src":"7730:12:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3386,"initialValue":{"arguments":[{"id":3381,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"7763:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3382,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"7769:1:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3383,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"7772:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3384,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"7775:1:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3380,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3176,3250,3361],"referencedDeclaration":3361,"src":"7752:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7752:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"7710:67:15"},{"expression":{"arguments":[{"id":3388,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"7799:5:15","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":3387,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"7787:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3057_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7787:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3390,"nodeType":"ExpressionStatement","src":"7787:18:15"},{"expression":{"id":3391,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"7822:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3374,"id":3392,"nodeType":"Return","src":"7815:16:15"}]},"documentation":{"id":3362,"nodeType":"StructuredDocumentation","src":"7441:122:15","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"7577:7:15","parameters":{"id":3371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3364,"mutability":"mutable","name":"hash","nameLocation":"7602:4:15","nodeType":"VariableDeclaration","scope":3394,"src":"7594:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7594:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3366,"mutability":"mutable","name":"v","nameLocation":"7622:1:15","nodeType":"VariableDeclaration","scope":3394,"src":"7616:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3365,"name":"uint8","nodeType":"ElementaryTypeName","src":"7616:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"r","nameLocation":"7641:1:15","nodeType":"VariableDeclaration","scope":3394,"src":"7633:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7633:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3370,"mutability":"mutable","name":"s","nameLocation":"7660:1:15","nodeType":"VariableDeclaration","scope":3394,"src":"7652:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7652:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7584:83:15"},"returnParameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3394,"src":"7691:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3372,"name":"address","nodeType":"ElementaryTypeName","src":"7691:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7690:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3411,"nodeType":"FunctionDefinition","src":"8128:265:15","nodes":[],"body":{"id":3410,"nodeType":"Block","src":"8206:187:15","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8344:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3406,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"8380:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3403,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8327:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8331:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"8327:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8327:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3402,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8317:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8317:69:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3401,"id":3409,"nodeType":"Return","src":"8310:76:15"}]},"documentation":{"id":3395,"nodeType":"StructuredDocumentation","src":"7844:279:15","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"8137:22:15","parameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"hash","nameLocation":"8168:4:15","nodeType":"VariableDeclaration","scope":3411,"src":"8160:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8160:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8159:14:15"},"returnParameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3411,"src":"8197:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8197:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8196:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3433,"nodeType":"FunctionDefinition","src":"8678:207:15","nodes":[],"body":{"id":3432,"nodeType":"Block","src":"8758:127:15","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8802:32:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3425,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"8864:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8866:6:15","memberName":"length","nodeType":"MemberAccess","src":"8864:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3423,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"8836:18:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$3047_$","typeString":"type(library StringsUpgradeable)"}},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8855:8:15","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2909,"src":"8836:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8836:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3428,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"8875:1:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3420,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8785:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8789:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"8785:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8785:92:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3419,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8775:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8775:103:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3418,"id":3431,"nodeType":"Return","src":"8768:110:15"}]},"documentation":{"id":3412,"nodeType":"StructuredDocumentation","src":"8399:274:15","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"8687:22:15","parameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"s","nameLocation":"8723:1:15","nodeType":"VariableDeclaration","scope":3433,"src":"8710:14:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3413,"name":"bytes","nodeType":"ElementaryTypeName","src":"8710:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8709:16:15"},"returnParameters":{"id":3418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"8749:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8749:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8748:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3453,"nodeType":"FunctionDefinition","src":"9224:194:15","nodes":[],"body":{"id":3452,"nodeType":"Block","src":"9326:92:15","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":3446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9370:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3447,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"9382:15:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3448,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"9399:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3444,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9353:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9357:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"9353:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9353:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3443,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9343:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9343:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3442,"id":3451,"nodeType":"Return","src":"9336:75:15"}]},"documentation":{"id":3434,"nodeType":"StructuredDocumentation","src":"8891:328:15","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"9233:15:15","parameters":{"id":3439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"domainSeparator","nameLocation":"9257:15:15","nodeType":"VariableDeclaration","scope":3453,"src":"9249:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9249:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"structHash","nameLocation":"9282:10:15","nodeType":"VariableDeclaration","scope":3453,"src":"9274:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3437,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9274:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9248:45:15"},"returnParameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3453,"src":"9317:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9317:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9316:9:15"},"scope":3454,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3051,"nodeType":"StructuredDocumentation","src":"174:205:15","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"linearizedBaseContracts":[3454],"name":"ECDSAUpgradeable","nameLocation":"388:16:15","scope":3455,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol":{"id":16,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol","id":3535,"exportedSymbols":{"AddressUpgradeable":[2545],"ECDSAUpgradeable":[3454],"IERC1271Upgradeable":[2151],"SignatureCheckerUpgradeable":[3534],"StringsUpgradeable":[3047]},"nodeType":"SourceUnit","src":"123:1651:16","nodes":[{"id":3456,"nodeType":"PragmaDirective","src":"123:23:16","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":3457,"nodeType":"ImportDirective","src":"148:32:16","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","nameLocation":"-1:-1:-1","scope":3535,"sourceUnit":3455,"symbolAliases":[],"unitAlias":""},{"id":3458,"nodeType":"ImportDirective","src":"181:35:16","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol","file":"../AddressUpgradeable.sol","nameLocation":"-1:-1:-1","scope":3535,"sourceUnit":2546,"symbolAliases":[],"unitAlias":""},{"id":3459,"nodeType":"ImportDirective","src":"217:50:16","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol","file":"../../interfaces/IERC1271Upgradeable.sol","nameLocation":"-1:-1:-1","scope":3535,"sourceUnit":2152,"symbolAliases":[],"unitAlias":""},{"id":3534,"nodeType":"ContractDefinition","src":"564:1209:16","nodes":[{"id":3533,"nodeType":"FunctionDefinition","src":"1083:688:16","nodes":[],"body":{"id":3532,"nodeType":"Block","src":"1225:546:16","nodes":[],"statements":[{"assignments":[3473,3476],"declarations":[{"constant":false,"id":3473,"mutability":"mutable","name":"recovered","nameLocation":"1244:9:16","nodeType":"VariableDeclaration","scope":3532,"src":"1236:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3472,"name":"address","nodeType":"ElementaryTypeName","src":"1236:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"error","nameLocation":"1285:5:16","nodeType":"VariableDeclaration","scope":3532,"src":"1255:35:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":3475,"nodeType":"UserDefinedTypeName","pathNode":{"id":3474,"name":"ECDSAUpgradeable.RecoverError","nameLocations":["1255:16:16","1272:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3057,"src":"1255:29:16"},"referencedDeclaration":3057,"src":"1255:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":3482,"initialValue":{"arguments":[{"id":3479,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"1322:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3480,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"1328:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3477,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1294:16:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3454_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1311:10:16","memberName":"tryRecover","nodeType":"MemberAccess","referencedDeclaration":3176,"src":"1294:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1294:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3057_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"1235:103:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3483,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1352:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3484,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1361:16:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$3454_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1378:12:16","memberName":"RecoverError","nodeType":"MemberAccess","referencedDeclaration":3057,"src":"1361:29:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3057_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1391:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"1361:37:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3057","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"1352:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3488,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"1402:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3489,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"1415:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1402:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1352:69:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3495,"nodeType":"IfStatement","src":"1348:111:16","trueBody":{"id":3494,"nodeType":"Block","src":"1423:36:16","statements":[{"expression":{"hexValue":"74727565","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1444:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3471,"id":3493,"nodeType":"Return","src":"1437:11:16"}]}},{"assignments":[3497,3499],"declarations":[{"constant":false,"id":3497,"mutability":"mutable","name":"success","nameLocation":"1475:7:16","nodeType":"VariableDeclaration","scope":3532,"src":"1470:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3496,"name":"bool","nodeType":"ElementaryTypeName","src":"1470:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3499,"mutability":"mutable","name":"result","nameLocation":"1497:6:16","nodeType":"VariableDeclaration","scope":3532,"src":"1484:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3498,"name":"bytes","nodeType":"ElementaryTypeName","src":"1484:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3511,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":3504,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"1561:19:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271Upgradeable_$2151_$","typeString":"type(contract IERC1271Upgradeable)"}},"id":3505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1581:16:16","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"1561:36:16","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271Upgradeable.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1598:8:16","memberName":"selector","nodeType":"MemberAccess","src":"1561:45:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3507,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"1608:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3508,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"1614:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3502,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1538:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1542:18:16","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1538:22:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1538:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3500,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"1507:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1514:10:16","memberName":"staticcall","nodeType":"MemberAccess","src":"1507:17:16","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:127:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1469:165:16"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3512,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"1652:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3513,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1663:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1670:6:16","memberName":"length","nodeType":"MemberAccess","src":"1663:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1680:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1663:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1652:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1697:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1706:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":3521,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1706:6:16","typeDescriptions":{}}}],"id":3523,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1705:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"}],"expression":{"id":3518,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1686:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1690:6:16","memberName":"decode","nodeType":"MemberAccess","src":"1686:10:16","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1686:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3525,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"1718:19:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271Upgradeable_$2151_$","typeString":"type(contract IERC1271Upgradeable)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1738:16:16","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"1718:36:16","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271Upgradeable.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":3527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1755:8:16","memberName":"selector","nodeType":"MemberAccess","src":"1718:45:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1686:77:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1652:111:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1651:113:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3471,"id":3531,"nodeType":"Return","src":"1644:120:16"}]},"documentation":{"id":3461,"nodeType":"StructuredDocumentation","src":"606:472:16","text":" @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n change through time. It could return true at block N and false at block N+1 (or the opposite)."},"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignatureNow","nameLocation":"1092:19:16","parameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3463,"mutability":"mutable","name":"signer","nameLocation":"1129:6:16","nodeType":"VariableDeclaration","scope":3533,"src":"1121:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3462,"name":"address","nodeType":"ElementaryTypeName","src":"1121:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3465,"mutability":"mutable","name":"hash","nameLocation":"1153:4:16","nodeType":"VariableDeclaration","scope":3533,"src":"1145:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1145:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3467,"mutability":"mutable","name":"signature","nameLocation":"1180:9:16","nodeType":"VariableDeclaration","scope":3533,"src":"1167:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3466,"name":"bytes","nodeType":"ElementaryTypeName","src":"1167:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1111:84:16"},"returnParameters":{"id":3471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3533,"src":"1219:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3469,"name":"bool","nodeType":"ElementaryTypeName","src":"1219:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1218:6:16"},"scope":3534,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"SignatureCheckerUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3460,"nodeType":"StructuredDocumentation","src":"269:294:16","text":" @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n Argent and Gnosis Safe.\n _Available since v4.1._"},"fullyImplemented":true,"linearizedBaseContracts":[3534],"name":"SignatureCheckerUpgradeable","nameLocation":"572:27:16","scope":3535,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol":{"id":17,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol","id":4039,"exportedSymbols":{"MathUpgradeable":[4038]},"nodeType":"SourceUnit","src":"103:8735:17","nodes":[{"id":3536,"nodeType":"PragmaDirective","src":"103:23:17","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":4038,"nodeType":"ContractDefinition","src":"202:8635:17","nodes":[{"id":3541,"nodeType":"EnumDefinition","src":"232:122:17","nodes":[],"canonicalName":"MathUpgradeable.Rounding","members":[{"id":3538,"name":"Down","nameLocation":"256:4:17","nodeType":"EnumValue","src":"256:4:17"},{"id":3539,"name":"Up","nameLocation":"298:2:17","nodeType":"EnumValue","src":"298:2:17"},{"id":3540,"name":"Zero","nameLocation":"329:4:17","nodeType":"EnumValue","src":"329:4:17"}],"name":"Rounding","nameLocation":"237:8:17"},{"id":3559,"nodeType":"FunctionDefinition","src":"424:105:17","nodes":[],"body":{"id":3558,"nodeType":"Block","src":"491:38:17","nodes":[],"statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3551,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"508:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3552,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"513:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3555,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"521:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:14:17","trueExpression":{"id":3554,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"517:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3550,"id":3557,"nodeType":"Return","src":"501:21:17"}]},"documentation":{"id":3542,"nodeType":"StructuredDocumentation","src":"360:59:17","text":" @dev Returns the largest of two numbers."},"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:17","parameters":{"id":3547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3544,"mutability":"mutable","name":"a","nameLocation":"445:1:17","nodeType":"VariableDeclaration","scope":3559,"src":"437:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3543,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3546,"mutability":"mutable","name":"b","nameLocation":"456:1:17","nodeType":"VariableDeclaration","scope":3559,"src":"448:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:17"},"returnParameters":{"id":3550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3559,"src":"482:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3577,"nodeType":"FunctionDefinition","src":"600:104:17","nodes":[],"body":{"id":3576,"nodeType":"Block","src":"667:37:17","nodes":[],"statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3569,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"684:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3570,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"688:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"684:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3573,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"696:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"684:13:17","trueExpression":{"id":3572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"692:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3568,"id":3575,"nodeType":"Return","src":"677:20:17"}]},"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"535:60:17","text":" @dev Returns the smallest of two numbers."},"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"609:3:17","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3562,"mutability":"mutable","name":"a","nameLocation":"621:1:17","nodeType":"VariableDeclaration","scope":3577,"src":"613:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"b","nameLocation":"632:1:17","nodeType":"VariableDeclaration","scope":3577,"src":"624:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3563,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"612:22:17"},"returnParameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3577,"src":"658:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3566,"name":"uint256","nodeType":"ElementaryTypeName","src":"658:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"657:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3600,"nodeType":"FunctionDefinition","src":"817:153:17","nodes":[],"body":{"id":3599,"nodeType":"Block","src":"888:82:17","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3587,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"943:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3588,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"947:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"943:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3590,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"942:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3591,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"953:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3592,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3582,"src":"957:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"953:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3594,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"952:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"962:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"952:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3586,"id":3598,"nodeType":"Return","src":"935:28:17"}]},"documentation":{"id":3578,"nodeType":"StructuredDocumentation","src":"710:102:17","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"826:7:17","parameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"a","nameLocation":"842:1:17","nodeType":"VariableDeclaration","scope":3600,"src":"834:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3579,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"b","nameLocation":"853:1:17","nodeType":"VariableDeclaration","scope":3600,"src":"845:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3581,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"833:22:17"},"returnParameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3600,"src":"879:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint256","nodeType":"ElementaryTypeName","src":"879:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"878:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3625,"nodeType":"FunctionDefinition","src":"1169:194:17","nodes":[],"body":{"id":3624,"nodeType":"Block","src":"1240:123:17","nodes":[],"statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3610,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"1328:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1333:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1328:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3614,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"1342:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1346:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1342:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1341:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3618,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"1351:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1341:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1355:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1328:28:17","trueExpression":{"hexValue":"30","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1337:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3609,"id":3623,"nodeType":"Return","src":"1321:35:17"}]},"documentation":{"id":3601,"nodeType":"StructuredDocumentation","src":"976:188:17","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1178:7:17","parameters":{"id":3606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3603,"mutability":"mutable","name":"a","nameLocation":"1194:1:17","nodeType":"VariableDeclaration","scope":3625,"src":"1186:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1186:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3605,"mutability":"mutable","name":"b","nameLocation":"1205:1:17","nodeType":"VariableDeclaration","scope":3625,"src":"1197:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3604,"name":"uint256","nodeType":"ElementaryTypeName","src":"1197:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1185:22:17"},"returnParameters":{"id":3609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3625,"src":"1231:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1230:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3747,"nodeType":"FunctionDefinition","src":"1679:3925:17","nodes":[],"body":{"id":3746,"nodeType":"Block","src":"1807:3797:17","nodes":[],"statements":[{"id":3745,"nodeType":"UncheckedBlock","src":"1817:3781:17","statements":[{"assignments":[3638],"declarations":[{"constant":false,"id":3638,"mutability":"mutable","name":"prod0","nameLocation":"2146:5:17","nodeType":"VariableDeclaration","scope":3745,"src":"2138:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3637,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3639,"nodeType":"VariableDeclarationStatement","src":"2138:13:17"},{"assignments":[3641],"declarations":[{"constant":false,"id":3641,"mutability":"mutable","name":"prod1","nameLocation":"2218:5:17","nodeType":"VariableDeclaration","scope":3745,"src":"2210:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3642,"nodeType":"VariableDeclarationStatement","src":"2210:13:17"},{"AST":{"nativeSrc":"2290:157:17","nodeType":"YulBlock","src":"2290:157:17","statements":[{"nativeSrc":"2308:30:17","nodeType":"YulVariableDeclaration","src":"2308:30:17","value":{"arguments":[{"name":"x","nativeSrc":"2325:1:17","nodeType":"YulIdentifier","src":"2325:1:17"},{"name":"y","nativeSrc":"2328:1:17","nodeType":"YulIdentifier","src":"2328:1:17"},{"arguments":[{"kind":"number","nativeSrc":"2335:1:17","nodeType":"YulLiteral","src":"2335:1:17","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2331:3:17","nodeType":"YulIdentifier","src":"2331:3:17"},"nativeSrc":"2331:6:17","nodeType":"YulFunctionCall","src":"2331:6:17"}],"functionName":{"name":"mulmod","nativeSrc":"2318:6:17","nodeType":"YulIdentifier","src":"2318:6:17"},"nativeSrc":"2318:20:17","nodeType":"YulFunctionCall","src":"2318:20:17"},"variables":[{"name":"mm","nativeSrc":"2312:2:17","nodeType":"YulTypedName","src":"2312:2:17","type":""}]},{"nativeSrc":"2355:18:17","nodeType":"YulAssignment","src":"2355:18:17","value":{"arguments":[{"name":"x","nativeSrc":"2368:1:17","nodeType":"YulIdentifier","src":"2368:1:17"},{"name":"y","nativeSrc":"2371:1:17","nodeType":"YulIdentifier","src":"2371:1:17"}],"functionName":{"name":"mul","nativeSrc":"2364:3:17","nodeType":"YulIdentifier","src":"2364:3:17"},"nativeSrc":"2364:9:17","nodeType":"YulFunctionCall","src":"2364:9:17"},"variableNames":[{"name":"prod0","nativeSrc":"2355:5:17","nodeType":"YulIdentifier","src":"2355:5:17"}]},{"nativeSrc":"2390:43:17","nodeType":"YulAssignment","src":"2390:43:17","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2407:2:17","nodeType":"YulIdentifier","src":"2407:2:17"},{"name":"prod0","nativeSrc":"2411:5:17","nodeType":"YulIdentifier","src":"2411:5:17"}],"functionName":{"name":"sub","nativeSrc":"2403:3:17","nodeType":"YulIdentifier","src":"2403:3:17"},"nativeSrc":"2403:14:17","nodeType":"YulFunctionCall","src":"2403:14:17"},{"arguments":[{"name":"mm","nativeSrc":"2422:2:17","nodeType":"YulIdentifier","src":"2422:2:17"},{"name":"prod0","nativeSrc":"2426:5:17","nodeType":"YulIdentifier","src":"2426:5:17"}],"functionName":{"name":"lt","nativeSrc":"2419:2:17","nodeType":"YulIdentifier","src":"2419:2:17"},"nativeSrc":"2419:13:17","nodeType":"YulFunctionCall","src":"2419:13:17"}],"functionName":{"name":"sub","nativeSrc":"2399:3:17","nodeType":"YulIdentifier","src":"2399:3:17"},"nativeSrc":"2399:34:17","nodeType":"YulFunctionCall","src":"2399:34:17"},"variableNames":[{"name":"prod1","nativeSrc":"2390:5:17","nodeType":"YulIdentifier","src":"2390:5:17"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3638,"isOffset":false,"isSlot":false,"src":"2355:5:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"2411:5:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"2426:5:17","valueSize":1},{"declaration":3641,"isOffset":false,"isSlot":false,"src":"2390:5:17","valueSize":1},{"declaration":3628,"isOffset":false,"isSlot":false,"src":"2325:1:17","valueSize":1},{"declaration":3628,"isOffset":false,"isSlot":false,"src":"2368:1:17","valueSize":1},{"declaration":3630,"isOffset":false,"isSlot":false,"src":"2328:1:17","valueSize":1},{"declaration":3630,"isOffset":false,"isSlot":false,"src":"2371:1:17","valueSize":1}],"id":3643,"nodeType":"InlineAssembly","src":"2281:166:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3644,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"2528:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2528:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3652,"nodeType":"IfStatement","src":"2524:75:17","trueBody":{"id":3651,"nodeType":"Block","src":"2540:59:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3647,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"2565:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3648,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"2573:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2565:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3636,"id":3650,"nodeType":"Return","src":"2558:26:17"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3654,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"2709:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3655,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"2723:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2709:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3653,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2701:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3658,"nodeType":"ExpressionStatement","src":"2701:28:17"},{"assignments":[3660],"declarations":[{"constant":false,"id":3660,"mutability":"mutable","name":"remainder","nameLocation":"2993:9:17","nodeType":"VariableDeclaration","scope":3745,"src":"2985:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3659,"name":"uint256","nodeType":"ElementaryTypeName","src":"2985:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3661,"nodeType":"VariableDeclarationStatement","src":"2985:17:17"},{"AST":{"nativeSrc":"3025:291:17","nodeType":"YulBlock","src":"3025:291:17","statements":[{"nativeSrc":"3094:38:17","nodeType":"YulAssignment","src":"3094:38:17","value":{"arguments":[{"name":"x","nativeSrc":"3114:1:17","nodeType":"YulIdentifier","src":"3114:1:17"},{"name":"y","nativeSrc":"3117:1:17","nodeType":"YulIdentifier","src":"3117:1:17"},{"name":"denominator","nativeSrc":"3120:11:17","nodeType":"YulIdentifier","src":"3120:11:17"}],"functionName":{"name":"mulmod","nativeSrc":"3107:6:17","nodeType":"YulIdentifier","src":"3107:6:17"},"nativeSrc":"3107:25:17","nodeType":"YulFunctionCall","src":"3107:25:17"},"variableNames":[{"name":"remainder","nativeSrc":"3094:9:17","nodeType":"YulIdentifier","src":"3094:9:17"}]},{"nativeSrc":"3214:41:17","nodeType":"YulAssignment","src":"3214:41:17","value":{"arguments":[{"name":"prod1","nativeSrc":"3227:5:17","nodeType":"YulIdentifier","src":"3227:5:17"},{"arguments":[{"name":"remainder","nativeSrc":"3237:9:17","nodeType":"YulIdentifier","src":"3237:9:17"},{"name":"prod0","nativeSrc":"3248:5:17","nodeType":"YulIdentifier","src":"3248:5:17"}],"functionName":{"name":"gt","nativeSrc":"3234:2:17","nodeType":"YulIdentifier","src":"3234:2:17"},"nativeSrc":"3234:20:17","nodeType":"YulFunctionCall","src":"3234:20:17"}],"functionName":{"name":"sub","nativeSrc":"3223:3:17","nodeType":"YulIdentifier","src":"3223:3:17"},"nativeSrc":"3223:32:17","nodeType":"YulFunctionCall","src":"3223:32:17"},"variableNames":[{"name":"prod1","nativeSrc":"3214:5:17","nodeType":"YulIdentifier","src":"3214:5:17"}]},{"nativeSrc":"3272:30:17","nodeType":"YulAssignment","src":"3272:30:17","value":{"arguments":[{"name":"prod0","nativeSrc":"3285:5:17","nodeType":"YulIdentifier","src":"3285:5:17"},{"name":"remainder","nativeSrc":"3292:9:17","nodeType":"YulIdentifier","src":"3292:9:17"}],"functionName":{"name":"sub","nativeSrc":"3281:3:17","nodeType":"YulIdentifier","src":"3281:3:17"},"nativeSrc":"3281:21:17","nodeType":"YulFunctionCall","src":"3281:21:17"},"variableNames":[{"name":"prod0","nativeSrc":"3272:5:17","nodeType":"YulIdentifier","src":"3272:5:17"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3632,"isOffset":false,"isSlot":false,"src":"3120:11:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"3248:5:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"3272:5:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"3285:5:17","valueSize":1},{"declaration":3641,"isOffset":false,"isSlot":false,"src":"3214:5:17","valueSize":1},{"declaration":3641,"isOffset":false,"isSlot":false,"src":"3227:5:17","valueSize":1},{"declaration":3660,"isOffset":false,"isSlot":false,"src":"3094:9:17","valueSize":1},{"declaration":3660,"isOffset":false,"isSlot":false,"src":"3237:9:17","valueSize":1},{"declaration":3660,"isOffset":false,"isSlot":false,"src":"3292:9:17","valueSize":1},{"declaration":3628,"isOffset":false,"isSlot":false,"src":"3114:1:17","valueSize":1},{"declaration":3630,"isOffset":false,"isSlot":false,"src":"3117:1:17","valueSize":1}],"id":3662,"nodeType":"InlineAssembly","src":"3016:300:17"},{"assignments":[3664],"declarations":[{"constant":false,"id":3664,"mutability":"mutable","name":"twos","nameLocation":"3631:4:17","nodeType":"VariableDeclaration","scope":3745,"src":"3623:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"3623:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3672,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3665,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"3638:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3653:12:17","subExpression":{"id":3666,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"3654:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3668:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3653:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3670,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3652:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3638:32:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3623:47:17"},{"AST":{"nativeSrc":"3693:362:17","nodeType":"YulBlock","src":"3693:362:17","statements":[{"nativeSrc":"3758:37:17","nodeType":"YulAssignment","src":"3758:37:17","value":{"arguments":[{"name":"denominator","nativeSrc":"3777:11:17","nodeType":"YulIdentifier","src":"3777:11:17"},{"name":"twos","nativeSrc":"3790:4:17","nodeType":"YulIdentifier","src":"3790:4:17"}],"functionName":{"name":"div","nativeSrc":"3773:3:17","nodeType":"YulIdentifier","src":"3773:3:17"},"nativeSrc":"3773:22:17","nodeType":"YulFunctionCall","src":"3773:22:17"},"variableNames":[{"name":"denominator","nativeSrc":"3758:11:17","nodeType":"YulIdentifier","src":"3758:11:17"}]},{"nativeSrc":"3862:25:17","nodeType":"YulAssignment","src":"3862:25:17","value":{"arguments":[{"name":"prod0","nativeSrc":"3875:5:17","nodeType":"YulIdentifier","src":"3875:5:17"},{"name":"twos","nativeSrc":"3882:4:17","nodeType":"YulIdentifier","src":"3882:4:17"}],"functionName":{"name":"div","nativeSrc":"3871:3:17","nodeType":"YulIdentifier","src":"3871:3:17"},"nativeSrc":"3871:16:17","nodeType":"YulFunctionCall","src":"3871:16:17"},"variableNames":[{"name":"prod0","nativeSrc":"3862:5:17","nodeType":"YulIdentifier","src":"3862:5:17"}]},{"nativeSrc":"4002:39:17","nodeType":"YulAssignment","src":"4002:39:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4022:1:17","nodeType":"YulLiteral","src":"4022:1:17","type":"","value":"0"},{"name":"twos","nativeSrc":"4025:4:17","nodeType":"YulIdentifier","src":"4025:4:17"}],"functionName":{"name":"sub","nativeSrc":"4018:3:17","nodeType":"YulIdentifier","src":"4018:3:17"},"nativeSrc":"4018:12:17","nodeType":"YulFunctionCall","src":"4018:12:17"},{"name":"twos","nativeSrc":"4032:4:17","nodeType":"YulIdentifier","src":"4032:4:17"}],"functionName":{"name":"div","nativeSrc":"4014:3:17","nodeType":"YulIdentifier","src":"4014:3:17"},"nativeSrc":"4014:23:17","nodeType":"YulFunctionCall","src":"4014:23:17"},{"kind":"number","nativeSrc":"4039:1:17","nodeType":"YulLiteral","src":"4039:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4010:3:17","nodeType":"YulIdentifier","src":"4010:3:17"},"nativeSrc":"4010:31:17","nodeType":"YulFunctionCall","src":"4010:31:17"},"variableNames":[{"name":"twos","nativeSrc":"4002:4:17","nodeType":"YulIdentifier","src":"4002:4:17"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":3632,"isOffset":false,"isSlot":false,"src":"3758:11:17","valueSize":1},{"declaration":3632,"isOffset":false,"isSlot":false,"src":"3777:11:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"3862:5:17","valueSize":1},{"declaration":3638,"isOffset":false,"isSlot":false,"src":"3875:5:17","valueSize":1},{"declaration":3664,"isOffset":false,"isSlot":false,"src":"3790:4:17","valueSize":1},{"declaration":3664,"isOffset":false,"isSlot":false,"src":"3882:4:17","valueSize":1},{"declaration":3664,"isOffset":false,"isSlot":false,"src":"4002:4:17","valueSize":1},{"declaration":3664,"isOffset":false,"isSlot":false,"src":"4025:4:17","valueSize":1},{"declaration":3664,"isOffset":false,"isSlot":false,"src":"4032:4:17","valueSize":1}],"id":3673,"nodeType":"InlineAssembly","src":"3684:371:17"},{"expression":{"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3674,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"4121:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3675,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"4130:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3676,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"4138:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4130:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4121:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3679,"nodeType":"ExpressionStatement","src":"4121:21:17"},{"assignments":[3681],"declarations":[{"constant":false,"id":3681,"mutability":"mutable","name":"inverse","nameLocation":"4468:7:17","nodeType":"VariableDeclaration","scope":3745,"src":"4460:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3680,"name":"uint256","nodeType":"ElementaryTypeName","src":"4460:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3688,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4479:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3683,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4483:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4479:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3685,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4478:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4498:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4478:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4460:39:17"},{"expression":{"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3689,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4716:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4727:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3691,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4731:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3692,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4745:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4731:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4727:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4716:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3696,"nodeType":"ExpressionStatement","src":"4716:36:17"},{"expression":{"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3697,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4785:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4796:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3699,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4800:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3700,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4814:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4800:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4796:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4785:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3704,"nodeType":"ExpressionStatement","src":"4785:36:17"},{"expression":{"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3705,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4855:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4866:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3707,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4870:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3708,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4884:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4870:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4866:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4855:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3712,"nodeType":"ExpressionStatement","src":"4855:36:17"},{"expression":{"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3713,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4925:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4936:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3715,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4940:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3716,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4954:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4940:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4936:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3720,"nodeType":"ExpressionStatement","src":"4925:36:17"},{"expression":{"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3721,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"4995:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5006:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3723,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"5010:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3724,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"5024:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5010:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5006:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4995:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3728,"nodeType":"ExpressionStatement","src":"4995:36:17"},{"expression":{"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3729,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"5066:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5077:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3731,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"5081:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3732,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"5095:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5081:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5077:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5066:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3736,"nodeType":"ExpressionStatement","src":"5066:36:17"},{"expression":{"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"5536:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3738,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"5545:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3739,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"5553:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5545:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5536:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3742,"nodeType":"ExpressionStatement","src":"5536:24:17"},{"expression":{"id":3743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"5581:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3636,"id":3744,"nodeType":"Return","src":"5574:13:17"}]}]},"documentation":{"id":3626,"nodeType":"StructuredDocumentation","src":"1369:305:17","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1688:6:17","parameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3628,"mutability":"mutable","name":"x","nameLocation":"1712:1:17","nodeType":"VariableDeclaration","scope":3747,"src":"1704:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3627,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"y","nameLocation":"1731:1:17","nodeType":"VariableDeclaration","scope":3747,"src":"1723:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3629,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3632,"mutability":"mutable","name":"denominator","nameLocation":"1750:11:17","nodeType":"VariableDeclaration","scope":3747,"src":"1742:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1742:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1694:73:17"},"returnParameters":{"id":3636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3635,"mutability":"mutable","name":"result","nameLocation":"1799:6:17","nodeType":"VariableDeclaration","scope":3747,"src":"1791:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3634,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1790:16:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":3791,"nodeType":"FunctionDefinition","src":"5736:337:17","nodes":[],"body":{"id":3790,"nodeType":"Block","src":"5884:189:17","nodes":[],"statements":[{"assignments":[3763],"declarations":[{"constant":false,"id":3763,"mutability":"mutable","name":"result","nameLocation":"5902:6:17","nodeType":"VariableDeclaration","scope":3790,"src":"5894:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"5894:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3769,"initialValue":{"arguments":[{"id":3765,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"5918:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3766,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"5921:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3767,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"5924:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3764,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3747,3791],"referencedDeclaration":3747,"src":"5911:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5911:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5894:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3770,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"5950:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3771,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"5962:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3541_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5971:2:17","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3539,"src":"5962:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"src":"5950:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3775,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"5984:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3776,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"5987:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3777,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"5990:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3774,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5977:6:17","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5977:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6005:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5977:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5950:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3787,"nodeType":"IfStatement","src":"5946:98:17","trueBody":{"id":3786,"nodeType":"Block","src":"6008:36:17","statements":[{"expression":{"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3782,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"6022:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6032:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6022:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3785,"nodeType":"ExpressionStatement","src":"6022:11:17"}]}},{"expression":{"id":3788,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"6060:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3761,"id":3789,"nodeType":"Return","src":"6053:13:17"}]},"documentation":{"id":3748,"nodeType":"StructuredDocumentation","src":"5610:121:17","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5745:6:17","parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"x","nameLocation":"5769:1:17","nodeType":"VariableDeclaration","scope":3791,"src":"5761:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3749,"name":"uint256","nodeType":"ElementaryTypeName","src":"5761:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"y","nameLocation":"5788:1:17","nodeType":"VariableDeclaration","scope":3791,"src":"5780:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"5780:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3754,"mutability":"mutable","name":"denominator","nameLocation":"5807:11:17","nodeType":"VariableDeclaration","scope":3791,"src":"5799:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3753,"name":"uint256","nodeType":"ElementaryTypeName","src":"5799:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3757,"mutability":"mutable","name":"rounding","nameLocation":"5837:8:17","nodeType":"VariableDeclaration","scope":3791,"src":"5828:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3756,"nodeType":"UserDefinedTypeName","pathNode":{"id":3755,"name":"Rounding","nameLocations":["5828:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":3541,"src":"5828:8:17"},"referencedDeclaration":3541,"src":"5828:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5751:100:17"},"returnParameters":{"id":3761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"5875:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3759,"name":"uint256","nodeType":"ElementaryTypeName","src":"5875:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5874:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4001,"nodeType":"FunctionDefinition","src":"6292:2206:17","nodes":[],"body":{"id":4000,"nodeType":"Block","src":"6349:2149:17","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3799,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"6363:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6368:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6363:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3805,"nodeType":"IfStatement","src":"6359:45:17","trueBody":{"id":3804,"nodeType":"Block","src":"6371:33:17","statements":[{"expression":{"hexValue":"30","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6392:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3798,"id":3803,"nodeType":"Return","src":"6385:8:17"}]}},{"assignments":[3807],"declarations":[{"constant":false,"id":3807,"mutability":"mutable","name":"result","nameLocation":"7077:6:17","nodeType":"VariableDeclaration","scope":4000,"src":"7069:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3806,"name":"uint256","nodeType":"ElementaryTypeName","src":"7069:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3809,"initialValue":{"hexValue":"31","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7086:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"7069:18:17"},{"assignments":[3811],"declarations":[{"constant":false,"id":3811,"mutability":"mutable","name":"x","nameLocation":"7105:1:17","nodeType":"VariableDeclaration","scope":4000,"src":"7097:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3810,"name":"uint256","nodeType":"ElementaryTypeName","src":"7097:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3813,"initialValue":{"id":3812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"7109:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7097:13:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3814,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7124:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7129:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7124:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7135:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7124:12:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3828,"nodeType":"IfStatement","src":"7120:79:17","trueBody":{"id":3827,"nodeType":"Block","src":"7138:61:17","statements":[{"expression":{"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3819,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7152:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7158:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7152:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3822,"nodeType":"ExpressionStatement","src":"7152:9:17"},{"expression":{"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7175:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":3824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7186:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7175:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3826,"nodeType":"ExpressionStatement","src":"7175:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7212:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7217:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7212:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7222:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7212:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3843,"nodeType":"IfStatement","src":"7208:77:17","trueBody":{"id":3842,"nodeType":"Block","src":"7225:60:17","statements":[{"expression":{"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3834,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7239:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7245:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7239:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3837,"nodeType":"ExpressionStatement","src":"7239:8:17"},{"expression":{"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7261:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7272:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7261:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3841,"nodeType":"ExpressionStatement","src":"7261:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3844,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7298:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7303:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7298:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7308:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7298:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3858,"nodeType":"IfStatement","src":"7294:77:17","trueBody":{"id":3857,"nodeType":"Block","src":"7311:60:17","statements":[{"expression":{"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3849,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7325:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7331:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7325:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3852,"nodeType":"ExpressionStatement","src":"7325:8:17"},{"expression":{"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7347:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":3854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7358:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7347:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3856,"nodeType":"ExpressionStatement","src":"7347:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3859,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7384:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7389:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7394:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7384:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3873,"nodeType":"IfStatement","src":"7380:76:17","trueBody":{"id":3872,"nodeType":"Block","src":"7397:59:17","statements":[{"expression":{"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3864,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7411:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7417:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7411:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3867,"nodeType":"ExpressionStatement","src":"7411:8:17"},{"expression":{"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3868,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7433:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7444:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7433:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3871,"nodeType":"ExpressionStatement","src":"7433:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3874,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7469:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7474:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7469:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7478:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7469:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3888,"nodeType":"IfStatement","src":"7465:74:17","trueBody":{"id":3887,"nodeType":"Block","src":"7481:58:17","statements":[{"expression":{"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3879,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7495:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7501:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7495:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3882,"nodeType":"ExpressionStatement","src":"7495:7:17"},{"expression":{"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3883,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7516:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":3884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7527:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7516:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3886,"nodeType":"ExpressionStatement","src":"7516:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3889,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7552:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7552:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7561:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7552:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3903,"nodeType":"IfStatement","src":"7548:74:17","trueBody":{"id":3902,"nodeType":"Block","src":"7564:58:17","statements":[{"expression":{"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3894,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7578:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7584:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7578:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3897,"nodeType":"ExpressionStatement","src":"7578:7:17"},{"expression":{"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3898,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7599:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7610:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7599:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3901,"nodeType":"ExpressionStatement","src":"7599:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3904,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7635:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7640:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7635:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7644:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7635:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3914,"nodeType":"IfStatement","src":"7631:53:17","trueBody":{"id":3913,"nodeType":"Block","src":"7647:37:17","statements":[{"expression":{"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"7661:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":3910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7672:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7661:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3912,"nodeType":"ExpressionStatement","src":"7661:12:17"}]}},{"id":3999,"nodeType":"UncheckedBlock","src":"8084:408:17","statements":[{"expression":{"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3915,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8108:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8118:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8127:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3918,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8131:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8127:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8118:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3921,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8117:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8142:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8117:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8108:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3925,"nodeType":"ExpressionStatement","src":"8108:35:17"},{"expression":{"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8157:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8167:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8176:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3929,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8180:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8176:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8167:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8166:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8191:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8166:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8157:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3936,"nodeType":"ExpressionStatement","src":"8157:35:17"},{"expression":{"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8206:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8216:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8225:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3940,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8229:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8216:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3943,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8215:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8215:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8206:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3947,"nodeType":"ExpressionStatement","src":"8206:35:17"},{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3948,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8255:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8265:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3950,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8274:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8278:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8274:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8265:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3954,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8264:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8289:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8264:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8255:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3958,"nodeType":"ExpressionStatement","src":"8255:35:17"},{"expression":{"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3959,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8304:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8314:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3961,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8323:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3962,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8327:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8323:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8314:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8313:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8338:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8313:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8304:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3969,"nodeType":"ExpressionStatement","src":"8304:35:17"},{"expression":{"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3970,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8353:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8363:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3972,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8372:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8376:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8372:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8363:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3976,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8362:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8387:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8362:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8353:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3980,"nodeType":"ExpressionStatement","src":"8353:35:17"},{"expression":{"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8402:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8412:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8421:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3984,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8425:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8421:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8412:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3987,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8411:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8436:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8411:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8402:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3991,"nodeType":"ExpressionStatement","src":"8402:35:17"},{"expression":{"arguments":[{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8462:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3994,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8470:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"8474:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8470:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3992,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3577,"src":"8458:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8458:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3798,"id":3998,"nodeType":"Return","src":"8451:30:17"}]}]},"documentation":{"id":3792,"nodeType":"StructuredDocumentation","src":"6079:208:17","text":" @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6301:4:17","parameters":{"id":3795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"a","nameLocation":"6314:1:17","nodeType":"VariableDeclaration","scope":4001,"src":"6306:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3793,"name":"uint256","nodeType":"ElementaryTypeName","src":"6306:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6305:11:17"},"returnParameters":{"id":3798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4001,"src":"6340:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3796,"name":"uint256","nodeType":"ElementaryTypeName","src":"6340:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6339:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4037,"nodeType":"FunctionDefinition","src":"8598:237:17","nodes":[],"body":{"id":4036,"nodeType":"Block","src":"8674:161:17","nodes":[],"statements":[{"assignments":[4013],"declarations":[{"constant":false,"id":4013,"mutability":"mutable","name":"result","nameLocation":"8692:6:17","nodeType":"VariableDeclaration","scope":4036,"src":"8684:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4012,"name":"uint256","nodeType":"ElementaryTypeName","src":"8684:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4017,"initialValue":{"arguments":[{"id":4015,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"8706:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4014,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4001,4037],"referencedDeclaration":4001,"src":"8701:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8701:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8684:24:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4018,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"8722:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4019,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"8734:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3541_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":4020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8743:2:17","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3539,"src":"8734:11:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"src":"8722:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4022,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8749:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4023,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8758:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8749:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4025,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"8767:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8749:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8722:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4033,"nodeType":"IfStatement","src":"8718:88:17","trueBody":{"id":4032,"nodeType":"Block","src":"8770:36:17","statements":[{"expression":{"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4028,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8784:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8794:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8784:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4031,"nodeType":"ExpressionStatement","src":"8784:11:17"}]}},{"expression":{"id":4034,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"8822:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4011,"id":4035,"nodeType":"Return","src":"8815:13:17"}]},"documentation":{"id":4002,"nodeType":"StructuredDocumentation","src":"8504:89:17","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8607:4:17","parameters":{"id":4008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4004,"mutability":"mutable","name":"a","nameLocation":"8620:1:17","nodeType":"VariableDeclaration","scope":4037,"src":"8612:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4003,"name":"uint256","nodeType":"ElementaryTypeName","src":"8612:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4007,"mutability":"mutable","name":"rounding","nameLocation":"8632:8:17","nodeType":"VariableDeclaration","scope":4037,"src":"8623:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":4006,"nodeType":"UserDefinedTypeName","pathNode":{"id":4005,"name":"Rounding","nameLocations":["8623:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":3541,"src":"8623:8:17"},"referencedDeclaration":3541,"src":"8623:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3541","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8611:30:17"},"returnParameters":{"id":4011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4037,"src":"8665:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4009,"name":"uint256","nodeType":"ElementaryTypeName","src":"8665:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8664:9:17"},"scope":4038,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3537,"nodeType":"StructuredDocumentation","src":"128:73:17","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"linearizedBaseContracts":[4038],"name":"MathUpgradeable","nameLocation":"210:15:17","scope":4039,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol":{"id":18,"ast":{"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol","id":5890,"exportedSymbols":{"SafeCastUpgradeable":[5889]},"nodeType":"SourceUnit","src":"107:35432:18","nodes":[{"id":4040,"nodeType":"PragmaDirective","src":"107:23:18","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":5889,"nodeType":"ContractDefinition","src":"842:34696:18","nodes":[{"id":4066,"nodeType":"FunctionDefinition","src":"1199:192:18","nodes":[],"body":{"id":4065,"nodeType":"Block","src":"1265:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"1283:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1297:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4052,"name":"uint248","nodeType":"ElementaryTypeName","src":"1297:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":4051,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1292:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1292:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":4055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1306:3:18","memberName":"max","nodeType":"MemberAccess","src":"1292:17:18","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1283:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":4057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1311:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":4049,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1275:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1275:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4059,"nodeType":"ExpressionStatement","src":"1275:78:18"},{"expression":{"arguments":[{"id":4062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"1378:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1370:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4060,"name":"uint248","nodeType":"ElementaryTypeName","src":"1370:7:18","typeDescriptions":{}}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1370:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":4048,"id":4064,"nodeType":"Return","src":"1363:21:18"}]},"documentation":{"id":4042,"nodeType":"StructuredDocumentation","src":"876:318:18","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1208:9:18","parameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"mutability":"mutable","name":"value","nameLocation":"1226:5:18","nodeType":"VariableDeclaration","scope":4066,"src":"1218:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4043,"name":"uint256","nodeType":"ElementaryTypeName","src":"1218:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1217:15:18"},"returnParameters":{"id":4048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4066,"src":"1256:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":4046,"name":"uint248","nodeType":"ElementaryTypeName","src":"1256:7:18","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1255:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4091,"nodeType":"FunctionDefinition","src":"1720:192:18","nodes":[],"body":{"id":4090,"nodeType":"Block","src":"1786:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"1804:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1818:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4077,"name":"uint240","nodeType":"ElementaryTypeName","src":"1818:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":4076,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1813:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1813:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1827:3:18","memberName":"max","nodeType":"MemberAccess","src":"1813:17:18","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"1804:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1832:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":4074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1796:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1796:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4084,"nodeType":"ExpressionStatement","src":"1796:78:18"},{"expression":{"arguments":[{"id":4087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"1899:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1891:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4085,"name":"uint240","nodeType":"ElementaryTypeName","src":"1891:7:18","typeDescriptions":{}}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1891:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":4073,"id":4089,"nodeType":"Return","src":"1884:21:18"}]},"documentation":{"id":4067,"nodeType":"StructuredDocumentation","src":"1397:318:18","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"1729:9:18","parameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4069,"mutability":"mutable","name":"value","nameLocation":"1747:5:18","nodeType":"VariableDeclaration","scope":4091,"src":"1739:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"1739:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1738:15:18"},"returnParameters":{"id":4073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4091,"src":"1777:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":4071,"name":"uint240","nodeType":"ElementaryTypeName","src":"1777:7:18","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"1776:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4116,"nodeType":"FunctionDefinition","src":"2241:192:18","nodes":[],"body":{"id":4115,"nodeType":"Block","src":"2307:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"2325:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2339:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4102,"name":"uint232","nodeType":"ElementaryTypeName","src":"2339:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":4101,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2334:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2334:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2348:3:18","memberName":"max","nodeType":"MemberAccess","src":"2334:17:18","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2325:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":4107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":4099,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2317:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2317:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4109,"nodeType":"ExpressionStatement","src":"2317:78:18"},{"expression":{"arguments":[{"id":4112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4094,"src":"2420:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2412:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4110,"name":"uint232","nodeType":"ElementaryTypeName","src":"2412:7:18","typeDescriptions":{}}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2412:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":4098,"id":4114,"nodeType":"Return","src":"2405:21:18"}]},"documentation":{"id":4092,"nodeType":"StructuredDocumentation","src":"1918:318:18","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2250:9:18","parameters":{"id":4095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4094,"mutability":"mutable","name":"value","nameLocation":"2268:5:18","nodeType":"VariableDeclaration","scope":4116,"src":"2260:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4093,"name":"uint256","nodeType":"ElementaryTypeName","src":"2260:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2259:15:18"},"returnParameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4116,"src":"2298:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":4096,"name":"uint232","nodeType":"ElementaryTypeName","src":"2298:7:18","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2297:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4141,"nodeType":"FunctionDefinition","src":"2762:192:18","nodes":[],"body":{"id":4140,"nodeType":"Block","src":"2828:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2846:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2860:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4127,"name":"uint224","nodeType":"ElementaryTypeName","src":"2860:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":4126,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2855:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":4130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2869:3:18","memberName":"max","nodeType":"MemberAccess","src":"2855:17:18","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"2846:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":4132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2874:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":4124,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2838:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2838:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4134,"nodeType":"ExpressionStatement","src":"2838:78:18"},{"expression":{"arguments":[{"id":4137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2941:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2933:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4135,"name":"uint224","nodeType":"ElementaryTypeName","src":"2933:7:18","typeDescriptions":{}}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2933:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":4123,"id":4139,"nodeType":"Return","src":"2926:21:18"}]},"documentation":{"id":4117,"nodeType":"StructuredDocumentation","src":"2439:318:18","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.2._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"2771:9:18","parameters":{"id":4120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4119,"mutability":"mutable","name":"value","nameLocation":"2789:5:18","nodeType":"VariableDeclaration","scope":4141,"src":"2781:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2781:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2780:15:18"},"returnParameters":{"id":4123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4141,"src":"2819:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":4121,"name":"uint224","nodeType":"ElementaryTypeName","src":"2819:7:18","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"2818:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4166,"nodeType":"FunctionDefinition","src":"3283:192:18","nodes":[],"body":{"id":4165,"nodeType":"Block","src":"3349:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"3367:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3381:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4152,"name":"uint216","nodeType":"ElementaryTypeName","src":"3381:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":4151,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3376:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3376:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":4155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3390:3:18","memberName":"max","nodeType":"MemberAccess","src":"3376:17:18","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3367:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":4157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3395:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":4149,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3359:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4159,"nodeType":"ExpressionStatement","src":"3359:78:18"},{"expression":{"arguments":[{"id":4162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"3462:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3454:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4160,"name":"uint216","nodeType":"ElementaryTypeName","src":"3454:7:18","typeDescriptions":{}}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3454:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":4148,"id":4164,"nodeType":"Return","src":"3447:21:18"}]},"documentation":{"id":4142,"nodeType":"StructuredDocumentation","src":"2960:318:18","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3292:9:18","parameters":{"id":4145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4144,"mutability":"mutable","name":"value","nameLocation":"3310:5:18","nodeType":"VariableDeclaration","scope":4166,"src":"3302:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3302:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3301:15:18"},"returnParameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4166,"src":"3340:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":4146,"name":"uint216","nodeType":"ElementaryTypeName","src":"3340:7:18","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3339:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4191,"nodeType":"FunctionDefinition","src":"3804:192:18","nodes":[],"body":{"id":4190,"nodeType":"Block","src":"3870:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"3888:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3902:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4177,"name":"uint208","nodeType":"ElementaryTypeName","src":"3902:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":4176,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3897:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3897:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":4180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3911:3:18","memberName":"max","nodeType":"MemberAccess","src":"3897:17:18","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"3888:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":4182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3916:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":4174,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3880:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3880:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4184,"nodeType":"ExpressionStatement","src":"3880:78:18"},{"expression":{"arguments":[{"id":4187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"3983:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3975:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4185,"name":"uint208","nodeType":"ElementaryTypeName","src":"3975:7:18","typeDescriptions":{}}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3975:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":4173,"id":4189,"nodeType":"Return","src":"3968:21:18"}]},"documentation":{"id":4167,"nodeType":"StructuredDocumentation","src":"3481:318:18","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"3813:9:18","parameters":{"id":4170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4169,"mutability":"mutable","name":"value","nameLocation":"3831:5:18","nodeType":"VariableDeclaration","scope":4191,"src":"3823:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4168,"name":"uint256","nodeType":"ElementaryTypeName","src":"3823:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3822:15:18"},"returnParameters":{"id":4173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4191,"src":"3861:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":4171,"name":"uint208","nodeType":"ElementaryTypeName","src":"3861:7:18","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"3860:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4216,"nodeType":"FunctionDefinition","src":"4325:192:18","nodes":[],"body":{"id":4215,"nodeType":"Block","src":"4391:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"4409:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4423:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4202,"name":"uint200","nodeType":"ElementaryTypeName","src":"4423:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":4201,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4418:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4418:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4432:3:18","memberName":"max","nodeType":"MemberAccess","src":"4418:17:18","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4409:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":4207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4437:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":4199,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4401:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4401:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4209,"nodeType":"ExpressionStatement","src":"4401:78:18"},{"expression":{"arguments":[{"id":4212,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"4504:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4496:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4210,"name":"uint200","nodeType":"ElementaryTypeName","src":"4496:7:18","typeDescriptions":{}}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4496:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":4198,"id":4214,"nodeType":"Return","src":"4489:21:18"}]},"documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"4002:318:18","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4334:9:18","parameters":{"id":4195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"value","nameLocation":"4352:5:18","nodeType":"VariableDeclaration","scope":4216,"src":"4344:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4343:15:18"},"returnParameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4216,"src":"4382:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":4196,"name":"uint200","nodeType":"ElementaryTypeName","src":"4382:7:18","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4381:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4241,"nodeType":"FunctionDefinition","src":"4846:192:18","nodes":[],"body":{"id":4240,"nodeType":"Block","src":"4912:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"4930:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4944:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4227,"name":"uint192","nodeType":"ElementaryTypeName","src":"4944:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":4226,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4939:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4939:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4953:3:18","memberName":"max","nodeType":"MemberAccess","src":"4939:17:18","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"4930:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":4232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4958:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":4224,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4922:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4922:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4234,"nodeType":"ExpressionStatement","src":"4922:78:18"},{"expression":{"arguments":[{"id":4237,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"5025:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5017:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4235,"name":"uint192","nodeType":"ElementaryTypeName","src":"5017:7:18","typeDescriptions":{}}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":4223,"id":4239,"nodeType":"Return","src":"5010:21:18"}]},"documentation":{"id":4217,"nodeType":"StructuredDocumentation","src":"4523:318:18","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"4855:9:18","parameters":{"id":4220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4219,"mutability":"mutable","name":"value","nameLocation":"4873:5:18","nodeType":"VariableDeclaration","scope":4241,"src":"4865:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4218,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4864:15:18"},"returnParameters":{"id":4223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4241,"src":"4903:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":4221,"name":"uint192","nodeType":"ElementaryTypeName","src":"4903:7:18","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"4902:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4266,"nodeType":"FunctionDefinition","src":"5367:192:18","nodes":[],"body":{"id":4265,"nodeType":"Block","src":"5433:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"5451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5465:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4252,"name":"uint184","nodeType":"ElementaryTypeName","src":"5465:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":4251,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5460:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5460:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":4255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5474:3:18","memberName":"max","nodeType":"MemberAccess","src":"5460:17:18","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5451:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5479:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":4249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5443:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4259,"nodeType":"ExpressionStatement","src":"5443:78:18"},{"expression":{"arguments":[{"id":4262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4244,"src":"5546:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5538:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4260,"name":"uint184","nodeType":"ElementaryTypeName","src":"5538:7:18","typeDescriptions":{}}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5538:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":4248,"id":4264,"nodeType":"Return","src":"5531:21:18"}]},"documentation":{"id":4242,"nodeType":"StructuredDocumentation","src":"5044:318:18","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5376:9:18","parameters":{"id":4245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4244,"mutability":"mutable","name":"value","nameLocation":"5394:5:18","nodeType":"VariableDeclaration","scope":4266,"src":"5386:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"5386:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5385:15:18"},"returnParameters":{"id":4248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"5424:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":4246,"name":"uint184","nodeType":"ElementaryTypeName","src":"5424:7:18","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5423:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4291,"nodeType":"FunctionDefinition","src":"5888:192:18","nodes":[],"body":{"id":4290,"nodeType":"Block","src":"5954:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"5972:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5986:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4277,"name":"uint176","nodeType":"ElementaryTypeName","src":"5986:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":4276,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5981:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5981:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5995:3:18","memberName":"max","nodeType":"MemberAccess","src":"5981:17:18","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"5972:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":4282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6000:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":4274,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5964:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5964:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4284,"nodeType":"ExpressionStatement","src":"5964:78:18"},{"expression":{"arguments":[{"id":4287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"6067:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6059:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4285,"name":"uint176","nodeType":"ElementaryTypeName","src":"6059:7:18","typeDescriptions":{}}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6059:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":4273,"id":4289,"nodeType":"Return","src":"6052:21:18"}]},"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"5565:318:18","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"5897:9:18","parameters":{"id":4270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4269,"mutability":"mutable","name":"value","nameLocation":"5915:5:18","nodeType":"VariableDeclaration","scope":4291,"src":"5907:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"5907:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5906:15:18"},"returnParameters":{"id":4273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4291,"src":"5945:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":4271,"name":"uint176","nodeType":"ElementaryTypeName","src":"5945:7:18","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"5944:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4316,"nodeType":"FunctionDefinition","src":"6409:192:18","nodes":[],"body":{"id":4315,"nodeType":"Block","src":"6475:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4300,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"6493:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6507:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4302,"name":"uint168","nodeType":"ElementaryTypeName","src":"6507:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":4301,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6502:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6502:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6516:3:18","memberName":"max","nodeType":"MemberAccess","src":"6502:17:18","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6493:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6521:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":4299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6485:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6485:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4309,"nodeType":"ExpressionStatement","src":"6485:78:18"},{"expression":{"arguments":[{"id":4312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"6588:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6580:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4310,"name":"uint168","nodeType":"ElementaryTypeName","src":"6580:7:18","typeDescriptions":{}}},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6580:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":4298,"id":4314,"nodeType":"Return","src":"6573:21:18"}]},"documentation":{"id":4292,"nodeType":"StructuredDocumentation","src":"6086:318:18","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6418:9:18","parameters":{"id":4295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"value","nameLocation":"6436:5:18","nodeType":"VariableDeclaration","scope":4316,"src":"6428:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4293,"name":"uint256","nodeType":"ElementaryTypeName","src":"6428:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6427:15:18"},"returnParameters":{"id":4298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4316,"src":"6466:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":4296,"name":"uint168","nodeType":"ElementaryTypeName","src":"6466:7:18","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6465:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4341,"nodeType":"FunctionDefinition","src":"6930:192:18","nodes":[],"body":{"id":4340,"nodeType":"Block","src":"6996:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4319,"src":"7014:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7028:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4327,"name":"uint160","nodeType":"ElementaryTypeName","src":"7028:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":4326,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7023:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7023:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7037:3:18","memberName":"max","nodeType":"MemberAccess","src":"7023:17:18","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7014:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7042:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":4324,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7006:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7006:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4334,"nodeType":"ExpressionStatement","src":"7006:78:18"},{"expression":{"arguments":[{"id":4337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4319,"src":"7109:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7101:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4335,"name":"uint160","nodeType":"ElementaryTypeName","src":"7101:7:18","typeDescriptions":{}}},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7101:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":4323,"id":4339,"nodeType":"Return","src":"7094:21:18"}]},"documentation":{"id":4317,"nodeType":"StructuredDocumentation","src":"6607:318:18","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"6939:9:18","parameters":{"id":4320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4319,"mutability":"mutable","name":"value","nameLocation":"6957:5:18","nodeType":"VariableDeclaration","scope":4341,"src":"6949:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4318,"name":"uint256","nodeType":"ElementaryTypeName","src":"6949:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6948:15:18"},"returnParameters":{"id":4323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4341,"src":"6987:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4321,"name":"uint160","nodeType":"ElementaryTypeName","src":"6987:7:18","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"6986:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4366,"nodeType":"FunctionDefinition","src":"7451:192:18","nodes":[],"body":{"id":4365,"nodeType":"Block","src":"7517:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"7535:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7549:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4352,"name":"uint152","nodeType":"ElementaryTypeName","src":"7549:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":4351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7544:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":4355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7558:3:18","memberName":"max","nodeType":"MemberAccess","src":"7544:17:18","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7535:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7563:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":4349,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"7527:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7527:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4359,"nodeType":"ExpressionStatement","src":"7527:78:18"},{"expression":{"arguments":[{"id":4362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4344,"src":"7630:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7622:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4360,"name":"uint152","nodeType":"ElementaryTypeName","src":"7622:7:18","typeDescriptions":{}}},"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7622:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":4348,"id":4364,"nodeType":"Return","src":"7615:21:18"}]},"documentation":{"id":4342,"nodeType":"StructuredDocumentation","src":"7128:318:18","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7460:9:18","parameters":{"id":4345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4344,"mutability":"mutable","name":"value","nameLocation":"7478:5:18","nodeType":"VariableDeclaration","scope":4366,"src":"7470:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4343,"name":"uint256","nodeType":"ElementaryTypeName","src":"7470:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7469:15:18"},"returnParameters":{"id":4348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4347,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4366,"src":"7508:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":4346,"name":"uint152","nodeType":"ElementaryTypeName","src":"7508:7:18","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7507:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4391,"nodeType":"FunctionDefinition","src":"7972:192:18","nodes":[],"body":{"id":4390,"nodeType":"Block","src":"8038:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"8056:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8070:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4377,"name":"uint144","nodeType":"ElementaryTypeName","src":"8070:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":4376,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8065:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8065:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":4380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8079:3:18","memberName":"max","nodeType":"MemberAccess","src":"8065:17:18","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8056:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":4382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8084:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":4374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8048:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8048:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4384,"nodeType":"ExpressionStatement","src":"8048:78:18"},{"expression":{"arguments":[{"id":4387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"8151:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8143:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4385,"name":"uint144","nodeType":"ElementaryTypeName","src":"8143:7:18","typeDescriptions":{}}},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":4373,"id":4389,"nodeType":"Return","src":"8136:21:18"}]},"documentation":{"id":4367,"nodeType":"StructuredDocumentation","src":"7649:318:18","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"7981:9:18","parameters":{"id":4370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4369,"mutability":"mutable","name":"value","nameLocation":"7999:5:18","nodeType":"VariableDeclaration","scope":4391,"src":"7991:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4368,"name":"uint256","nodeType":"ElementaryTypeName","src":"7991:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7990:15:18"},"returnParameters":{"id":4373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4391,"src":"8029:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":4371,"name":"uint144","nodeType":"ElementaryTypeName","src":"8029:7:18","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8028:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4416,"nodeType":"FunctionDefinition","src":"8493:192:18","nodes":[],"body":{"id":4415,"nodeType":"Block","src":"8559:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4394,"src":"8577:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8591:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4402,"name":"uint136","nodeType":"ElementaryTypeName","src":"8591:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":4401,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8586:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8586:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8600:3:18","memberName":"max","nodeType":"MemberAccess","src":"8586:17:18","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8577:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":4407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8605:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":4399,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"8569:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8569:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4409,"nodeType":"ExpressionStatement","src":"8569:78:18"},{"expression":{"arguments":[{"id":4412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4394,"src":"8672:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8664:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4410,"name":"uint136","nodeType":"ElementaryTypeName","src":"8664:7:18","typeDescriptions":{}}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8664:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":4398,"id":4414,"nodeType":"Return","src":"8657:21:18"}]},"documentation":{"id":4392,"nodeType":"StructuredDocumentation","src":"8170:318:18","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8502:9:18","parameters":{"id":4395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4394,"mutability":"mutable","name":"value","nameLocation":"8520:5:18","nodeType":"VariableDeclaration","scope":4416,"src":"8512:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4393,"name":"uint256","nodeType":"ElementaryTypeName","src":"8512:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8511:15:18"},"returnParameters":{"id":4398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4416,"src":"8550:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":4396,"name":"uint136","nodeType":"ElementaryTypeName","src":"8550:7:18","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8549:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4441,"nodeType":"FunctionDefinition","src":"9014:192:18","nodes":[],"body":{"id":4440,"nodeType":"Block","src":"9080:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"9098:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9112:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4427,"name":"uint128","nodeType":"ElementaryTypeName","src":"9112:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4426,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9107:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9107:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9121:3:18","memberName":"max","nodeType":"MemberAccess","src":"9107:17:18","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9098:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":4432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9126:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":4424,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9090:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9090:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4434,"nodeType":"ExpressionStatement","src":"9090:78:18"},{"expression":{"arguments":[{"id":4437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4419,"src":"9193:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9185:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4435,"name":"uint128","nodeType":"ElementaryTypeName","src":"9185:7:18","typeDescriptions":{}}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9185:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4423,"id":4439,"nodeType":"Return","src":"9178:21:18"}]},"documentation":{"id":4417,"nodeType":"StructuredDocumentation","src":"8691:318:18","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v2.5._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9023:9:18","parameters":{"id":4420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4419,"mutability":"mutable","name":"value","nameLocation":"9041:5:18","nodeType":"VariableDeclaration","scope":4441,"src":"9033:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4418,"name":"uint256","nodeType":"ElementaryTypeName","src":"9033:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9032:15:18"},"returnParameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4441,"src":"9071:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4421,"name":"uint128","nodeType":"ElementaryTypeName","src":"9071:7:18","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9070:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4466,"nodeType":"FunctionDefinition","src":"9535:192:18","nodes":[],"body":{"id":4465,"nodeType":"Block","src":"9601:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"9619:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9633:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4452,"name":"uint120","nodeType":"ElementaryTypeName","src":"9633:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":4451,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9628:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9628:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9642:3:18","memberName":"max","nodeType":"MemberAccess","src":"9628:17:18","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9619:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9647:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":4449,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"9611:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9611:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4459,"nodeType":"ExpressionStatement","src":"9611:78:18"},{"expression":{"arguments":[{"id":4462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4444,"src":"9714:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9706:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4460,"name":"uint120","nodeType":"ElementaryTypeName","src":"9706:7:18","typeDescriptions":{}}},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9706:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":4448,"id":4464,"nodeType":"Return","src":"9699:21:18"}]},"documentation":{"id":4442,"nodeType":"StructuredDocumentation","src":"9212:318:18","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9544:9:18","parameters":{"id":4445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4444,"mutability":"mutable","name":"value","nameLocation":"9562:5:18","nodeType":"VariableDeclaration","scope":4466,"src":"9554:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4443,"name":"uint256","nodeType":"ElementaryTypeName","src":"9554:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9553:15:18"},"returnParameters":{"id":4448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4466,"src":"9592:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":4446,"name":"uint120","nodeType":"ElementaryTypeName","src":"9592:7:18","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9591:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4491,"nodeType":"FunctionDefinition","src":"10056:192:18","nodes":[],"body":{"id":4490,"nodeType":"Block","src":"10122:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"10140:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10154:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4477,"name":"uint112","nodeType":"ElementaryTypeName","src":"10154:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":4476,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10149:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10149:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":4480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10163:3:18","memberName":"max","nodeType":"MemberAccess","src":"10149:17:18","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10140:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10168:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":4474,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10132:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10132:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4484,"nodeType":"ExpressionStatement","src":"10132:78:18"},{"expression":{"arguments":[{"id":4487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"10235:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10227:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4485,"name":"uint112","nodeType":"ElementaryTypeName","src":"10227:7:18","typeDescriptions":{}}},"id":4488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10227:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":4473,"id":4489,"nodeType":"Return","src":"10220:21:18"}]},"documentation":{"id":4467,"nodeType":"StructuredDocumentation","src":"9733:318:18","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10065:9:18","parameters":{"id":4470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4469,"mutability":"mutable","name":"value","nameLocation":"10083:5:18","nodeType":"VariableDeclaration","scope":4491,"src":"10075:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4468,"name":"uint256","nodeType":"ElementaryTypeName","src":"10075:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10074:15:18"},"returnParameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4491,"src":"10113:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":4471,"name":"uint112","nodeType":"ElementaryTypeName","src":"10113:7:18","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10112:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4516,"nodeType":"FunctionDefinition","src":"10577:192:18","nodes":[],"body":{"id":4515,"nodeType":"Block","src":"10643:126:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10661:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10675:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4502,"name":"uint104","nodeType":"ElementaryTypeName","src":"10675:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":4501,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10670:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10670:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10684:3:18","memberName":"max","nodeType":"MemberAccess","src":"10670:17:18","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10661:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10689:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":4499,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"10653:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10653:78:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4509,"nodeType":"ExpressionStatement","src":"10653:78:18"},{"expression":{"arguments":[{"id":4512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10756:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10748:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4510,"name":"uint104","nodeType":"ElementaryTypeName","src":"10748:7:18","typeDescriptions":{}}},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10748:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":4498,"id":4514,"nodeType":"Return","src":"10741:21:18"}]},"documentation":{"id":4492,"nodeType":"StructuredDocumentation","src":"10254:318:18","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10586:9:18","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4494,"mutability":"mutable","name":"value","nameLocation":"10604:5:18","nodeType":"VariableDeclaration","scope":4516,"src":"10596:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"10596:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10595:15:18"},"returnParameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4516,"src":"10634:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":4496,"name":"uint104","nodeType":"ElementaryTypeName","src":"10634:7:18","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10633:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4541,"nodeType":"FunctionDefinition","src":"11094:187:18","nodes":[],"body":{"id":4540,"nodeType":"Block","src":"11158:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"11176:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11190:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4527,"name":"uint96","nodeType":"ElementaryTypeName","src":"11190:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":4526,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11185:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11185:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":4530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11198:3:18","memberName":"max","nodeType":"MemberAccess","src":"11185:16:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11176:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":4532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11203:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":4524,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11168:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11168:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4534,"nodeType":"ExpressionStatement","src":"11168:76:18"},{"expression":{"arguments":[{"id":4537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"11268:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11261:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4535,"name":"uint96","nodeType":"ElementaryTypeName","src":"11261:6:18","typeDescriptions":{}}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11261:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4523,"id":4539,"nodeType":"Return","src":"11254:20:18"}]},"documentation":{"id":4517,"nodeType":"StructuredDocumentation","src":"10775:314:18","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.2._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11103:8:18","parameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"value","nameLocation":"11120:5:18","nodeType":"VariableDeclaration","scope":4541,"src":"11112:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4518,"name":"uint256","nodeType":"ElementaryTypeName","src":"11112:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11111:15:18"},"returnParameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4541,"src":"11150:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4521,"name":"uint96","nodeType":"ElementaryTypeName","src":"11150:6:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11149:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4566,"nodeType":"FunctionDefinition","src":"11606:187:18","nodes":[],"body":{"id":4565,"nodeType":"Block","src":"11670:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"11688:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11702:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4552,"name":"uint88","nodeType":"ElementaryTypeName","src":"11702:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":4551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11697:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11697:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11710:3:18","memberName":"max","nodeType":"MemberAccess","src":"11697:16:18","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11688:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":4557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11715:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":4549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"11680:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11680:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4559,"nodeType":"ExpressionStatement","src":"11680:76:18"},{"expression":{"arguments":[{"id":4562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"11780:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11773:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4560,"name":"uint88","nodeType":"ElementaryTypeName","src":"11773:6:18","typeDescriptions":{}}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11773:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":4548,"id":4564,"nodeType":"Return","src":"11766:20:18"}]},"documentation":{"id":4542,"nodeType":"StructuredDocumentation","src":"11287:314:18","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11615:8:18","parameters":{"id":4545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4544,"mutability":"mutable","name":"value","nameLocation":"11632:5:18","nodeType":"VariableDeclaration","scope":4566,"src":"11624:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4543,"name":"uint256","nodeType":"ElementaryTypeName","src":"11624:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11623:15:18"},"returnParameters":{"id":4548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4566,"src":"11662:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":4546,"name":"uint88","nodeType":"ElementaryTypeName","src":"11662:6:18","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11661:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4591,"nodeType":"FunctionDefinition","src":"12118:187:18","nodes":[],"body":{"id":4590,"nodeType":"Block","src":"12182:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"12200:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12214:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4577,"name":"uint80","nodeType":"ElementaryTypeName","src":"12214:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":4576,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12209:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12209:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12222:3:18","memberName":"max","nodeType":"MemberAccess","src":"12209:16:18","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12200:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12227:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":4574,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12192:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12192:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4584,"nodeType":"ExpressionStatement","src":"12192:76:18"},{"expression":{"arguments":[{"id":4587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"12292:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12285:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4585,"name":"uint80","nodeType":"ElementaryTypeName","src":"12285:6:18","typeDescriptions":{}}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12285:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":4573,"id":4589,"nodeType":"Return","src":"12278:20:18"}]},"documentation":{"id":4567,"nodeType":"StructuredDocumentation","src":"11799:314:18","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12127:8:18","parameters":{"id":4570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4569,"mutability":"mutable","name":"value","nameLocation":"12144:5:18","nodeType":"VariableDeclaration","scope":4591,"src":"12136:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4568,"name":"uint256","nodeType":"ElementaryTypeName","src":"12136:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12135:15:18"},"returnParameters":{"id":4573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4591,"src":"12174:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":4571,"name":"uint80","nodeType":"ElementaryTypeName","src":"12174:6:18","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12173:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4616,"nodeType":"FunctionDefinition","src":"12630:187:18","nodes":[],"body":{"id":4615,"nodeType":"Block","src":"12694:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"12712:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12726:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4602,"name":"uint72","nodeType":"ElementaryTypeName","src":"12726:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":4601,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12721:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12721:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":4605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12734:3:18","memberName":"max","nodeType":"MemberAccess","src":"12721:16:18","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12712:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":4607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12739:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":4599,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"12704:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12704:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4609,"nodeType":"ExpressionStatement","src":"12704:76:18"},{"expression":{"arguments":[{"id":4612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"12804:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12797:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4610,"name":"uint72","nodeType":"ElementaryTypeName","src":"12797:6:18","typeDescriptions":{}}},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12797:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":4598,"id":4614,"nodeType":"Return","src":"12790:20:18"}]},"documentation":{"id":4592,"nodeType":"StructuredDocumentation","src":"12311:314:18","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12639:8:18","parameters":{"id":4595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4594,"mutability":"mutable","name":"value","nameLocation":"12656:5:18","nodeType":"VariableDeclaration","scope":4616,"src":"12648:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4593,"name":"uint256","nodeType":"ElementaryTypeName","src":"12648:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12647:15:18"},"returnParameters":{"id":4598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4616,"src":"12686:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":4596,"name":"uint72","nodeType":"ElementaryTypeName","src":"12686:6:18","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12685:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4641,"nodeType":"FunctionDefinition","src":"13142:187:18","nodes":[],"body":{"id":4640,"nodeType":"Block","src":"13206:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"13224:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13238:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4627,"name":"uint64","nodeType":"ElementaryTypeName","src":"13238:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4626,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13233:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13233:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13246:3:18","memberName":"max","nodeType":"MemberAccess","src":"13233:16:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13224:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":4632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13251:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":4624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13216:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13216:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4634,"nodeType":"ExpressionStatement","src":"13216:76:18"},{"expression":{"arguments":[{"id":4637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"13316:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13309:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4635,"name":"uint64","nodeType":"ElementaryTypeName","src":"13309:6:18","typeDescriptions":{}}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13309:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4623,"id":4639,"nodeType":"Return","src":"13302:20:18"}]},"documentation":{"id":4617,"nodeType":"StructuredDocumentation","src":"12823:314:18","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v2.5._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13151:8:18","parameters":{"id":4620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4619,"mutability":"mutable","name":"value","nameLocation":"13168:5:18","nodeType":"VariableDeclaration","scope":4641,"src":"13160:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4618,"name":"uint256","nodeType":"ElementaryTypeName","src":"13160:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13159:15:18"},"returnParameters":{"id":4623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4641,"src":"13198:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4621,"name":"uint64","nodeType":"ElementaryTypeName","src":"13198:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13197:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4666,"nodeType":"FunctionDefinition","src":"13654:187:18","nodes":[],"body":{"id":4665,"nodeType":"Block","src":"13718:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4644,"src":"13736:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13750:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4652,"name":"uint56","nodeType":"ElementaryTypeName","src":"13750:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":4651,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13745:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13745:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":4655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13758:3:18","memberName":"max","nodeType":"MemberAccess","src":"13745:16:18","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13736:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":4657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13763:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":4649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"13728:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13728:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4659,"nodeType":"ExpressionStatement","src":"13728:76:18"},{"expression":{"arguments":[{"id":4662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4644,"src":"13828:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13821:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4660,"name":"uint56","nodeType":"ElementaryTypeName","src":"13821:6:18","typeDescriptions":{}}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13821:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":4648,"id":4664,"nodeType":"Return","src":"13814:20:18"}]},"documentation":{"id":4642,"nodeType":"StructuredDocumentation","src":"13335:314:18","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13663:8:18","parameters":{"id":4645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4644,"mutability":"mutable","name":"value","nameLocation":"13680:5:18","nodeType":"VariableDeclaration","scope":4666,"src":"13672:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4643,"name":"uint256","nodeType":"ElementaryTypeName","src":"13672:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13671:15:18"},"returnParameters":{"id":4648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4666,"src":"13710:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":4646,"name":"uint56","nodeType":"ElementaryTypeName","src":"13710:6:18","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13709:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4691,"nodeType":"FunctionDefinition","src":"14166:187:18","nodes":[],"body":{"id":4690,"nodeType":"Block","src":"14230:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"14248:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14262:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4677,"name":"uint48","nodeType":"ElementaryTypeName","src":"14262:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":4676,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14257:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14257:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":4680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14270:3:18","memberName":"max","nodeType":"MemberAccess","src":"14257:16:18","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14248:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14275:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":4674,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"14240:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14240:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4684,"nodeType":"ExpressionStatement","src":"14240:76:18"},{"expression":{"arguments":[{"id":4687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"14340:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14333:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4685,"name":"uint48","nodeType":"ElementaryTypeName","src":"14333:6:18","typeDescriptions":{}}},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14333:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":4673,"id":4689,"nodeType":"Return","src":"14326:20:18"}]},"documentation":{"id":4667,"nodeType":"StructuredDocumentation","src":"13847:314:18","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14175:8:18","parameters":{"id":4670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4669,"mutability":"mutable","name":"value","nameLocation":"14192:5:18","nodeType":"VariableDeclaration","scope":4691,"src":"14184:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4668,"name":"uint256","nodeType":"ElementaryTypeName","src":"14184:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14183:15:18"},"returnParameters":{"id":4673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4691,"src":"14222:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4671,"name":"uint48","nodeType":"ElementaryTypeName","src":"14222:6:18","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14221:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4716,"nodeType":"FunctionDefinition","src":"14678:187:18","nodes":[],"body":{"id":4715,"nodeType":"Block","src":"14742:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4700,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"14760:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14774:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4702,"name":"uint40","nodeType":"ElementaryTypeName","src":"14774:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":4701,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14769:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14769:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14782:3:18","memberName":"max","nodeType":"MemberAccess","src":"14769:16:18","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14760:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":4707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14787:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":4699,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"14752:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14752:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4709,"nodeType":"ExpressionStatement","src":"14752:76:18"},{"expression":{"arguments":[{"id":4712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"14852:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14845:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4710,"name":"uint40","nodeType":"ElementaryTypeName","src":"14845:6:18","typeDescriptions":{}}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14845:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":4698,"id":4714,"nodeType":"Return","src":"14838:20:18"}]},"documentation":{"id":4692,"nodeType":"StructuredDocumentation","src":"14359:314:18","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14687:8:18","parameters":{"id":4695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4694,"mutability":"mutable","name":"value","nameLocation":"14704:5:18","nodeType":"VariableDeclaration","scope":4716,"src":"14696:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4693,"name":"uint256","nodeType":"ElementaryTypeName","src":"14696:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14695:15:18"},"returnParameters":{"id":4698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4716,"src":"14734:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":4696,"name":"uint40","nodeType":"ElementaryTypeName","src":"14734:6:18","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14733:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4741,"nodeType":"FunctionDefinition","src":"15190:187:18","nodes":[],"body":{"id":4740,"nodeType":"Block","src":"15254:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"15272:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15286:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4727,"name":"uint32","nodeType":"ElementaryTypeName","src":"15286:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4726,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15281:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15281:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15294:3:18","memberName":"max","nodeType":"MemberAccess","src":"15281:16:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15272:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":4732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15299:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":4724,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15264:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15264:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4734,"nodeType":"ExpressionStatement","src":"15264:76:18"},{"expression":{"arguments":[{"id":4737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4719,"src":"15364:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15357:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4735,"name":"uint32","nodeType":"ElementaryTypeName","src":"15357:6:18","typeDescriptions":{}}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15357:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4723,"id":4739,"nodeType":"Return","src":"15350:20:18"}]},"documentation":{"id":4717,"nodeType":"StructuredDocumentation","src":"14871:314:18","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v2.5._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15199:8:18","parameters":{"id":4720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4719,"mutability":"mutable","name":"value","nameLocation":"15216:5:18","nodeType":"VariableDeclaration","scope":4741,"src":"15208:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4718,"name":"uint256","nodeType":"ElementaryTypeName","src":"15208:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15207:15:18"},"returnParameters":{"id":4723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4741,"src":"15246:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4721,"name":"uint32","nodeType":"ElementaryTypeName","src":"15246:6:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15245:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4766,"nodeType":"FunctionDefinition","src":"15702:187:18","nodes":[],"body":{"id":4765,"nodeType":"Block","src":"15766:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4744,"src":"15784:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15798:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4752,"name":"uint24","nodeType":"ElementaryTypeName","src":"15798:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":4751,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15793:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15793:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15806:3:18","memberName":"max","nodeType":"MemberAccess","src":"15793:16:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15784:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":4757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15811:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":4749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"15776:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15776:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4759,"nodeType":"ExpressionStatement","src":"15776:76:18"},{"expression":{"arguments":[{"id":4762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4744,"src":"15876:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15869:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4760,"name":"uint24","nodeType":"ElementaryTypeName","src":"15869:6:18","typeDescriptions":{}}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15869:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":4748,"id":4764,"nodeType":"Return","src":"15862:20:18"}]},"documentation":{"id":4742,"nodeType":"StructuredDocumentation","src":"15383:314:18","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15711:8:18","parameters":{"id":4745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4744,"mutability":"mutable","name":"value","nameLocation":"15728:5:18","nodeType":"VariableDeclaration","scope":4766,"src":"15720:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4743,"name":"uint256","nodeType":"ElementaryTypeName","src":"15720:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15719:15:18"},"returnParameters":{"id":4748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4766,"src":"15758:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4746,"name":"uint24","nodeType":"ElementaryTypeName","src":"15758:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15757:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4791,"nodeType":"FunctionDefinition","src":"16214:187:18","nodes":[],"body":{"id":4790,"nodeType":"Block","src":"16278:123:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"16296:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16310:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4777,"name":"uint16","nodeType":"ElementaryTypeName","src":"16310:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":4776,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16305:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16305:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16318:3:18","memberName":"max","nodeType":"MemberAccess","src":"16305:16:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16296:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":4782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16323:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":4774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"16288:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16288:76:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4784,"nodeType":"ExpressionStatement","src":"16288:76:18"},{"expression":{"arguments":[{"id":4787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"16388:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16381:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4785,"name":"uint16","nodeType":"ElementaryTypeName","src":"16381:6:18","typeDescriptions":{}}},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16381:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":4773,"id":4789,"nodeType":"Return","src":"16374:20:18"}]},"documentation":{"id":4767,"nodeType":"StructuredDocumentation","src":"15895:314:18","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v2.5._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16223:8:18","parameters":{"id":4770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4769,"mutability":"mutable","name":"value","nameLocation":"16240:5:18","nodeType":"VariableDeclaration","scope":4791,"src":"16232:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4768,"name":"uint256","nodeType":"ElementaryTypeName","src":"16232:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16231:15:18"},"returnParameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4791,"src":"16270:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4771,"name":"uint16","nodeType":"ElementaryTypeName","src":"16270:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16269:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4816,"nodeType":"FunctionDefinition","src":"16722:182:18","nodes":[],"body":{"id":4815,"nodeType":"Block","src":"16784:120:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"16802:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16816:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4802,"name":"uint8","nodeType":"ElementaryTypeName","src":"16816:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":4801,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16811:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16811:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":4805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16823:3:18","memberName":"max","nodeType":"MemberAccess","src":"16811:15:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16802:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":4807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16828:39:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":4799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"16794:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16794:74:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4809,"nodeType":"ExpressionStatement","src":"16794:74:18"},{"expression":{"arguments":[{"id":4812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"16891:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16885:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4810,"name":"uint8","nodeType":"ElementaryTypeName","src":"16885:5:18","typeDescriptions":{}}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16885:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4798,"id":4814,"nodeType":"Return","src":"16878:19:18"}]},"documentation":{"id":4792,"nodeType":"StructuredDocumentation","src":"16407:310:18","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v2.5._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16731:7:18","parameters":{"id":4795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4794,"mutability":"mutable","name":"value","nameLocation":"16747:5:18","nodeType":"VariableDeclaration","scope":4816,"src":"16739:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4793,"name":"uint256","nodeType":"ElementaryTypeName","src":"16739:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16738:15:18"},"returnParameters":{"id":4798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4816,"src":"16777:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4796,"name":"uint8","nodeType":"ElementaryTypeName","src":"16777:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16776:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4837,"nodeType":"FunctionDefinition","src":"17113:168:18","nodes":[],"body":{"id":4836,"nodeType":"Block","src":"17178:103:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"17196:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17205:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17196:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c7565206d75737420626520706f736974697665","id":4828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17208:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""},"value":"SafeCast: value must be positive"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""}],"id":4824,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"17188:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17188:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4830,"nodeType":"ExpressionStatement","src":"17188:55:18"},{"expression":{"arguments":[{"id":4833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4819,"src":"17268:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17260:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4831,"name":"uint256","nodeType":"ElementaryTypeName","src":"17260:7:18","typeDescriptions":{}}},"id":4834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17260:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4823,"id":4835,"nodeType":"Return","src":"17253:21:18"}]},"documentation":{"id":4817,"nodeType":"StructuredDocumentation","src":"16910:198:18","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0.\n _Available since v3.0._"},"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17122:9:18","parameters":{"id":4820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4819,"mutability":"mutable","name":"value","nameLocation":"17139:5:18","nodeType":"VariableDeclaration","scope":4837,"src":"17132:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4818,"name":"int256","nodeType":"ElementaryTypeName","src":"17132:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17131:14:18"},"returnParameters":{"id":4823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4837,"src":"17169:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4821,"name":"uint256","nodeType":"ElementaryTypeName","src":"17169:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17168:9:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4870,"nodeType":"FunctionDefinition","src":"17642:216:18","nodes":[],"body":{"id":4869,"nodeType":"Block","src":"17705:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"17723:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":4849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17737:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4848,"name":"int248","nodeType":"ElementaryTypeName","src":"17737:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"}],"id":4847,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"17732:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17732:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int248","typeString":"type(int248)"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17745:3:18","memberName":"min","nodeType":"MemberAccess","src":"17732:16:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17723:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"17752:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17766:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4855,"name":"int248","nodeType":"ElementaryTypeName","src":"17766:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"}],"id":4854,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"17761:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17761:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int248","typeString":"type(int248)"}},"id":4858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17774:3:18","memberName":"max","nodeType":"MemberAccess","src":"17761:16:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17752:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17723:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":4861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17779:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":4845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"17715:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17715:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4863,"nodeType":"ExpressionStatement","src":"17715:106:18"},{"expression":{"arguments":[{"id":4866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"17845:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17838:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4864,"name":"int248","nodeType":"ElementaryTypeName","src":"17838:6:18","typeDescriptions":{}}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17838:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"functionReturnParameters":4844,"id":4868,"nodeType":"Return","src":"17831:20:18"}]},"documentation":{"id":4838,"nodeType":"StructuredDocumentation","src":"17287:350:18","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17651:8:18","parameters":{"id":4841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4840,"mutability":"mutable","name":"value","nameLocation":"17667:5:18","nodeType":"VariableDeclaration","scope":4870,"src":"17660:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4839,"name":"int256","nodeType":"ElementaryTypeName","src":"17660:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17659:14:18"},"returnParameters":{"id":4844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4870,"src":"17697:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":4842,"name":"int248","nodeType":"ElementaryTypeName","src":"17697:6:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17696:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4903,"nodeType":"FunctionDefinition","src":"18219:216:18","nodes":[],"body":{"id":4902,"nodeType":"Block","src":"18282:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"18300:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":4882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18314:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4881,"name":"int240","nodeType":"ElementaryTypeName","src":"18314:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"}],"id":4880,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"18309:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18309:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int240","typeString":"type(int240)"}},"id":4884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18322:3:18","memberName":"min","nodeType":"MemberAccess","src":"18309:16:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18300:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"18329:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18343:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4888,"name":"int240","nodeType":"ElementaryTypeName","src":"18343:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"}],"id":4887,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"18338:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18338:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int240","typeString":"type(int240)"}},"id":4891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18351:3:18","memberName":"max","nodeType":"MemberAccess","src":"18338:16:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18329:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18300:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":4894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18356:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":4878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"18292:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18292:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4896,"nodeType":"ExpressionStatement","src":"18292:106:18"},{"expression":{"arguments":[{"id":4899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"18422:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18415:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4897,"name":"int240","nodeType":"ElementaryTypeName","src":"18415:6:18","typeDescriptions":{}}},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18415:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"functionReturnParameters":4877,"id":4901,"nodeType":"Return","src":"18408:20:18"}]},"documentation":{"id":4871,"nodeType":"StructuredDocumentation","src":"17864:350:18","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18228:8:18","parameters":{"id":4874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4873,"mutability":"mutable","name":"value","nameLocation":"18244:5:18","nodeType":"VariableDeclaration","scope":4903,"src":"18237:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4872,"name":"int256","nodeType":"ElementaryTypeName","src":"18237:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18236:14:18"},"returnParameters":{"id":4877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4903,"src":"18274:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":4875,"name":"int240","nodeType":"ElementaryTypeName","src":"18274:6:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18273:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4936,"nodeType":"FunctionDefinition","src":"18796:216:18","nodes":[],"body":{"id":4935,"nodeType":"Block","src":"18859:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"18877:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":4915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18891:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4914,"name":"int232","nodeType":"ElementaryTypeName","src":"18891:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"}],"id":4913,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"18886:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18886:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int232","typeString":"type(int232)"}},"id":4917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18899:3:18","memberName":"min","nodeType":"MemberAccess","src":"18886:16:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18877:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"18906:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18920:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4921,"name":"int232","nodeType":"ElementaryTypeName","src":"18920:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"}],"id":4920,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"18915:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18915:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int232","typeString":"type(int232)"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18928:3:18","memberName":"max","nodeType":"MemberAccess","src":"18915:16:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18906:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18877:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":4927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18933:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":4911,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"18869:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18869:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4929,"nodeType":"ExpressionStatement","src":"18869:106:18"},{"expression":{"arguments":[{"id":4932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4906,"src":"18999:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18992:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4930,"name":"int232","nodeType":"ElementaryTypeName","src":"18992:6:18","typeDescriptions":{}}},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18992:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"functionReturnParameters":4910,"id":4934,"nodeType":"Return","src":"18985:20:18"}]},"documentation":{"id":4904,"nodeType":"StructuredDocumentation","src":"18441:350:18","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18805:8:18","parameters":{"id":4907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4906,"mutability":"mutable","name":"value","nameLocation":"18821:5:18","nodeType":"VariableDeclaration","scope":4936,"src":"18814:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4905,"name":"int256","nodeType":"ElementaryTypeName","src":"18814:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18813:14:18"},"returnParameters":{"id":4910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4936,"src":"18851:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":4908,"name":"int232","nodeType":"ElementaryTypeName","src":"18851:6:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18850:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":4969,"nodeType":"FunctionDefinition","src":"19373:216:18","nodes":[],"body":{"id":4968,"nodeType":"Block","src":"19436:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"19454:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":4948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19468:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4947,"name":"int224","nodeType":"ElementaryTypeName","src":"19468:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"}],"id":4946,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"19463:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19463:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int224","typeString":"type(int224)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19476:3:18","memberName":"min","nodeType":"MemberAccess","src":"19463:16:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19454:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"19483:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19497:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4954,"name":"int224","nodeType":"ElementaryTypeName","src":"19497:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"}],"id":4953,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"19492:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19492:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int224","typeString":"type(int224)"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19505:3:18","memberName":"max","nodeType":"MemberAccess","src":"19492:16:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19483:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19454:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":4960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19510:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":4944,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"19446:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19446:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4962,"nodeType":"ExpressionStatement","src":"19446:106:18"},{"expression":{"arguments":[{"id":4965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"19576:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19569:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4963,"name":"int224","nodeType":"ElementaryTypeName","src":"19569:6:18","typeDescriptions":{}}},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19569:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"functionReturnParameters":4943,"id":4967,"nodeType":"Return","src":"19562:20:18"}]},"documentation":{"id":4937,"nodeType":"StructuredDocumentation","src":"19018:350:18","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19382:8:18","parameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4939,"mutability":"mutable","name":"value","nameLocation":"19398:5:18","nodeType":"VariableDeclaration","scope":4969,"src":"19391:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4938,"name":"int256","nodeType":"ElementaryTypeName","src":"19391:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19390:14:18"},"returnParameters":{"id":4943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4969,"src":"19428:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":4941,"name":"int224","nodeType":"ElementaryTypeName","src":"19428:6:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19427:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5002,"nodeType":"FunctionDefinition","src":"19950:216:18","nodes":[],"body":{"id":5001,"nodeType":"Block","src":"20013:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"20031:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":4981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20045:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4980,"name":"int216","nodeType":"ElementaryTypeName","src":"20045:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"}],"id":4979,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"20040:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20040:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int216","typeString":"type(int216)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20053:3:18","memberName":"min","nodeType":"MemberAccess","src":"20040:16:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"20031:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"20060:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20074:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4987,"name":"int216","nodeType":"ElementaryTypeName","src":"20074:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"}],"id":4986,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"20069:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20069:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int216","typeString":"type(int216)"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20082:3:18","memberName":"max","nodeType":"MemberAccess","src":"20069:16:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"20060:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"20031:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":4993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20087:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":4977,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"20023:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20023:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4995,"nodeType":"ExpressionStatement","src":"20023:106:18"},{"expression":{"arguments":[{"id":4998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"20153:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20146:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4996,"name":"int216","nodeType":"ElementaryTypeName","src":"20146:6:18","typeDescriptions":{}}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20146:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"functionReturnParameters":4976,"id":5000,"nodeType":"Return","src":"20139:20:18"}]},"documentation":{"id":4970,"nodeType":"StructuredDocumentation","src":"19595:350:18","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19959:8:18","parameters":{"id":4973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4972,"mutability":"mutable","name":"value","nameLocation":"19975:5:18","nodeType":"VariableDeclaration","scope":5002,"src":"19968:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4971,"name":"int256","nodeType":"ElementaryTypeName","src":"19968:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19967:14:18"},"returnParameters":{"id":4976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5002,"src":"20005:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":4974,"name":"int216","nodeType":"ElementaryTypeName","src":"20005:6:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"20004:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5035,"nodeType":"FunctionDefinition","src":"20527:216:18","nodes":[],"body":{"id":5034,"nodeType":"Block","src":"20590:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"20608:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20622:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":5013,"name":"int208","nodeType":"ElementaryTypeName","src":"20622:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"}],"id":5012,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"20617:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20617:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int208","typeString":"type(int208)"}},"id":5016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20630:3:18","memberName":"min","nodeType":"MemberAccess","src":"20617:16:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20608:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"20637:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20651:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":5020,"name":"int208","nodeType":"ElementaryTypeName","src":"20651:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"}],"id":5019,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"20646:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20646:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int208","typeString":"type(int208)"}},"id":5023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20659:3:18","memberName":"max","nodeType":"MemberAccess","src":"20646:16:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20637:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"20608:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":5026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20664:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":5010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"20600:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20600:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5028,"nodeType":"ExpressionStatement","src":"20600:106:18"},{"expression":{"arguments":[{"id":5031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5005,"src":"20730:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20723:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":5029,"name":"int208","nodeType":"ElementaryTypeName","src":"20723:6:18","typeDescriptions":{}}},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20723:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"functionReturnParameters":5009,"id":5033,"nodeType":"Return","src":"20716:20:18"}]},"documentation":{"id":5003,"nodeType":"StructuredDocumentation","src":"20172:350:18","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20536:8:18","parameters":{"id":5006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5005,"mutability":"mutable","name":"value","nameLocation":"20552:5:18","nodeType":"VariableDeclaration","scope":5035,"src":"20545:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5004,"name":"int256","nodeType":"ElementaryTypeName","src":"20545:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20544:14:18"},"returnParameters":{"id":5009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5035,"src":"20582:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":5007,"name":"int208","nodeType":"ElementaryTypeName","src":"20582:6:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20581:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5068,"nodeType":"FunctionDefinition","src":"21104:216:18","nodes":[],"body":{"id":5067,"nodeType":"Block","src":"21167:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5044,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"21185:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21199:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":5046,"name":"int200","nodeType":"ElementaryTypeName","src":"21199:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"}],"id":5045,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"21194:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21194:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int200","typeString":"type(int200)"}},"id":5049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21207:3:18","memberName":"min","nodeType":"MemberAccess","src":"21194:16:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21185:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"21214:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21228:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":5053,"name":"int200","nodeType":"ElementaryTypeName","src":"21228:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"}],"id":5052,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"21223:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21223:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int200","typeString":"type(int200)"}},"id":5056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21236:3:18","memberName":"max","nodeType":"MemberAccess","src":"21223:16:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21214:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"21185:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":5059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21241:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":5043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"21177:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21177:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5061,"nodeType":"ExpressionStatement","src":"21177:106:18"},{"expression":{"arguments":[{"id":5064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5038,"src":"21307:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21300:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":5062,"name":"int200","nodeType":"ElementaryTypeName","src":"21300:6:18","typeDescriptions":{}}},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21300:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"functionReturnParameters":5042,"id":5066,"nodeType":"Return","src":"21293:20:18"}]},"documentation":{"id":5036,"nodeType":"StructuredDocumentation","src":"20749:350:18","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"21113:8:18","parameters":{"id":5039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5038,"mutability":"mutable","name":"value","nameLocation":"21129:5:18","nodeType":"VariableDeclaration","scope":5068,"src":"21122:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5037,"name":"int256","nodeType":"ElementaryTypeName","src":"21122:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21121:14:18"},"returnParameters":{"id":5042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5068,"src":"21159:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":5040,"name":"int200","nodeType":"ElementaryTypeName","src":"21159:6:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21158:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5101,"nodeType":"FunctionDefinition","src":"21681:216:18","nodes":[],"body":{"id":5100,"nodeType":"Block","src":"21744:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"21762:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21776:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":5079,"name":"int192","nodeType":"ElementaryTypeName","src":"21776:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"}],"id":5078,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"21771:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21771:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int192","typeString":"type(int192)"}},"id":5082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21784:3:18","memberName":"min","nodeType":"MemberAccess","src":"21771:16:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21762:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"21791:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21805:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":5086,"name":"int192","nodeType":"ElementaryTypeName","src":"21805:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"}],"id":5085,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"21800:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21800:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int192","typeString":"type(int192)"}},"id":5089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21813:3:18","memberName":"max","nodeType":"MemberAccess","src":"21800:16:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21791:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"21762:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":5092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21818:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":5076,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"21754:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21754:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5094,"nodeType":"ExpressionStatement","src":"21754:106:18"},{"expression":{"arguments":[{"id":5097,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"21884:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21877:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":5095,"name":"int192","nodeType":"ElementaryTypeName","src":"21877:6:18","typeDescriptions":{}}},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21877:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"functionReturnParameters":5075,"id":5099,"nodeType":"Return","src":"21870:20:18"}]},"documentation":{"id":5069,"nodeType":"StructuredDocumentation","src":"21326:350:18","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21690:8:18","parameters":{"id":5072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5071,"mutability":"mutable","name":"value","nameLocation":"21706:5:18","nodeType":"VariableDeclaration","scope":5101,"src":"21699:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5070,"name":"int256","nodeType":"ElementaryTypeName","src":"21699:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21698:14:18"},"returnParameters":{"id":5075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5074,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5101,"src":"21736:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":5073,"name":"int192","nodeType":"ElementaryTypeName","src":"21736:6:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21735:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5134,"nodeType":"FunctionDefinition","src":"22258:216:18","nodes":[],"body":{"id":5133,"nodeType":"Block","src":"22321:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"22339:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22353:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5112,"name":"int184","nodeType":"ElementaryTypeName","src":"22353:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"}],"id":5111,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"22348:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22348:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int184","typeString":"type(int184)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22361:3:18","memberName":"min","nodeType":"MemberAccess","src":"22348:16:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22339:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"22368:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5119,"name":"int184","nodeType":"ElementaryTypeName","src":"22382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"}],"id":5118,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"22377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int184","typeString":"type(int184)"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22390:3:18","memberName":"max","nodeType":"MemberAccess","src":"22377:16:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22368:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22339:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22395:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":5109,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"22331:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22331:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5127,"nodeType":"ExpressionStatement","src":"22331:106:18"},{"expression":{"arguments":[{"id":5130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"22461:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22454:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5128,"name":"int184","nodeType":"ElementaryTypeName","src":"22454:6:18","typeDescriptions":{}}},"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22454:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"functionReturnParameters":5108,"id":5132,"nodeType":"Return","src":"22447:20:18"}]},"documentation":{"id":5102,"nodeType":"StructuredDocumentation","src":"21903:350:18","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22267:8:18","parameters":{"id":5105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5104,"mutability":"mutable","name":"value","nameLocation":"22283:5:18","nodeType":"VariableDeclaration","scope":5134,"src":"22276:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5103,"name":"int256","nodeType":"ElementaryTypeName","src":"22276:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22275:14:18"},"returnParameters":{"id":5108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5134,"src":"22313:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":5106,"name":"int184","nodeType":"ElementaryTypeName","src":"22313:6:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22312:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5167,"nodeType":"FunctionDefinition","src":"22835:216:18","nodes":[],"body":{"id":5166,"nodeType":"Block","src":"22898:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"22916:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22930:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5145,"name":"int176","nodeType":"ElementaryTypeName","src":"22930:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"}],"id":5144,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"22925:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22925:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int176","typeString":"type(int176)"}},"id":5148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22938:3:18","memberName":"min","nodeType":"MemberAccess","src":"22925:16:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22916:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"22945:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22959:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5152,"name":"int176","nodeType":"ElementaryTypeName","src":"22959:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"}],"id":5151,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"22954:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22954:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int176","typeString":"type(int176)"}},"id":5155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22967:3:18","memberName":"max","nodeType":"MemberAccess","src":"22954:16:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22945:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"22916:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22972:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":5142,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"22908:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22908:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5160,"nodeType":"ExpressionStatement","src":"22908:106:18"},{"expression":{"arguments":[{"id":5163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"23038:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23031:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5161,"name":"int176","nodeType":"ElementaryTypeName","src":"23031:6:18","typeDescriptions":{}}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23031:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"functionReturnParameters":5141,"id":5165,"nodeType":"Return","src":"23024:20:18"}]},"documentation":{"id":5135,"nodeType":"StructuredDocumentation","src":"22480:350:18","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22844:8:18","parameters":{"id":5138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5137,"mutability":"mutable","name":"value","nameLocation":"22860:5:18","nodeType":"VariableDeclaration","scope":5167,"src":"22853:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5136,"name":"int256","nodeType":"ElementaryTypeName","src":"22853:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22852:14:18"},"returnParameters":{"id":5141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5167,"src":"22890:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":5139,"name":"int176","nodeType":"ElementaryTypeName","src":"22890:6:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22889:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5200,"nodeType":"FunctionDefinition","src":"23412:216:18","nodes":[],"body":{"id":5199,"nodeType":"Block","src":"23475:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"23493:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23507:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5178,"name":"int168","nodeType":"ElementaryTypeName","src":"23507:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"}],"id":5177,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"23502:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23502:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int168","typeString":"type(int168)"}},"id":5181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"23515:3:18","memberName":"min","nodeType":"MemberAccess","src":"23502:16:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23493:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"23522:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23536:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5185,"name":"int168","nodeType":"ElementaryTypeName","src":"23536:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"}],"id":5184,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"23531:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23531:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int168","typeString":"type(int168)"}},"id":5188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"23544:3:18","memberName":"max","nodeType":"MemberAccess","src":"23531:16:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23522:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23493:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":5191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23549:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":5175,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"23485:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23485:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5193,"nodeType":"ExpressionStatement","src":"23485:106:18"},{"expression":{"arguments":[{"id":5196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"23615:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23608:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5194,"name":"int168","nodeType":"ElementaryTypeName","src":"23608:6:18","typeDescriptions":{}}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23608:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"functionReturnParameters":5174,"id":5198,"nodeType":"Return","src":"23601:20:18"}]},"documentation":{"id":5168,"nodeType":"StructuredDocumentation","src":"23057:350:18","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23421:8:18","parameters":{"id":5171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"mutability":"mutable","name":"value","nameLocation":"23437:5:18","nodeType":"VariableDeclaration","scope":5200,"src":"23430:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5169,"name":"int256","nodeType":"ElementaryTypeName","src":"23430:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23429:14:18"},"returnParameters":{"id":5174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5200,"src":"23467:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":5172,"name":"int168","nodeType":"ElementaryTypeName","src":"23467:6:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23466:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5233,"nodeType":"FunctionDefinition","src":"23989:216:18","nodes":[],"body":{"id":5232,"nodeType":"Block","src":"24052:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"24070:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24084:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5211,"name":"int160","nodeType":"ElementaryTypeName","src":"24084:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"}],"id":5210,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"24079:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24079:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int160","typeString":"type(int160)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"24092:3:18","memberName":"min","nodeType":"MemberAccess","src":"24079:16:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"24070:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5216,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"24099:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24113:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5218,"name":"int160","nodeType":"ElementaryTypeName","src":"24113:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"}],"id":5217,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"24108:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24108:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int160","typeString":"type(int160)"}},"id":5221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"24121:3:18","memberName":"max","nodeType":"MemberAccess","src":"24108:16:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"24099:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24070:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":5224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24126:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":5208,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"24062:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24062:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5226,"nodeType":"ExpressionStatement","src":"24062:106:18"},{"expression":{"arguments":[{"id":5229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"24192:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24185:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5227,"name":"int160","nodeType":"ElementaryTypeName","src":"24185:6:18","typeDescriptions":{}}},"id":5230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24185:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"functionReturnParameters":5207,"id":5231,"nodeType":"Return","src":"24178:20:18"}]},"documentation":{"id":5201,"nodeType":"StructuredDocumentation","src":"23634:350:18","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23998:8:18","parameters":{"id":5204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5203,"mutability":"mutable","name":"value","nameLocation":"24014:5:18","nodeType":"VariableDeclaration","scope":5233,"src":"24007:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5202,"name":"int256","nodeType":"ElementaryTypeName","src":"24007:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24006:14:18"},"returnParameters":{"id":5207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5233,"src":"24044:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":5205,"name":"int160","nodeType":"ElementaryTypeName","src":"24044:6:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"24043:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5266,"nodeType":"FunctionDefinition","src":"24566:216:18","nodes":[],"body":{"id":5265,"nodeType":"Block","src":"24629:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"24647:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24661:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":5244,"name":"int152","nodeType":"ElementaryTypeName","src":"24661:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"}],"id":5243,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"24656:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24656:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int152","typeString":"type(int152)"}},"id":5247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"24669:3:18","memberName":"min","nodeType":"MemberAccess","src":"24656:16:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24647:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"24676:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24690:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":5251,"name":"int152","nodeType":"ElementaryTypeName","src":"24690:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"}],"id":5250,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"24685:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24685:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int152","typeString":"type(int152)"}},"id":5254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"24698:3:18","memberName":"max","nodeType":"MemberAccess","src":"24685:16:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24676:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24647:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":5257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24703:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":5241,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"24639:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24639:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5259,"nodeType":"ExpressionStatement","src":"24639:106:18"},{"expression":{"arguments":[{"id":5262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"24769:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24762:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":5260,"name":"int152","nodeType":"ElementaryTypeName","src":"24762:6:18","typeDescriptions":{}}},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24762:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"functionReturnParameters":5240,"id":5264,"nodeType":"Return","src":"24755:20:18"}]},"documentation":{"id":5234,"nodeType":"StructuredDocumentation","src":"24211:350:18","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24575:8:18","parameters":{"id":5237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5236,"mutability":"mutable","name":"value","nameLocation":"24591:5:18","nodeType":"VariableDeclaration","scope":5266,"src":"24584:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5235,"name":"int256","nodeType":"ElementaryTypeName","src":"24584:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24583:14:18"},"returnParameters":{"id":5240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5266,"src":"24621:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":5238,"name":"int152","nodeType":"ElementaryTypeName","src":"24621:6:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24620:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5299,"nodeType":"FunctionDefinition","src":"25143:216:18","nodes":[],"body":{"id":5298,"nodeType":"Block","src":"25206:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"25224:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25238:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":5277,"name":"int144","nodeType":"ElementaryTypeName","src":"25238:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"}],"id":5276,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"25233:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25233:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int144","typeString":"type(int144)"}},"id":5280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25246:3:18","memberName":"min","nodeType":"MemberAccess","src":"25233:16:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"25224:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"25253:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25267:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":5284,"name":"int144","nodeType":"ElementaryTypeName","src":"25267:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"}],"id":5283,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"25262:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25262:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int144","typeString":"type(int144)"}},"id":5287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25275:3:18","memberName":"max","nodeType":"MemberAccess","src":"25262:16:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"25253:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25224:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":5290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25280:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":5274,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"25216:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25216:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5292,"nodeType":"ExpressionStatement","src":"25216:106:18"},{"expression":{"arguments":[{"id":5295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"25346:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25339:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":5293,"name":"int144","nodeType":"ElementaryTypeName","src":"25339:6:18","typeDescriptions":{}}},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25339:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"functionReturnParameters":5273,"id":5297,"nodeType":"Return","src":"25332:20:18"}]},"documentation":{"id":5267,"nodeType":"StructuredDocumentation","src":"24788:350:18","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"25152:8:18","parameters":{"id":5270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5269,"mutability":"mutable","name":"value","nameLocation":"25168:5:18","nodeType":"VariableDeclaration","scope":5299,"src":"25161:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5268,"name":"int256","nodeType":"ElementaryTypeName","src":"25161:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25160:14:18"},"returnParameters":{"id":5273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5299,"src":"25198:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":5271,"name":"int144","nodeType":"ElementaryTypeName","src":"25198:6:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"25197:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5332,"nodeType":"FunctionDefinition","src":"25720:216:18","nodes":[],"body":{"id":5331,"nodeType":"Block","src":"25783:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"25801:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25815:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":5310,"name":"int136","nodeType":"ElementaryTypeName","src":"25815:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"}],"id":5309,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"25810:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25810:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int136","typeString":"type(int136)"}},"id":5313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25823:3:18","memberName":"min","nodeType":"MemberAccess","src":"25810:16:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25801:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"25830:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25844:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":5317,"name":"int136","nodeType":"ElementaryTypeName","src":"25844:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"}],"id":5316,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"25839:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25839:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int136","typeString":"type(int136)"}},"id":5320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25852:3:18","memberName":"max","nodeType":"MemberAccess","src":"25839:16:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25830:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25801:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":5323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25857:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":5307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"25793:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25793:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5325,"nodeType":"ExpressionStatement","src":"25793:106:18"},{"expression":{"arguments":[{"id":5328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"25923:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25916:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":5326,"name":"int136","nodeType":"ElementaryTypeName","src":"25916:6:18","typeDescriptions":{}}},"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25916:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"functionReturnParameters":5306,"id":5330,"nodeType":"Return","src":"25909:20:18"}]},"documentation":{"id":5300,"nodeType":"StructuredDocumentation","src":"25365:350:18","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25729:8:18","parameters":{"id":5303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5302,"mutability":"mutable","name":"value","nameLocation":"25745:5:18","nodeType":"VariableDeclaration","scope":5332,"src":"25738:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5301,"name":"int256","nodeType":"ElementaryTypeName","src":"25738:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25737:14:18"},"returnParameters":{"id":5306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5332,"src":"25775:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":5304,"name":"int136","nodeType":"ElementaryTypeName","src":"25775:6:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25774:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5365,"nodeType":"FunctionDefinition","src":"26297:216:18","nodes":[],"body":{"id":5364,"nodeType":"Block","src":"26360:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5341,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"26378:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26392:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5343,"name":"int128","nodeType":"ElementaryTypeName","src":"26392:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"}],"id":5342,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"26387:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26387:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int128","typeString":"type(int128)"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26400:3:18","memberName":"min","nodeType":"MemberAccess","src":"26387:16:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"26378:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"26407:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26421:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5350,"name":"int128","nodeType":"ElementaryTypeName","src":"26421:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"}],"id":5349,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"26416:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26416:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int128","typeString":"type(int128)"}},"id":5353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26429:3:18","memberName":"max","nodeType":"MemberAccess","src":"26416:16:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"26407:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26378:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":5356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26434:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":5340,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"26370:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26370:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5358,"nodeType":"ExpressionStatement","src":"26370:106:18"},{"expression":{"arguments":[{"id":5361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5335,"src":"26500:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26493:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5359,"name":"int128","nodeType":"ElementaryTypeName","src":"26493:6:18","typeDescriptions":{}}},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26493:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"functionReturnParameters":5339,"id":5363,"nodeType":"Return","src":"26486:20:18"}]},"documentation":{"id":5333,"nodeType":"StructuredDocumentation","src":"25942:350:18","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"26306:8:18","parameters":{"id":5336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5335,"mutability":"mutable","name":"value","nameLocation":"26322:5:18","nodeType":"VariableDeclaration","scope":5365,"src":"26315:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5334,"name":"int256","nodeType":"ElementaryTypeName","src":"26315:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26314:14:18"},"returnParameters":{"id":5339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5365,"src":"26352:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":5337,"name":"int128","nodeType":"ElementaryTypeName","src":"26352:6:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"26351:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5398,"nodeType":"FunctionDefinition","src":"26874:216:18","nodes":[],"body":{"id":5397,"nodeType":"Block","src":"26937:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"26955:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26969:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5376,"name":"int120","nodeType":"ElementaryTypeName","src":"26969:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"}],"id":5375,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"26964:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26964:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int120","typeString":"type(int120)"}},"id":5379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26977:3:18","memberName":"min","nodeType":"MemberAccess","src":"26964:16:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26955:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"26984:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26998:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5383,"name":"int120","nodeType":"ElementaryTypeName","src":"26998:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"}],"id":5382,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"26993:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26993:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int120","typeString":"type(int120)"}},"id":5386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27006:3:18","memberName":"max","nodeType":"MemberAccess","src":"26993:16:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26984:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26955:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":5389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27011:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":5373,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"26947:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26947:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5391,"nodeType":"ExpressionStatement","src":"26947:106:18"},{"expression":{"arguments":[{"id":5394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5368,"src":"27077:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27070:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5392,"name":"int120","nodeType":"ElementaryTypeName","src":"27070:6:18","typeDescriptions":{}}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27070:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"functionReturnParameters":5372,"id":5396,"nodeType":"Return","src":"27063:20:18"}]},"documentation":{"id":5366,"nodeType":"StructuredDocumentation","src":"26519:350:18","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26883:8:18","parameters":{"id":5369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5368,"mutability":"mutable","name":"value","nameLocation":"26899:5:18","nodeType":"VariableDeclaration","scope":5398,"src":"26892:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5367,"name":"int256","nodeType":"ElementaryTypeName","src":"26892:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26891:14:18"},"returnParameters":{"id":5372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5398,"src":"26929:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":5370,"name":"int120","nodeType":"ElementaryTypeName","src":"26929:6:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26928:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5431,"nodeType":"FunctionDefinition","src":"27451:216:18","nodes":[],"body":{"id":5430,"nodeType":"Block","src":"27514:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5401,"src":"27532:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27546:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5409,"name":"int112","nodeType":"ElementaryTypeName","src":"27546:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"}],"id":5408,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"27541:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27541:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int112","typeString":"type(int112)"}},"id":5412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27554:3:18","memberName":"min","nodeType":"MemberAccess","src":"27541:16:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27532:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5401,"src":"27561:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27575:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5416,"name":"int112","nodeType":"ElementaryTypeName","src":"27575:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"}],"id":5415,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"27570:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27570:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int112","typeString":"type(int112)"}},"id":5419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27583:3:18","memberName":"max","nodeType":"MemberAccess","src":"27570:16:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27561:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"27532:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":5422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27588:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":5406,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"27524:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27524:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5424,"nodeType":"ExpressionStatement","src":"27524:106:18"},{"expression":{"arguments":[{"id":5427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5401,"src":"27654:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27647:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5425,"name":"int112","nodeType":"ElementaryTypeName","src":"27647:6:18","typeDescriptions":{}}},"id":5428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27647:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"functionReturnParameters":5405,"id":5429,"nodeType":"Return","src":"27640:20:18"}]},"documentation":{"id":5399,"nodeType":"StructuredDocumentation","src":"27096:350:18","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"27460:8:18","parameters":{"id":5402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5401,"mutability":"mutable","name":"value","nameLocation":"27476:5:18","nodeType":"VariableDeclaration","scope":5431,"src":"27469:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5400,"name":"int256","nodeType":"ElementaryTypeName","src":"27469:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27468:14:18"},"returnParameters":{"id":5405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5431,"src":"27506:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":5403,"name":"int112","nodeType":"ElementaryTypeName","src":"27506:6:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27505:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5464,"nodeType":"FunctionDefinition","src":"28028:216:18","nodes":[],"body":{"id":5463,"nodeType":"Block","src":"28091:153:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"28109:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28123:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5442,"name":"int104","nodeType":"ElementaryTypeName","src":"28123:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"}],"id":5441,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"28118:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28118:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int104","typeString":"type(int104)"}},"id":5445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28131:3:18","memberName":"min","nodeType":"MemberAccess","src":"28118:16:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"28109:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"28138:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28152:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5449,"name":"int104","nodeType":"ElementaryTypeName","src":"28152:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"}],"id":5448,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"28147:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28147:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int104","typeString":"type(int104)"}},"id":5452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28160:3:18","memberName":"max","nodeType":"MemberAccess","src":"28147:16:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"28138:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"28109:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":5455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"28165:41:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":5439,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"28101:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28101:106:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5457,"nodeType":"ExpressionStatement","src":"28101:106:18"},{"expression":{"arguments":[{"id":5460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5434,"src":"28231:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28224:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5458,"name":"int104","nodeType":"ElementaryTypeName","src":"28224:6:18","typeDescriptions":{}}},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28224:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"functionReturnParameters":5438,"id":5462,"nodeType":"Return","src":"28217:20:18"}]},"documentation":{"id":5432,"nodeType":"StructuredDocumentation","src":"27673:350:18","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"28037:8:18","parameters":{"id":5435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5434,"mutability":"mutable","name":"value","nameLocation":"28053:5:18","nodeType":"VariableDeclaration","scope":5464,"src":"28046:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5433,"name":"int256","nodeType":"ElementaryTypeName","src":"28046:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28045:14:18"},"returnParameters":{"id":5438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5464,"src":"28083:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":5436,"name":"int104","nodeType":"ElementaryTypeName","src":"28083:6:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"28082:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5497,"nodeType":"FunctionDefinition","src":"28600:210:18","nodes":[],"body":{"id":5496,"nodeType":"Block","src":"28661:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"28679:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28693:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5475,"name":"int96","nodeType":"ElementaryTypeName","src":"28693:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"}],"id":5474,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"28688:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28688:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int96","typeString":"type(int96)"}},"id":5478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28700:3:18","memberName":"min","nodeType":"MemberAccess","src":"28688:15:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28679:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"28707:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28721:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5482,"name":"int96","nodeType":"ElementaryTypeName","src":"28721:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"}],"id":5481,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"28716:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28716:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int96","typeString":"type(int96)"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"28728:3:18","memberName":"max","nodeType":"MemberAccess","src":"28716:15:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28707:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"28679:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":5488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"28733:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":5472,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"28671:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28671:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5490,"nodeType":"ExpressionStatement","src":"28671:103:18"},{"expression":{"arguments":[{"id":5493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"28797:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28791:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5491,"name":"int96","nodeType":"ElementaryTypeName","src":"28791:5:18","typeDescriptions":{}}},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28791:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"functionReturnParameters":5471,"id":5495,"nodeType":"Return","src":"28784:19:18"}]},"documentation":{"id":5465,"nodeType":"StructuredDocumentation","src":"28250:345:18","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28609:7:18","parameters":{"id":5468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5467,"mutability":"mutable","name":"value","nameLocation":"28624:5:18","nodeType":"VariableDeclaration","scope":5497,"src":"28617:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5466,"name":"int256","nodeType":"ElementaryTypeName","src":"28617:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28616:14:18"},"returnParameters":{"id":5471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5497,"src":"28654:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":5469,"name":"int96","nodeType":"ElementaryTypeName","src":"28654:5:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28653:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5530,"nodeType":"FunctionDefinition","src":"29166:210:18","nodes":[],"body":{"id":5529,"nodeType":"Block","src":"29227:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"29245:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29259:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5508,"name":"int88","nodeType":"ElementaryTypeName","src":"29259:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"}],"id":5507,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"29254:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29254:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int88","typeString":"type(int88)"}},"id":5511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29266:3:18","memberName":"min","nodeType":"MemberAccess","src":"29254:15:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"29245:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"29273:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29287:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5515,"name":"int88","nodeType":"ElementaryTypeName","src":"29287:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"}],"id":5514,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"29282:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29282:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int88","typeString":"type(int88)"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29294:3:18","memberName":"max","nodeType":"MemberAccess","src":"29282:15:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"29273:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"29245:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":5521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29299:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":5505,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"29237:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29237:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5523,"nodeType":"ExpressionStatement","src":"29237:103:18"},{"expression":{"arguments":[{"id":5526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"29363:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29357:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5524,"name":"int88","nodeType":"ElementaryTypeName","src":"29357:5:18","typeDescriptions":{}}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29357:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"functionReturnParameters":5504,"id":5528,"nodeType":"Return","src":"29350:19:18"}]},"documentation":{"id":5498,"nodeType":"StructuredDocumentation","src":"28816:345:18","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"29175:7:18","parameters":{"id":5501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5500,"mutability":"mutable","name":"value","nameLocation":"29190:5:18","nodeType":"VariableDeclaration","scope":5530,"src":"29183:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5499,"name":"int256","nodeType":"ElementaryTypeName","src":"29183:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29182:14:18"},"returnParameters":{"id":5504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5530,"src":"29220:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":5502,"name":"int88","nodeType":"ElementaryTypeName","src":"29220:5:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"29219:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5563,"nodeType":"FunctionDefinition","src":"29732:210:18","nodes":[],"body":{"id":5562,"nodeType":"Block","src":"29793:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"29811:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29825:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5541,"name":"int80","nodeType":"ElementaryTypeName","src":"29825:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"}],"id":5540,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"29820:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29820:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int80","typeString":"type(int80)"}},"id":5544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29832:3:18","memberName":"min","nodeType":"MemberAccess","src":"29820:15:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29811:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"29839:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29853:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5548,"name":"int80","nodeType":"ElementaryTypeName","src":"29853:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"}],"id":5547,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"29848:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29848:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int80","typeString":"type(int80)"}},"id":5551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29860:3:18","memberName":"max","nodeType":"MemberAccess","src":"29848:15:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29839:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"29811:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":5554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29865:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":5538,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"29803:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29803:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5556,"nodeType":"ExpressionStatement","src":"29803:103:18"},{"expression":{"arguments":[{"id":5559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"29929:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29923:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5557,"name":"int80","nodeType":"ElementaryTypeName","src":"29923:5:18","typeDescriptions":{}}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29923:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"functionReturnParameters":5537,"id":5561,"nodeType":"Return","src":"29916:19:18"}]},"documentation":{"id":5531,"nodeType":"StructuredDocumentation","src":"29382:345:18","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29741:7:18","parameters":{"id":5534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5533,"mutability":"mutable","name":"value","nameLocation":"29756:5:18","nodeType":"VariableDeclaration","scope":5563,"src":"29749:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5532,"name":"int256","nodeType":"ElementaryTypeName","src":"29749:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29748:14:18"},"returnParameters":{"id":5537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5563,"src":"29786:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":5535,"name":"int80","nodeType":"ElementaryTypeName","src":"29786:5:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29785:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5596,"nodeType":"FunctionDefinition","src":"30298:210:18","nodes":[],"body":{"id":5595,"nodeType":"Block","src":"30359:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5566,"src":"30377:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30391:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5574,"name":"int72","nodeType":"ElementaryTypeName","src":"30391:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"}],"id":5573,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"30386:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30386:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int72","typeString":"type(int72)"}},"id":5577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"30398:3:18","memberName":"min","nodeType":"MemberAccess","src":"30386:15:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"30377:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5566,"src":"30405:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30419:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5581,"name":"int72","nodeType":"ElementaryTypeName","src":"30419:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"}],"id":5580,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"30414:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30414:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int72","typeString":"type(int72)"}},"id":5584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"30426:3:18","memberName":"max","nodeType":"MemberAccess","src":"30414:15:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"30405:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30377:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":5587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30431:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":5571,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"30369:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30369:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5589,"nodeType":"ExpressionStatement","src":"30369:103:18"},{"expression":{"arguments":[{"id":5592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5566,"src":"30495:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30489:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5590,"name":"int72","nodeType":"ElementaryTypeName","src":"30489:5:18","typeDescriptions":{}}},"id":5593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30489:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"functionReturnParameters":5570,"id":5594,"nodeType":"Return","src":"30482:19:18"}]},"documentation":{"id":5564,"nodeType":"StructuredDocumentation","src":"29948:345:18","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"30307:7:18","parameters":{"id":5567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5566,"mutability":"mutable","name":"value","nameLocation":"30322:5:18","nodeType":"VariableDeclaration","scope":5596,"src":"30315:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5565,"name":"int256","nodeType":"ElementaryTypeName","src":"30315:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30314:14:18"},"returnParameters":{"id":5570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5596,"src":"30352:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":5568,"name":"int72","nodeType":"ElementaryTypeName","src":"30352:5:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"30351:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5629,"nodeType":"FunctionDefinition","src":"30864:210:18","nodes":[],"body":{"id":5628,"nodeType":"Block","src":"30925:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"30943:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30957:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5607,"name":"int64","nodeType":"ElementaryTypeName","src":"30957:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"}],"id":5606,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"30952:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30952:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int64","typeString":"type(int64)"}},"id":5610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"30964:3:18","memberName":"min","nodeType":"MemberAccess","src":"30952:15:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30943:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"30971:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30985:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5614,"name":"int64","nodeType":"ElementaryTypeName","src":"30985:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"}],"id":5613,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"30980:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30980:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int64","typeString":"type(int64)"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"30992:3:18","memberName":"max","nodeType":"MemberAccess","src":"30980:15:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30971:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30943:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":5620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30997:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":5604,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"30935:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30935:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5622,"nodeType":"ExpressionStatement","src":"30935:103:18"},{"expression":{"arguments":[{"id":5625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5599,"src":"31061:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31055:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5623,"name":"int64","nodeType":"ElementaryTypeName","src":"31055:5:18","typeDescriptions":{}}},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31055:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"functionReturnParameters":5603,"id":5627,"nodeType":"Return","src":"31048:19:18"}]},"documentation":{"id":5597,"nodeType":"StructuredDocumentation","src":"30514:345:18","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30873:7:18","parameters":{"id":5600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5599,"mutability":"mutable","name":"value","nameLocation":"30888:5:18","nodeType":"VariableDeclaration","scope":5629,"src":"30881:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5598,"name":"int256","nodeType":"ElementaryTypeName","src":"30881:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30880:14:18"},"returnParameters":{"id":5603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5629,"src":"30918:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":5601,"name":"int64","nodeType":"ElementaryTypeName","src":"30918:5:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30917:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5662,"nodeType":"FunctionDefinition","src":"31430:210:18","nodes":[],"body":{"id":5661,"nodeType":"Block","src":"31491:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"31509:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31523:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5640,"name":"int56","nodeType":"ElementaryTypeName","src":"31523:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"}],"id":5639,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"31518:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31518:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int56","typeString":"type(int56)"}},"id":5643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"31530:3:18","memberName":"min","nodeType":"MemberAccess","src":"31518:15:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"31509:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"31537:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31551:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5647,"name":"int56","nodeType":"ElementaryTypeName","src":"31551:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"}],"id":5646,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"31546:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31546:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int56","typeString":"type(int56)"}},"id":5650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"31558:3:18","memberName":"max","nodeType":"MemberAccess","src":"31546:15:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"31537:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31509:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":5653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31563:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":5637,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"31501:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31501:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5655,"nodeType":"ExpressionStatement","src":"31501:103:18"},{"expression":{"arguments":[{"id":5658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"31627:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31621:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5656,"name":"int56","nodeType":"ElementaryTypeName","src":"31621:5:18","typeDescriptions":{}}},"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31621:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"functionReturnParameters":5636,"id":5660,"nodeType":"Return","src":"31614:19:18"}]},"documentation":{"id":5630,"nodeType":"StructuredDocumentation","src":"31080:345:18","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"31439:7:18","parameters":{"id":5633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5632,"mutability":"mutable","name":"value","nameLocation":"31454:5:18","nodeType":"VariableDeclaration","scope":5662,"src":"31447:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5631,"name":"int256","nodeType":"ElementaryTypeName","src":"31447:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31446:14:18"},"returnParameters":{"id":5636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5662,"src":"31484:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5634,"name":"int56","nodeType":"ElementaryTypeName","src":"31484:5:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"31483:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5695,"nodeType":"FunctionDefinition","src":"31996:210:18","nodes":[],"body":{"id":5694,"nodeType":"Block","src":"32057:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"32075:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32089:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5673,"name":"int48","nodeType":"ElementaryTypeName","src":"32089:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"}],"id":5672,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"32084:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32084:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int48","typeString":"type(int48)"}},"id":5676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"32096:3:18","memberName":"min","nodeType":"MemberAccess","src":"32084:15:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"32075:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"32103:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32117:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5680,"name":"int48","nodeType":"ElementaryTypeName","src":"32117:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"}],"id":5679,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"32112:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32112:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int48","typeString":"type(int48)"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"32124:3:18","memberName":"max","nodeType":"MemberAccess","src":"32112:15:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"32103:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"32075:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":5686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32129:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":5670,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"32067:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32067:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5688,"nodeType":"ExpressionStatement","src":"32067:103:18"},{"expression":{"arguments":[{"id":5691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"32193:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32187:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5689,"name":"int48","nodeType":"ElementaryTypeName","src":"32187:5:18","typeDescriptions":{}}},"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32187:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"functionReturnParameters":5669,"id":5693,"nodeType":"Return","src":"32180:19:18"}]},"documentation":{"id":5663,"nodeType":"StructuredDocumentation","src":"31646:345:18","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"32005:7:18","parameters":{"id":5666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5665,"mutability":"mutable","name":"value","nameLocation":"32020:5:18","nodeType":"VariableDeclaration","scope":5695,"src":"32013:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5664,"name":"int256","nodeType":"ElementaryTypeName","src":"32013:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32012:14:18"},"returnParameters":{"id":5669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5695,"src":"32050:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":5667,"name":"int48","nodeType":"ElementaryTypeName","src":"32050:5:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"32049:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5728,"nodeType":"FunctionDefinition","src":"32562:210:18","nodes":[],"body":{"id":5727,"nodeType":"Block","src":"32623:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5698,"src":"32641:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32655:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5706,"name":"int40","nodeType":"ElementaryTypeName","src":"32655:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"}],"id":5705,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"32650:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32650:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int40","typeString":"type(int40)"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"32662:3:18","memberName":"min","nodeType":"MemberAccess","src":"32650:15:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"32641:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5698,"src":"32669:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32683:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5713,"name":"int40","nodeType":"ElementaryTypeName","src":"32683:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"}],"id":5712,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"32678:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32678:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int40","typeString":"type(int40)"}},"id":5716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"32690:3:18","memberName":"max","nodeType":"MemberAccess","src":"32678:15:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"32669:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"32641:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":5719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32695:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":5703,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"32633:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32633:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5721,"nodeType":"ExpressionStatement","src":"32633:103:18"},{"expression":{"arguments":[{"id":5724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5698,"src":"32759:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32753:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5722,"name":"int40","nodeType":"ElementaryTypeName","src":"32753:5:18","typeDescriptions":{}}},"id":5725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32753:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"functionReturnParameters":5702,"id":5726,"nodeType":"Return","src":"32746:19:18"}]},"documentation":{"id":5696,"nodeType":"StructuredDocumentation","src":"32212:345:18","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"32571:7:18","parameters":{"id":5699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5698,"mutability":"mutable","name":"value","nameLocation":"32586:5:18","nodeType":"VariableDeclaration","scope":5728,"src":"32579:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5697,"name":"int256","nodeType":"ElementaryTypeName","src":"32579:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32578:14:18"},"returnParameters":{"id":5702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5728,"src":"32616:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":5700,"name":"int40","nodeType":"ElementaryTypeName","src":"32616:5:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"32615:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5761,"nodeType":"FunctionDefinition","src":"33128:210:18","nodes":[],"body":{"id":5760,"nodeType":"Block","src":"33189:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"33207:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33221:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5739,"name":"int32","nodeType":"ElementaryTypeName","src":"33221:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"}],"id":5738,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"33216:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33216:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int32","typeString":"type(int32)"}},"id":5742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"33228:3:18","memberName":"min","nodeType":"MemberAccess","src":"33216:15:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"33207:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"33235:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33249:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5746,"name":"int32","nodeType":"ElementaryTypeName","src":"33249:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"}],"id":5745,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"33244:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33244:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int32","typeString":"type(int32)"}},"id":5749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"33256:3:18","memberName":"max","nodeType":"MemberAccess","src":"33244:15:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"33235:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"33207:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":5752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33261:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":5736,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"33199:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33199:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5754,"nodeType":"ExpressionStatement","src":"33199:103:18"},{"expression":{"arguments":[{"id":5757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"33325:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33319:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5755,"name":"int32","nodeType":"ElementaryTypeName","src":"33319:5:18","typeDescriptions":{}}},"id":5758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33319:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"functionReturnParameters":5735,"id":5759,"nodeType":"Return","src":"33312:19:18"}]},"documentation":{"id":5729,"nodeType":"StructuredDocumentation","src":"32778:345:18","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"33137:7:18","parameters":{"id":5732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5731,"mutability":"mutable","name":"value","nameLocation":"33152:5:18","nodeType":"VariableDeclaration","scope":5761,"src":"33145:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5730,"name":"int256","nodeType":"ElementaryTypeName","src":"33145:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33144:14:18"},"returnParameters":{"id":5735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5761,"src":"33182:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":5733,"name":"int32","nodeType":"ElementaryTypeName","src":"33182:5:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"33181:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5794,"nodeType":"FunctionDefinition","src":"33694:210:18","nodes":[],"body":{"id":5793,"nodeType":"Block","src":"33755:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5764,"src":"33773:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33787:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5772,"name":"int24","nodeType":"ElementaryTypeName","src":"33787:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"}],"id":5771,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"33782:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33782:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int24","typeString":"type(int24)"}},"id":5775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"33794:3:18","memberName":"min","nodeType":"MemberAccess","src":"33782:15:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"33773:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5764,"src":"33801:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33815:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5779,"name":"int24","nodeType":"ElementaryTypeName","src":"33815:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"}],"id":5778,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"33810:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33810:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int24","typeString":"type(int24)"}},"id":5782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"33822:3:18","memberName":"max","nodeType":"MemberAccess","src":"33810:15:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"33801:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"33773:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":5785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33827:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":5769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"33765:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33765:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5787,"nodeType":"ExpressionStatement","src":"33765:103:18"},{"expression":{"arguments":[{"id":5790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5764,"src":"33891:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33885:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5788,"name":"int24","nodeType":"ElementaryTypeName","src":"33885:5:18","typeDescriptions":{}}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33885:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"functionReturnParameters":5768,"id":5792,"nodeType":"Return","src":"33878:19:18"}]},"documentation":{"id":5762,"nodeType":"StructuredDocumentation","src":"33344:345:18","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"33703:7:18","parameters":{"id":5765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5764,"mutability":"mutable","name":"value","nameLocation":"33718:5:18","nodeType":"VariableDeclaration","scope":5794,"src":"33711:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5763,"name":"int256","nodeType":"ElementaryTypeName","src":"33711:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33710:14:18"},"returnParameters":{"id":5768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5794,"src":"33748:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5766,"name":"int24","nodeType":"ElementaryTypeName","src":"33748:5:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"33747:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5827,"nodeType":"FunctionDefinition","src":"34260:210:18","nodes":[],"body":{"id":5826,"nodeType":"Block","src":"34321:149:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"34339:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34353:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5805,"name":"int16","nodeType":"ElementaryTypeName","src":"34353:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"}],"id":5804,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34348:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34348:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int16","typeString":"type(int16)"}},"id":5808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34360:3:18","memberName":"min","nodeType":"MemberAccess","src":"34348:15:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"34339:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"34367:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34381:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5812,"name":"int16","nodeType":"ElementaryTypeName","src":"34381:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"}],"id":5811,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34376:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34376:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int16","typeString":"type(int16)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34388:3:18","memberName":"max","nodeType":"MemberAccess","src":"34376:15:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"34367:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34339:52:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":5818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34393:40:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":5802,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"34331:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34331:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5820,"nodeType":"ExpressionStatement","src":"34331:103:18"},{"expression":{"arguments":[{"id":5823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5797,"src":"34457:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34451:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5821,"name":"int16","nodeType":"ElementaryTypeName","src":"34451:5:18","typeDescriptions":{}}},"id":5824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34451:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"functionReturnParameters":5801,"id":5825,"nodeType":"Return","src":"34444:19:18"}]},"documentation":{"id":5795,"nodeType":"StructuredDocumentation","src":"33910:345:18","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"34269:7:18","parameters":{"id":5798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5797,"mutability":"mutable","name":"value","nameLocation":"34284:5:18","nodeType":"VariableDeclaration","scope":5827,"src":"34277:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5796,"name":"int256","nodeType":"ElementaryTypeName","src":"34277:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34276:14:18"},"returnParameters":{"id":5801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5827,"src":"34314:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":5799,"name":"int16","nodeType":"ElementaryTypeName","src":"34314:5:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"34313:7:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5860,"nodeType":"FunctionDefinition","src":"34821:204:18","nodes":[],"body":{"id":5859,"nodeType":"Block","src":"34880:145:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5830,"src":"34898:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":5839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34912:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5838,"name":"int8","nodeType":"ElementaryTypeName","src":"34912:4:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"}],"id":5837,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34907:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34907:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int8","typeString":"type(int8)"}},"id":5841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34918:3:18","memberName":"min","nodeType":"MemberAccess","src":"34907:14:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34898:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5830,"src":"34925:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":5846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34939:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5845,"name":"int8","nodeType":"ElementaryTypeName","src":"34939:4:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"}],"id":5844,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34934:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34934:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int8","typeString":"type(int8)"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34945:3:18","memberName":"max","nodeType":"MemberAccess","src":"34934:14:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34925:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"34898:50:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":5851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34950:39:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":5835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"34890:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34890:100:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5853,"nodeType":"ExpressionStatement","src":"34890:100:18"},{"expression":{"arguments":[{"id":5856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5830,"src":"35012:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35007:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5854,"name":"int8","nodeType":"ElementaryTypeName","src":"35007:4:18","typeDescriptions":{}}},"id":5857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35007:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"functionReturnParameters":5834,"id":5858,"nodeType":"Return","src":"35000:18:18"}]},"documentation":{"id":5828,"nodeType":"StructuredDocumentation","src":"34476:340:18","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v3.1._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"34830:6:18","parameters":{"id":5831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5830,"mutability":"mutable","name":"value","nameLocation":"34844:5:18","nodeType":"VariableDeclaration","scope":5860,"src":"34837:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5829,"name":"int256","nodeType":"ElementaryTypeName","src":"34837:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34836:14:18"},"returnParameters":{"id":5834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5860,"src":"34874:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":5832,"name":"int8","nodeType":"ElementaryTypeName","src":"34874:4:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34873:6:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":5888,"nodeType":"FunctionDefinition","src":"35239:297:18","nodes":[],"body":{"id":5887,"nodeType":"Block","src":"35303:233:18","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5863,"src":"35420:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":5874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35442:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5873,"name":"int256","nodeType":"ElementaryTypeName","src":"35442:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":5872,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"35437:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35437:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":5876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"35450:3:18","memberName":"max","nodeType":"MemberAccess","src":"35437:16:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35429:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5870,"name":"uint256","nodeType":"ElementaryTypeName","src":"35429:7:18","typeDescriptions":{}}},"id":5877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35429:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35420:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536","id":5879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"35456:42:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""},"value":"SafeCast: value doesn't fit in an int256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""}],"id":5868,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"35412:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35412:87:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5881,"nodeType":"ExpressionStatement","src":"35412:87:18"},{"expression":{"arguments":[{"id":5884,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5863,"src":"35523:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35516:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5882,"name":"int256","nodeType":"ElementaryTypeName","src":"35516:6:18","typeDescriptions":{}}},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35516:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5867,"id":5886,"nodeType":"Return","src":"35509:20:18"}]},"documentation":{"id":5861,"nodeType":"StructuredDocumentation","src":"35031:203:18","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256.\n _Available since v3.0._"},"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"35248:8:18","parameters":{"id":5864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5863,"mutability":"mutable","name":"value","nameLocation":"35265:5:18","nodeType":"VariableDeclaration","scope":5888,"src":"35257:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5862,"name":"uint256","nodeType":"ElementaryTypeName","src":"35257:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"35256:15:18"},"returnParameters":{"id":5867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5888,"src":"35295:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5865,"name":"int256","nodeType":"ElementaryTypeName","src":"35295:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"35294:8:18"},"scope":5889,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"SafeCastUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":4041,"nodeType":"StructuredDocumentation","src":"132:709:18","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always.\n Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n all math on `uint256` and `int256` and then downcasting."},"fullyImplemented":true,"linearizedBaseContracts":[5889],"name":"SafeCastUpgradeable","nameLocation":"850:19:18","scope":5890,"usedErrors":[],"usedEvents":[]}],"license":"MIT"}},"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol":{"id":31,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol","id":7273,"exportedSymbols":{"ECDSAStakeRegistryEventsAndErrors":[7272],"IStrategy":[2005],"Quorum":[7163],"StrategyParams":[7158]},"nodeType":"SourceUnit","src":"32:4451:31","nodes":[{"id":7150,"nodeType":"PragmaDirective","src":"32:24:31","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":7152,"nodeType":"ImportDirective","src":"58:86:31","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","nameLocation":"-1:-1:-1","scope":7273,"sourceUnit":2006,"symbolAliases":[{"foreign":{"id":7151,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"66:9:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7158,"nodeType":"StructDefinition","src":"146:149:31","nodes":[],"canonicalName":"StrategyParams","members":[{"constant":false,"id":7155,"mutability":"mutable","name":"strategy","nameLocation":"184:8:31","nodeType":"VariableDeclaration","scope":7158,"src":"174:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":7154,"nodeType":"UserDefinedTypeName","pathNode":{"id":7153,"name":"IStrategy","nameLocations":["174:9:31"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"174:9:31"},"referencedDeclaration":2005,"src":"174:9:31","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":7157,"mutability":"mutable","name":"multiplier","nameLocation":"240:10:31","nodeType":"VariableDeclaration","scope":7158,"src":"233:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7156,"name":"uint96","nodeType":"ElementaryTypeName","src":"233:6:31","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"StrategyParams","nameLocation":"153:14:31","scope":7273,"visibility":"public"},{"id":7163,"nodeType":"StructDefinition","src":"297:106:31","nodes":[],"canonicalName":"Quorum","members":[{"constant":false,"id":7162,"mutability":"mutable","name":"strategies","nameLocation":"334:10:31","nodeType":"VariableDeclaration","scope":7163,"src":"317:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr","typeString":"struct StrategyParams[]"},"typeName":{"baseType":{"id":7160,"nodeType":"UserDefinedTypeName","pathNode":{"id":7159,"name":"StrategyParams","nameLocations":["317:14:31"],"nodeType":"IdentifierPath","referencedDeclaration":7158,"src":"317:14:31"},"referencedDeclaration":7158,"src":"317:14:31","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_storage_ptr","typeString":"struct StrategyParams"}},"id":7161,"nodeType":"ArrayTypeName","src":"317:16:31","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr","typeString":"struct StrategyParams[]"}},"visibility":"internal"}],"name":"Quorum","nameLocation":"304:6:31","scope":7273,"visibility":"public"},{"id":7272,"nodeType":"ContractDefinition","src":"405:4077:31","nodes":[{"id":7170,"nodeType":"EventDefinition","src":"635:74:31","nodes":[],"anonymous":false,"documentation":{"id":7164,"nodeType":"StructuredDocumentation","src":"455:175:31","text":"@notice Emitted when the system registers an operator\n @param _operator The address of the registered operator\n @param _avs The address of the associated AVS"},"eventSelector":"a453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c1","name":"OperatorRegistered","nameLocation":"641:18:31","parameters":{"id":7169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7166,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"676:9:31","nodeType":"VariableDeclaration","scope":7170,"src":"660:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7165,"name":"address","nodeType":"ElementaryTypeName","src":"660:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7168,"indexed":true,"mutability":"mutable","name":"_avs","nameLocation":"703:4:31","nodeType":"VariableDeclaration","scope":7170,"src":"687:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7167,"name":"address","nodeType":"ElementaryTypeName","src":"687:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"659:49:31"}},{"id":7177,"nodeType":"EventDefinition","src":"899:76:31","nodes":[],"anonymous":false,"documentation":{"id":7171,"nodeType":"StructuredDocumentation","src":"715:179:31","text":"@notice Emitted when the system deregisters an operator\n @param _operator The address of the deregistered operator\n @param _avs The address of the associated AVS"},"eventSelector":"31e0adfec71bccee37b6e83a90c2fedb17d8f1693fee863c4771e7bfe2aed580","name":"OperatorDeregistered","nameLocation":"905:20:31","parameters":{"id":7176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7173,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"942:9:31","nodeType":"VariableDeclaration","scope":7177,"src":"926:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7172,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7175,"indexed":true,"mutability":"mutable","name":"_avs","nameLocation":"969:4:31","nodeType":"VariableDeclaration","scope":7177,"src":"953:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7174,"name":"address","nodeType":"ElementaryTypeName","src":"953:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"925:49:31"}},{"id":7186,"nodeType":"EventDefinition","src":"1143:46:31","nodes":[],"anonymous":false,"documentation":{"id":7178,"nodeType":"StructuredDocumentation","src":"981:157:31","text":"@notice Emitted when the system updates the quorum\n @param _old The previous quorum configuration\n @param _new The new quorum configuration"},"eventSelector":"23aad4e61744ece164130aa415c1616e80136b0f0770e56589438b90b269265e","name":"QuorumUpdated","nameLocation":"1149:13:31","parameters":{"id":7185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7181,"indexed":false,"mutability":"mutable","name":"_old","nameLocation":"1170:4:31","nodeType":"VariableDeclaration","scope":7186,"src":"1163:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":7180,"nodeType":"UserDefinedTypeName","pathNode":{"id":7179,"name":"Quorum","nameLocations":["1163:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"1163:6:31"},"referencedDeclaration":7163,"src":"1163:6:31","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"},{"constant":false,"id":7184,"indexed":false,"mutability":"mutable","name":"_new","nameLocation":"1183:4:31","nodeType":"VariableDeclaration","scope":7186,"src":"1176:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":7183,"nodeType":"UserDefinedTypeName","pathNode":{"id":7182,"name":"Quorum","nameLocations":["1176:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"1176:6:31"},"referencedDeclaration":7163,"src":"1176:6:31","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"1162:26:31"}},{"id":7193,"nodeType":"EventDefinition","src":"1358:55:31","nodes":[],"anonymous":false,"documentation":{"id":7187,"nodeType":"StructuredDocumentation","src":"1195:158:31","text":"@notice Emitted when the weight to join the operator set updates\n @param _old The previous minimum weight\n @param _new The new minimumWeight"},"eventSelector":"713ca53b88d6eb63f5b1854cb8cbdd736ec51eda225e46791aa9298b0160648f","name":"MinimumWeightUpdated","nameLocation":"1364:20:31","parameters":{"id":7192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7189,"indexed":false,"mutability":"mutable","name":"_old","nameLocation":"1393:4:31","nodeType":"VariableDeclaration","scope":7193,"src":"1385:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1385:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7191,"indexed":false,"mutability":"mutable","name":"_new","nameLocation":"1407:4:31","nodeType":"VariableDeclaration","scope":7193,"src":"1399:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1399:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1384:28:31"}},{"id":7200,"nodeType":"EventDefinition","src":"1597:100:31","nodes":[],"anonymous":false,"documentation":{"id":7194,"nodeType":"StructuredDocumentation","src":"1419:173:31","text":"@notice Emitted when the weight required to be an operator changes\n @param oldMinimumWeight The previous weight\n @param newMinimumWeight The updated weight"},"eventSelector":"1ea42186b305fa37310450d9fb87ea1e8f0c7f447e771479e3b27634bfe84dc1","name":"UpdateMinimumWeight","nameLocation":"1603:19:31","parameters":{"id":7199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7196,"indexed":false,"mutability":"mutable","name":"oldMinimumWeight","nameLocation":"1640:16:31","nodeType":"VariableDeclaration","scope":7200,"src":"1632:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7195,"name":"uint256","nodeType":"ElementaryTypeName","src":"1632:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7198,"indexed":false,"mutability":"mutable","name":"newMinimumWeight","nameLocation":"1674:16:31","nodeType":"VariableDeclaration","scope":7200,"src":"1666:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7197,"name":"uint256","nodeType":"ElementaryTypeName","src":"1666:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:74:31"}},{"id":7209,"nodeType":"EventDefinition","src":"1962:123:31","nodes":[],"anonymous":false,"documentation":{"id":7201,"nodeType":"StructuredDocumentation","src":"1703:254:31","text":"@notice Emitted when the system updates an operator's weight\n @param _operator The address of the operator updated\n @param oldWeight The operator's weight before the update\n @param newWeight The operator's weight after the update"},"eventSelector":"88770dc862e47a7ed586907857eb1b75e4c5ffc8b707c7ee10eb74d6885fe594","name":"OperatorWeightUpdated","nameLocation":"1968:21:31","parameters":{"id":7208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7203,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"2015:9:31","nodeType":"VariableDeclaration","scope":7209,"src":"1999:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7202,"name":"address","nodeType":"ElementaryTypeName","src":"1999:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7205,"indexed":false,"mutability":"mutable","name":"oldWeight","nameLocation":"2042:9:31","nodeType":"VariableDeclaration","scope":7209,"src":"2034:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7204,"name":"uint256","nodeType":"ElementaryTypeName","src":"2034:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7207,"indexed":false,"mutability":"mutable","name":"newWeight","nameLocation":"2069:9:31","nodeType":"VariableDeclaration","scope":7209,"src":"2061:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2061:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1989:95:31"}},{"id":7216,"nodeType":"EventDefinition","src":"2285:73:31","nodes":[],"anonymous":false,"documentation":{"id":7210,"nodeType":"StructuredDocumentation","src":"2091:189:31","text":"@notice Emitted when the system updates the total weight\n @param oldTotalWeight The total weight before the update\n @param newTotalWeight The total weight after the update"},"eventSelector":"86dcf86b12dfeedea74ae9300dbdaa193bcce5809369c8177ea2f4eaaa65729b","name":"TotalWeightUpdated","nameLocation":"2291:18:31","parameters":{"id":7215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7212,"indexed":false,"mutability":"mutable","name":"oldTotalWeight","nameLocation":"2318:14:31","nodeType":"VariableDeclaration","scope":7216,"src":"2310:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7211,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7214,"indexed":false,"mutability":"mutable","name":"newTotalWeight","nameLocation":"2342:14:31","nodeType":"VariableDeclaration","scope":7216,"src":"2334:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2309:48:31"}},{"id":7221,"nodeType":"EventDefinition","src":"2423:55:31","nodes":[],"anonymous":false,"documentation":{"id":7217,"nodeType":"StructuredDocumentation","src":"2364:54:31","text":"@notice Emits when setting a new threshold weight."},"eventSelector":"9324f7e5a7c0288808a634ccde44b8e979676474b22e29ee9dd569b55e791a4b","name":"ThresholdWeightUpdated","nameLocation":"2429:22:31","parameters":{"id":7220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7219,"indexed":false,"mutability":"mutable","name":"_thresholdWeight","nameLocation":"2460:16:31","nodeType":"VariableDeclaration","scope":7221,"src":"2452:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7218,"name":"uint256","nodeType":"ElementaryTypeName","src":"2452:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2451:26:31"}},{"id":7232,"nodeType":"EventDefinition","src":"2860:170:31","nodes":[],"anonymous":false,"documentation":{"id":7222,"nodeType":"StructuredDocumentation","src":"2484:371:31","text":"@notice Emitted when an operator's signing key is updated\n @param operator The address of the operator whose signing key was updated\n @param updateBlock The block number at which the signing key was updated\n @param newSigningKey The operator's signing key after the update\n @param oldSigningKey The operator's signing key before the update"},"eventSelector":"d061168252f441733658f09e4d8f5b2d998ed4ef24a2bbfd6ceca52ea1315002","name":"SigningKeyUpdate","nameLocation":"2866:16:31","parameters":{"id":7231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7224,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"2908:8:31","nodeType":"VariableDeclaration","scope":7232,"src":"2892:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7223,"name":"address","nodeType":"ElementaryTypeName","src":"2892:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7226,"indexed":true,"mutability":"mutable","name":"updateBlock","nameLocation":"2942:11:31","nodeType":"VariableDeclaration","scope":7232,"src":"2926:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2926:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7228,"indexed":true,"mutability":"mutable","name":"newSigningKey","nameLocation":"2979:13:31","nodeType":"VariableDeclaration","scope":7232,"src":"2963:29:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7227,"name":"address","nodeType":"ElementaryTypeName","src":"2963:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7230,"indexed":false,"mutability":"mutable","name":"oldSigningKey","nameLocation":"3010:13:31","nodeType":"VariableDeclaration","scope":7232,"src":"3002:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7229,"name":"address","nodeType":"ElementaryTypeName","src":"3002:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2882:147:31"}},{"id":7235,"nodeType":"ErrorDefinition","src":"3134:23:31","nodes":[],"documentation":{"id":7233,"nodeType":"StructuredDocumentation","src":"3035:94:31","text":"@notice Indicates when the lengths of the signers array and signatures array do not match."},"errorSelector":"ff633a38","name":"LengthMismatch","nameLocation":"3140:14:31","parameters":{"id":7234,"nodeType":"ParameterList","parameters":[],"src":"3154:2:31"}},{"id":7238,"nodeType":"ErrorDefinition","src":"3257:22:31","nodes":[],"documentation":{"id":7236,"nodeType":"StructuredDocumentation","src":"3163:89:31","text":"@notice Indicates encountering an invalid length for the signers or signatures array."},"errorSelector":"947d5a84","name":"InvalidLength","nameLocation":"3263:13:31","parameters":{"id":7237,"nodeType":"ParameterList","parameters":[],"src":"3276:2:31"}},{"id":7241,"nodeType":"ErrorDefinition","src":"3346:25:31","nodes":[],"documentation":{"id":7239,"nodeType":"StructuredDocumentation","src":"3285:56:31","text":"@notice Indicates encountering an invalid signature."},"errorSelector":"8baa579f","name":"InvalidSignature","nameLocation":"3352:16:31","parameters":{"id":7240,"nodeType":"ParameterList","parameters":[],"src":"3368:2:31"}},{"id":7244,"nodeType":"ErrorDefinition","src":"3446:25:31","nodes":[],"documentation":{"id":7242,"nodeType":"StructuredDocumentation","src":"3377:64:31","text":"@notice Thrown when the threshold update is greater than BPS"},"errorSelector":"aabd5a09","name":"InvalidThreshold","nameLocation":"3452:16:31","parameters":{"id":7243,"nodeType":"ParameterList","parameters":[],"src":"3468:2:31"}},{"id":7247,"nodeType":"ErrorDefinition","src":"3536:31:31","nodes":[],"documentation":{"id":7245,"nodeType":"StructuredDocumentation","src":"3477:54:31","text":"@notice Thrown when missing operators in an update"},"errorSelector":"2d3df6b6","name":"MustUpdateAllOperators","nameLocation":"3542:22:31","parameters":{"id":7246,"nodeType":"ParameterList","parameters":[],"src":"3564:2:31"}},{"id":7250,"nodeType":"ErrorDefinition","src":"3658:30:31","nodes":[],"documentation":{"id":7248,"nodeType":"StructuredDocumentation","src":"3573:80:31","text":"@notice Reference blocks must be for blocks that have already been confirmed"},"errorSelector":"e64f180f","name":"InvalidReferenceBlock","nameLocation":"3664:21:31","parameters":{"id":7249,"nodeType":"ParameterList","parameters":[],"src":"3685:2:31"}},{"id":7253,"nodeType":"ErrorDefinition","src":"3793:28:31","nodes":[],"documentation":{"id":7251,"nodeType":"StructuredDocumentation","src":"3694:94:31","text":"@notice Indicates operator weights were out of sync and the signed weight exceed the total"},"errorSelector":"960b41ee","name":"InvalidSignedWeight","nameLocation":"3799:19:31","parameters":{"id":7252,"nodeType":"ParameterList","parameters":[],"src":"3818:2:31"}},{"id":7256,"nodeType":"ErrorDefinition","src":"3914:32:31","nodes":[],"documentation":{"id":7254,"nodeType":"StructuredDocumentation","src":"3827:82:31","text":"@notice Indicates the total signed stake fails to meet the required threshold."},"errorSelector":"e121632f","name":"InsufficientSignedStake","nameLocation":"3920:23:31","parameters":{"id":7255,"nodeType":"ParameterList","parameters":[],"src":"3943:2:31"}},{"id":7259,"nodeType":"ErrorDefinition","src":"4046:27:31","nodes":[],"documentation":{"id":7257,"nodeType":"StructuredDocumentation","src":"3952:89:31","text":"@notice Indicates an individual signer's weight fails to meet the required threshold."},"errorSelector":"a8792fd1","name":"InsufficientWeight","nameLocation":"4052:18:31","parameters":{"id":7258,"nodeType":"ParameterList","parameters":[],"src":"4070:2:31"}},{"id":7262,"nodeType":"ErrorDefinition","src":"4127:22:31","nodes":[],"documentation":{"id":7260,"nodeType":"StructuredDocumentation","src":"4079:43:31","text":"@notice Indicates the quorum is invalid"},"errorSelector":"d1735779","name":"InvalidQuorum","nameLocation":"4133:13:31","parameters":{"id":7261,"nodeType":"ParameterList","parameters":[],"src":"4146:2:31"}},{"id":7265,"nodeType":"ErrorDefinition","src":"4223:18:31","nodes":[],"documentation":{"id":7263,"nodeType":"StructuredDocumentation","src":"4155:63:31","text":"@notice Indicates the system finds a list of items unsorted"},"errorSelector":"ba50f911","name":"NotSorted","nameLocation":"4229:9:31","parameters":{"id":7264,"nodeType":"ParameterList","parameters":[],"src":"4238:2:31"}},{"id":7268,"nodeType":"ErrorDefinition","src":"4318:34:31","nodes":[],"documentation":{"id":7266,"nodeType":"StructuredDocumentation","src":"4247:66:31","text":"@notice Thrown when registering an already registered operator"},"errorSelector":"42ee68b5","name":"OperatorAlreadyRegistered","nameLocation":"4324:25:31","parameters":{"id":7267,"nodeType":"ParameterList","parameters":[],"src":"4349:2:31"}},{"id":7271,"nodeType":"ErrorDefinition","src":"4450:30:31","nodes":[],"documentation":{"id":7269,"nodeType":"StructuredDocumentation","src":"4358:87:31","text":"@notice Thrown when de-registering or updating the stake for an unregisted operator"},"errorSelector":"25ec6c1f","name":"OperatorNotRegistered","nameLocation":"4456:21:31","parameters":{"id":7270,"nodeType":"ParameterList","parameters":[],"src":"4477:2:31"}}],"abstract":false,"baseContracts":[],"canonicalName":"ECDSAStakeRegistryEventsAndErrors","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"linearizedBaseContracts":[7272],"name":"ECDSAStakeRegistryEventsAndErrors","nameLocation":"415:33:31","scope":7273,"usedErrors":[7235,7238,7241,7244,7247,7250,7253,7256,7259,7262,7265,7268,7271],"usedEvents":[7170,7177,7186,7193,7200,7209,7216,7221,7232]}],"license":"MIT"}},"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol":{"id":32,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol","id":7282,"exportedSymbols":{"IRegistry":[7281]},"nodeType":"SourceUnit","src":"37:454:32","nodes":[{"id":7274,"nodeType":"PragmaDirective","src":"37:24:32","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":7281,"nodeType":"ContractDefinition","src":"399:91:32","nodes":[{"id":7280,"nodeType":"FunctionDefinition","src":"425:63:32","nodes":[],"functionSelector":"6d14a987","implemented":false,"kind":"function","modifiers":[],"name":"registryCoordinator","nameLocation":"434:19:32","parameters":{"id":7276,"nodeType":"ParameterList","parameters":[],"src":"453:2:32"},"returnParameters":{"id":7279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7280,"src":"479:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7277,"name":"address","nodeType":"ElementaryTypeName","src":"479:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"478:9:32"},"scope":7281,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":7275,"nodeType":"StructuredDocumentation","src":"63:335:32","text":" @title Minimal interface for a `Registry`-type contract.\n @author Layr Labs, Inc.\n @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n @notice Functions related to the registration process itself have been intentionally excluded\n because their function signatures may vary significantly."},"fullyImplemented":false,"linearizedBaseContracts":[7281],"name":"IRegistry","nameLocation":"409:9:32","scope":7282,"usedErrors":[],"usedEvents":[]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol":{"id":33,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol","id":7320,"exportedSymbols":{"IRewardsCoordinator":[1874],"IServiceManager":[7319],"IServiceManagerUI":[7368]},"nodeType":"SourceUnit","src":"37:2979:33","nodes":[{"id":7283,"nodeType":"PragmaDirective","src":"37:24:33","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":7285,"nodeType":"ImportDirective","src":"63:106:33","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","nameLocation":"-1:-1:-1","scope":7320,"sourceUnit":1875,"symbolAliases":[{"foreign":{"id":7284,"name":"IRewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"71:19:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7287,"nodeType":"ImportDirective","src":"170:58:33","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol","file":"./IServiceManagerUI.sol","nameLocation":"-1:-1:-1","scope":7320,"sourceUnit":7369,"symbolAliases":[{"foreign":{"id":7286,"name":"IServiceManagerUI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7368,"src":"178:17:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7319,"nodeType":"ContractDefinition","src":"397:2618:33","nodes":[{"id":7298,"nodeType":"FunctionDefinition","src":"1206:128:33","nodes":[],"documentation":{"id":7291,"nodeType":"StructuredDocumentation","src":"450:751:33","text":" @notice Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the\n set of stakers delegated to operators who are registered to this `avs`\n @param rewardsSubmissions The rewards submissions being created\n @dev Only callabe by the permissioned rewardsInitiator address\n @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n @dev The tokens are sent to the `RewardsCoordinator` contract\n @dev Strategies must be in ascending order of addresses to check for duplicates\n @dev This function will revert if the `rewardsSubmission` is malformed,\n e.g. if the `strategies` and `weights` arrays are of non-equal lengths"},"functionSelector":"fce36c7d","implemented":false,"kind":"function","modifiers":[],"name":"createAVSRewardsSubmission","nameLocation":"1215:26:33","parameters":{"id":7296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7295,"mutability":"mutable","name":"rewardsSubmissions","nameLocation":"1300:18:33","nodeType":"VariableDeclaration","scope":7298,"src":"1251:67:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":7293,"nodeType":"UserDefinedTypeName","pathNode":{"id":7292,"name":"IRewardsCoordinator.RewardsSubmission","nameLocations":["1251:19:33","1271:17:33"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"1251:37:33"},"referencedDeclaration":1388,"src":"1251:37:33","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":7294,"nodeType":"ArrayTypeName","src":"1251:39:33","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"1241:83:33"},"returnParameters":{"id":7297,"nodeType":"ParameterList","parameters":[],"src":"1333:0:33"},"scope":7319,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7306,"nodeType":"FunctionDefinition","src":"2318:188:33","nodes":[],"documentation":{"id":7299,"nodeType":"StructuredDocumentation","src":"1340:973:33","text":" @notice Creates a new operator-directed rewards submission on behalf of an AVS, to be split amongst the operators and\n set of stakers delegated to operators who are registered to the `avs`.\n @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created\n @dev Only callabe by the permissioned rewardsInitiator address\n @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n @dev The tokens are sent to the `RewardsCoordinator` contract\n @dev This contract needs a token approval of sum of all `operatorRewards` in the `operatorDirectedRewardsSubmissions`, before calling this function.\n @dev Strategies must be in ascending order of addresses to check for duplicates\n @dev Operators must be in ascending order of addresses to check for duplicates.\n @dev This function will revert if the `operatorDirectedRewardsSubmissions` is malformed."},"functionSelector":"a20b99bf","implemented":false,"kind":"function","modifiers":[],"name":"createOperatorDirectedAVSRewardsSubmission","nameLocation":"2327:42:33","parameters":{"id":7304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7303,"mutability":"mutable","name":"operatorDirectedRewardsSubmissions","nameLocation":"2456:34:33","nodeType":"VariableDeclaration","scope":7306,"src":"2379:111:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"},"typeName":{"baseType":{"id":7301,"nodeType":"UserDefinedTypeName","pathNode":{"id":7300,"name":"IRewardsCoordinator.OperatorDirectedRewardsSubmission","nameLocations":["2379:19:33","2399:33:33"],"nodeType":"IdentifierPath","referencedDeclaration":1407,"src":"2379:53:33"},"referencedDeclaration":1407,"src":"2379:53:33","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"}},"id":7302,"nodeType":"ArrayTypeName","src":"2379:55:33","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"}},"visibility":"internal"}],"src":"2369:127:33"},"returnParameters":{"id":7305,"nodeType":"ParameterList","parameters":[],"src":"2505:0:33"},"scope":7319,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7312,"nodeType":"FunctionDefinition","src":"2833:49:33","nodes":[],"documentation":{"id":7307,"nodeType":"StructuredDocumentation","src":"2512:316:33","text":" @notice Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\n @param claimer The address of the entity that can call `processClaim` on behalf of the earner\n @dev Only callabe by the owner."},"functionSelector":"a0169ddd","implemented":false,"kind":"function","modifiers":[],"name":"setClaimerFor","nameLocation":"2842:13:33","parameters":{"id":7310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7309,"mutability":"mutable","name":"claimer","nameLocation":"2864:7:33","nodeType":"VariableDeclaration","scope":7312,"src":"2856:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7308,"name":"address","nodeType":"ElementaryTypeName","src":"2856:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2855:17:33"},"returnParameters":{"id":7311,"nodeType":"ParameterList","parameters":[],"src":"2881:0:33"},"scope":7319,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7318,"nodeType":"EventDefinition","src":"2902:111:33","nodes":[],"anonymous":false,"eventSelector":"e11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3","name":"RewardsInitiatorUpdated","nameLocation":"2908:23:33","parameters":{"id":7317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7314,"indexed":false,"mutability":"mutable","name":"prevRewardsInitiator","nameLocation":"2949:20:33","nodeType":"VariableDeclaration","scope":7318,"src":"2941:28:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7313,"name":"address","nodeType":"ElementaryTypeName","src":"2941:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7316,"indexed":false,"mutability":"mutable","name":"newRewardsInitiator","nameLocation":"2987:19:33","nodeType":"VariableDeclaration","scope":7318,"src":"2979:27:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7315,"name":"address","nodeType":"ElementaryTypeName","src":"2979:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2931:81:33"}}],"abstract":false,"baseContracts":[{"baseName":{"id":7289,"name":"IServiceManagerUI","nameLocations":["426:17:33"],"nodeType":"IdentifierPath","referencedDeclaration":7368,"src":"426:17:33"},"id":7290,"nodeType":"InheritanceSpecifier","src":"426:17:33"}],"canonicalName":"IServiceManager","contractDependencies":[],"contractKind":"interface","documentation":{"id":7288,"nodeType":"StructuredDocumentation","src":"230:166:33","text":" @title Minimal interface for a ServiceManager-type contract that forms the single point for an AVS to push updates to EigenLayer\n @author Layr Labs, Inc."},"fullyImplemented":false,"linearizedBaseContracts":[7319,7368],"name":"IServiceManager","nameLocation":"407:15:33","scope":7320,"usedErrors":[],"usedEvents":[7318]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol":{"id":34,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol","id":7369,"exportedSymbols":{"IServiceManagerUI":[7368],"ISignatureUtils":[1890]},"nodeType":"SourceUnit","src":"37:2776:34","nodes":[{"id":7321,"nodeType":"PragmaDirective","src":"37:24:34","nodes":[],"literals":["solidity",">=","0.5",".0"]},{"id":7323,"nodeType":"ImportDirective","src":"63:98:34","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","file":"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","nameLocation":"-1:-1:-1","scope":7369,"sourceUnit":1891,"symbolAliases":[{"foreign":{"id":7322,"name":"ISignatureUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"71:15:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7368,"nodeType":"ContractDefinition","src":"391:2421:34","nodes":[{"id":7330,"nodeType":"FunctionDefinition","src":"926:67:34","nodes":[],"documentation":{"id":7325,"nodeType":"StructuredDocumentation","src":"425:496:34","text":" Metadata should follow the format outlined by this example.\n{\n\"name\": \"EigenLabs AVS 1\",\n\"website\": \"https://www.eigenlayer.xyz/\",\n\"description\": \"This is my 1st AVS\",\n\"logo\": \"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\",\n\"twitter\": \"https://twitter.com/eigenlayer\"\n}\n @notice Updates the metadata URI for the AVS\n @param _metadataURI is the metadata URI for the AVS"},"functionSelector":"a98fb355","implemented":false,"kind":"function","modifiers":[],"name":"updateAVSMetadataURI","nameLocation":"935:20:34","parameters":{"id":7328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7327,"mutability":"mutable","name":"_metadataURI","nameLocation":"970:12:34","nodeType":"VariableDeclaration","scope":7330,"src":"956:26:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7326,"name":"string","nodeType":"ElementaryTypeName","src":"956:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"955:28:34"},"returnParameters":{"id":7329,"nodeType":"ParameterList","parameters":[],"src":"992:0:34"},"scope":7368,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7339,"nodeType":"FunctionDefinition","src":"1287:149:34","nodes":[],"documentation":{"id":7331,"nodeType":"StructuredDocumentation","src":"999:283:34","text":" @notice Forwards a call to EigenLayer's AVSDirectory contract to confirm operator registration with the AVS\n @param operator The address of the operator to register.\n @param operatorSignature The signature, salt, and expiry of the operator's signature."},"functionSelector":"9926ee7d","implemented":false,"kind":"function","modifiers":[],"name":"registerOperatorToAVS","nameLocation":"1296:21:34","parameters":{"id":7337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7333,"mutability":"mutable","name":"operator","nameLocation":"1335:8:34","nodeType":"VariableDeclaration","scope":7339,"src":"1327:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7332,"name":"address","nodeType":"ElementaryTypeName","src":"1327:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7336,"mutability":"mutable","name":"operatorSignature","nameLocation":"1403:17:34","nodeType":"VariableDeclaration","scope":7339,"src":"1353:67:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":7335,"nodeType":"UserDefinedTypeName","pathNode":{"id":7334,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["1353:15:34","1369:26:34"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"1353:42:34"},"referencedDeclaration":1889,"src":"1353:42:34","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"}],"src":"1317:109:34"},"returnParameters":{"id":7338,"nodeType":"ParameterList","parameters":[],"src":"1435:0:34"},"scope":7368,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7345,"nodeType":"FunctionDefinition","src":"1641:62:34","nodes":[],"documentation":{"id":7340,"nodeType":"StructuredDocumentation","src":"1442:194:34","text":" @notice Forwards a call to EigenLayer's AVSDirectory contract to confirm operator deregistration from the AVS\n @param operator The address of the operator to deregister."},"functionSelector":"a364f4da","implemented":false,"kind":"function","modifiers":[],"name":"deregisterOperatorFromAVS","nameLocation":"1650:25:34","parameters":{"id":7343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7342,"mutability":"mutable","name":"operator","nameLocation":"1684:8:34","nodeType":"VariableDeclaration","scope":7345,"src":"1676:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7341,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1675:18:34"},"returnParameters":{"id":7344,"nodeType":"ParameterList","parameters":[],"src":"1702:0:34"},"scope":7368,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7354,"nodeType":"FunctionDefinition","src":"2188:98:34","nodes":[],"documentation":{"id":7346,"nodeType":"StructuredDocumentation","src":"1709:474:34","text":" @notice Returns the list of strategies that the operator has potentially restaked on the AVS\n @param operator The address of the operator to get restaked strategies for\n @dev This function is intended to be called off-chain\n @dev No guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness \n      of each element in the returned array. The off-chain service should do that validation separately"},"functionSelector":"33cfb7b7","implemented":false,"kind":"function","modifiers":[],"name":"getOperatorRestakedStrategies","nameLocation":"2197:29:34","parameters":{"id":7349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7348,"mutability":"mutable","name":"operator","nameLocation":"2235:8:34","nodeType":"VariableDeclaration","scope":7354,"src":"2227:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7347,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2226:18:34"},"returnParameters":{"id":7353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7354,"src":"2268:16:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7350,"name":"address","nodeType":"ElementaryTypeName","src":"2268:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7351,"nodeType":"ArrayTypeName","src":"2268:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2267:18:34"},"scope":7368,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7361,"nodeType":"FunctionDefinition","src":"2609:77:34","nodes":[],"documentation":{"id":7355,"nodeType":"StructuredDocumentation","src":"2292:312:34","text":" @notice Returns the list of strategies that the AVS supports for restaking\n @dev This function is intended to be called off-chain\n @dev No guarantee is made on uniqueness of each element in the returned array. \n      The off-chain service should do that validation separately"},"functionSelector":"e481af9d","implemented":false,"kind":"function","modifiers":[],"name":"getRestakeableStrategies","nameLocation":"2618:24:34","parameters":{"id":7356,"nodeType":"ParameterList","parameters":[],"src":"2642:2:34"},"returnParameters":{"id":7360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7361,"src":"2668:16:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7357,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7358,"nodeType":"ArrayTypeName","src":"2668:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2667:18:34"},"scope":7368,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7367,"nodeType":"FunctionDefinition","src":"2754:56:34","nodes":[],"documentation":{"id":7362,"nodeType":"StructuredDocumentation","src":"2692:57:34","text":"@notice Returns the EigenLayer AVSDirectory contract."},"functionSelector":"6b3aa72e","implemented":false,"kind":"function","modifiers":[],"name":"avsDirectory","nameLocation":"2763:12:34","parameters":{"id":7363,"nodeType":"ParameterList","parameters":[],"src":"2775:2:34"},"returnParameters":{"id":7366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7367,"src":"2801:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7364,"name":"address","nodeType":"ElementaryTypeName","src":"2801:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2800:9:34"},"scope":7368,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IServiceManagerUI","contractDependencies":[],"contractKind":"interface","documentation":{"id":7324,"nodeType":"StructuredDocumentation","src":"163:227:34","text":" @title Minimal interface for a ServiceManager-type contract that AVS ServiceManager contracts must implement\n for eigenlabs to be able to index their data on the AVS marketplace frontend.\n @author Layr Labs, Inc."},"fullyImplemented":false,"linearizedBaseContracts":[7368],"name":"IServiceManagerUI","nameLocation":"401:17:34","scope":7369,"usedErrors":[],"usedEvents":[]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol":{"id":35,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol","id":7706,"exportedSymbols":{"IDelegationManager":[1347],"IRegistry":[7281],"IStakeRegistry":[7705],"IStrategy":[2005]},"nodeType":"SourceUnit","src":"37:12435:35","nodes":[{"id":7370,"nodeType":"PragmaDirective","src":"37:24:35","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":7372,"nodeType":"ImportDirective","src":"63:104:35","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","nameLocation":"-1:-1:-1","scope":7706,"sourceUnit":1348,"symbolAliases":[{"foreign":{"id":7371,"name":"IDelegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"71:18:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7374,"nodeType":"ImportDirective","src":"168:86:35","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","nameLocation":"-1:-1:-1","scope":7706,"sourceUnit":2006,"symbolAliases":[{"foreign":{"id":7373,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"176:9:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7376,"nodeType":"ImportDirective","src":"256:42:35","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol","file":"./IRegistry.sol","nameLocation":"-1:-1:-1","scope":7706,"sourceUnit":7282,"symbolAliases":[{"foreign":{"id":7375,"name":"IRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"264:9:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7705,"nodeType":"ContractDefinition","src":"435:12036:35","nodes":[{"id":7388,"nodeType":"StructDefinition","src":"631:388:35","nodes":[],"canonicalName":"IStakeRegistry.StakeUpdate","documentation":{"id":7380,"nodeType":"StructuredDocumentation","src":"508:118:35","text":"@notice struct used to store the stakes of an individual operator or the sum of all operators' stakes, for storage"},"members":[{"constant":false,"id":7382,"mutability":"mutable","name":"updateBlockNumber","nameLocation":"746:17:35","nodeType":"VariableDeclaration","scope":7388,"src":"739:24:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7381,"name":"uint32","nodeType":"ElementaryTypeName","src":"739:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7385,"mutability":"mutable","name":"nextUpdateBlockNumber","nameLocation":"930:21:35","nodeType":"VariableDeclaration","scope":7388,"src":"923:28:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7384,"name":"uint32","nodeType":"ElementaryTypeName","src":"923:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7387,"mutability":"mutable","name":"stake","nameLocation":"1007:5:35","nodeType":"VariableDeclaration","scope":7388,"src":"1000:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7386,"name":"uint96","nodeType":"ElementaryTypeName","src":"1000:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"StakeUpdate","nameLocation":"638:11:35","scope":7705,"visibility":"public"},{"id":7395,"nodeType":"StructDefinition","src":"1214:84:35","nodes":[],"canonicalName":"IStakeRegistry.StrategyParams","documentation":{"id":7389,"nodeType":"StructuredDocumentation","src":"1025:184:35","text":" @notice In weighing a particular strategy, the amount of underlying asset for that strategy is\n multiplied by its multiplier, then divided by WEIGHTING_DIVISOR"},"members":[{"constant":false,"id":7392,"mutability":"mutable","name":"strategy","nameLocation":"1256:8:35","nodeType":"VariableDeclaration","scope":7395,"src":"1246:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":7391,"nodeType":"UserDefinedTypeName","pathNode":{"id":7390,"name":"IStrategy","nameLocations":["1246:9:35"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"1246:9:35"},"referencedDeclaration":2005,"src":"1246:9:35","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":7394,"mutability":"mutable","name":"multiplier","nameLocation":"1281:10:35","nodeType":"VariableDeclaration","scope":7395,"src":"1274:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7393,"name":"uint96","nodeType":"ElementaryTypeName","src":"1274:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"StrategyParams","nameLocation":"1221:14:35","scope":7705,"visibility":"public"},{"id":7404,"nodeType":"EventDefinition","src":"1387:118:35","nodes":[],"anonymous":false,"documentation":{"id":7396,"nodeType":"StructuredDocumentation","src":"1319:63:35","text":"@notice emitted whenever the stake of `operator` is updated"},"eventSelector":"2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d","name":"OperatorStakeUpdate","nameLocation":"1393:19:35","parameters":{"id":7403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7398,"indexed":true,"mutability":"mutable","name":"operatorId","nameLocation":"1438:10:35","nodeType":"VariableDeclaration","scope":7404,"src":"1422:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1422:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7400,"indexed":false,"mutability":"mutable","name":"quorumNumber","nameLocation":"1464:12:35","nodeType":"VariableDeclaration","scope":7404,"src":"1458:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7399,"name":"uint8","nodeType":"ElementaryTypeName","src":"1458:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7402,"indexed":false,"mutability":"mutable","name":"stake","nameLocation":"1493:5:35","nodeType":"VariableDeclaration","scope":7404,"src":"1486:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7401,"name":"uint96","nodeType":"ElementaryTypeName","src":"1486:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1412:92:35"}},{"id":7411,"nodeType":"EventDefinition","src":"1581:84:35","nodes":[],"anonymous":false,"documentation":{"id":7405,"nodeType":"StructuredDocumentation","src":"1510:66:35","text":"@notice emitted when the minimum stake for a quorum is updated"},"eventSelector":"26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf","name":"MinimumStakeForQuorumUpdated","nameLocation":"1587:28:35","parameters":{"id":7410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7407,"indexed":true,"mutability":"mutable","name":"quorumNumber","nameLocation":"1630:12:35","nodeType":"VariableDeclaration","scope":7411,"src":"1616:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7406,"name":"uint8","nodeType":"ElementaryTypeName","src":"1616:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7409,"indexed":false,"mutability":"mutable","name":"minimumStake","nameLocation":"1651:12:35","nodeType":"VariableDeclaration","scope":7411,"src":"1644:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7408,"name":"uint96","nodeType":"ElementaryTypeName","src":"1644:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1615:49:35"}},{"id":7416,"nodeType":"EventDefinition","src":"1723:48:35","nodes":[],"anonymous":false,"documentation":{"id":7412,"nodeType":"StructuredDocumentation","src":"1670:48:35","text":"@notice emitted when a new quorum is created"},"eventSelector":"831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4","name":"QuorumCreated","nameLocation":"1729:13:35","parameters":{"id":7415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7414,"indexed":true,"mutability":"mutable","name":"quorumNumber","nameLocation":"1757:12:35","nodeType":"VariableDeclaration","scope":7416,"src":"1743:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7413,"name":"uint8","nodeType":"ElementaryTypeName","src":"1743:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1742:28:35"}},{"id":7424,"nodeType":"EventDefinition","src":"1878:76:35","nodes":[],"anonymous":false,"documentation":{"id":7417,"nodeType":"StructuredDocumentation","src":"1776:97:35","text":"@notice emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`"},"eventSelector":"10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404","name":"StrategyAddedToQuorum","nameLocation":"1884:21:35","parameters":{"id":7423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7419,"indexed":true,"mutability":"mutable","name":"quorumNumber","nameLocation":"1920:12:35","nodeType":"VariableDeclaration","scope":7424,"src":"1906:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7418,"name":"uint8","nodeType":"ElementaryTypeName","src":"1906:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7422,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"1944:8:35","nodeType":"VariableDeclaration","scope":7424,"src":"1934:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":7421,"nodeType":"UserDefinedTypeName","pathNode":{"id":7420,"name":"IStrategy","nameLocations":["1934:9:35"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"1934:9:35"},"referencedDeclaration":2005,"src":"1934:9:35","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"1905:48:35"}},{"id":7432,"nodeType":"EventDefinition","src":"2060:80:35","nodes":[],"anonymous":false,"documentation":{"id":7425,"nodeType":"StructuredDocumentation","src":"1959:96:35","text":"@notice emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`"},"eventSelector":"31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7","name":"StrategyRemovedFromQuorum","nameLocation":"2066:25:35","parameters":{"id":7431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7427,"indexed":true,"mutability":"mutable","name":"quorumNumber","nameLocation":"2106:12:35","nodeType":"VariableDeclaration","scope":7432,"src":"2092:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7426,"name":"uint8","nodeType":"ElementaryTypeName","src":"2092:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7430,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"2130:8:35","nodeType":"VariableDeclaration","scope":7432,"src":"2120:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":7429,"nodeType":"UserDefinedTypeName","pathNode":{"id":7428,"name":"IStrategy","nameLocations":["2120:9:35"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"2120:9:35"},"referencedDeclaration":2005,"src":"2120:9:35","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"2091:48:35"}},{"id":7442,"nodeType":"EventDefinition","src":"2261:100:35","nodes":[],"anonymous":false,"documentation":{"id":7433,"nodeType":"StructuredDocumentation","src":"2145:111:35","text":"@notice emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`"},"eventSelector":"11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75","name":"StrategyMultiplierUpdated","nameLocation":"2267:25:35","parameters":{"id":7441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7435,"indexed":true,"mutability":"mutable","name":"quorumNumber","nameLocation":"2307:12:35","nodeType":"VariableDeclaration","scope":7442,"src":"2293:26:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7434,"name":"uint8","nodeType":"ElementaryTypeName","src":"2293:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7438,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"2331:8:35","nodeType":"VariableDeclaration","scope":7442,"src":"2321:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"},"typeName":{"id":7437,"nodeType":"UserDefinedTypeName","pathNode":{"id":7436,"name":"IStrategy","nameLocations":["2321:9:35"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"2321:9:35"},"referencedDeclaration":2005,"src":"2321:9:35","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":7440,"indexed":false,"mutability":"mutable","name":"multiplier","nameLocation":"2349:10:35","nodeType":"VariableDeclaration","scope":7442,"src":"2341:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7439,"name":"uint256","nodeType":"ElementaryTypeName","src":"2341:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2292:68:35"}},{"id":7458,"nodeType":"FunctionDefinition","src":"3183:176:35","nodes":[],"documentation":{"id":7443,"nodeType":"StructuredDocumentation","src":"2367:811:35","text":" @notice Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\n @param operator The address of the operator to register.\n @param operatorId The id of the operator to register.\n @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\n @return The operator's current stake for each quorum, and the total stake for each quorum\n @dev access restricted to the RegistryCoordinator\n @dev Preconditions (these are assumed, not validated in this contract):\n         1) `quorumNumbers` has no duplicates\n         2) `quorumNumbers.length` != 0\n         3) `quorumNumbers` is ordered in ascending order\n         4) the operator is not already registered"},"functionSelector":"25504777","implemented":false,"kind":"function","modifiers":[],"name":"registerOperator","nameLocation":"3192:16:35","parameters":{"id":7450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7445,"mutability":"mutable","name":"operator","nameLocation":"3226:8:35","nodeType":"VariableDeclaration","scope":7458,"src":"3218:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7444,"name":"address","nodeType":"ElementaryTypeName","src":"3218:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7447,"mutability":"mutable","name":"operatorId","nameLocation":"3253:10:35","nodeType":"VariableDeclaration","scope":7458,"src":"3245:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3245:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7449,"mutability":"mutable","name":"quorumNumbers","nameLocation":"3287:13:35","nodeType":"VariableDeclaration","scope":7458,"src":"3274:26:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7448,"name":"bytes","nodeType":"ElementaryTypeName","src":"3274:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3208:98:35"},"returnParameters":{"id":7457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7458,"src":"3325:15:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_memory_ptr","typeString":"uint96[]"},"typeName":{"baseType":{"id":7451,"name":"uint96","nodeType":"ElementaryTypeName","src":"3325:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":7452,"nodeType":"ArrayTypeName","src":"3325:8:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_storage_ptr","typeString":"uint96[]"}},"visibility":"internal"},{"constant":false,"id":7456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7458,"src":"3342:15:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_memory_ptr","typeString":"uint96[]"},"typeName":{"baseType":{"id":7454,"name":"uint96","nodeType":"ElementaryTypeName","src":"3342:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":7455,"nodeType":"ArrayTypeName","src":"3342:8:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_storage_ptr","typeString":"uint96[]"}},"visibility":"internal"}],"src":"3324:34:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7466,"nodeType":"FunctionDefinition","src":"4130:85:35","nodes":[],"documentation":{"id":7459,"nodeType":"StructuredDocumentation","src":"3365:760:35","text":" @notice Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\n @param operatorId The id of the operator to deregister.\n @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\n @dev access restricted to the RegistryCoordinator\n @dev Preconditions (these are assumed, not validated in this contract):\n         1) `quorumNumbers` has no duplicates\n         2) `quorumNumbers.length` != 0\n         3) `quorumNumbers` is ordered in ascending order\n         4) the operator is not already deregistered\n         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for"},"functionSelector":"bd29b8cd","implemented":false,"kind":"function","modifiers":[],"name":"deregisterOperator","nameLocation":"4139:18:35","parameters":{"id":7464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7461,"mutability":"mutable","name":"operatorId","nameLocation":"4166:10:35","nodeType":"VariableDeclaration","scope":7466,"src":"4158:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4158:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7463,"mutability":"mutable","name":"quorumNumbers","nameLocation":"4191:13:35","nodeType":"VariableDeclaration","scope":7466,"src":"4178:26:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7462,"name":"bytes","nodeType":"ElementaryTypeName","src":"4178:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4157:48:35"},"returnParameters":{"id":7465,"nodeType":"ParameterList","parameters":[],"src":"4214:0:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7478,"nodeType":"FunctionDefinition","src":"4362:116:35","nodes":[],"documentation":{"id":7467,"nodeType":"StructuredDocumentation","src":"4221:136:35","text":" @notice Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake"},"functionSelector":"ff694a77","implemented":false,"kind":"function","modifiers":[],"name":"initializeQuorum","nameLocation":"4371:16:35","parameters":{"id":7476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7469,"mutability":"mutable","name":"quorumNumber","nameLocation":"4394:12:35","nodeType":"VariableDeclaration","scope":7478,"src":"4388:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7468,"name":"uint8","nodeType":"ElementaryTypeName","src":"4388:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7471,"mutability":"mutable","name":"minimumStake","nameLocation":"4415:12:35","nodeType":"VariableDeclaration","scope":7478,"src":"4408:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7470,"name":"uint96","nodeType":"ElementaryTypeName","src":"4408:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":7475,"mutability":"mutable","name":"strategyParams","nameLocation":"4453:14:35","nodeType":"VariableDeclaration","scope":7478,"src":"4429:38:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7395_memory_ptr_$dyn_memory_ptr","typeString":"struct IStakeRegistry.StrategyParams[]"},"typeName":{"baseType":{"id":7473,"nodeType":"UserDefinedTypeName","pathNode":{"id":7472,"name":"StrategyParams","nameLocations":["4429:14:35"],"nodeType":"IdentifierPath","referencedDeclaration":7395,"src":"4429:14:35"},"referencedDeclaration":7395,"src":"4429:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7395_storage_ptr","typeString":"struct IStakeRegistry.StrategyParams"}},"id":7474,"nodeType":"ArrayTypeName","src":"4429:16:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7395_storage_$dyn_storage_ptr","typeString":"struct IStakeRegistry.StrategyParams[]"}},"visibility":"internal"}],"src":"4387:81:35"},"returnParameters":{"id":7477,"nodeType":"ParameterList","parameters":[],"src":"4477:0:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7488,"nodeType":"FunctionDefinition","src":"4579:114:35","nodes":[],"documentation":{"id":7479,"nodeType":"StructuredDocumentation","src":"4484:90:35","text":"@notice Adds new strategies and the associated multipliers to the @param quorumNumber."},"functionSelector":"c601527d","implemented":false,"kind":"function","modifiers":[],"name":"addStrategies","nameLocation":"4588:13:35","parameters":{"id":7486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7481,"mutability":"mutable","name":"quorumNumber","nameLocation":"4617:12:35","nodeType":"VariableDeclaration","scope":7488,"src":"4611:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7480,"name":"uint8","nodeType":"ElementaryTypeName","src":"4611:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7485,"mutability":"mutable","name":"strategyParams","nameLocation":"4663:14:35","nodeType":"VariableDeclaration","scope":7488,"src":"4639:38:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7395_memory_ptr_$dyn_memory_ptr","typeString":"struct IStakeRegistry.StrategyParams[]"},"typeName":{"baseType":{"id":7483,"nodeType":"UserDefinedTypeName","pathNode":{"id":7482,"name":"StrategyParams","nameLocations":["4639:14:35"],"nodeType":"IdentifierPath","referencedDeclaration":7395,"src":"4639:14:35"},"referencedDeclaration":7395,"src":"4639:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7395_storage_ptr","typeString":"struct IStakeRegistry.StrategyParams"}},"id":7484,"nodeType":"ArrayTypeName","src":"4639:16:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7395_storage_$dyn_storage_ptr","typeString":"struct IStakeRegistry.StrategyParams[]"}},"visibility":"internal"}],"src":"4601:82:35"},"returnParameters":{"id":7487,"nodeType":"ParameterList","parameters":[],"src":"4692:0:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7497,"nodeType":"FunctionDefinition","src":"5088:91:35","nodes":[],"documentation":{"id":7489,"nodeType":"StructuredDocumentation","src":"4699:384:35","text":" @notice This function is used for removing strategies and their associated weights from the\n mapping strategyParams for a specific @param quorumNumber.\n @dev higher indices should be *first* in the list of @param indicesToRemove, since otherwise\n the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove"},"functionSelector":"5f1f2d77","implemented":false,"kind":"function","modifiers":[],"name":"removeStrategies","nameLocation":"5097:16:35","parameters":{"id":7495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7491,"mutability":"mutable","name":"quorumNumber","nameLocation":"5120:12:35","nodeType":"VariableDeclaration","scope":7497,"src":"5114:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7490,"name":"uint8","nodeType":"ElementaryTypeName","src":"5114:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7494,"mutability":"mutable","name":"indicesToRemove","nameLocation":"5153:15:35","nodeType":"VariableDeclaration","scope":7497,"src":"5134:34:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7492,"name":"uint256","nodeType":"ElementaryTypeName","src":"5134:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7493,"nodeType":"ArrayTypeName","src":"5134:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5113:56:35"},"returnParameters":{"id":7496,"nodeType":"ParameterList","parameters":[],"src":"5178:0:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7509,"nodeType":"FunctionDefinition","src":"5568:159:35","nodes":[],"documentation":{"id":7498,"nodeType":"StructuredDocumentation","src":"5185:378:35","text":" @notice This function is used for modifying the weights of strategies that are already in the\n mapping strategyParams for a specific\n @param quorumNumber is the quorum number to change the strategy for\n @param strategyIndices are the indices of the strategies to change\n @param newMultipliers are the new multipliers for the strategies"},"functionSelector":"20b66298","implemented":false,"kind":"function","modifiers":[],"name":"modifyStrategyParams","nameLocation":"5577:20:35","parameters":{"id":7507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7500,"mutability":"mutable","name":"quorumNumber","nameLocation":"5613:12:35","nodeType":"VariableDeclaration","scope":7509,"src":"5607:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7499,"name":"uint8","nodeType":"ElementaryTypeName","src":"5607:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7503,"mutability":"mutable","name":"strategyIndices","nameLocation":"5654:15:35","nodeType":"VariableDeclaration","scope":7509,"src":"5635:34:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7501,"name":"uint256","nodeType":"ElementaryTypeName","src":"5635:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7502,"nodeType":"ArrayTypeName","src":"5635:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":7506,"mutability":"mutable","name":"newMultipliers","nameLocation":"5697:14:35","nodeType":"VariableDeclaration","scope":7509,"src":"5679:32:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_calldata_ptr","typeString":"uint96[]"},"typeName":{"baseType":{"id":7504,"name":"uint96","nodeType":"ElementaryTypeName","src":"5679:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":7505,"nodeType":"ArrayTypeName","src":"5679:8:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint96_$dyn_storage_ptr","typeString":"uint96[]"}},"visibility":"internal"}],"src":"5597:120:35"},"returnParameters":{"id":7508,"nodeType":"ParameterList","parameters":[],"src":"5726:0:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7515,"nodeType":"FunctionDefinition","src":"5800:61:35","nodes":[],"documentation":{"id":7510,"nodeType":"StructuredDocumentation","src":"5733:62:35","text":"@notice Constant used as a divisor in calculating weights."},"functionSelector":"5e5a6775","implemented":false,"kind":"function","modifiers":[],"name":"WEIGHTING_DIVISOR","nameLocation":"5809:17:35","parameters":{"id":7511,"nodeType":"ParameterList","parameters":[],"src":"5826:2:35"},"returnParameters":{"id":7514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7515,"src":"5852:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7512,"name":"uint256","nodeType":"ElementaryTypeName","src":"5852:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5851:9:35"},"scope":7705,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":7522,"nodeType":"FunctionDefinition","src":"5935:65:35","nodes":[],"documentation":{"id":7516,"nodeType":"StructuredDocumentation","src":"5867:63:35","text":"@notice Returns the EigenLayer delegation manager contract."},"functionSelector":"df5cf723","implemented":false,"kind":"function","modifiers":[],"name":"delegation","nameLocation":"5944:10:35","parameters":{"id":7517,"nodeType":"ParameterList","parameters":[],"src":"5954:2:35"},"returnParameters":{"id":7521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7522,"src":"5980:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"},"typeName":{"id":7519,"nodeType":"UserDefinedTypeName","pathNode":{"id":7518,"name":"IDelegationManager","nameLocations":["5980:18:35"],"nodeType":"IdentifierPath","referencedDeclaration":1347,"src":"5980:18:35"},"referencedDeclaration":1347,"src":"5980:18:35","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"visibility":"internal"}],"src":"5979:20:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7530,"nodeType":"FunctionDefinition","src":"6117:82:35","nodes":[],"documentation":{"id":7523,"nodeType":"StructuredDocumentation","src":"6006:106:35","text":"@notice In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`"},"functionSelector":"c46778a5","implemented":false,"kind":"function","modifiers":[],"name":"minimumStakeForQuorum","nameLocation":"6126:21:35","parameters":{"id":7526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7525,"mutability":"mutable","name":"quorumNumber","nameLocation":"6154:12:35","nodeType":"VariableDeclaration","scope":7530,"src":"6148:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7524,"name":"uint8","nodeType":"ElementaryTypeName","src":"6148:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6147:20:35"},"returnParameters":{"id":7529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7530,"src":"6191:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7527,"name":"uint96","nodeType":"ElementaryTypeName","src":"6191:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"6190:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7538,"nodeType":"FunctionDefinition","src":"6303:82:35","nodes":[],"documentation":{"id":7531,"nodeType":"StructuredDocumentation","src":"6205:93:35","text":"@notice Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`."},"functionSelector":"3ca5a5f5","implemented":false,"kind":"function","modifiers":[],"name":"strategyParamsLength","nameLocation":"6312:20:35","parameters":{"id":7534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7533,"mutability":"mutable","name":"quorumNumber","nameLocation":"6339:12:35","nodeType":"VariableDeclaration","scope":7538,"src":"6333:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7532,"name":"uint8","nodeType":"ElementaryTypeName","src":"6333:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6332:20:35"},"returnParameters":{"id":7537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7538,"src":"6376:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7535,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6375:9:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7549,"nodeType":"FunctionDefinition","src":"6507:134:35","nodes":[],"documentation":{"id":7539,"nodeType":"StructuredDocumentation","src":"6391:111:35","text":"@notice Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`"},"functionSelector":"adc804da","implemented":false,"kind":"function","modifiers":[],"name":"strategyParamsByIndex","nameLocation":"6516:21:35","parameters":{"id":7544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7541,"mutability":"mutable","name":"quorumNumber","nameLocation":"6553:12:35","nodeType":"VariableDeclaration","scope":7549,"src":"6547:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7540,"name":"uint8","nodeType":"ElementaryTypeName","src":"6547:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7543,"mutability":"mutable","name":"index","nameLocation":"6583:5:35","nodeType":"VariableDeclaration","scope":7549,"src":"6575:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7542,"name":"uint256","nodeType":"ElementaryTypeName","src":"6575:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6537:57:35"},"returnParameters":{"id":7548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7547,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7549,"src":"6618:21:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7395_memory_ptr","typeString":"struct IStakeRegistry.StrategyParams"},"typeName":{"id":7546,"nodeType":"UserDefinedTypeName","pathNode":{"id":7545,"name":"StrategyParams","nameLocations":["6618:14:35"],"nodeType":"IdentifierPath","referencedDeclaration":7395,"src":"6618:14:35"},"referencedDeclaration":7395,"src":"6618:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7395_storage_ptr","typeString":"struct IStakeRegistry.StrategyParams"}},"visibility":"internal"}],"src":"6617:23:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7559,"nodeType":"FunctionDefinition","src":"6870:104:35","nodes":[],"documentation":{"id":7550,"nodeType":"StructuredDocumentation","src":"6647:218:35","text":" @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\n @dev reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`"},"functionSelector":"1f9b74e0","implemented":false,"kind":"function","modifiers":[],"name":"weightOfOperatorForQuorum","nameLocation":"6879:25:35","parameters":{"id":7555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7552,"mutability":"mutable","name":"quorumNumber","nameLocation":"6911:12:35","nodeType":"VariableDeclaration","scope":7559,"src":"6905:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7551,"name":"uint8","nodeType":"ElementaryTypeName","src":"6905:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7554,"mutability":"mutable","name":"operator","nameLocation":"6933:8:35","nodeType":"VariableDeclaration","scope":7559,"src":"6925:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7553,"name":"address","nodeType":"ElementaryTypeName","src":"6925:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6904:38:35"},"returnParameters":{"id":7558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7559,"src":"6966:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7556,"name":"uint96","nodeType":"ElementaryTypeName","src":"6966:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"6965:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7571,"nodeType":"FunctionDefinition","src":"7218:110:35","nodes":[],"documentation":{"id":7560,"nodeType":"StructuredDocumentation","src":"6980:233:35","text":" @notice Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n @param operatorId The id of the operator of interest.\n @param quorumNumber The quorum number to get the stake for."},"functionSelector":"2cd95940","implemented":false,"kind":"function","modifiers":[],"name":"getStakeHistory","nameLocation":"7227:15:35","parameters":{"id":7565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7562,"mutability":"mutable","name":"operatorId","nameLocation":"7251:10:35","nodeType":"VariableDeclaration","scope":7571,"src":"7243:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7243:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7564,"mutability":"mutable","name":"quorumNumber","nameLocation":"7269:12:35","nodeType":"VariableDeclaration","scope":7571,"src":"7263:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7563,"name":"uint8","nodeType":"ElementaryTypeName","src":"7263:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"7242:40:35"},"returnParameters":{"id":7570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7571,"src":"7306:20:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeUpdate_$7388_memory_ptr_$dyn_memory_ptr","typeString":"struct IStakeRegistry.StakeUpdate[]"},"typeName":{"baseType":{"id":7567,"nodeType":"UserDefinedTypeName","pathNode":{"id":7566,"name":"StakeUpdate","nameLocations":["7306:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":7388,"src":"7306:11:35"},"referencedDeclaration":7388,"src":"7306:11:35","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_storage_ptr","typeString":"struct IStakeRegistry.StakeUpdate"}},"id":7568,"nodeType":"ArrayTypeName","src":"7306:13:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeUpdate_$7388_storage_$dyn_storage_ptr","typeString":"struct IStakeRegistry.StakeUpdate[]"}},"visibility":"internal"}],"src":"7305:22:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7578,"nodeType":"FunctionDefinition","src":"7334:88:35","nodes":[],"functionSelector":"0491b41c","implemented":false,"kind":"function","modifiers":[],"name":"getTotalStakeHistoryLength","nameLocation":"7343:26:35","parameters":{"id":7574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7573,"mutability":"mutable","name":"quorumNumber","nameLocation":"7376:12:35","nodeType":"VariableDeclaration","scope":7578,"src":"7370:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7572,"name":"uint8","nodeType":"ElementaryTypeName","src":"7370:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"7369:20:35"},"returnParameters":{"id":7577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7578,"src":"7413:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7575,"name":"uint256","nodeType":"ElementaryTypeName","src":"7413:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7412:9:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7589,"nodeType":"FunctionDefinition","src":"7743:114:35","nodes":[],"documentation":{"id":7579,"nodeType":"StructuredDocumentation","src":"7428:310:35","text":" @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\n @param quorumNumber The quorum number to get the stake for.\n @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`."},"functionSelector":"b6904b78","implemented":false,"kind":"function","modifiers":[],"name":"getTotalStakeUpdateAtIndex","nameLocation":"7752:26:35","parameters":{"id":7584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7581,"mutability":"mutable","name":"quorumNumber","nameLocation":"7785:12:35","nodeType":"VariableDeclaration","scope":7589,"src":"7779:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7580,"name":"uint8","nodeType":"ElementaryTypeName","src":"7779:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7583,"mutability":"mutable","name":"index","nameLocation":"7807:5:35","nodeType":"VariableDeclaration","scope":7589,"src":"7799:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7582,"name":"uint256","nodeType":"ElementaryTypeName","src":"7799:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7778:35:35"},"returnParameters":{"id":7588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7589,"src":"7837:18:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_memory_ptr","typeString":"struct IStakeRegistry.StakeUpdate"},"typeName":{"id":7586,"nodeType":"UserDefinedTypeName","pathNode":{"id":7585,"name":"StakeUpdate","nameLocations":["7837:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":7388,"src":"7837:11:35"},"referencedDeclaration":7388,"src":"7837:11:35","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_storage_ptr","typeString":"struct IStakeRegistry.StakeUpdate"}},"visibility":"internal"}],"src":"7836:20:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7601,"nodeType":"FunctionDefinition","src":"7981:157:35","nodes":[],"documentation":{"id":7590,"nodeType":"StructuredDocumentation","src":"7863:113:35","text":"@notice Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`"},"functionSelector":"dd9846b9","implemented":false,"kind":"function","modifiers":[],"name":"getStakeUpdateIndexAtBlockNumber","nameLocation":"7990:32:35","parameters":{"id":7597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7592,"mutability":"mutable","name":"operatorId","nameLocation":"8031:10:35","nodeType":"VariableDeclaration","scope":7601,"src":"8023:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8023:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7594,"mutability":"mutable","name":"quorumNumber","nameLocation":"8049:12:35","nodeType":"VariableDeclaration","scope":7601,"src":"8043:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7593,"name":"uint8","nodeType":"ElementaryTypeName","src":"8043:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7596,"mutability":"mutable","name":"blockNumber","nameLocation":"8070:11:35","nodeType":"VariableDeclaration","scope":7601,"src":"8063:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7595,"name":"uint32","nodeType":"ElementaryTypeName","src":"8063:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8022:60:35"},"returnParameters":{"id":7600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7601,"src":"8130:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7598,"name":"uint32","nodeType":"ElementaryTypeName","src":"8130:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8129:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7612,"nodeType":"FunctionDefinition","src":"8260:133:35","nodes":[],"documentation":{"id":7602,"nodeType":"StructuredDocumentation","src":"8144:111:35","text":"@notice Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`"},"functionSelector":"81c07502","implemented":false,"kind":"function","modifiers":[],"name":"getTotalStakeIndicesAtBlockNumber","nameLocation":"8269:33:35","parameters":{"id":7607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7604,"mutability":"mutable","name":"blockNumber","nameLocation":"8310:11:35","nodeType":"VariableDeclaration","scope":7612,"src":"8303:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7603,"name":"uint32","nodeType":"ElementaryTypeName","src":"8303:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7606,"mutability":"mutable","name":"quorumNumbers","nameLocation":"8338:13:35","nodeType":"VariableDeclaration","scope":7612,"src":"8323:28:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7605,"name":"bytes","nodeType":"ElementaryTypeName","src":"8323:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8302:50:35"},"returnParameters":{"id":7611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7612,"src":"8375:15:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":7608,"name":"uint32","nodeType":"ElementaryTypeName","src":"8375:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":7609,"nodeType":"ArrayTypeName","src":"8375:8:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"8374:17:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7625,"nodeType":"FunctionDefinition","src":"8839:153:35","nodes":[],"documentation":{"id":7613,"nodeType":"StructuredDocumentation","src":"8399:435:35","text":" @notice Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n @param quorumNumber The quorum number to get the stake for.\n @param operatorId The id of the operator of interest.\n @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n @dev Function will revert if `index` is out-of-bounds."},"functionSelector":"ac6bfb03","implemented":false,"kind":"function","modifiers":[],"name":"getStakeUpdateAtIndex","nameLocation":"8848:21:35","parameters":{"id":7620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7615,"mutability":"mutable","name":"quorumNumber","nameLocation":"8876:12:35","nodeType":"VariableDeclaration","scope":7625,"src":"8870:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7614,"name":"uint8","nodeType":"ElementaryTypeName","src":"8870:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7617,"mutability":"mutable","name":"operatorId","nameLocation":"8898:10:35","nodeType":"VariableDeclaration","scope":7625,"src":"8890:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8890:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7619,"mutability":"mutable","name":"index","nameLocation":"8918:5:35","nodeType":"VariableDeclaration","scope":7625,"src":"8910:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7618,"name":"uint256","nodeType":"ElementaryTypeName","src":"8910:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8869:55:35"},"returnParameters":{"id":7624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7625,"src":"8972:18:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_memory_ptr","typeString":"struct IStakeRegistry.StakeUpdate"},"typeName":{"id":7622,"nodeType":"UserDefinedTypeName","pathNode":{"id":7621,"name":"StakeUpdate","nameLocations":["8972:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":7388,"src":"8972:11:35"},"referencedDeclaration":7388,"src":"8972:11:35","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_storage_ptr","typeString":"struct IStakeRegistry.StakeUpdate"}},"visibility":"internal"}],"src":"8971:20:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7636,"nodeType":"FunctionDefinition","src":"9243:113:35","nodes":[],"documentation":{"id":7626,"nodeType":"StructuredDocumentation","src":"8998:240:35","text":" @notice Returns the most recent stake weight for the `operatorId` for a certain quorum\n @dev Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history"},"functionSelector":"f851e198","implemented":false,"kind":"function","modifiers":[],"name":"getLatestStakeUpdate","nameLocation":"9252:20:35","parameters":{"id":7631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7628,"mutability":"mutable","name":"operatorId","nameLocation":"9281:10:35","nodeType":"VariableDeclaration","scope":7636,"src":"9273:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9273:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7630,"mutability":"mutable","name":"quorumNumber","nameLocation":"9299:12:35","nodeType":"VariableDeclaration","scope":7636,"src":"9293:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7629,"name":"uint8","nodeType":"ElementaryTypeName","src":"9293:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"9272:40:35"},"returnParameters":{"id":7635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7636,"src":"9336:18:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_memory_ptr","typeString":"struct IStakeRegistry.StakeUpdate"},"typeName":{"id":7633,"nodeType":"UserDefinedTypeName","pathNode":{"id":7632,"name":"StakeUpdate","nameLocations":["9336:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":7388,"src":"9336:11:35"},"referencedDeclaration":7388,"src":"9336:11:35","typeDescriptions":{"typeIdentifier":"t_struct$_StakeUpdate_$7388_storage_ptr","typeString":"struct IStakeRegistry.StakeUpdate"}},"visibility":"internal"}],"src":"9335:20:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7650,"nodeType":"FunctionDefinition","src":"10131:169:35","nodes":[],"documentation":{"id":7637,"nodeType":"StructuredDocumentation","src":"9362:764:35","text":" @notice Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the\n `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry \n corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\n @param quorumNumber The quorum number to get the stake for.\n @param operatorId The id of the operator of interest.\n @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n @param blockNumber Block number to make sure the stake is from.\n @dev Function will revert if `index` is out-of-bounds.\n @dev used the BLSSignatureChecker to get past stakes of signing operators"},"functionSelector":"f2be94ae","implemented":false,"kind":"function","modifiers":[],"name":"getStakeAtBlockNumberAndIndex","nameLocation":"10140:29:35","parameters":{"id":7646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7639,"mutability":"mutable","name":"quorumNumber","nameLocation":"10176:12:35","nodeType":"VariableDeclaration","scope":7650,"src":"10170:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7638,"name":"uint8","nodeType":"ElementaryTypeName","src":"10170:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7641,"mutability":"mutable","name":"blockNumber","nameLocation":"10197:11:35","nodeType":"VariableDeclaration","scope":7650,"src":"10190:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7640,"name":"uint32","nodeType":"ElementaryTypeName","src":"10190:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7643,"mutability":"mutable","name":"operatorId","nameLocation":"10218:10:35","nodeType":"VariableDeclaration","scope":7650,"src":"10210:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7642,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10210:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7645,"mutability":"mutable","name":"index","nameLocation":"10238:5:35","nodeType":"VariableDeclaration","scope":7650,"src":"10230:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7644,"name":"uint256","nodeType":"ElementaryTypeName","src":"10230:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10169:75:35"},"returnParameters":{"id":7649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7650,"src":"10292:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7647,"name":"uint96","nodeType":"ElementaryTypeName","src":"10292:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"10291:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7662,"nodeType":"FunctionDefinition","src":"10948:131:35","nodes":[],"documentation":{"id":7651,"nodeType":"StructuredDocumentation","src":"10306:637:35","text":" @notice Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the \n `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`. \n Reverts otherwise.\n @param quorumNumber The quorum number to get the stake for.\n @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\n @param blockNumber Block number to make sure the stake is from.\n @dev Function will revert if `index` is out-of-bounds.\n @dev used the BLSSignatureChecker to get past stakes of signing operators"},"functionSelector":"c8294c56","implemented":false,"kind":"function","modifiers":[],"name":"getTotalStakeAtBlockNumberFromIndex","nameLocation":"10957:35:35","parameters":{"id":7658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7653,"mutability":"mutable","name":"quorumNumber","nameLocation":"10999:12:35","nodeType":"VariableDeclaration","scope":7662,"src":"10993:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7652,"name":"uint8","nodeType":"ElementaryTypeName","src":"10993:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7655,"mutability":"mutable","name":"blockNumber","nameLocation":"11020:11:35","nodeType":"VariableDeclaration","scope":7662,"src":"11013:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7654,"name":"uint32","nodeType":"ElementaryTypeName","src":"11013:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7657,"mutability":"mutable","name":"index","nameLocation":"11041:5:35","nodeType":"VariableDeclaration","scope":7662,"src":"11033:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7656,"name":"uint256","nodeType":"ElementaryTypeName","src":"11033:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10992:55:35"},"returnParameters":{"id":7661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7662,"src":"11071:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7659,"name":"uint96","nodeType":"ElementaryTypeName","src":"11071:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11070:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7672,"nodeType":"FunctionDefinition","src":"11297:96:35","nodes":[],"documentation":{"id":7663,"nodeType":"StructuredDocumentation","src":"11085:207:35","text":" @notice Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\n @dev Function returns weight of **0** in the event that the operator has no stake history"},"functionSelector":"5401ed27","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentStake","nameLocation":"11306:15:35","parameters":{"id":7668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7665,"mutability":"mutable","name":"operatorId","nameLocation":"11330:10:35","nodeType":"VariableDeclaration","scope":7672,"src":"11322:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11322:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7667,"mutability":"mutable","name":"quorumNumber","nameLocation":"11348:12:35","nodeType":"VariableDeclaration","scope":7672,"src":"11342:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7666,"name":"uint8","nodeType":"ElementaryTypeName","src":"11342:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11321:40:35"},"returnParameters":{"id":7671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7672,"src":"11385:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7669,"name":"uint96","nodeType":"ElementaryTypeName","src":"11385:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11384:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7684,"nodeType":"FunctionDefinition","src":"11508:146:35","nodes":[],"documentation":{"id":7673,"nodeType":"StructuredDocumentation","src":"11399:104:35","text":"@notice Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`"},"functionSelector":"fa28c627","implemented":false,"kind":"function","modifiers":[],"name":"getStakeAtBlockNumber","nameLocation":"11517:21:35","parameters":{"id":7680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7675,"mutability":"mutable","name":"operatorId","nameLocation":"11547:10:35","nodeType":"VariableDeclaration","scope":7684,"src":"11539:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11539:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7677,"mutability":"mutable","name":"quorumNumber","nameLocation":"11565:12:35","nodeType":"VariableDeclaration","scope":7684,"src":"11559:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7676,"name":"uint8","nodeType":"ElementaryTypeName","src":"11559:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7679,"mutability":"mutable","name":"blockNumber","nameLocation":"11586:11:35","nodeType":"VariableDeclaration","scope":7684,"src":"11579:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7678,"name":"uint32","nodeType":"ElementaryTypeName","src":"11579:6:35","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"11538:60:35"},"returnParameters":{"id":7683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7684,"src":"11646:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7681,"name":"uint96","nodeType":"ElementaryTypeName","src":"11646:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11645:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7692,"nodeType":"FunctionDefinition","src":"11861:81:35","nodes":[],"documentation":{"id":7685,"nodeType":"StructuredDocumentation","src":"11660:196:35","text":" @notice Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\n @dev Will revert if `_totalStakeHistory[quorumNumber]` is empty."},"functionSelector":"d5eccc05","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentTotalStake","nameLocation":"11870:20:35","parameters":{"id":7688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7687,"mutability":"mutable","name":"quorumNumber","nameLocation":"11897:12:35","nodeType":"VariableDeclaration","scope":7692,"src":"11891:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7686,"name":"uint8","nodeType":"ElementaryTypeName","src":"11891:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"11890:20:35"},"returnParameters":{"id":7691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7692,"src":"11934:6:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":7689,"name":"uint96","nodeType":"ElementaryTypeName","src":"11934:6:35","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11933:8:35"},"scope":7705,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7704,"nodeType":"FunctionDefinition","src":"12313:156:35","nodes":[],"documentation":{"id":7693,"nodeType":"StructuredDocumentation","src":"11948:360:35","text":" @notice Called by the registry coordinator to update an operator's stake for one\n or more quorums.\n If the operator no longer has the minimum stake required for a quorum, they are\n added to the\n @return A bitmap of quorums where the operator no longer meets the minimum stake\n and should be deregistered."},"functionSelector":"66acfefe","implemented":false,"kind":"function","modifiers":[],"name":"updateOperatorStake","nameLocation":"12322:19:35","parameters":{"id":7700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7695,"mutability":"mutable","name":"operator","nameLocation":"12359:8:35","nodeType":"VariableDeclaration","scope":7704,"src":"12351:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7694,"name":"address","nodeType":"ElementaryTypeName","src":"12351:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7697,"mutability":"mutable","name":"operatorId","nameLocation":"12386:10:35","nodeType":"VariableDeclaration","scope":7704,"src":"12378:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12378:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7699,"mutability":"mutable","name":"quorumNumbers","nameLocation":"12422:13:35","nodeType":"VariableDeclaration","scope":7704,"src":"12407:28:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":7698,"name":"bytes","nodeType":"ElementaryTypeName","src":"12407:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12341:100:35"},"returnParameters":{"id":7703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7704,"src":"12460:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":7701,"name":"uint192","nodeType":"ElementaryTypeName","src":"12460:7:35","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"12459:9:35"},"scope":7705,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":7378,"name":"IRegistry","nameLocations":["463:9:35"],"nodeType":"IdentifierPath","referencedDeclaration":7281,"src":"463:9:35"},"id":7379,"nodeType":"InheritanceSpecifier","src":"463:9:35"}],"canonicalName":"IStakeRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":7377,"nodeType":"StructuredDocumentation","src":"300:134:35","text":" @title Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\n @author Layr Labs, Inc."},"fullyImplemented":false,"linearizedBaseContracts":[7705,7281],"name":"IStakeRegistry","nameLocation":"445:14:35","scope":7706,"usedErrors":[],"usedEvents":[7404,7411,7416,7424,7432,7442]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol":{"id":36,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol","id":8416,"exportedSymbols":{"ECDSAServiceManagerBase":[8415],"ECDSAStakeRegistry":[9768],"IAVSDirectory":[822],"IDelegationManager":[1347],"IRewardsCoordinator":[1874],"IServiceManager":[7319],"IServiceManagerUI":[7368],"ISignatureUtils":[1890],"IStakeRegistry":[7705],"IStrategy":[2005],"OwnableUpgradeable":[2137],"Quorum":[7163]},"nodeType":"SourceUnit","src":"37:14497:36","nodes":[{"id":7707,"nodeType":"PragmaDirective","src":"37:24:36","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":7709,"nodeType":"ImportDirective","src":"63:98:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":2138,"symbolAliases":[{"foreign":{"id":7708,"name":"OwnableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"71:18:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7711,"nodeType":"ImportDirective","src":"162:98:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","file":"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":1891,"symbolAliases":[{"foreign":{"id":7710,"name":"ISignatureUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"170:15:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7713,"nodeType":"ImportDirective","src":"261:94:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":823,"symbolAliases":[{"foreign":{"id":7712,"name":"IAVSDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"269:13:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7715,"nodeType":"ImportDirective","src":"356:66:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol","file":"../interfaces/IServiceManager.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":7320,"symbolAliases":[{"foreign":{"id":7714,"name":"IServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7319,"src":"364:15:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7717,"nodeType":"ImportDirective","src":"423:70:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol","file":"../interfaces/IServiceManagerUI.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":7369,"symbolAliases":[{"foreign":{"id":7716,"name":"IServiceManagerUI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7368,"src":"431:17:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7719,"nodeType":"ImportDirective","src":"494:104:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":1348,"symbolAliases":[{"foreign":{"id":7718,"name":"IDelegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"502:18:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7721,"nodeType":"ImportDirective","src":"599:86:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":2006,"symbolAliases":[{"foreign":{"id":7720,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"607:9:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7723,"nodeType":"ImportDirective","src":"686:64:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol","file":"../interfaces/IStakeRegistry.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":7706,"symbolAliases":[{"foreign":{"id":7722,"name":"IStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7705,"src":"694:14:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7725,"nodeType":"ImportDirective","src":"751:106:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":1875,"symbolAliases":[{"foreign":{"id":7724,"name":"IRewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"759:19:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7727,"nodeType":"ImportDirective","src":"858:76:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol","file":"../interfaces/IECDSAStakeRegistryEventsAndErrors.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":7273,"symbolAliases":[{"foreign":{"id":7726,"name":"Quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"866:6:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7729,"nodeType":"ImportDirective","src":"935:71:36","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol","file":"../unaudited/ECDSAStakeRegistry.sol","nameLocation":"-1:-1:-1","scope":8416,"sourceUnit":9769,"symbolAliases":[{"foreign":{"id":7728,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"943:18:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8415,"nodeType":"ContractDefinition","src":"1008:13525:36","nodes":[{"id":7736,"nodeType":"VariableDeclaration","src":"1207:38:36","nodes":[],"constant":false,"documentation":{"id":7734,"nodeType":"StructuredDocumentation","src":"1103:99:36","text":"@notice Address of the stake registry contract, which manages registration and stake recording."},"functionSelector":"68304835","mutability":"immutable","name":"stakeRegistry","nameLocation":"1232:13:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7735,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":7739,"nodeType":"VariableDeclaration","src":"1364:37:36","nodes":[],"baseFunctions":[7367],"constant":false,"documentation":{"id":7737,"nodeType":"StructuredDocumentation","src":"1252:107:36","text":"@notice Address of the AVS directory contract, which manages AVS-related data for registered operators."},"functionSelector":"6b3aa72e","mutability":"immutable","name":"avsDirectory","nameLocation":"1389:12:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7738,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":7742,"nodeType":"VariableDeclaration","src":"1506:45:36","nodes":[],"constant":false,"documentation":{"id":7740,"nodeType":"StructuredDocumentation","src":"1408:93:36","text":"@notice Address of the rewards coordinator contract, which handles rewards distributions."},"mutability":"immutable","name":"rewardsCoordinator","nameLocation":"1533:18:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7741,"name":"address","nodeType":"ElementaryTypeName","src":"1506:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"id":7745,"nodeType":"VariableDeclaration","src":"1665:44:36","nodes":[],"constant":false,"documentation":{"id":7743,"nodeType":"StructuredDocumentation","src":"1558:102:36","text":"@notice Address of the delegation manager contract, which manages staker delegations to operators."},"mutability":"immutable","name":"delegationManager","nameLocation":"1692:17:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7744,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"id":7748,"nodeType":"VariableDeclaration","src":"1818:31:36","nodes":[],"constant":false,"documentation":{"id":7746,"nodeType":"StructuredDocumentation","src":"1716:97:36","text":"@notice Address of the rewards initiator, which is allowed to create AVS rewards submissions."},"functionSelector":"fc299dee","mutability":"mutable","name":"rewardsInitiator","nameLocation":"1833:16:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7747,"name":"address","nodeType":"ElementaryTypeName","src":"1818:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":7761,"nodeType":"ModifierDefinition","src":"2069:205:36","nodes":[],"body":{"id":7760,"nodeType":"Block","src":"2098:176:36","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7752,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2129:3:36","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2133:6:36","memberName":"sender","nodeType":"MemberAccess","src":"2129:10:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7754,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"2143:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2129:27:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4543445341536572766963654d616e61676572426173652e6f6e6c795374616b6552656769737472793a2063616c6c6572206973206e6f7420746865207374616b655265676973747279","id":7756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2170:76:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_1c56838cc2f5f95861097de67404c24ece4e91926e99faad2f62f22da3219cfa","typeString":"literal_string \"ECDSAServiceManagerBase.onlyStakeRegistry: caller is not the stakeRegistry\""},"value":"ECDSAServiceManagerBase.onlyStakeRegistry: caller is not the stakeRegistry"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1c56838cc2f5f95861097de67404c24ece4e91926e99faad2f62f22da3219cfa","typeString":"literal_string \"ECDSAServiceManagerBase.onlyStakeRegistry: caller is not the stakeRegistry\""}],"id":7751,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2108:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2108:148:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7758,"nodeType":"ExpressionStatement","src":"2108:148:36"},{"id":7759,"nodeType":"PlaceholderStatement","src":"2266:1:36"}]},"documentation":{"id":7749,"nodeType":"StructuredDocumentation","src":"1856:208:36","text":" @dev Ensures that the function is only callable by the `stakeRegistry` contract.\n This is used to restrict certain registration and deregistration functionality to the `stakeRegistry`"},"name":"onlyStakeRegistry","nameLocation":"2078:17:36","parameters":{"id":7750,"nodeType":"ParameterList","parameters":[],"src":"2095:2:36"},"virtual":false,"visibility":"internal"},{"id":7769,"nodeType":"ModifierDefinition","src":"2378:84:36","nodes":[],"body":{"id":7768,"nodeType":"Block","src":"2410:52:36","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7764,"name":"_checkRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7781,"src":"2420:22:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":7765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:24:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7766,"nodeType":"ExpressionStatement","src":"2420:24:36"},{"id":7767,"nodeType":"PlaceholderStatement","src":"2454:1:36"}]},"documentation":{"id":7762,"nodeType":"StructuredDocumentation","src":"2280:93:36","text":" @dev Ensures that the function is only callable by the `rewardsInitiator`."},"name":"onlyRewardsInitiator","nameLocation":"2387:20:36","parameters":{"id":7763,"nodeType":"ParameterList","parameters":[],"src":"2407:2:36"},"virtual":false,"visibility":"internal"},{"id":7781,"nodeType":"FunctionDefinition","src":"2468:223:36","nodes":[],"body":{"id":7780,"nodeType":"Block","src":"2516:175:36","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7773,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2547:3:36","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2551:6:36","memberName":"sender","nodeType":"MemberAccess","src":"2547:10:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7775,"name":"rewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"2561:16:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2547:30:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4543445341536572766963654d616e61676572426173652e6f6e6c7952657761726473496e69746961746f723a2063616c6c6572206973206e6f7420746865207265776172647320696e69746961746f72","id":7777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2591:83:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec7f140527132435538921aae435d9ed4a2c97c2c5b0061c2a98a68d5f2d979f","typeString":"literal_string \"ECDSAServiceManagerBase.onlyRewardsInitiator: caller is not the rewards initiator\""},"value":"ECDSAServiceManagerBase.onlyRewardsInitiator: caller is not the rewards initiator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec7f140527132435538921aae435d9ed4a2c97c2c5b0061c2a98a68d5f2d979f","typeString":"literal_string \"ECDSAServiceManagerBase.onlyRewardsInitiator: caller is not the rewards initiator\""}],"id":7772,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"2526:7:36","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:158:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7779,"nodeType":"ExpressionStatement","src":"2526:158:36"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_checkRewardsInitiator","nameLocation":"2477:22:36","parameters":{"id":7770,"nodeType":"ParameterList","parameters":[],"src":"2499:2:36"},"returnParameters":{"id":7771,"nodeType":"ParameterList","parameters":[],"src":"2516:0:36"},"scope":8415,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":7813,"nodeType":"FunctionDefinition","src":"3313:369:36","nodes":[],"body":{"id":7812,"nodeType":"Block","src":"3467:215:36","nodes":[],"statements":[{"expression":{"id":7795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7793,"name":"avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7739,"src":"3477:12:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7794,"name":"_avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7784,"src":"3492:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3477:28:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7796,"nodeType":"ExpressionStatement","src":"3477:28:36"},{"expression":{"id":7799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7797,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"3515:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7798,"name":"_stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7786,"src":"3531:14:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3515:30:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7800,"nodeType":"ExpressionStatement","src":"3515:30:36"},{"expression":{"id":7803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7801,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"3555:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7802,"name":"_rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7788,"src":"3576:19:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3555:40:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7804,"nodeType":"ExpressionStatement","src":"3555:40:36"},{"expression":{"id":7807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7805,"name":"delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7745,"src":"3605:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7806,"name":"_delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7790,"src":"3625:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:38:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7808,"nodeType":"ExpressionStatement","src":"3605:38:36"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7809,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"3653:20:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3653:22:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7811,"nodeType":"ExpressionStatement","src":"3653:22:36"}]},"documentation":{"id":7782,"nodeType":"StructuredDocumentation","src":"2697:611:36","text":" @dev Constructor for ECDSAServiceManagerBase, initializing immutable contract addresses and disabling initializers.\n @param _avsDirectory The address of the AVS directory contract, managing AVS-related data for registered operators.\n @param _stakeRegistry The address of the stake registry contract, managing registration and stake recording.\n @param _rewardsCoordinator The address of the rewards coordinator contract, handling rewards distributions.\n @param _delegationManager The address of the delegation manager contract, managing staker delegations to operators."},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":7791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7784,"mutability":"mutable","name":"_avsDirectory","nameLocation":"3342:13:36","nodeType":"VariableDeclaration","scope":7813,"src":"3334:21:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7783,"name":"address","nodeType":"ElementaryTypeName","src":"3334:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7786,"mutability":"mutable","name":"_stakeRegistry","nameLocation":"3373:14:36","nodeType":"VariableDeclaration","scope":7813,"src":"3365:22:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7785,"name":"address","nodeType":"ElementaryTypeName","src":"3365:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7788,"mutability":"mutable","name":"_rewardsCoordinator","nameLocation":"3405:19:36","nodeType":"VariableDeclaration","scope":7813,"src":"3397:27:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7787,"name":"address","nodeType":"ElementaryTypeName","src":"3397:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7790,"mutability":"mutable","name":"_delegationManager","nameLocation":"3442:18:36","nodeType":"VariableDeclaration","scope":7813,"src":"3434:26:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7789,"name":"address","nodeType":"ElementaryTypeName","src":"3434:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3324:142:36"},"returnParameters":{"id":7792,"nodeType":"ParameterList","parameters":[],"src":"3467:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":7832,"nodeType":"FunctionDefinition","src":"3996:238:36","nodes":[],"body":{"id":7831,"nodeType":"Block","src":"4136:98:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7824,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7816,"src":"4165:12:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7823,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"4146:18:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":7825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:32:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7826,"nodeType":"ExpressionStatement","src":"4146:32:36"},{"expression":{"arguments":[{"id":7828,"name":"_rewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7818,"src":"4209:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7827,"name":"_setRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8410,"src":"4188:20:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":7829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4188:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7830,"nodeType":"ExpressionStatement","src":"4188:39:36"}]},"documentation":{"id":7814,"nodeType":"StructuredDocumentation","src":"3688:303:36","text":" @dev Initializes the base service manager by transferring ownership to the initial owner.\n @param initialOwner The address to which the ownership of the contract will be transferred.\n @param _rewardsInitiator The address which is allowed to create AVS rewards submissions."},"implemented":true,"kind":"function","modifiers":[{"id":7821,"kind":"modifierInvocation","modifierName":{"id":7820,"name":"onlyInitializing","nameLocations":["4119:16:36"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"4119:16:36"},"nodeType":"ModifierInvocation","src":"4119:16:36"}],"name":"__ServiceManagerBase_init","nameLocation":"4005:25:36","parameters":{"id":7819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7816,"mutability":"mutable","name":"initialOwner","nameLocation":"4048:12:36","nodeType":"VariableDeclaration","scope":7832,"src":"4040:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7815,"name":"address","nodeType":"ElementaryTypeName","src":"4040:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7818,"mutability":"mutable","name":"_rewardsInitiator","nameLocation":"4078:17:36","nodeType":"VariableDeclaration","scope":7832,"src":"4070:25:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7817,"name":"address","nodeType":"ElementaryTypeName","src":"4070:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4030:71:36"},"returnParameters":{"id":7822,"nodeType":"ParameterList","parameters":[],"src":"4136:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":7845,"nodeType":"FunctionDefinition","src":"4278:151:36","nodes":[],"body":{"id":7844,"nodeType":"Block","src":"4377:52:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7841,"name":"_metadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7835,"src":"4409:12:36","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":7840,"name":"_updateAVSMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"4387:21:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":7842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4387:35:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7843,"nodeType":"ExpressionStatement","src":"4387:35:36"}]},"baseFunctions":[7330],"documentation":{"id":7833,"nodeType":"StructuredDocumentation","src":"4240:33:36","text":"@inheritdoc IServiceManagerUI"},"functionSelector":"a98fb355","implemented":true,"kind":"function","modifiers":[{"id":7838,"kind":"modifierInvocation","modifierName":{"id":7837,"name":"onlyOwner","nameLocations":["4367:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"4367:9:36"},"nodeType":"ModifierInvocation","src":"4367:9:36"}],"name":"updateAVSMetadataURI","nameLocation":"4287:20:36","parameters":{"id":7836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7835,"mutability":"mutable","name":"_metadataURI","nameLocation":"4331:12:36","nodeType":"VariableDeclaration","scope":7845,"src":"4317:26:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7834,"name":"string","nodeType":"ElementaryTypeName","src":"4317:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4307:42:36"},"returnParameters":{"id":7839,"nodeType":"ParameterList","parameters":[],"src":"4377:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7860,"nodeType":"FunctionDefinition","src":"4471:221:36","nodes":[],"body":{"id":7859,"nodeType":"Block","src":"4628:64:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7856,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7850,"src":"4666:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}],"id":7855,"name":"_createAVSRewardsSubmission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8063,"src":"4638:27:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct IRewardsCoordinator.RewardsSubmission calldata[] calldata)"}},"id":7857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:47:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7858,"nodeType":"ExpressionStatement","src":"4638:47:36"}]},"baseFunctions":[7298],"documentation":{"id":7846,"nodeType":"StructuredDocumentation","src":"4435:31:36","text":"@inheritdoc IServiceManager"},"functionSelector":"fce36c7d","implemented":true,"kind":"function","modifiers":[{"id":7853,"kind":"modifierInvocation","modifierName":{"id":7852,"name":"onlyRewardsInitiator","nameLocations":["4607:20:36"],"nodeType":"IdentifierPath","referencedDeclaration":7769,"src":"4607:20:36"},"nodeType":"ModifierInvocation","src":"4607:20:36"}],"name":"createAVSRewardsSubmission","nameLocation":"4480:26:36","parameters":{"id":7851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7850,"mutability":"mutable","name":"rewardsSubmissions","nameLocation":"4565:18:36","nodeType":"VariableDeclaration","scope":7860,"src":"4516:67:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":7848,"nodeType":"UserDefinedTypeName","pathNode":{"id":7847,"name":"IRewardsCoordinator.RewardsSubmission","nameLocations":["4516:19:36","4536:17:36"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"4516:37:36"},"referencedDeclaration":1388,"src":"4516:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":7849,"nodeType":"ArrayTypeName","src":"4516:39:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"4506:83:36"},"returnParameters":{"id":7854,"nodeType":"ParameterList","parameters":[],"src":"4628:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7875,"nodeType":"FunctionDefinition","src":"4734:335:36","nodes":[],"body":{"id":7874,"nodeType":"Block","src":"4951:118:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7871,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7865,"src":"5018:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}],"id":7870,"name":"_createOperatorDirectedAVSRewardsSubmission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8165,"src":"4961:43:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr_$returns$__$","typeString":"function (struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata)"}},"id":7872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4961:101:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7873,"nodeType":"ExpressionStatement","src":"4961:101:36"}]},"baseFunctions":[7306],"documentation":{"id":7861,"nodeType":"StructuredDocumentation","src":"4698:31:36","text":"@inheritdoc IServiceManager"},"functionSelector":"a20b99bf","implemented":true,"kind":"function","modifiers":[{"id":7868,"kind":"modifierInvocation","modifierName":{"id":7867,"name":"onlyRewardsInitiator","nameLocations":["4930:20:36"],"nodeType":"IdentifierPath","referencedDeclaration":7769,"src":"4930:20:36"},"nodeType":"ModifierInvocation","src":"4930:20:36"}],"name":"createOperatorDirectedAVSRewardsSubmission","nameLocation":"4743:42:36","parameters":{"id":7866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7865,"mutability":"mutable","name":"operatorDirectedRewardsSubmissions","nameLocation":"4872:34:36","nodeType":"VariableDeclaration","scope":7875,"src":"4795:111:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"},"typeName":{"baseType":{"id":7863,"nodeType":"UserDefinedTypeName","pathNode":{"id":7862,"name":"IRewardsCoordinator.OperatorDirectedRewardsSubmission","nameLocations":["4795:19:36","4815:33:36"],"nodeType":"IdentifierPath","referencedDeclaration":1407,"src":"4795:53:36"},"referencedDeclaration":1407,"src":"4795:53:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"}},"id":7864,"nodeType":"ArrayTypeName","src":"4795:55:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"}},"visibility":"internal"}],"src":"4785:127:36"},"returnParameters":{"id":7869,"nodeType":"ParameterList","parameters":[],"src":"4951:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7888,"nodeType":"FunctionDefinition","src":"5111:107:36","nodes":[],"body":{"id":7887,"nodeType":"Block","src":"5178:40:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7884,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7878,"src":"5203:7:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7883,"name":"_setClaimerFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8179,"src":"5188:14:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":7885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5188:23:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7886,"nodeType":"ExpressionStatement","src":"5188:23:36"}]},"baseFunctions":[7312],"documentation":{"id":7876,"nodeType":"StructuredDocumentation","src":"5075:31:36","text":"@inheritdoc IServiceManager"},"functionSelector":"a0169ddd","implemented":true,"kind":"function","modifiers":[{"id":7881,"kind":"modifierInvocation","modifierName":{"id":7880,"name":"onlyOwner","nameLocations":["5168:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"5168:9:36"},"nodeType":"ModifierInvocation","src":"5168:9:36"}],"name":"setClaimerFor","nameLocation":"5120:13:36","parameters":{"id":7879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7878,"mutability":"mutable","name":"claimer","nameLocation":"5142:7:36","nodeType":"VariableDeclaration","scope":7888,"src":"5134:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7877,"name":"address","nodeType":"ElementaryTypeName","src":"5134:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5133:17:36"},"returnParameters":{"id":7882,"nodeType":"ParameterList","parameters":[],"src":"5178:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7905,"nodeType":"FunctionDefinition","src":"5262:243:36","nodes":[],"body":{"id":7904,"nodeType":"Block","src":"5437:68:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7900,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7891,"src":"5470:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7901,"name":"operatorSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7894,"src":"5480:17:36","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}],"id":7899,"name":"_registerOperatorToAVS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7975,"src":"5447:22:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr_$returns$__$","typeString":"function (address,struct ISignatureUtils.SignatureWithSaltAndExpiry memory)"}},"id":7902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:51:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7903,"nodeType":"ExpressionStatement","src":"5447:51:36"}]},"baseFunctions":[7339],"documentation":{"id":7889,"nodeType":"StructuredDocumentation","src":"5224:33:36","text":"@inheritdoc IServiceManagerUI"},"functionSelector":"9926ee7d","implemented":true,"kind":"function","modifiers":[{"id":7897,"kind":"modifierInvocation","modifierName":{"id":7896,"name":"onlyStakeRegistry","nameLocations":["5419:17:36"],"nodeType":"IdentifierPath","referencedDeclaration":7761,"src":"5419:17:36"},"nodeType":"ModifierInvocation","src":"5419:17:36"}],"name":"registerOperatorToAVS","nameLocation":"5271:21:36","parameters":{"id":7895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7891,"mutability":"mutable","name":"operator","nameLocation":"5310:8:36","nodeType":"VariableDeclaration","scope":7905,"src":"5302:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7890,"name":"address","nodeType":"ElementaryTypeName","src":"5302:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7894,"mutability":"mutable","name":"operatorSignature","nameLocation":"5378:17:36","nodeType":"VariableDeclaration","scope":7905,"src":"5328:67:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":7893,"nodeType":"UserDefinedTypeName","pathNode":{"id":7892,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["5328:15:36","5344:26:36"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"5328:42:36"},"referencedDeclaration":1889,"src":"5328:42:36","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"}],"src":"5292:109:36"},"returnParameters":{"id":7898,"nodeType":"ParameterList","parameters":[],"src":"5437:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7918,"nodeType":"FunctionDefinition","src":"5549:155:36","nodes":[],"body":{"id":7917,"nodeType":"Block","src":"5651:53:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7914,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7908,"src":"5688:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7913,"name":"_deregisterOperatorFromAVS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7989,"src":"5661:26:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":7915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5661:36:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7916,"nodeType":"ExpressionStatement","src":"5661:36:36"}]},"baseFunctions":[7345],"documentation":{"id":7906,"nodeType":"StructuredDocumentation","src":"5511:33:36","text":"@inheritdoc IServiceManagerUI"},"functionSelector":"a364f4da","implemented":true,"kind":"function","modifiers":[{"id":7911,"kind":"modifierInvocation","modifierName":{"id":7910,"name":"onlyStakeRegistry","nameLocations":["5633:17:36"],"nodeType":"IdentifierPath","referencedDeclaration":7761,"src":"5633:17:36"},"nodeType":"ModifierInvocation","src":"5633:17:36"}],"name":"deregisterOperatorFromAVS","nameLocation":"5558:25:36","parameters":{"id":7909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7908,"mutability":"mutable","name":"operator","nameLocation":"5601:8:36","nodeType":"VariableDeclaration","scope":7918,"src":"5593:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7907,"name":"address","nodeType":"ElementaryTypeName","src":"5593:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5583:32:36"},"returnParameters":{"id":7912,"nodeType":"ParameterList","parameters":[],"src":"5651:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":7929,"nodeType":"FunctionDefinition","src":"5748:172:36","nodes":[],"body":{"id":7928,"nodeType":"Block","src":"5869:51:36","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7925,"name":"_getRestakeableStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8238,"src":"5886:25:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function () view returns (address[] memory)"}},"id":7926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":7924,"id":7927,"nodeType":"Return","src":"5879:34:36"}]},"baseFunctions":[7361],"documentation":{"id":7919,"nodeType":"StructuredDocumentation","src":"5710:33:36","text":"@inheritdoc IServiceManagerUI"},"functionSelector":"e481af9d","implemented":true,"kind":"function","modifiers":[],"name":"getRestakeableStrategies","nameLocation":"5757:24:36","parameters":{"id":7920,"nodeType":"ParameterList","parameters":[],"src":"5781:2:36"},"returnParameters":{"id":7924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7929,"src":"5847:16:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7921,"name":"address","nodeType":"ElementaryTypeName","src":"5847:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7922,"nodeType":"ArrayTypeName","src":"5847:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"5846:18:36"},"scope":8415,"stateMutability":"view","virtual":true,"visibility":"external"},{"id":7943,"nodeType":"FunctionDefinition","src":"5964:186:36","nodes":[],"body":{"id":7942,"nodeType":"Block","src":"6085:65:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7939,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7932,"src":"6133:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7938,"name":"_getOperatorRestakedStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8382,"src":"6102:30:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (address) view returns (address[] memory)"}},"id":7940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6102:41:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":7937,"id":7941,"nodeType":"Return","src":"6095:48:36"}]},"baseFunctions":[7354],"documentation":{"id":7930,"nodeType":"StructuredDocumentation","src":"5926:33:36","text":"@inheritdoc IServiceManagerUI"},"functionSelector":"33cfb7b7","implemented":true,"kind":"function","modifiers":[],"name":"getOperatorRestakedStrategies","nameLocation":"5973:29:36","parameters":{"id":7933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7932,"mutability":"mutable","name":"_operator","nameLocation":"6020:9:36","nodeType":"VariableDeclaration","scope":7943,"src":"6012:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7931,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6002:33:36"},"returnParameters":{"id":7937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7943,"src":"6067:16:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7934,"name":"address","nodeType":"ElementaryTypeName","src":"6067:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7935,"nodeType":"ArrayTypeName","src":"6067:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6066:18:36"},"scope":8415,"stateMutability":"view","virtual":true,"visibility":"external"},{"id":7957,"nodeType":"FunctionDefinition","src":"6436:169:36","nodes":[],"body":{"id":7956,"nodeType":"Block","src":"6526:79:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7953,"name":"_metadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7946,"src":"6585:12:36","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"arguments":[{"id":7950,"name":"avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7739,"src":"6550:12:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7949,"name":"IAVSDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"6536:13:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAVSDirectory_$822_$","typeString":"type(contract IAVSDirectory)"}},"id":7951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6536:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAVSDirectory_$822","typeString":"contract IAVSDirectory"}},"id":7952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6564:20:36","memberName":"updateAVSMetadataURI","nodeType":"MemberAccess","referencedDeclaration":779,"src":"6536:48:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":7954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6536:62:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7955,"nodeType":"ExpressionStatement","src":"6536:62:36"}]},"documentation":{"id":7944,"nodeType":"StructuredDocumentation","src":"6156:275:36","text":" @notice Forwards the call to update AVS metadata URI in the AVSDirectory contract.\n @dev This internal function is a proxy to the `updateAVSMetadataURI` function of the AVSDirectory contract.\n @param _metadataURI The new metadata URI to be set."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateAVSMetadataURI","nameLocation":"6445:21:36","parameters":{"id":7947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7946,"mutability":"mutable","name":"_metadataURI","nameLocation":"6490:12:36","nodeType":"VariableDeclaration","scope":7957,"src":"6476:26:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7945,"name":"string","nodeType":"ElementaryTypeName","src":"6476:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6466:42:36"},"returnParameters":{"id":7948,"nodeType":"ParameterList","parameters":[],"src":"6526:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":7975,"nodeType":"FunctionDefinition","src":"6998:287:36","nodes":[],"body":{"id":7974,"nodeType":"Block","src":"7156:129:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7970,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7960,"src":"7229:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7971,"name":"operatorSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7963,"src":"7251:17:36","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}],"expression":{"arguments":[{"id":7967,"name":"avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7739,"src":"7180:12:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7966,"name":"IAVSDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"7166:13:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAVSDirectory_$822_$","typeString":"type(contract IAVSDirectory)"}},"id":7968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7166:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAVSDirectory_$822","typeString":"contract IAVSDirectory"}},"id":7969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7194:21:36","memberName":"registerOperatorToAVS","nodeType":"MemberAccess","referencedDeclaration":767,"src":"7166:49:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr_$returns$__$","typeString":"function (address,struct ISignatureUtils.SignatureWithSaltAndExpiry memory) external"}},"id":7972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7166:112:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7973,"nodeType":"ExpressionStatement","src":"7166:112:36"}]},"documentation":{"id":7958,"nodeType":"StructuredDocumentation","src":"6611:382:36","text":" @notice Forwards the call to register an operator in the AVSDirectory contract.\n @dev This internal function is a proxy to the `registerOperatorToAVS` function of the AVSDirectory contract.\n @param operator The address of the operator to register.\n @param operatorSignature The signature, salt, and expiry details of the operator's registration."},"implemented":true,"kind":"function","modifiers":[],"name":"_registerOperatorToAVS","nameLocation":"7007:22:36","parameters":{"id":7964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7960,"mutability":"mutable","name":"operator","nameLocation":"7047:8:36","nodeType":"VariableDeclaration","scope":7975,"src":"7039:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7959,"name":"address","nodeType":"ElementaryTypeName","src":"7039:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7963,"mutability":"mutable","name":"operatorSignature","nameLocation":"7115:17:36","nodeType":"VariableDeclaration","scope":7975,"src":"7065:67:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":7962,"nodeType":"UserDefinedTypeName","pathNode":{"id":7961,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["7065:15:36","7081:26:36"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"7065:42:36"},"referencedDeclaration":1889,"src":"7065:42:36","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"}],"src":"7029:109:36"},"returnParameters":{"id":7965,"nodeType":"ParameterList","parameters":[],"src":"7156:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":7989,"nodeType":"FunctionDefinition","src":"7584:151:36","nodes":[],"body":{"id":7988,"nodeType":"Block","src":"7655:80:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":7985,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7978,"src":"7719:8:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":7982,"name":"avsDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7739,"src":"7679:12:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7981,"name":"IAVSDirectory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"7665:13:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAVSDirectory_$822_$","typeString":"type(contract IAVSDirectory)"}},"id":7983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:27:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAVSDirectory_$822","typeString":"contract IAVSDirectory"}},"id":7984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7693:25:36","memberName":"deregisterOperatorFromAVS","nodeType":"MemberAccess","referencedDeclaration":773,"src":"7665:53:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":7986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7665:63:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7987,"nodeType":"ExpressionStatement","src":"7665:63:36"}]},"documentation":{"id":7976,"nodeType":"StructuredDocumentation","src":"7291:288:36","text":" @notice Forwards the call to deregister an operator from the AVSDirectory contract.\n @dev This internal function is a proxy to the `deregisterOperatorFromAVS` function of the AVSDirectory contract.\n @param operator The address of the operator to deregister."},"implemented":true,"kind":"function","modifiers":[],"name":"_deregisterOperatorFromAVS","nameLocation":"7593:26:36","parameters":{"id":7979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7978,"mutability":"mutable","name":"operator","nameLocation":"7628:8:36","nodeType":"VariableDeclaration","scope":7989,"src":"7620:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7977,"name":"address","nodeType":"ElementaryTypeName","src":"7620:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7619:18:36"},"returnParameters":{"id":7980,"nodeType":"ParameterList","parameters":[],"src":"7655:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":8063,"nodeType":"FunctionDefinition","src":"8254:821:36","nodes":[],"body":{"id":8062,"nodeType":"Block","src":"8391:684:36","nodes":[],"statements":[{"body":{"id":8053,"nodeType":"Block","src":"8457:493:36","statements":[{"expression":{"arguments":[{"expression":{"id":8013,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8529:3:36","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8533:6:36","memberName":"sender","nodeType":"MemberAccess","src":"8529:10:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":8017,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8565:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}],"id":8016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8557:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8015,"name":"address","nodeType":"ElementaryTypeName","src":"8557:7:36","typeDescriptions":{}}},"id":8018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8557:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":8019,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8588:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8021,"indexExpression":{"id":8020,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8607:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8588:21:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata"}},"id":8022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8610:6:36","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1383,"src":"8588:28:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":8008,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8471:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8010,"indexExpression":{"id":8009,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8490:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8471:21:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata"}},"id":8011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8493:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1381,"src":"8471:27:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8499:12:36","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":6544,"src":"8471:40:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":8023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8471:159:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8024,"nodeType":"ExpressionStatement","src":"8471:159:36"},{"assignments":[8026],"declarations":[{"constant":false,"id":8026,"mutability":"mutable","name":"allowance","nameLocation":"8652:9:36","nodeType":"VariableDeclaration","scope":8053,"src":"8644:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8025,"name":"uint256","nodeType":"ElementaryTypeName","src":"8644:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8038,"initialValue":{"arguments":[{"arguments":[{"id":8034,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8727:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}],"id":8033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8719:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8032,"name":"address","nodeType":"ElementaryTypeName","src":"8719:7:36","typeDescriptions":{}}},"id":8035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8719:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8036,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"8750:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"baseExpression":{"id":8027,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8664:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8029,"indexExpression":{"id":8028,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8683:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8664:21:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata"}},"id":8030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8686:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1381,"src":"8664:27:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8692:9:36","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6522,"src":"8664:37:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":8037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8664:118:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8644:138:36"},{"expression":{"arguments":[{"id":8044,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"8849:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":8045,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8885:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8047,"indexExpression":{"id":8046,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8904:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8885:21:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata"}},"id":8048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8907:6:36","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1383,"src":"8885:28:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":8049,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8026,"src":"8916:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8885:40:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":8039,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8796:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8041,"indexExpression":{"id":8040,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8815:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8796:21:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata"}},"id":8042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8818:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1381,"src":"8796:27:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8824:7:36","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6532,"src":"8796:35:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8796:143:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8052,"nodeType":"ExpressionStatement","src":"8796:143:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8421:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":8002,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"8425:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}},"id":8003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8444:6:36","memberName":"length","nodeType":"MemberAccess","src":"8425:25:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8421:29:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8054,"initializationExpression":{"assignments":[7998],"declarations":[{"constant":false,"id":7998,"mutability":"mutable","name":"i","nameLocation":"8414:1:36","nodeType":"VariableDeclaration","scope":8054,"src":"8406:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7997,"name":"uint256","nodeType":"ElementaryTypeName","src":"8406:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8000,"initialValue":{"hexValue":"30","id":7999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8418:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8406:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8452:3:36","subExpression":{"id":8005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"8454:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8007,"nodeType":"ExpressionStatement","src":"8452:3:36"},"nodeType":"ForStatement","src":"8401:549:36"},{"expression":{"arguments":[{"id":8059,"name":"rewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"9040:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission calldata[] calldata"}],"expression":{"arguments":[{"id":8056,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"8980:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8055,"name":"IRewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"8960:19:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRewardsCoordinator_$1874_$","typeString":"type(contract IRewardsCoordinator)"}},"id":8057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8960:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRewardsCoordinator_$1874","typeString":"contract IRewardsCoordinator"}},"id":8058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9000:26:36","memberName":"createAVSRewardsSubmission","nodeType":"MemberAccess","referencedDeclaration":1758,"src":"8960:66:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_RewardsSubmission_$1388_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct IRewardsCoordinator.RewardsSubmission memory[] memory) external"}},"id":8060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8960:108:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8061,"nodeType":"ExpressionStatement","src":"8960:108:36"}]},"documentation":{"id":7990,"nodeType":"StructuredDocumentation","src":"7741:508:36","text":" @notice Processes a batch of rewards submissions by transferring the specified amounts from the sender to this contract and then approving the RewardsCoordinator to use these amounts.\n @dev This function handles the transfer and approval of tokens necessary for rewards submissions. It then delegates the actual rewards logic to the RewardsCoordinator contract.\n @param rewardsSubmissions An array of `RewardsSubmission` structs, each representing rewards for a specific range."},"implemented":true,"kind":"function","modifiers":[],"name":"_createAVSRewardsSubmission","nameLocation":"8263:27:36","parameters":{"id":7995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7994,"mutability":"mutable","name":"rewardsSubmissions","nameLocation":"8349:18:36","nodeType":"VariableDeclaration","scope":8063,"src":"8300:67:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"},"typeName":{"baseType":{"id":7992,"nodeType":"UserDefinedTypeName","pathNode":{"id":7991,"name":"IRewardsCoordinator.RewardsSubmission","nameLocations":["8300:19:36","8320:17:36"],"nodeType":"IdentifierPath","referencedDeclaration":1388,"src":"8300:37:36"},"referencedDeclaration":1388,"src":"8300:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_RewardsSubmission_$1388_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission"}},"id":7993,"nodeType":"ArrayTypeName","src":"8300:39:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RewardsSubmission_$1388_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.RewardsSubmission[]"}},"visibility":"internal"}],"src":"8290:83:36"},"returnParameters":{"id":7996,"nodeType":"ParameterList","parameters":[],"src":"8391:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":8165,"nodeType":"FunctionDefinition","src":"9387:1626:36","nodes":[],"body":{"id":8164,"nodeType":"Block","src":"9584:1429:36","nodes":[],"statements":[{"body":{"id":8151,"nodeType":"Block","src":"9712:1092:36","statements":[{"assignments":[8083],"declarations":[{"constant":false,"id":8083,"mutability":"mutable","name":"totalAmount","nameLocation":"9793:11:36","nodeType":"VariableDeclaration","scope":8151,"src":"9785:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8082,"name":"uint256","nodeType":"ElementaryTypeName","src":"9785:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8085,"initialValue":{"hexValue":"30","id":8084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9807:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9785:23:36"},{"body":{"id":8110,"nodeType":"Block","src":"9991:153:36","statements":[{"expression":{"id":8108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8100,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8083,"src":"10009:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":8101,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"10024:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8103,"indexExpression":{"id":8102,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"10059:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10024:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata"}},"id":8104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10083:15:36","memberName":"operatorRewards","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"10024:74:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorReward_$1365_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorReward calldata[] calldata"}},"id":8106,"indexExpression":{"id":8105,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"10099:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10024:77:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorReward_$1365_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorReward calldata"}},"id":8107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10123:6:36","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":1364,"src":"10024:105:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10009:120:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8109,"nodeType":"ExpressionStatement","src":"10009:120:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8090,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"9875:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"baseExpression":{"id":8091,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"9895:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8093,"indexExpression":{"id":8092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"9930:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9895:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata"}},"id":8094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9933:15:36","memberName":"operatorRewards","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"9895:53:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorReward_$1365_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorReward calldata[] calldata"}},"id":8095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9949:6:36","memberName":"length","nodeType":"MemberAccess","src":"9895:60:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9875:80:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8111,"initializationExpression":{"assignments":[8087],"declarations":[{"constant":false,"id":8087,"mutability":"mutable","name":"j","nameLocation":"9852:1:36","nodeType":"VariableDeclaration","scope":8111,"src":"9844:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8086,"name":"uint256","nodeType":"ElementaryTypeName","src":"9844:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8089,"initialValue":{"hexValue":"30","id":8088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9856:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9844:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9973:3:36","subExpression":{"id":8097,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8087,"src":"9975:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8099,"nodeType":"ExpressionStatement","src":"9973:3:36"},"nodeType":"ForStatement","src":"9822:322:36"},{"expression":{"arguments":[{"expression":{"id":8117,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10397:3:36","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10401:6:36","memberName":"sender","nodeType":"MemberAccess","src":"10397:10:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":8121,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10433:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}],"id":8120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10425:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8119,"name":"address","nodeType":"ElementaryTypeName","src":"10425:7:36","typeDescriptions":{}}},"id":8122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10425:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8123,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8083,"src":"10456:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":8112,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"10323:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8114,"indexExpression":{"id":8113,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"10358:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10323:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata"}},"id":8115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10361:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"10323:43:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10367:12:36","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":6544,"src":"10323:56:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":8124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10323:158:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8125,"nodeType":"ExpressionStatement","src":"10323:158:36"},{"assignments":[8127],"declarations":[{"constant":false,"id":8127,"mutability":"mutable","name":"allowance","nameLocation":"10503:9:36","nodeType":"VariableDeclaration","scope":8151,"src":"10495:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8126,"name":"uint256","nodeType":"ElementaryTypeName","src":"10495:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8139,"initialValue":{"arguments":[{"arguments":[{"id":8135,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10611:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}],"id":8134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10603:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8133,"name":"address","nodeType":"ElementaryTypeName","src":"10603:7:36","typeDescriptions":{}}},"id":8136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10603:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8137,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"10618:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"baseExpression":{"id":8128,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"10515:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8130,"indexExpression":{"id":8129,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"10550:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10515:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata"}},"id":8131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10570:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"10515:60:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10593:9:36","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":6522,"src":"10515:87:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":8138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10515:122:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10495:142:36"},{"expression":{"arguments":[{"id":8145,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"10720:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8146,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8083,"src":"10756:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":8147,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8127,"src":"10770:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10756:23:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"baseExpression":{"id":8140,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"10651:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8142,"indexExpression":{"id":8141,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"10686:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10651:37:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata"}},"id":8143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10689:5:36","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"10651:43:36","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$6545","typeString":"contract IERC20"}},"id":8144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10695:7:36","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":6532,"src":"10651:51:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10651:142:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8150,"nodeType":"ExpressionStatement","src":"10651:142:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8075,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"9639:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":8076,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"9643:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}},"id":8077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9678:6:36","memberName":"length","nodeType":"MemberAccess","src":"9643:41:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9639:45:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8152,"initializationExpression":{"assignments":[8072],"declarations":[{"constant":false,"id":8072,"mutability":"mutable","name":"i","nameLocation":"9620:1:36","nodeType":"VariableDeclaration","scope":8152,"src":"9612:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8071,"name":"uint256","nodeType":"ElementaryTypeName","src":"9612:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8074,"initialValue":{"hexValue":"30","id":8073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9624:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9612:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"9698:3:36","subExpression":{"id":8079,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8072,"src":"9700:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8081,"nodeType":"ExpressionStatement","src":"9698:3:36"},"nodeType":"ForStatement","src":"9594:1210:36"},{"expression":{"arguments":[{"arguments":[{"id":8159,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"10935:4:36","typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ECDSAServiceManagerBase_$8415","typeString":"contract ECDSAServiceManagerBase"}],"id":8158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10927:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8157,"name":"address","nodeType":"ElementaryTypeName","src":"10927:7:36","typeDescriptions":{}}},"id":8160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10927:13:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8161,"name":"operatorDirectedRewardsSubmissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8068,"src":"10958:34:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission calldata[] calldata"}],"expression":{"arguments":[{"id":8154,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"10834:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8153,"name":"IRewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"10814:19:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRewardsCoordinator_$1874_$","typeString":"type(contract IRewardsCoordinator)"}},"id":8155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10814:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRewardsCoordinator_$1874","typeString":"contract IRewardsCoordinator"}},"id":8156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10867:42:36","memberName":"createOperatorDirectedAVSRewardsSubmission","nodeType":"MemberAccess","referencedDeclaration":1784,"src":"10814:95:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (address,struct IRewardsCoordinator.OperatorDirectedRewardsSubmission memory[] memory) external"}},"id":8162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10814:192:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8163,"nodeType":"ExpressionStatement","src":"10814:192:36"}]},"documentation":{"id":8064,"nodeType":"StructuredDocumentation","src":"9081:301:36","text":" @notice Creates a new operator-directed rewards submission, to be split amongst the operators and\n set of stakers delegated to operators who are registered to this `avs`.\n @param operatorDirectedRewardsSubmissions The operator-directed rewards submissions being created."},"implemented":true,"kind":"function","modifiers":[],"name":"_createOperatorDirectedAVSRewardsSubmission","nameLocation":"9396:43:36","parameters":{"id":8069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8068,"mutability":"mutable","name":"operatorDirectedRewardsSubmissions","nameLocation":"9526:34:36","nodeType":"VariableDeclaration","scope":8165,"src":"9449:111:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"},"typeName":{"baseType":{"id":8066,"nodeType":"UserDefinedTypeName","pathNode":{"id":8065,"name":"IRewardsCoordinator.OperatorDirectedRewardsSubmission","nameLocations":["9449:19:36","9469:33:36"],"nodeType":"IdentifierPath","referencedDeclaration":1407,"src":"9449:53:36"},"referencedDeclaration":1407,"src":"9449:53:36","typeDescriptions":{"typeIdentifier":"t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission"}},"id":8067,"nodeType":"ArrayTypeName","src":"9449:55:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_OperatorDirectedRewardsSubmission_$1407_storage_$dyn_storage_ptr","typeString":"struct IRewardsCoordinator.OperatorDirectedRewardsSubmission[]"}},"visibility":"internal"}],"src":"9439:127:36"},"returnParameters":{"id":8070,"nodeType":"ParameterList","parameters":[],"src":"9584:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":8179,"nodeType":"FunctionDefinition","src":"11302:137:36","nodes":[],"body":{"id":8178,"nodeType":"Block","src":"11360:79:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":8175,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8168,"src":"11424:7:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8172,"name":"rewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7742,"src":"11390:18:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8171,"name":"IRewardsCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"11370:19:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRewardsCoordinator_$1874_$","typeString":"type(contract IRewardsCoordinator)"}},"id":8173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11370:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRewardsCoordinator_$1874","typeString":"contract IRewardsCoordinator"}},"id":8174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11410:13:36","memberName":"setClaimerFor","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"11370:53:36","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":8176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11370:62:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8177,"nodeType":"ExpressionStatement","src":"11370:62:36"}]},"documentation":{"id":8166,"nodeType":"StructuredDocumentation","src":"11019:278:36","text":" @notice Forwards a call to Eigenlayer's RewardsCoordinator contract to set the address of the entity that can call `processClaim` on behalf of this contract.\n @param claimer The address of the entity that can call `processClaim` on behalf of the earner."},"implemented":true,"kind":"function","modifiers":[],"name":"_setClaimerFor","nameLocation":"11311:14:36","parameters":{"id":8169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8168,"mutability":"mutable","name":"claimer","nameLocation":"11334:7:36","nodeType":"VariableDeclaration","scope":8179,"src":"11326:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8167,"name":"address","nodeType":"ElementaryTypeName","src":"11326:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11325:17:36"},"returnParameters":{"id":8170,"nodeType":"ParameterList","parameters":[],"src":"11360:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":8238,"nodeType":"FunctionDefinition","src":"11764:453:36","nodes":[],"body":{"id":8237,"nodeType":"Block","src":"11886:331:36","nodes":[],"statements":[{"assignments":[8188],"declarations":[{"constant":false,"id":8188,"mutability":"mutable","name":"quorum","nameLocation":"11910:6:36","nodeType":"VariableDeclaration","scope":8237,"src":"11896:20:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8187,"nodeType":"UserDefinedTypeName","pathNode":{"id":8186,"name":"Quorum","nameLocations":["11896:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"11896:6:36"},"referencedDeclaration":7163,"src":"11896:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"id":8194,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":8190,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"11938:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8189,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"11919:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAStakeRegistry_$9768_$","typeString":"type(contract ECDSAStakeRegistry)"}},"id":8191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11919:33:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAStakeRegistry_$9768","typeString":"contract ECDSAStakeRegistry"}},"id":8192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11953:6:36","memberName":"quorum","nodeType":"MemberAccess","referencedDeclaration":8654,"src":"11919:40:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_Quorum_$7163_memory_ptr_$","typeString":"function () view external returns (struct Quorum memory)"}},"id":8193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11919:42:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"nodeType":"VariableDeclarationStatement","src":"11896:65:36"},{"assignments":[8199],"declarations":[{"constant":false,"id":8199,"mutability":"mutable","name":"strategies","nameLocation":"11988:10:36","nodeType":"VariableDeclaration","scope":8237,"src":"11971:27:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8197,"name":"address","nodeType":"ElementaryTypeName","src":"11971:7:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8198,"nodeType":"ArrayTypeName","src":"11971:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":8207,"initialValue":{"arguments":[{"expression":{"expression":{"id":8203,"name":"quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8188,"src":"12015:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":8204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12022:10:36","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"12015:17:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12033:6:36","memberName":"length","nodeType":"MemberAccess","src":"12015:24:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12001:13:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":8200,"name":"address","nodeType":"ElementaryTypeName","src":"12005:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8201,"nodeType":"ArrayTypeName","src":"12005:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":8206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12001:39:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11971:69:36"},{"body":{"id":8233,"nodeType":"Block","src":"12105:79:36","statements":[{"expression":{"id":8231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8220,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8199,"src":"12119:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":8222,"indexExpression":{"id":8221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"12130:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12119:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":8225,"name":"quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8188,"src":"12143:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":8226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12150:10:36","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"12143:17:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8228,"indexExpression":{"id":8227,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"12161:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12143:20:36","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":8229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12164:8:36","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":7155,"src":"12143:29:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}],"id":8224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12135:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8223,"name":"address","nodeType":"ElementaryTypeName","src":"12135:7:36","typeDescriptions":{}}},"id":8230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12135:38:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12119:54:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8232,"nodeType":"ExpressionStatement","src":"12119:54:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8212,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"12070:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":8213,"name":"quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8188,"src":"12074:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":8214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12081:10:36","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"12074:17:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12092:6:36","memberName":"length","nodeType":"MemberAccess","src":"12074:24:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12070:28:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8234,"initializationExpression":{"assignments":[8209],"declarations":[{"constant":false,"id":8209,"mutability":"mutable","name":"i","nameLocation":"12063:1:36","nodeType":"VariableDeclaration","scope":8234,"src":"12055:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8208,"name":"uint256","nodeType":"ElementaryTypeName","src":"12055:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8211,"initialValue":{"hexValue":"30","id":8210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12067:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12055:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12100:3:36","subExpression":{"id":8217,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8209,"src":"12100:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8219,"nodeType":"ExpressionStatement","src":"12100:3:36"},"nodeType":"ForStatement","src":"12050:134:36"},{"expression":{"id":8235,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8199,"src":"12200:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":8185,"id":8236,"nodeType":"Return","src":"12193:17:36"}]},"documentation":{"id":8180,"nodeType":"StructuredDocumentation","src":"11445:314:36","text":" @notice Retrieves the addresses of all strategies that are part of the current quorum.\n @dev Fetches the quorum configuration from the ECDSAStakeRegistry and extracts the strategy addresses.\n @return strategies An array of addresses representing the strategies in the current quorum."},"implemented":true,"kind":"function","modifiers":[],"name":"_getRestakeableStrategies","nameLocation":"11773:25:36","parameters":{"id":8181,"nodeType":"ParameterList","parameters":[],"src":"11798:2:36"},"returnParameters":{"id":8185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8238,"src":"11864:16:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8182,"name":"address","nodeType":"ElementaryTypeName","src":"11864:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8183,"nodeType":"ArrayTypeName","src":"11864:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"11863:18:36"},"scope":8415,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":8382,"nodeType":"FunctionDefinition","src":"12767:1108:36","nodes":[],"body":{"id":8381,"nodeType":"Block","src":"12889:986:36","nodes":[],"statements":[{"assignments":[8249],"declarations":[{"constant":false,"id":8249,"mutability":"mutable","name":"quorum","nameLocation":"12913:6:36","nodeType":"VariableDeclaration","scope":8381,"src":"12899:20:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8248,"nodeType":"UserDefinedTypeName","pathNode":{"id":8247,"name":"Quorum","nameLocations":["12899:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"12899:6:36"},"referencedDeclaration":7163,"src":"12899:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"id":8255,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":8251,"name":"stakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7736,"src":"12941:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8250,"name":"ECDSAStakeRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9768,"src":"12922:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAStakeRegistry_$9768_$","typeString":"type(contract ECDSAStakeRegistry)"}},"id":8252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12922:33:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ECDSAStakeRegistry_$9768","typeString":"contract ECDSAStakeRegistry"}},"id":8253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12956:6:36","memberName":"quorum","nodeType":"MemberAccess","referencedDeclaration":8654,"src":"12922:40:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_struct$_Quorum_$7163_memory_ptr_$","typeString":"function () view external returns (struct Quorum memory)"}},"id":8254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12922:42:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"nodeType":"VariableDeclarationStatement","src":"12899:65:36"},{"assignments":[8257],"declarations":[{"constant":false,"id":8257,"mutability":"mutable","name":"count","nameLocation":"12982:5:36","nodeType":"VariableDeclaration","scope":8381,"src":"12974:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8256,"name":"uint256","nodeType":"ElementaryTypeName","src":"12974:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8261,"initialValue":{"expression":{"expression":{"id":8258,"name":"quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8249,"src":"12990:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":8259,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12997:10:36","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"12990:17:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13008:6:36","memberName":"length","nodeType":"MemberAccess","src":"12990:24:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12974:40:36"},{"assignments":[8266],"declarations":[{"constant":false,"id":8266,"mutability":"mutable","name":"strategies","nameLocation":"13043:10:36","nodeType":"VariableDeclaration","scope":8381,"src":"13024:29:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":8264,"nodeType":"UserDefinedTypeName","pathNode":{"id":8263,"name":"IStrategy","nameLocations":["13024:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"13024:9:36"},"referencedDeclaration":2005,"src":"13024:9:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8265,"nodeType":"ArrayTypeName","src":"13024:11:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"}],"id":8273,"initialValue":{"arguments":[{"id":8271,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"13072:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"13056:15:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (contract IStrategy[] memory)"},"typeName":{"baseType":{"id":8268,"nodeType":"UserDefinedTypeName","pathNode":{"id":8267,"name":"IStrategy","nameLocations":["13060:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"13060:9:36"},"referencedDeclaration":2005,"src":"13060:9:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8269,"nodeType":"ArrayTypeName","src":"13060:11:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}}},"id":8272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13056:22:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}},"nodeType":"VariableDeclarationStatement","src":"13024:54:36"},{"body":{"id":8293,"nodeType":"Block","src":"13120:70:36","statements":[{"expression":{"id":8291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8283,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8266,"src":"13134:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}},"id":8285,"indexExpression":{"id":8284,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8275,"src":"13145:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13134:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"expression":{"id":8286,"name":"quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8249,"src":"13150:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":8287,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13157:10:36","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"13150:17:36","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8289,"indexExpression":{"id":8288,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8275,"src":"13168:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13150:20:36","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":8290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13171:8:36","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":7155,"src":"13150:29:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"src":"13134:45:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8292,"nodeType":"ExpressionStatement","src":"13134:45:36"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8277,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8275,"src":"13104:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8278,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"13108:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13104:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8294,"initializationExpression":{"assignments":[8275],"declarations":[{"constant":false,"id":8275,"mutability":"mutable","name":"i","nameLocation":"13101:1:36","nodeType":"VariableDeclaration","scope":8294,"src":"13093:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8274,"name":"uint256","nodeType":"ElementaryTypeName","src":"13093:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8276,"nodeType":"VariableDeclarationStatement","src":"13093:9:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13115:3:36","subExpression":{"id":8280,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8275,"src":"13115:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8282,"nodeType":"ExpressionStatement","src":"13115:3:36"},"nodeType":"ForStatement","src":"13088:102:36"},{"assignments":[8299],"declarations":[{"constant":false,"id":8299,"mutability":"mutable","name":"shares","nameLocation":"13216:6:36","nodeType":"VariableDeclaration","scope":8381,"src":"13199:23:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":8297,"name":"uint256","nodeType":"ElementaryTypeName","src":"13199:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8298,"nodeType":"ArrayTypeName","src":"13199:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":8307,"initialValue":{"arguments":[{"id":8304,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8241,"src":"13294:9:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8305,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8266,"src":"13305:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}],"expression":{"arguments":[{"id":8301,"name":"delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7745,"src":"13244:17:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8300,"name":"IDelegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"13225:18:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDelegationManager_$1347_$","typeString":"type(contract IDelegationManager)"}},"id":8302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13225:37:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"id":8303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13276:17:36","memberName":"getOperatorShares","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"13225:68:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,contract IStrategy[] memory) view external returns (uint256[] memory)"}},"id":8306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13225:91:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"13199:117:36"},{"assignments":[8309],"declarations":[{"constant":false,"id":8309,"mutability":"mutable","name":"activeCount","nameLocation":"13335:11:36","nodeType":"VariableDeclaration","scope":8381,"src":"13327:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8308,"name":"uint256","nodeType":"ElementaryTypeName","src":"13327:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8310,"nodeType":"VariableDeclarationStatement","src":"13327:19:36"},{"body":{"id":8330,"nodeType":"Block","src":"13388:89:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":8320,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"13406:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":8322,"indexExpression":{"id":8321,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8312,"src":"13413:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13406:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":8323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13418:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13406:13:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8329,"nodeType":"IfStatement","src":"13402:65:36","trueBody":{"id":8328,"nodeType":"Block","src":"13421:46:36","statements":[{"expression":{"id":8326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13439:13:36","subExpression":{"id":8325,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8309,"src":"13439:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8327,"nodeType":"ExpressionStatement","src":"13439:13:36"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8312,"src":"13372:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8315,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"13376:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13372:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8331,"initializationExpression":{"assignments":[8312],"declarations":[{"constant":false,"id":8312,"mutability":"mutable","name":"i","nameLocation":"13369:1:36","nodeType":"VariableDeclaration","scope":8331,"src":"13361:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8311,"name":"uint256","nodeType":"ElementaryTypeName","src":"13361:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8313,"nodeType":"VariableDeclarationStatement","src":"13361:9:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13383:3:36","subExpression":{"id":8317,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8312,"src":"13383:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8319,"nodeType":"ExpressionStatement","src":"13383:3:36"},"nodeType":"ForStatement","src":"13356:121:36"},{"assignments":[8336],"declarations":[{"constant":false,"id":8336,"mutability":"mutable","name":"restakedStrategies","nameLocation":"13566:18:36","nodeType":"VariableDeclaration","scope":8381,"src":"13549:35:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8334,"name":"address","nodeType":"ElementaryTypeName","src":"13549:7:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8335,"nodeType":"ArrayTypeName","src":"13549:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":8342,"initialValue":{"arguments":[{"id":8340,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8309,"src":"13601:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"13587:13:36","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":8337,"name":"address","nodeType":"ElementaryTypeName","src":"13591:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8338,"nodeType":"ArrayTypeName","src":"13591:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":8341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13587:26:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"13549:64:36"},{"assignments":[8344],"declarations":[{"constant":false,"id":8344,"mutability":"mutable","name":"index","nameLocation":"13631:5:36","nodeType":"VariableDeclaration","scope":8381,"src":"13623:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8343,"name":"uint256","nodeType":"ElementaryTypeName","src":"13623:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8345,"nodeType":"VariableDeclarationStatement","src":"13623:13:36"},{"body":{"id":8377,"nodeType":"Block","src":"13682:151:36","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":8356,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8299,"src":"13700:6:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":8358,"indexExpression":{"id":8357,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"13707:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13700:9:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":8359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13712:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13700:13:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8376,"nodeType":"IfStatement","src":"13696:127:36","trueBody":{"id":8375,"nodeType":"Block","src":"13715:108:36","statements":[{"expression":{"id":8370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8361,"name":"restakedStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8336,"src":"13733:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":8363,"indexExpression":{"id":8362,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8344,"src":"13752:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13733:25:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":8366,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8266,"src":"13769:10:36","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}},"id":8368,"indexExpression":{"id":8367,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"13780:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13769:13:36","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}],"id":8365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13761:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8364,"name":"address","nodeType":"ElementaryTypeName","src":"13761:7:36","typeDescriptions":{}}},"id":8369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13761:22:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13733:50:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8371,"nodeType":"ExpressionStatement","src":"13733:50:36"},{"expression":{"id":8373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13801:7:36","subExpression":{"id":8372,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8344,"src":"13801:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8374,"nodeType":"ExpressionStatement","src":"13801:7:36"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8350,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"13666:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8351,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8257,"src":"13670:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13666:9:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8378,"initializationExpression":{"assignments":[8347],"declarations":[{"constant":false,"id":8347,"mutability":"mutable","name":"j","nameLocation":"13659:1:36","nodeType":"VariableDeclaration","scope":8378,"src":"13651:9:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8346,"name":"uint256","nodeType":"ElementaryTypeName","src":"13651:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8349,"initialValue":{"hexValue":"30","id":8348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13663:1:36","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13651:13:36"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13677:3:36","subExpression":{"id":8353,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"13677:1:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8355,"nodeType":"ExpressionStatement","src":"13677:3:36"},"nodeType":"ForStatement","src":"13646:187:36"},{"expression":{"id":8379,"name":"restakedStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8336,"src":"13850:18:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":8246,"id":8380,"nodeType":"Return","src":"13843:25:36"}]},"documentation":{"id":8239,"nodeType":"StructuredDocumentation","src":"12223:539:36","text":" @notice Retrieves the addresses of strategies where the operator has restaked.\n @dev This function fetches the quorum details from the ECDSAStakeRegistry, retrieves the operator's shares for each strategy,\n and filters out strategies with non-zero shares indicating active restaking by the operator.\n @param _operator The address of the operator whose restaked strategies are to be retrieved.\n @return restakedStrategies An array of addresses of strategies where the operator has active restakes."},"implemented":true,"kind":"function","modifiers":[],"name":"_getOperatorRestakedStrategies","nameLocation":"12776:30:36","parameters":{"id":8242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8241,"mutability":"mutable","name":"_operator","nameLocation":"12824:9:36","nodeType":"VariableDeclaration","scope":8382,"src":"12816:17:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8240,"name":"address","nodeType":"ElementaryTypeName","src":"12816:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12806:33:36"},"returnParameters":{"id":8246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8382,"src":"12871:16:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8243,"name":"address","nodeType":"ElementaryTypeName","src":"12871:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8244,"nodeType":"ArrayTypeName","src":"12871:9:36","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"12870:18:36"},"scope":8415,"stateMutability":"view","virtual":true,"visibility":"internal"},{"id":8395,"nodeType":"FunctionDefinition","src":"14057:149:36","nodes":[],"body":{"id":8394,"nodeType":"Block","src":"14148:58:36","nodes":[],"statements":[{"expression":{"arguments":[{"id":8391,"name":"newRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8385,"src":"14179:19:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8390,"name":"_setRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8410,"src":"14158:20:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":8392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14158:41:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8393,"nodeType":"ExpressionStatement","src":"14158:41:36"}]},"documentation":{"id":8383,"nodeType":"StructuredDocumentation","src":"13881:171:36","text":" @notice Sets the rewards initiator address.\n @param newRewardsInitiator The new rewards initiator address.\n @dev Only callable by the owner."},"functionSelector":"3bc28c8c","implemented":true,"kind":"function","modifiers":[{"id":8388,"kind":"modifierInvocation","modifierName":{"id":8387,"name":"onlyOwner","nameLocations":["14138:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"14138:9:36"},"nodeType":"ModifierInvocation","src":"14138:9:36"}],"name":"setRewardsInitiator","nameLocation":"14066:19:36","parameters":{"id":8386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8385,"mutability":"mutable","name":"newRewardsInitiator","nameLocation":"14103:19:36","nodeType":"VariableDeclaration","scope":8395,"src":"14095:27:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8384,"name":"address","nodeType":"ElementaryTypeName","src":"14095:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14085:43:36"},"returnParameters":{"id":8389,"nodeType":"ParameterList","parameters":[],"src":"14148:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8410,"nodeType":"FunctionDefinition","src":"14212:200:36","nodes":[],"body":{"id":8409,"nodeType":"Block","src":"14280:132:36","nodes":[],"statements":[{"eventCall":{"arguments":[{"id":8401,"name":"rewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"14319:16:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8402,"name":"newRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8397,"src":"14337:19:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8400,"name":"RewardsInitiatorUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7318,"src":"14295:23:36","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":8403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14295:62:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8404,"nodeType":"EmitStatement","src":"14290:67:36"},{"expression":{"id":8407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8405,"name":"rewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"14367:16:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8406,"name":"newRewardsInitiator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8397,"src":"14386:19:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14367:38:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8408,"nodeType":"ExpressionStatement","src":"14367:38:36"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_setRewardsInitiator","nameLocation":"14221:20:36","parameters":{"id":8398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8397,"mutability":"mutable","name":"newRewardsInitiator","nameLocation":"14250:19:36","nodeType":"VariableDeclaration","scope":8410,"src":"14242:27:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8396,"name":"address","nodeType":"ElementaryTypeName","src":"14242:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14241:29:36"},"returnParameters":{"id":8399,"nodeType":"ParameterList","parameters":[],"src":"14280:0:36"},"scope":8415,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":8414,"nodeType":"VariableDeclaration","src":"14505:25:36","nodes":[],"constant":false,"mutability":"mutable","name":"__GAP","nameLocation":"14525:5:36","scope":8415,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":8411,"name":"uint256","nodeType":"ElementaryTypeName","src":"14505:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8413,"length":{"hexValue":"3439","id":8412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14513:2:36","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"14505:11:36","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":7730,"name":"IServiceManager","nameLocations":["1057:15:36"],"nodeType":"IdentifierPath","referencedDeclaration":7319,"src":"1057:15:36"},"id":7731,"nodeType":"InheritanceSpecifier","src":"1057:15:36"},{"baseName":{"id":7732,"name":"OwnableUpgradeable","nameLocations":["1078:18:36"],"nodeType":"IdentifierPath","referencedDeclaration":2137,"src":"1078:18:36"},"id":7733,"nodeType":"InheritanceSpecifier","src":"1078:18:36"}],"canonicalName":"ECDSAServiceManagerBase","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[8415,2137,2821,2302,7319,7368],"name":"ECDSAServiceManagerBase","nameLocation":"1026:23:36","scope":8416,"usedErrors":[],"usedEvents":[2022,2166,7318]}],"license":"BUSL-1.1"}},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol":{"id":37,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol","id":9769,"exportedSymbols":{"CheckpointsUpgradeable":[2779],"ECDSAStakeRegistry":[9768],"ECDSAStakeRegistryStorage":[9847],"IDelegationManager":[1347],"IERC1271Upgradeable":[2151],"IServiceManager":[7319],"ISignatureUtils":[1890],"IStrategy":[2005],"OwnableUpgradeable":[2137],"Quorum":[7163],"SignatureCheckerUpgradeable":[3534],"StrategyParams":[7158]},"nodeType":"SourceUnit","src":"32:26404:37","nodes":[{"id":8417,"nodeType":"PragmaDirective","src":"32:24:37","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":8421,"nodeType":"ImportDirective","src":"58:98:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol","file":"./ECDSAStakeRegistryStorage.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":9848,"symbolAliases":[{"foreign":{"id":8418,"name":"ECDSAStakeRegistryStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9847,"src":"66:25:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":8419,"name":"Quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"93:6:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":8420,"name":"StrategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"101:14:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8423,"nodeType":"ImportDirective","src":"157:86:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":2006,"symbolAliases":[{"foreign":{"id":8422,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"165:9:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8425,"nodeType":"ImportDirective","src":"244:104:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":1348,"symbolAliases":[{"foreign":{"id":8424,"name":"IDelegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"252:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8427,"nodeType":"ImportDirective","src":"349:98:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","file":"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":1891,"symbolAliases":[{"foreign":{"id":8426,"name":"ISignatureUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"357:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8429,"nodeType":"ImportDirective","src":"448:66:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol","file":"../interfaces/IServiceManager.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":7320,"symbolAliases":[{"foreign":{"id":8428,"name":"IServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7319,"src":"456:15:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8431,"nodeType":"ImportDirective","src":"516:98:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":2138,"symbolAliases":[{"foreign":{"id":8430,"name":"OwnableUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"524:18:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8433,"nodeType":"ImportDirective","src":"615:105:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/utils/CheckpointsUpgradeable.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":2780,"symbolAliases":[{"foreign":{"id":8432,"name":"CheckpointsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"623:22:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8435,"nodeType":"ImportDirective","src":"721:128:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":3535,"symbolAliases":[{"foreign":{"id":8434,"name":"SignatureCheckerUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"729:27:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":8437,"nodeType":"ImportDirective","src":"850:104:37","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol","file":"@openzeppelin-upgrades/contracts/interfaces/IERC1271Upgradeable.sol","nameLocation":"-1:-1:-1","scope":9769,"sourceUnit":2152,"symbolAliases":[{"foreign":{"id":8436,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"858:19:37","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":9768,"nodeType":"ContractDefinition","src":"1122:25313:37","nodes":[{"id":8447,"nodeType":"UsingForDirective","src":"1238:46:37","nodes":[],"global":false,"libraryName":{"id":8445,"name":"SignatureCheckerUpgradeable","nameLocations":["1244:27:37"],"nodeType":"IdentifierPath","referencedDeclaration":3534,"src":"1244:27:37"},"typeName":{"id":8446,"name":"address","nodeType":"ElementaryTypeName","src":"1276:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":8451,"nodeType":"UsingForDirective","src":"1289:64:37","nodes":[],"global":false,"libraryName":{"id":8448,"name":"CheckpointsUpgradeable","nameLocations":["1295:22:37"],"nodeType":"IdentifierPath","referencedDeclaration":2779,"src":"1295:22:37"},"typeName":{"id":8450,"nodeType":"UserDefinedTypeName","pathNode":{"id":8449,"name":"CheckpointsUpgradeable.History","nameLocations":["1322:22:37","1345:7:37"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1322:30:37"},"referencedDeclaration":2560,"src":"1322:30:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}}},{"id":8462,"nodeType":"FunctionDefinition","src":"1525:153:37","nodes":[],"body":{"id":8461,"nodeType":"Block","src":"1636:42:37","nodes":[],"statements":[]},"documentation":{"id":8452,"nodeType":"StructuredDocumentation","src":"1359:161:37","text":"@dev Constructor to create ECDSAStakeRegistry.\n @param _delegationManager Address of the DelegationManager contract that this registry interacts with."},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":8458,"name":"_delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8455,"src":"1616:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}}],"id":8459,"kind":"baseConstructorSpecifier","modifierName":{"id":8457,"name":"ECDSAStakeRegistryStorage","nameLocations":["1590:25:37"],"nodeType":"IdentifierPath","referencedDeclaration":9847,"src":"1590:25:37"},"nodeType":"ModifierInvocation","src":"1590:45:37"}],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":8456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8455,"mutability":"mutable","name":"_delegationManager","nameLocation":"1565:18:37","nodeType":"VariableDeclaration","scope":8462,"src":"1546:37:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"},"typeName":{"id":8454,"nodeType":"UserDefinedTypeName","pathNode":{"id":8453,"name":"IDelegationManager","nameLocations":["1546:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":1347,"src":"1546:18:37"},"referencedDeclaration":1347,"src":"1546:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"visibility":"internal"}],"src":"1536:53:37"},"returnParameters":{"id":8460,"nodeType":"ParameterList","parameters":[],"src":"1636:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":8482,"nodeType":"FunctionDefinition","src":"1979:231:37","nodes":[],"body":{"id":8481,"nodeType":"Block","src":"2124:86:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8476,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8465,"src":"2160:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8477,"name":"_thresholdWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8467,"src":"2177:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8478,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8470,"src":"2195:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}],"id":8475,"name":"__ECDSAStakeRegistry_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8936,"src":"2134:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_struct$_Quorum_$7163_memory_ptr_$returns$__$","typeString":"function (address,uint256,struct Quorum memory)"}},"id":8479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2134:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8480,"nodeType":"ExpressionStatement","src":"2134:69:37"}]},"documentation":{"id":8463,"nodeType":"StructuredDocumentation","src":"1684:290:37","text":"@notice Initializes the contract with the given parameters.\n @param _serviceManager The address of the service manager.\n @param _thresholdWeight The threshold weight in basis points.\n @param _quorum The quorum struct containing the details of the quorum thresholds."},"functionSelector":"ab118995","implemented":true,"kind":"function","modifiers":[{"id":8473,"kind":"modifierInvocation","modifierName":{"id":8472,"name":"initializer","nameLocations":["2112:11:37"],"nodeType":"IdentifierPath","referencedDeclaration":2222,"src":"2112:11:37"},"nodeType":"ModifierInvocation","src":"2112:11:37"}],"name":"initialize","nameLocation":"1988:10:37","parameters":{"id":8471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8465,"mutability":"mutable","name":"_serviceManager","nameLocation":"2016:15:37","nodeType":"VariableDeclaration","scope":8482,"src":"2008:23:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8464,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8467,"mutability":"mutable","name":"_thresholdWeight","nameLocation":"2049:16:37","nodeType":"VariableDeclaration","scope":8482,"src":"2041:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8466,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8470,"mutability":"mutable","name":"_quorum","nameLocation":"2089:7:37","nodeType":"VariableDeclaration","scope":8482,"src":"2075:21:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8469,"nodeType":"UserDefinedTypeName","pathNode":{"id":8468,"name":"Quorum","nameLocations":["2075:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"2075:6:37"},"referencedDeclaration":7163,"src":"2075:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"1998:104:37"},"returnParameters":{"id":8474,"nodeType":"ParameterList","parameters":[],"src":"2124:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8499,"nodeType":"FunctionDefinition","src":"2462:247:37","nodes":[],"body":{"id":8498,"nodeType":"Block","src":"2623:86:37","nodes":[],"statements":[{"expression":{"arguments":[{"expression":{"id":8492,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2658:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2662:6:37","memberName":"sender","nodeType":"MemberAccess","src":"2658:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8494,"name":"_operatorSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8486,"src":"2670:18:37","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}},{"id":8495,"name":"_signingKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8488,"src":"2690:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8491,"name":"_registerOperatorWithSig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9206,"src":"2633:24:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,struct ISignatureUtils.SignatureWithSaltAndExpiry memory,address)"}},"id":8496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8497,"nodeType":"ExpressionStatement","src":"2633:69:37"}]},"documentation":{"id":8483,"nodeType":"StructuredDocumentation","src":"2216:241:37","text":"@notice Registers a new operator using a provided signature and signing key\n @param _operatorSignature Contains the operator's signature, salt, and expiry\n @param _signingKey The signing key to add to the operator's history"},"functionSelector":"3d5611f6","implemented":true,"kind":"function","modifiers":[],"name":"registerOperatorWithSignature","nameLocation":"2471:29:37","parameters":{"id":8489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8486,"mutability":"mutable","name":"_operatorSignature","nameLocation":"2560:18:37","nodeType":"VariableDeclaration","scope":8499,"src":"2510:68:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":8485,"nodeType":"UserDefinedTypeName","pathNode":{"id":8484,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["2510:15:37","2526:26:37"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"2510:42:37"},"referencedDeclaration":1889,"src":"2510:42:37","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"},{"constant":false,"id":8488,"mutability":"mutable","name":"_signingKey","nameLocation":"2596:11:37","nodeType":"VariableDeclaration","scope":8499,"src":"2588:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8487,"name":"address","nodeType":"ElementaryTypeName","src":"2588:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2500:113:37"},"returnParameters":{"id":8490,"nodeType":"ParameterList","parameters":[],"src":"2623:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8509,"nodeType":"FunctionDefinition","src":"2764:87:37","nodes":[],"body":{"id":8508,"nodeType":"Block","src":"2803:48:37","nodes":[],"statements":[{"expression":{"arguments":[{"expression":{"id":8504,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2833:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2837:6:37","memberName":"sender","nodeType":"MemberAccess","src":"2833:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8503,"name":"_deregisterOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9149,"src":"2813:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":8506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2813:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8507,"nodeType":"ExpressionStatement","src":"2813:31:37"}]},"documentation":{"id":8500,"nodeType":"StructuredDocumentation","src":"2715:44:37","text":"@notice Deregisters an existing operator"},"functionSelector":"857dc190","implemented":true,"kind":"function","modifiers":[],"name":"deregisterOperator","nameLocation":"2773:18:37","parameters":{"id":8501,"nodeType":"ParameterList","parameters":[],"src":"2791:2:37"},"returnParameters":{"id":8502,"nodeType":"ParameterList","parameters":[],"src":"2803:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8532,"nodeType":"FunctionDefinition","src":"3054:239:37","nodes":[],"body":{"id":8531,"nodeType":"Block","src":"3121:172:37","nodes":[],"statements":[{"condition":{"id":8519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3135:32:37","subExpression":{"baseExpression":{"id":8515,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"3136:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":8518,"indexExpression":{"expression":{"id":8516,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3156:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3160:6:37","memberName":"sender","nodeType":"MemberAccess","src":"3156:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3136:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8524,"nodeType":"IfStatement","src":"3131:93:37","trueBody":{"id":8523,"nodeType":"Block","src":"3169:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8520,"name":"OperatorNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7271,"src":"3190:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8522,"nodeType":"RevertStatement","src":"3183:30:37"}]}},{"expression":{"arguments":[{"expression":{"id":8526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3259:3:37","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3263:6:37","memberName":"sender","nodeType":"MemberAccess","src":"3259:10:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8528,"name":"_newSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8512,"src":"3271:14:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8525,"name":"_updateOperatorSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9253,"src":"3233:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":8529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3233:53:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8530,"nodeType":"ExpressionStatement","src":"3233:53:37"}]},"documentation":{"id":8510,"nodeType":"StructuredDocumentation","src":"2857:192:37","text":" @notice Updates the signing key for an operator\n @dev Only callable by the operator themselves\n @param _newSigningKey The new signing key to set for the operator"},"functionSelector":"743c31f4","implemented":true,"kind":"function","modifiers":[],"name":"updateOperatorSigningKey","nameLocation":"3063:24:37","parameters":{"id":8513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8512,"mutability":"mutable","name":"_newSigningKey","nameLocation":"3096:14:37","nodeType":"VariableDeclaration","scope":8532,"src":"3088:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8511,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3087:24:37"},"returnParameters":{"id":8514,"nodeType":"ParameterList","parameters":[],"src":"3121:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8544,"nodeType":"FunctionDefinition","src":"3597:108:37","nodes":[],"body":{"id":8543,"nodeType":"Block","src":"3660:45:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8540,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8536,"src":"3687:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":8539,"name":"_updateOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9009,"src":"3670:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":8541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3670:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8542,"nodeType":"ExpressionStatement","src":"3670:28:37"}]},"documentation":{"id":8533,"nodeType":"StructuredDocumentation","src":"3299:293:37","text":" @notice Updates the StakeRegistry's view of one or more operators' stakes adding a new entry in their history of stake checkpoints,\n @dev Queries stakes from the Eigenlayer core DelegationManager contract\n @param _operators A list of operator addresses to update"},"functionSelector":"00cf2ab5","implemented":true,"kind":"function","modifiers":[],"name":"updateOperators","nameLocation":"3606:15:37","parameters":{"id":8537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8536,"mutability":"mutable","name":"_operators","nameLocation":"3639:10:37","nodeType":"VariableDeclaration","scope":8544,"src":"3622:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8534,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8535,"nodeType":"ArrayTypeName","src":"3622:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3621:29:37"},"returnParameters":{"id":8538,"nodeType":"ParameterList","parameters":[],"src":"3660:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8565,"nodeType":"FunctionDefinition","src":"4110:204:37","nodes":[],"body":{"id":8564,"nodeType":"Block","src":"4231:83:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8557,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8548,"src":"4261:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}],"id":8556,"name":"_updateQuorumConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9100,"src":"4241:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Quorum_$7163_memory_ptr_$returns$__$","typeString":"function (struct Quorum memory)"}},"id":8558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4241:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8559,"nodeType":"ExpressionStatement","src":"4241:28:37"},{"expression":{"arguments":[{"id":8561,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8551,"src":"4296:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":8560,"name":"_updateOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9009,"src":"4279:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":8562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4279:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8563,"nodeType":"ExpressionStatement","src":"4279:28:37"}]},"documentation":{"id":8545,"nodeType":"StructuredDocumentation","src":"3711:394:37","text":" @notice Updates the quorum configuration and the set of operators\n @dev Only callable by the contract owner.\n It first updates the quorum configuration and then updates the list of operators.\n @param _quorum The new quorum configuration, including strategies and their new weights\n @param _operators The list of operator addresses to update stakes for"},"functionSelector":"dec5d1f6","implemented":true,"kind":"function","modifiers":[{"id":8554,"kind":"modifierInvocation","modifierName":{"id":8553,"name":"onlyOwner","nameLocations":["4221:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"4221:9:37"},"nodeType":"ModifierInvocation","src":"4221:9:37"}],"name":"updateQuorumConfig","nameLocation":"4119:18:37","parameters":{"id":8552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8548,"mutability":"mutable","name":"_quorum","nameLocation":"4161:7:37","nodeType":"VariableDeclaration","scope":8565,"src":"4147:21:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8547,"nodeType":"UserDefinedTypeName","pathNode":{"id":8546,"name":"Quorum","nameLocations":["4147:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"4147:6:37"},"referencedDeclaration":7163,"src":"4147:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"},{"constant":false,"id":8551,"mutability":"mutable","name":"_operators","nameLocation":"4195:10:37","nodeType":"VariableDeclaration","scope":8565,"src":"4178:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8549,"name":"address","nodeType":"ElementaryTypeName","src":"4178:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8550,"nodeType":"ArrayTypeName","src":"4178:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4137:74:37"},"returnParameters":{"id":8555,"nodeType":"ParameterList","parameters":[],"src":"4231:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8585,"nodeType":"FunctionDefinition","src":"4550:220:37","nodes":[],"body":{"id":8584,"nodeType":"Block","src":"4676:94:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8577,"name":"_newMinimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8568,"src":"4707:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8576,"name":"_updateMinimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9046,"src":"4686:20:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":8578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4686:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8579,"nodeType":"ExpressionStatement","src":"4686:39:37"},{"expression":{"arguments":[{"id":8581,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8571,"src":"4752:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":8580,"name":"_updateOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9009,"src":"4735:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":8582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4735:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8583,"nodeType":"ExpressionStatement","src":"4735:28:37"}]},"documentation":{"id":8566,"nodeType":"StructuredDocumentation","src":"4320:225:37","text":"@notice Updates the weight an operator must have to join the operator set\n @dev Access controlled to the contract owner\n @param _newMinimumWeight The new weight an operator must have to join the operator set"},"functionSelector":"696255be","implemented":true,"kind":"function","modifiers":[{"id":8574,"kind":"modifierInvocation","modifierName":{"id":8573,"name":"onlyOwner","nameLocations":["4666:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"4666:9:37"},"nodeType":"ModifierInvocation","src":"4666:9:37"}],"name":"updateMinimumWeight","nameLocation":"4559:19:37","parameters":{"id":8572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8568,"mutability":"mutable","name":"_newMinimumWeight","nameLocation":"4596:17:37","nodeType":"VariableDeclaration","scope":8585,"src":"4588:25:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8567,"name":"uint256","nodeType":"ElementaryTypeName","src":"4588:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8571,"mutability":"mutable","name":"_operators","nameLocation":"4640:10:37","nodeType":"VariableDeclaration","scope":8585,"src":"4623:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8569,"name":"address","nodeType":"ElementaryTypeName","src":"4623:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8570,"nodeType":"ArrayTypeName","src":"4623:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4578:78:37"},"returnParameters":{"id":8575,"nodeType":"ParameterList","parameters":[],"src":"4676:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8598,"nodeType":"FunctionDefinition","src":"5296:131:37","nodes":[],"body":{"id":8597,"nodeType":"Block","src":"5371:56:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8594,"name":"_thresholdWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8588,"src":"5403:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8593,"name":"_updateStakeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9026,"src":"5381:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":8595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5381:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8596,"nodeType":"ExpressionStatement","src":"5381:39:37"}]},"documentation":{"id":8586,"nodeType":"StructuredDocumentation","src":"4776:515:37","text":" @notice Sets a new cumulative threshold weight for message validation by operator set signatures.\n @dev This function can only be invoked by the owner of the contract. It delegates the update to\n an internal function `_updateStakeThreshold`.\n @param _thresholdWeight The updated threshold weight required to validate a message. This is the\n cumulative weight that must be met or exceeded by the sum of the stakes of the signatories for\n a message to be deemed valid."},"functionSelector":"5ef53329","implemented":true,"kind":"function","modifiers":[{"id":8591,"kind":"modifierInvocation","modifierName":{"id":8590,"name":"onlyOwner","nameLocations":["5361:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":2051,"src":"5361:9:37"},"nodeType":"ModifierInvocation","src":"5361:9:37"}],"name":"updateStakeThreshold","nameLocation":"5305:20:37","parameters":{"id":8589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8588,"mutability":"mutable","name":"_thresholdWeight","nameLocation":"5334:16:37","nodeType":"VariableDeclaration","scope":8598,"src":"5326:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8587,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5325:26:37"},"returnParameters":{"id":8592,"nodeType":"ParameterList","parameters":[],"src":"5371:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8644,"nodeType":"FunctionDefinition","src":"5837:465:37","nodes":[],"body":{"id":8643,"nodeType":"Block","src":"5964:338:37","nodes":[],"statements":[{"assignments":[8612,8615,8617],"declarations":[{"constant":false,"id":8612,"mutability":"mutable","name":"operators","nameLocation":"6005:9:37","nodeType":"VariableDeclaration","scope":8643,"src":"5988:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8610,"name":"address","nodeType":"ElementaryTypeName","src":"5988:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8611,"nodeType":"ArrayTypeName","src":"5988:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":8615,"mutability":"mutable","name":"signatures","nameLocation":"6043:10:37","nodeType":"VariableDeclaration","scope":8643,"src":"6028:25:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":8613,"name":"bytes","nodeType":"ElementaryTypeName","src":"6028:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":8614,"nodeType":"ArrayTypeName","src":"6028:7:37","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":8617,"mutability":"mutable","name":"referenceBlock","nameLocation":"6074:14:37","nodeType":"VariableDeclaration","scope":8643,"src":"6067:21:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8616,"name":"uint32","nodeType":"ElementaryTypeName","src":"6067:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":8631,"initialValue":{"arguments":[{"id":8620,"name":"_signatureData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8603,"src":"6112:14:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"baseExpression":{"id":8622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6129:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8621,"name":"address","nodeType":"ElementaryTypeName","src":"6129:7:37","typeDescriptions":{}}},"id":8623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"6129:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}},{"baseExpression":{"id":8625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6140:5:37","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":8624,"name":"bytes","nodeType":"ElementaryTypeName","src":"6140:5:37","typeDescriptions":{}}},"id":8626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"6140:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}},{"id":8628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6149:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":8627,"name":"uint32","nodeType":"ElementaryTypeName","src":"6149:6:37","typeDescriptions":{}}}],"id":8629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6128:28:37","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(address[] memory),type(bytes memory[] memory),type(uint32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(address[] memory),type(bytes memory[] memory),type(uint32))"}],"expression":{"id":8618,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6101:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6105:6:37","memberName":"decode","nodeType":"MemberAccess","src":"6101:10:37","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":8630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6101:56:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_uint32_$","typeString":"tuple(address[] memory,bytes memory[] memory,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"5974:183:37"},{"expression":{"arguments":[{"id":8633,"name":"_dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8601,"src":"6184:9:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":8634,"name":"operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8612,"src":"6195:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":8635,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8615,"src":"6206:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":8636,"name":"referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8617,"src":"6218:14:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":8632,"name":"_checkSignatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9560,"src":"6167:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_uint32_$returns$__$","typeString":"function (bytes32,address[] memory,bytes memory[] memory,uint32) view"}},"id":8637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6167:66:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8638,"nodeType":"ExpressionStatement","src":"6167:66:37"},{"expression":{"expression":{"expression":{"id":8639,"name":"IERC1271Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"6250:19:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271Upgradeable_$2151_$","typeString":"type(contract IERC1271Upgradeable)"}},"id":8640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6270:16:37","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"6250:36:37","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271Upgradeable.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":8641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6287:8:37","memberName":"selector","nodeType":"MemberAccess","src":"6250:45:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":8607,"id":8642,"nodeType":"Return","src":"6243:52:37"}]},"baseFunctions":[2150],"documentation":{"id":8599,"nodeType":"StructuredDocumentation","src":"5433:399:37","text":"@notice Verifies if the provided signature data is valid for the given data hash.\n @param _dataHash The hash of the data that was signed.\n @param _signatureData Encoded signature data consisting of an array of operators, an array of signatures, and a reference block number.\n @return The function selector that indicates the signature is valid according to ERC1271 standard."},"functionSelector":"1626ba7e","implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"5846:16:37","parameters":{"id":8604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8601,"mutability":"mutable","name":"_dataHash","nameLocation":"5880:9:37","nodeType":"VariableDeclaration","scope":8644,"src":"5872:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5872:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":8603,"mutability":"mutable","name":"_signatureData","nameLocation":"5912:14:37","nodeType":"VariableDeclaration","scope":8644,"src":"5899:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8602,"name":"bytes","nodeType":"ElementaryTypeName","src":"5899:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5862:70:37"},"returnParameters":{"id":8607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8644,"src":"5956:6:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":8605,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5956:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5955:8:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8654,"nodeType":"FunctionDefinition","src":"6438:87:37","nodes":[],"body":{"id":8653,"nodeType":"Block","src":"6494:31:37","nodes":[],"statements":[{"expression":{"id":8651,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9795,"src":"6511:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum storage ref"}},"functionReturnParameters":8650,"id":8652,"nodeType":"Return","src":"6504:14:37"}]},"documentation":{"id":8645,"nodeType":"StructuredDocumentation","src":"6308:125:37","text":"@notice Retrieves the current stake quorum details.\n @return Quorum - The current quorum of strategies and weights"},"functionSelector":"1703a018","implemented":true,"kind":"function","modifiers":[],"name":"quorum","nameLocation":"6447:6:37","parameters":{"id":8646,"nodeType":"ParameterList","parameters":[],"src":"6453:2:37"},"returnParameters":{"id":8650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8654,"src":"6479:13:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8648,"nodeType":"UserDefinedTypeName","pathNode":{"id":8647,"name":"Quorum","nameLocations":["6479:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"6479:6:37"},"referencedDeclaration":7163,"src":"6479:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"6478:15:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8675,"nodeType":"FunctionDefinition","src":"6725:191:37","nodes":[],"body":{"id":8674,"nodeType":"Block","src":"6828:88:37","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":8666,"name":"_operatorSigningKeyHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9810,"src":"6861:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":8668,"indexExpression":{"id":8667,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8657,"src":"6888:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6861:37:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6899:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"6861:44:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":8670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6861:46:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6853:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":8664,"name":"uint160","nodeType":"ElementaryTypeName","src":"6853:7:37","typeDescriptions":{}}},"id":8671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6853:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6845:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8662,"name":"address","nodeType":"ElementaryTypeName","src":"6845:7:37","typeDescriptions":{}}},"id":8672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6845:64:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":8661,"id":8673,"nodeType":"Return","src":"6838:71:37"}]},"documentation":{"id":8655,"nodeType":"StructuredDocumentation","src":"6531:189:37","text":" @notice Retrieves the latest signing key for a given operator.\n @param _operator The address of the operator.\n @return The latest signing key of the operator."},"functionSelector":"cdcd3581","implemented":true,"kind":"function","modifiers":[],"name":"getLastestOperatorSigningKey","nameLocation":"6734:28:37","parameters":{"id":8658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8657,"mutability":"mutable","name":"_operator","nameLocation":"6780:9:37","nodeType":"VariableDeclaration","scope":8675,"src":"6772:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8656,"name":"address","nodeType":"ElementaryTypeName","src":"6772:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6762:33:37"},"returnParameters":{"id":8661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8675,"src":"6819:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8659,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8699,"nodeType":"FunctionDefinition","src":"7234:363:37","nodes":[],"body":{"id":8698,"nodeType":"Block","src":"7367:230:37","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":8693,"name":"_blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8680,"src":"7524:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":8689,"name":"_operatorSigningKeyHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9810,"src":"7450:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":8691,"indexExpression":{"id":8690,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8678,"src":"7477:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7450:37:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8692,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7488:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"7450:48:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":8694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7450:108:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7421:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":8687,"name":"uint160","nodeType":"ElementaryTypeName","src":"7421:7:37","typeDescriptions":{}}},"id":8695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7421:155:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7396:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8685,"name":"address","nodeType":"ElementaryTypeName","src":"7396:7:37","typeDescriptions":{}}},"id":8696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7396:194:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":8684,"id":8697,"nodeType":"Return","src":"7377:213:37"}]},"documentation":{"id":8676,"nodeType":"StructuredDocumentation","src":"6922:307:37","text":" @notice Retrieves the latest signing key for a given operator at a specific block number.\n @param _operator The address of the operator.\n @param _blockNumber The block number to get the operator's signing key.\n @return The signing key of the operator at the given block."},"functionSelector":"5e1042e8","implemented":true,"kind":"function","modifiers":[],"name":"getOperatorSigningKeyAtBlock","nameLocation":"7243:28:37","parameters":{"id":8681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8678,"mutability":"mutable","name":"_operator","nameLocation":"7289:9:37","nodeType":"VariableDeclaration","scope":8699,"src":"7281:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8677,"name":"address","nodeType":"ElementaryTypeName","src":"7281:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8680,"mutability":"mutable","name":"_blockNumber","nameLocation":"7316:12:37","nodeType":"VariableDeclaration","scope":8699,"src":"7308:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8679,"name":"uint256","nodeType":"ElementaryTypeName","src":"7308:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7271:63:37"},"returnParameters":{"id":8684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8699,"src":"7358:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8682,"name":"address","nodeType":"ElementaryTypeName","src":"7358:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7357:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8714,"nodeType":"FunctionDefinition","src":"7791:172:37","nodes":[],"body":{"id":8713,"nodeType":"Block","src":"7897:66:37","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":8707,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"7914:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":8709,"indexExpression":{"id":8708,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8702,"src":"7937:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7914:33:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7948:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"7914:40:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":8711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7914:42:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8706,"id":8712,"nodeType":"Return","src":"7907:49:37"}]},"documentation":{"id":8700,"nodeType":"StructuredDocumentation","src":"7603:183:37","text":"@notice Retrieves the last recorded weight for a given operator.\n @param _operator The address of the operator.\n @return uint256 - The latest weight of the operator."},"functionSelector":"3b242e4a","implemented":true,"kind":"function","modifiers":[],"name":"getLastCheckpointOperatorWeight","nameLocation":"7800:31:37","parameters":{"id":8703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8702,"mutability":"mutable","name":"_operator","nameLocation":"7849:9:37","nodeType":"VariableDeclaration","scope":8714,"src":"7841:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8701,"name":"address","nodeType":"ElementaryTypeName","src":"7841:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7831:33:37"},"returnParameters":{"id":8706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8714,"src":"7888:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8704,"name":"uint256","nodeType":"ElementaryTypeName","src":"7888:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7887:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8725,"nodeType":"FunctionDefinition","src":"8099:124:37","nodes":[],"body":{"id":8724,"nodeType":"Block","src":"8171:52:37","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8720,"name":"_totalWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9814,"src":"8188:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8208:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"8188:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":8722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8719,"id":8723,"nodeType":"Return","src":"8181:35:37"}]},"documentation":{"id":8715,"nodeType":"StructuredDocumentation","src":"7969:125:37","text":"@notice Retrieves the last recorded total weight across all operators.\n @return uint256 - The latest total weight."},"functionSelector":"314f3a49","implemented":true,"kind":"function","modifiers":[],"name":"getLastCheckpointTotalWeight","nameLocation":"8108:28:37","parameters":{"id":8716,"nodeType":"ParameterList","parameters":[],"src":"8136:2:37"},"returnParameters":{"id":8719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8725,"src":"8162:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8717,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8161:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8736,"nodeType":"FunctionDefinition","src":"8345:160:37","nodes":[],"body":{"id":8735,"nodeType":"Block","src":"8449:56:37","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8731,"name":"_thresholdWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9818,"src":"8466:23:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8490:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"8466:30:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":8733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8466:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8730,"id":8734,"nodeType":"Return","src":"8459:39:37"}]},"documentation":{"id":8726,"nodeType":"StructuredDocumentation","src":"8229:111:37","text":"@notice Retrieves the last recorded threshold weight\n @return uint256 - The latest threshold weight."},"functionSelector":"b933fa74","implemented":true,"kind":"function","modifiers":[],"name":"getLastCheckpointThresholdWeight","nameLocation":"8354:32:37","parameters":{"id":8727,"nodeType":"ParameterList","parameters":[],"src":"8386:2:37"},"returnParameters":{"id":8730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8736,"src":"8436:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8728,"name":"uint256","nodeType":"ElementaryTypeName","src":"8436:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8435:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8754,"nodeType":"FunctionDefinition","src":"8801:210:37","nodes":[],"body":{"id":8753,"nodeType":"Block","src":"8929:82:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8750,"name":"_blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8741,"src":"8991:12:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"baseExpression":{"id":8746,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"8946:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":8748,"indexExpression":{"id":8747,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8739,"src":"8969:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8946:33:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8980:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"8946:44:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":8751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8946:58:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8745,"id":8752,"nodeType":"Return","src":"8939:65:37"}]},"documentation":{"id":8737,"nodeType":"StructuredDocumentation","src":"8511:285:37","text":"@notice Retrieves the operator's weight at a specific block number.\n @param _operator The address of the operator.\n @param _blockNumber The block number to get the operator weight for the quorum\n @return uint256 - The weight of the operator at the given block."},"functionSelector":"955f2d90","implemented":true,"kind":"function","modifiers":[],"name":"getOperatorWeightAtBlock","nameLocation":"8810:24:37","parameters":{"id":8742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8739,"mutability":"mutable","name":"_operator","nameLocation":"8852:9:37","nodeType":"VariableDeclaration","scope":8754,"src":"8844:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8738,"name":"address","nodeType":"ElementaryTypeName","src":"8844:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8741,"mutability":"mutable","name":"_blockNumber","nameLocation":"8878:12:37","nodeType":"VariableDeclaration","scope":8754,"src":"8871:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8740,"name":"uint32","nodeType":"ElementaryTypeName","src":"8871:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8834:62:37"},"returnParameters":{"id":8745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8754,"src":"8920:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8743,"name":"uint256","nodeType":"ElementaryTypeName","src":"8920:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8919:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8768,"nodeType":"FunctionDefinition","src":"9235:180:37","nodes":[],"body":{"id":8767,"nodeType":"Block","src":"9347:68:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8764,"name":"_blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8757,"src":"9395:12:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":8762,"name":"_totalWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9814,"src":"9364:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9384:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"9364:30:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":8765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9364:44:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8761,"id":8766,"nodeType":"Return","src":"9357:51:37"}]},"documentation":{"id":8755,"nodeType":"StructuredDocumentation","src":"9017:213:37","text":"@notice Retrieves the total weight at a specific block number.\n @param _blockNumber The block number to get the total weight for the quorum\n @return uint256 - The total weight at the given block."},"functionSelector":"0dba3394","implemented":true,"kind":"function","modifiers":[],"name":"getLastCheckpointTotalWeightAtBlock","nameLocation":"9244:35:37","parameters":{"id":8758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8757,"mutability":"mutable","name":"_blockNumber","nameLocation":"9296:12:37","nodeType":"VariableDeclaration","scope":8768,"src":"9289:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8756,"name":"uint32","nodeType":"ElementaryTypeName","src":"9289:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9279:35:37"},"returnParameters":{"id":8761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8768,"src":"9338:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8759,"name":"uint256","nodeType":"ElementaryTypeName","src":"9338:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9337:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8782,"nodeType":"FunctionDefinition","src":"9648:188:37","nodes":[],"body":{"id":8781,"nodeType":"Block","src":"9764:72:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":8778,"name":"_blockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8771,"src":"9816:12:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":8776,"name":"_thresholdWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9818,"src":"9781:23:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":8777,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9805:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"9781:34:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":8779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9781:48:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8775,"id":8780,"nodeType":"Return","src":"9774:55:37"}]},"documentation":{"id":8769,"nodeType":"StructuredDocumentation","src":"9421:222:37","text":"@notice Retrieves the threshold weight at a specific block number.\n @param _blockNumber The block number to get the threshold weight for the quorum\n @return uint256 - The threshold weight the given block."},"functionSelector":"1e4cd85e","implemented":true,"kind":"function","modifiers":[],"name":"getLastCheckpointThresholdWeightAtBlock","nameLocation":"9657:39:37","parameters":{"id":8772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8771,"mutability":"mutable","name":"_blockNumber","nameLocation":"9713:12:37","nodeType":"VariableDeclaration","scope":8782,"src":"9706:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8770,"name":"uint32","nodeType":"ElementaryTypeName","src":"9706:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9696:35:37"},"returnParameters":{"id":8775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8782,"src":"9755:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8773,"name":"uint256","nodeType":"ElementaryTypeName","src":"9755:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9754:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8794,"nodeType":"FunctionDefinition","src":"9842:144:37","nodes":[],"body":{"id":8793,"nodeType":"Block","src":"9932:54:37","nodes":[],"statements":[{"expression":{"baseExpression":{"id":8789,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"9949:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":8791,"indexExpression":{"id":8790,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8784,"src":"9969:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9949:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":8788,"id":8792,"nodeType":"Return","src":"9942:37:37"}]},"functionSelector":"ec7fbb31","implemented":true,"kind":"function","modifiers":[],"name":"operatorRegistered","nameLocation":"9851:18:37","parameters":{"id":8785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8784,"mutability":"mutable","name":"_operator","nameLocation":"9887:9:37","nodeType":"VariableDeclaration","scope":8794,"src":"9879:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8783,"name":"address","nodeType":"ElementaryTypeName","src":"9879:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9869:33:37"},"returnParameters":{"id":8788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8794,"src":"9926:4:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8786,"name":"bool","nodeType":"ElementaryTypeName","src":"9926:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9925:6:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8803,"nodeType":"FunctionDefinition","src":"10084:95:37","nodes":[],"body":{"id":8802,"nodeType":"Block","src":"10141:38:37","nodes":[],"statements":[{"expression":{"id":8800,"name":"_minimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9798,"src":"10158:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8799,"id":8801,"nodeType":"Return","src":"10151:21:37"}]},"documentation":{"id":8795,"nodeType":"StructuredDocumentation","src":"9992:87:37","text":"@notice Returns the weight an operator must have to contribute to validating an AVS"},"functionSelector":"40bf2fb7","implemented":true,"kind":"function","modifiers":[],"name":"minimumWeight","nameLocation":"10093:13:37","parameters":{"id":8796,"nodeType":"ParameterList","parameters":[],"src":"10106:2:37"},"returnParameters":{"id":8799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8803,"src":"10132:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8797,"name":"uint256","nodeType":"ElementaryTypeName","src":"10132:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10131:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":8907,"nodeType":"FunctionDefinition","src":"10470:803:37","nodes":[],"body":{"id":8906,"nodeType":"Block","src":"10560:713:37","nodes":[],"statements":[{"assignments":[8815],"declarations":[{"constant":false,"id":8815,"mutability":"mutable","name":"strategyParams","nameLocation":"10594:14:37","nodeType":"VariableDeclaration","scope":8906,"src":"10570:38:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams[]"},"typeName":{"baseType":{"id":8813,"nodeType":"UserDefinedTypeName","pathNode":{"id":8812,"name":"StrategyParams","nameLocations":["10570:14:37"],"nodeType":"IdentifierPath","referencedDeclaration":7158,"src":"10570:14:37"},"referencedDeclaration":7158,"src":"10570:14:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_storage_ptr","typeString":"struct StrategyParams"}},"id":8814,"nodeType":"ArrayTypeName","src":"10570:16:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr","typeString":"struct StrategyParams[]"}},"visibility":"internal"}],"id":8818,"initialValue":{"expression":{"id":8816,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9795,"src":"10611:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum storage ref"}},"id":8817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10619:10:37","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"10611:18:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage","typeString":"struct StrategyParams storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10570:59:37"},{"assignments":[8820],"declarations":[{"constant":false,"id":8820,"mutability":"mutable","name":"weight","nameLocation":"10647:6:37","nodeType":"VariableDeclaration","scope":8906,"src":"10639:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8819,"name":"uint256","nodeType":"ElementaryTypeName","src":"10639:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8821,"nodeType":"VariableDeclarationStatement","src":"10639:14:37"},{"assignments":[8826],"declarations":[{"constant":false,"id":8826,"mutability":"mutable","name":"strategies","nameLocation":"10682:10:37","nodeType":"VariableDeclaration","scope":8906,"src":"10663:29:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[]"},"typeName":{"baseType":{"id":8824,"nodeType":"UserDefinedTypeName","pathNode":{"id":8823,"name":"IStrategy","nameLocations":["10663:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"10663:9:37"},"referencedDeclaration":2005,"src":"10663:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8825,"nodeType":"ArrayTypeName","src":"10663:11:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}},"visibility":"internal"}],"id":8834,"initialValue":{"arguments":[{"expression":{"id":8831,"name":"strategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"10711:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10726:6:37","memberName":"length","nodeType":"MemberAccess","src":"10711:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10695:15:37","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (contract IStrategy[] memory)"},"typeName":{"baseType":{"id":8828,"nodeType":"UserDefinedTypeName","pathNode":{"id":8827,"name":"IStrategy","nameLocations":["10699:9:37"],"nodeType":"IdentifierPath","referencedDeclaration":2005,"src":"10699:9:37"},"referencedDeclaration":2005,"src":"10699:9:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8829,"nodeType":"ArrayTypeName","src":"10699:11:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_storage_ptr","typeString":"contract IStrategy[]"}}},"id":8833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10695:38:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10663:70:37"},{"body":{"id":8854,"nodeType":"Block","src":"10791:67:37","statements":[{"expression":{"id":8852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8845,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8826,"src":"10805:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}},"id":8847,"indexExpression":{"id":8846,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8836,"src":"10816:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10805:13:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":8848,"name":"strategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"10821:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8850,"indexExpression":{"id":8849,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8836,"src":"10836:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10821:17:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":8851,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10839:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":7155,"src":"10821:26:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"src":"10805:42:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}},"id":8853,"nodeType":"ExpressionStatement","src":"10805:42:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8836,"src":"10759:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":8839,"name":"strategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"10763:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10778:6:37","memberName":"length","nodeType":"MemberAccess","src":"10763:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10759:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8855,"initializationExpression":{"assignments":[8836],"declarations":[{"constant":false,"id":8836,"mutability":"mutable","name":"i","nameLocation":"10756:1:37","nodeType":"VariableDeclaration","scope":8855,"src":"10748:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8835,"name":"uint256","nodeType":"ElementaryTypeName","src":"10748:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8837,"nodeType":"VariableDeclarationStatement","src":"10748:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10786:3:37","subExpression":{"id":8842,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8836,"src":"10786:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8844,"nodeType":"ExpressionStatement","src":"10786:3:37"},"nodeType":"ForStatement","src":"10743:115:37"},{"assignments":[8860],"declarations":[{"constant":false,"id":8860,"mutability":"mutable","name":"shares","nameLocation":"10884:6:37","nodeType":"VariableDeclaration","scope":8906,"src":"10867:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":8858,"name":"uint256","nodeType":"ElementaryTypeName","src":"10867:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8859,"nodeType":"ArrayTypeName","src":"10867:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":8866,"initialValue":{"arguments":[{"id":8863,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8806,"src":"10943:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8864,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8826,"src":"10966:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr","typeString":"contract IStrategy[] memory"}],"expression":{"id":8861,"name":"DELEGATION_MANAGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9784,"src":"10893:18:37","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"id":8862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10912:17:37","memberName":"getOperatorShares","nodeType":"MemberAccess","referencedDeclaration":1173,"src":"10893:36:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_array$_t_contract$_IStrategy_$2005_$dyn_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,contract IStrategy[] memory) view external returns (uint256[] memory)"}},"id":8865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10893:93:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10867:119:37"},{"body":{"id":8888,"nodeType":"Block","src":"11044:75:37","statements":[{"expression":{"id":8886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8877,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8820,"src":"11058:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":8878,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8860,"src":"11068:6:37","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":8880,"indexExpression":{"id":8879,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8868,"src":"11075:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11068:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"baseExpression":{"id":8881,"name":"strategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"11080:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8883,"indexExpression":{"id":8882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8868,"src":"11095:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11080:17:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":8884,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11098:10:37","memberName":"multiplier","nodeType":"MemberAccess","referencedDeclaration":7157,"src":"11080:28:37","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11068:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11058:50:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8887,"nodeType":"ExpressionStatement","src":"11058:50:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8870,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8868,"src":"11012:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":8871,"name":"strategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8815,"src":"11016:14:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":8872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11031:6:37","memberName":"length","nodeType":"MemberAccess","src":"11016:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11012:25:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8889,"initializationExpression":{"assignments":[8868],"declarations":[{"constant":false,"id":8868,"mutability":"mutable","name":"i","nameLocation":"11009:1:37","nodeType":"VariableDeclaration","scope":8889,"src":"11001:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8867,"name":"uint256","nodeType":"ElementaryTypeName","src":"11001:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8869,"nodeType":"VariableDeclarationStatement","src":"11001:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"11039:3:37","subExpression":{"id":8874,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8868,"src":"11039:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8876,"nodeType":"ExpressionStatement","src":"11039:3:37"},"nodeType":"ForStatement","src":"10996:123:37"},{"expression":{"id":8894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8890,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8820,"src":"11128:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8891,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8820,"src":"11137:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":8892,"name":"BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9788,"src":"11146:3:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11137:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11128:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8895,"nodeType":"ExpressionStatement","src":"11128:21:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8896,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8820,"src":"11164:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":8897,"name":"_minimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9798,"src":"11174:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11164:24:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8904,"nodeType":"Block","src":"11234:33:37","statements":[{"expression":{"hexValue":"30","id":8902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11255:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":8810,"id":8903,"nodeType":"Return","src":"11248:8:37"}]},"id":8905,"nodeType":"IfStatement","src":"11160:107:37","trueBody":{"id":8901,"nodeType":"Block","src":"11190:38:37","statements":[{"expression":{"id":8899,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8820,"src":"11211:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8810,"id":8900,"nodeType":"Return","src":"11204:13:37"}]}}]},"documentation":{"id":8804,"nodeType":"StructuredDocumentation","src":"10185:280:37","text":"@notice Calculates the current weight of an operator based on their delegated stake in the strategies considered in the quorum\n @param _operator The address of the operator.\n @return uint256 - The current weight of the operator; returns 0 if below the threshold."},"functionSelector":"98ec1ac9","implemented":true,"kind":"function","modifiers":[],"name":"getOperatorWeight","nameLocation":"10479:17:37","parameters":{"id":8807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8806,"mutability":"mutable","name":"_operator","nameLocation":"10514:9:37","nodeType":"VariableDeclaration","scope":8907,"src":"10506:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8805,"name":"address","nodeType":"ElementaryTypeName","src":"10506:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10496:33:37"},"returnParameters":{"id":8810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8907,"src":"10551:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8808,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10550:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":8936,"nodeType":"FunctionDefinition","src":"11413:336:37","nodes":[],"body":{"id":8935,"nodeType":"Block","src":"11582:167:37","nodes":[],"statements":[{"expression":{"id":8922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8920,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9801,"src":"11592:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8921,"name":"_serviceManagerAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8910,"src":"11610:19:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11592:37:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8923,"nodeType":"ExpressionStatement","src":"11592:37:37"},{"expression":{"arguments":[{"id":8925,"name":"_thresholdWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8912,"src":"11661:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8924,"name":"_updateStakeThreshold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9026,"src":"11639:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":8926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11639:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8927,"nodeType":"ExpressionStatement","src":"11639:39:37"},{"expression":{"arguments":[{"id":8929,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8915,"src":"11708:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}],"id":8928,"name":"_updateQuorumConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9100,"src":"11688:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Quorum_$7163_memory_ptr_$returns$__$","typeString":"function (struct Quorum memory)"}},"id":8930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11688:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8931,"nodeType":"ExpressionStatement","src":"11688:28:37"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":8932,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"11726:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":8933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11726:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8934,"nodeType":"ExpressionStatement","src":"11726:16:37"}]},"documentation":{"id":8908,"nodeType":"StructuredDocumentation","src":"11279:129:37","text":"@notice Initializes state for the StakeRegistry\n @param _serviceManagerAddr The AVS' ServiceManager contract's address"},"implemented":true,"kind":"function","modifiers":[{"id":8918,"kind":"modifierInvocation","modifierName":{"id":8917,"name":"onlyInitializing","nameLocations":["11565:16:37"],"nodeType":"IdentifierPath","referencedDeclaration":2265,"src":"11565:16:37"},"nodeType":"ModifierInvocation","src":"11565:16:37"}],"name":"__ECDSAStakeRegistry_init","nameLocation":"11422:25:37","parameters":{"id":8916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8910,"mutability":"mutable","name":"_serviceManagerAddr","nameLocation":"11465:19:37","nodeType":"VariableDeclaration","scope":8936,"src":"11457:27:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8909,"name":"address","nodeType":"ElementaryTypeName","src":"11457:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8912,"mutability":"mutable","name":"_thresholdWeight","nameLocation":"11502:16:37","nodeType":"VariableDeclaration","scope":8936,"src":"11494:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8911,"name":"uint256","nodeType":"ElementaryTypeName","src":"11494:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8915,"mutability":"mutable","name":"_quorum","nameLocation":"11542:7:37","nodeType":"VariableDeclaration","scope":8936,"src":"11528:21:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":8914,"nodeType":"UserDefinedTypeName","pathNode":{"id":8913,"name":"Quorum","nameLocations":["11528:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"11528:6:37"},"referencedDeclaration":7163,"src":"11528:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"11447:108:37"},"returnParameters":{"id":8919,"nodeType":"ParameterList","parameters":[],"src":"11582:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":8953,"nodeType":"FunctionDefinition","src":"12047:177:37","nodes":[],"body":{"id":8952,"nodeType":"Block","src":"12165:59:37","nodes":[],"statements":[{"expression":{"arguments":[{"baseExpression":{"id":8947,"name":"operatorsPerQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8941,"src":"12195:18:37","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_address_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"address[] memory[] memory"}},"id":8949,"indexExpression":{"hexValue":"30","id":8948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12214:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12195:21:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":8946,"name":"_updateAllOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8974,"src":"12175:19:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":8950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12175:42:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8951,"nodeType":"ExpressionStatement","src":"12175:42:37"}]},"documentation":{"id":8937,"nodeType":"StructuredDocumentation","src":"11755:287:37","text":"@notice Updates the set of operators for the first quorum.\n @param operatorsPerQuorum An array of operator address arrays, one for each quorum.\n @dev This interface maintains compatibility with avs-sync which handles multiquorums while this registry has a single quorum"},"functionSelector":"5140a548","implemented":true,"kind":"function","modifiers":[],"name":"updateOperatorsForQuorum","nameLocation":"12056:24:37","parameters":{"id":8944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8941,"mutability":"mutable","name":"operatorsPerQuorum","nameLocation":"12109:18:37","nodeType":"VariableDeclaration","scope":8953,"src":"12090:37:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_address_$dyn_memory_ptr_$dyn_memory_ptr","typeString":"address[][]"},"typeName":{"baseType":{"baseType":{"id":8938,"name":"address","nodeType":"ElementaryTypeName","src":"12090:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8939,"nodeType":"ArrayTypeName","src":"12090:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"id":8940,"nodeType":"ArrayTypeName","src":"12090:11:37","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_address_$dyn_storage_$dyn_storage_ptr","typeString":"address[][]"}},"visibility":"internal"},{"constant":false,"id":8943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8953,"src":"12137:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8942,"name":"bytes","nodeType":"ElementaryTypeName","src":"12137:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12080:75:37"},"returnParameters":{"id":8945,"nodeType":"ParameterList","parameters":[],"src":"12165:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8974,"nodeType":"FunctionDefinition","src":"12503:219:37","nodes":[],"body":{"id":8973,"nodeType":"Block","src":"12570:152:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8960,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8957,"src":"12584:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":8961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12595:6:37","memberName":"length","nodeType":"MemberAccess","src":"12584:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":8962,"name":"_totalOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9791,"src":"12605:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12584:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8968,"nodeType":"IfStatement","src":"12580:98:37","trueBody":{"id":8967,"nodeType":"Block","src":"12622:56:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8964,"name":"MustUpdateAllOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"12643:22:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":8965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12643:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":8966,"nodeType":"RevertStatement","src":"12636:31:37"}]}},{"expression":{"arguments":[{"id":8970,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8957,"src":"12704:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":8969,"name":"_updateOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9009,"src":"12687:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":8971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12687:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8972,"nodeType":"ExpressionStatement","src":"12687:28:37"}]},"documentation":{"id":8954,"nodeType":"StructuredDocumentation","src":"12230:268:37","text":"@dev Updates the list of operators if the provided list has the correct number of operators.\n Reverts if the provided list of operators does not match the expected total count of operators.\n @param _operators The list of operator addresses to update."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateAllOperators","nameLocation":"12512:19:37","parameters":{"id":8958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8957,"mutability":"mutable","name":"_operators","nameLocation":"12549:10:37","nodeType":"VariableDeclaration","scope":8974,"src":"12532:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8955,"name":"address","nodeType":"ElementaryTypeName","src":"12532:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8956,"nodeType":"ArrayTypeName","src":"12532:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"12531:29:37"},"returnParameters":{"id":8959,"nodeType":"ParameterList","parameters":[],"src":"12570:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9009,"nodeType":"FunctionDefinition","src":"12971:251:37","nodes":[],"body":{"id":9008,"nodeType":"Block","src":"13035:187:37","nodes":[],"statements":[{"assignments":[8982],"declarations":[{"constant":false,"id":8982,"mutability":"mutable","name":"delta","nameLocation":"13052:5:37","nodeType":"VariableDeclaration","scope":9008,"src":"13045:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":8981,"name":"int256","nodeType":"ElementaryTypeName","src":"13045:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":8983,"nodeType":"VariableDeclarationStatement","src":"13045:12:37"},{"body":{"id":9002,"nodeType":"Block","src":"13111:70:37","statements":[{"expression":{"id":9000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8994,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8982,"src":"13125:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"baseExpression":{"id":8996,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8978,"src":"13156:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":8998,"indexExpression":{"id":8997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8985,"src":"13167:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13156:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8995,"name":"_updateOperatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9344,"src":"13134:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_int256_$","typeString":"function (address) returns (int256)"}},"id":8999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13134:36:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13125:45:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9001,"nodeType":"ExpressionStatement","src":"13125:45:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8987,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8985,"src":"13083:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":8988,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8978,"src":"13087:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":8989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13098:6:37","memberName":"length","nodeType":"MemberAccess","src":"13087:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13083:21:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9003,"initializationExpression":{"assignments":[8985],"declarations":[{"constant":false,"id":8985,"mutability":"mutable","name":"i","nameLocation":"13080:1:37","nodeType":"VariableDeclaration","scope":9003,"src":"13072:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8984,"name":"uint256","nodeType":"ElementaryTypeName","src":"13072:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8986,"nodeType":"VariableDeclarationStatement","src":"13072:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":8992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13106:3:37","subExpression":{"id":8991,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8985,"src":"13106:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8993,"nodeType":"ExpressionStatement","src":"13106:3:37"},"nodeType":"ForStatement","src":"13067:114:37"},{"expression":{"arguments":[{"id":9005,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8982,"src":"13209:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":9004,"name":"_updateTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9388,"src":"13190:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (int256) returns (uint256,uint256)"}},"id":9006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13190:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9007,"nodeType":"ExpressionStatement","src":"13190:25:37"}]},"documentation":{"id":8975,"nodeType":"StructuredDocumentation","src":"12728:238:37","text":"@dev Updates the weights for a given list of operator addresses.\n When passing an operator that isn't registered, then 0 is added to their history\n @param _operators An array of addresses for which to update the weights."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateOperators","nameLocation":"12980:16:37","parameters":{"id":8979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8978,"mutability":"mutable","name":"_operators","nameLocation":"13014:10:37","nodeType":"VariableDeclaration","scope":9009,"src":"12997:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8976,"name":"address","nodeType":"ElementaryTypeName","src":"12997:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8977,"nodeType":"ArrayTypeName","src":"12997:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"12996:29:37"},"returnParameters":{"id":8980,"nodeType":"ParameterList","parameters":[],"src":"13035:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9026,"nodeType":"FunctionDefinition","src":"13392:184:37","nodes":[],"body":{"id":9025,"nodeType":"Block","src":"13458:118:37","nodes":[],"statements":[{"expression":{"arguments":[{"id":9018,"name":"_thresholdWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9012,"src":"13497:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9015,"name":"_thresholdWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9818,"src":"13468:23:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13492:4:37","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"13468:28:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":9019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13468:46:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9020,"nodeType":"ExpressionStatement","src":"13468:46:37"},{"eventCall":{"arguments":[{"id":9022,"name":"_thresholdWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9012,"src":"13552:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9021,"name":"ThresholdWeightUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7221,"src":"13529:22:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":9023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13529:40:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9024,"nodeType":"EmitStatement","src":"13524:45:37"}]},"documentation":{"id":9010,"nodeType":"StructuredDocumentation","src":"13228:159:37","text":"@dev Updates the stake threshold weight and records the history.\n @param _thresholdWeight The new threshold weight to set and record in the history."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateStakeThreshold","nameLocation":"13401:21:37","parameters":{"id":9013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9012,"mutability":"mutable","name":"_thresholdWeight","nameLocation":"13431:16:37","nodeType":"VariableDeclaration","scope":9026,"src":"13423:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9011,"name":"uint256","nodeType":"ElementaryTypeName","src":"13423:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13422:26:37"},"returnParameters":{"id":9014,"nodeType":"ParameterList","parameters":[],"src":"13458:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9046,"nodeType":"FunctionDefinition","src":"13756:240:37","nodes":[],"body":{"id":9045,"nodeType":"Block","src":"13822:174:37","nodes":[],"statements":[{"assignments":[9033],"declarations":[{"constant":false,"id":9033,"mutability":"mutable","name":"oldMinimumWeight","nameLocation":"13840:16:37","nodeType":"VariableDeclaration","scope":9045,"src":"13832:24:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9032,"name":"uint256","nodeType":"ElementaryTypeName","src":"13832:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9035,"initialValue":{"id":9034,"name":"_minimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9798,"src":"13859:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13832:41:37"},{"expression":{"id":9038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9036,"name":"_minimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9798,"src":"13883:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9037,"name":"_newMinimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9029,"src":"13900:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13883:34:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9039,"nodeType":"ExpressionStatement","src":"13883:34:37"},{"eventCall":{"arguments":[{"id":9041,"name":"oldMinimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9033,"src":"13953:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9042,"name":"_newMinimumWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9029,"src":"13971:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9040,"name":"MinimumWeightUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7193,"src":"13932:20:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":9043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13932:57:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9044,"nodeType":"EmitStatement","src":"13927:62:37"}]},"documentation":{"id":9027,"nodeType":"StructuredDocumentation","src":"13582:169:37","text":"@dev Updates the weight an operator must have to join the operator set\n @param _newMinimumWeight The new weight an operator must have to join the operator set"},"implemented":true,"kind":"function","modifiers":[],"name":"_updateMinimumWeight","nameLocation":"13765:20:37","parameters":{"id":9030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9029,"mutability":"mutable","name":"_newMinimumWeight","nameLocation":"13794:17:37","nodeType":"VariableDeclaration","scope":9046,"src":"13786:25:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9028,"name":"uint256","nodeType":"ElementaryTypeName","src":"13786:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13785:27:37"},"returnParameters":{"id":9031,"nodeType":"ParameterList","parameters":[],"src":"13822:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9100,"nodeType":"FunctionDefinition","src":"14360:416:37","nodes":[],"body":{"id":9099,"nodeType":"Block","src":"14424:352:37","nodes":[],"statements":[{"condition":{"id":9056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14438:27:37","subExpression":{"arguments":[{"id":9054,"name":"_newQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"14454:10:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}],"id":9053,"name":"_isValidQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9465,"src":"14439:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Quorum_$7163_memory_ptr_$returns$_t_bool_$","typeString":"function (struct Quorum memory) pure returns (bool)"}},"id":9055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14439:26:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9061,"nodeType":"IfStatement","src":"14434:80:37","trueBody":{"id":9060,"nodeType":"Block","src":"14467:47:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9057,"name":"InvalidQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7262,"src":"14488:13:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14488:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9059,"nodeType":"RevertStatement","src":"14481:22:37"}]}},{"assignments":[9064],"declarations":[{"constant":false,"id":9064,"mutability":"mutable","name":"oldQuorum","nameLocation":"14537:9:37","nodeType":"VariableDeclaration","scope":9099,"src":"14523:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":9063,"nodeType":"UserDefinedTypeName","pathNode":{"id":9062,"name":"Quorum","nameLocations":["14523:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"14523:6:37"},"referencedDeclaration":7163,"src":"14523:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"id":9066,"initialValue":{"id":9065,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9795,"src":"14549:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14523:33:37"},{"expression":{"id":9068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"14566:14:37","subExpression":{"id":9067,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9795,"src":"14573:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9069,"nodeType":"ExpressionStatement","src":"14566:14:37"},{"body":{"id":9092,"nodeType":"Block","src":"14645:74:37","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":9086,"name":"_newQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"14683:10:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":9087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14694:10:37","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"14683:21:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":9089,"indexExpression":{"id":9088,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9071,"src":"14705:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14683:24:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}],"expression":{"expression":{"id":9081,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9795,"src":"14659:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum storage ref"}},"id":9084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14667:10:37","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"14659:18:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage","typeString":"struct StrategyParams storage ref[] storage ref"}},"id":9085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14678:4:37","memberName":"push","nodeType":"MemberAccess","src":"14659:23:37","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr_$_t_struct$_StrategyParams_$7158_storage_$returns$__$attached_to$_t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr_$","typeString":"function (struct StrategyParams storage ref[] storage pointer,struct StrategyParams storage ref)"}},"id":9090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14659:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9091,"nodeType":"ExpressionStatement","src":"14659:49:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9073,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9071,"src":"14606:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":9074,"name":"_newQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"14610:10:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":9075,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14621:10:37","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"14610:21:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":9076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14632:6:37","memberName":"length","nodeType":"MemberAccess","src":"14610:28:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14606:32:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9093,"initializationExpression":{"assignments":[9071],"declarations":[{"constant":false,"id":9071,"mutability":"mutable","name":"i","nameLocation":"14603:1:37","nodeType":"VariableDeclaration","scope":9093,"src":"14595:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9070,"name":"uint256","nodeType":"ElementaryTypeName","src":"14595:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9072,"nodeType":"VariableDeclarationStatement","src":"14595:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14640:3:37","subExpression":{"id":9078,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9071,"src":"14640:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9080,"nodeType":"ExpressionStatement","src":"14640:3:37"},"nodeType":"ForStatement","src":"14590:129:37"},{"eventCall":{"arguments":[{"id":9095,"name":"oldQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9064,"src":"14747:9:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},{"id":9096,"name":"_newQuorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9050,"src":"14758:10:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"},{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}],"id":9094,"name":"QuorumUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"14733:13:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Quorum_$7163_memory_ptr_$_t_struct$_Quorum_$7163_memory_ptr_$returns$__$","typeString":"function (struct Quorum memory,struct Quorum memory)"}},"id":9097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14733:36:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9098,"nodeType":"EmitStatement","src":"14728:41:37"}]},"documentation":{"id":9047,"nodeType":"StructuredDocumentation","src":"14002:353:37","text":"@notice Updates the quorum configuration\n @dev Replaces the current quorum configuration with `_newQuorum` if valid.\n Reverts with `InvalidQuorum` if the new quorum configuration is not valid.\n Emits `QuorumUpdated` event with the old and new quorum configurations.\n @param _newQuorum The new quorum configuration to set."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateQuorumConfig","nameLocation":"14369:19:37","parameters":{"id":9051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9050,"mutability":"mutable","name":"_newQuorum","nameLocation":"14403:10:37","nodeType":"VariableDeclaration","scope":9100,"src":"14389:24:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":9049,"nodeType":"UserDefinedTypeName","pathNode":{"id":9048,"name":"Quorum","nameLocations":["14389:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"14389:6:37"},"referencedDeclaration":7163,"src":"14389:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"14388:26:37"},"returnParameters":{"id":9052,"nodeType":"ParameterList","parameters":[],"src":"14424:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9149,"nodeType":"FunctionDefinition","src":"14901:482:37","nodes":[],"body":{"id":9148,"nodeType":"Block","src":"14958:425:37","nodes":[],"statements":[{"condition":{"id":9109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"14972:31:37","subExpression":{"baseExpression":{"id":9106,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"14973:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":9108,"indexExpression":{"id":9107,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9103,"src":"14993:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14973:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9114,"nodeType":"IfStatement","src":"14968:92:37","trueBody":{"id":9113,"nodeType":"Block","src":"15005:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9110,"name":"OperatorNotRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7271,"src":"15026:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15026:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9112,"nodeType":"RevertStatement","src":"15019:30:37"}]}},{"expression":{"id":9116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"15069:17:37","subExpression":{"id":9115,"name":"_totalOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9791,"src":"15069:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9117,"nodeType":"ExpressionStatement","src":"15069:17:37"},{"expression":{"id":9121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"15096:37:37","subExpression":{"baseExpression":{"id":9118,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"15103:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":9120,"indexExpression":{"id":9119,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9103,"src":"15123:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15103:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9122,"nodeType":"ExpressionStatement","src":"15096:37:37"},{"assignments":[9124],"declarations":[{"constant":false,"id":9124,"mutability":"mutable","name":"delta","nameLocation":"15150:5:37","nodeType":"VariableDeclaration","scope":9148,"src":"15143:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9123,"name":"int256","nodeType":"ElementaryTypeName","src":"15143:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9128,"initialValue":{"arguments":[{"id":9126,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9103,"src":"15180:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9125,"name":"_updateOperatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9344,"src":"15158:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_int256_$","typeString":"function (address) returns (int256)"}},"id":9127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15158:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"15143:47:37"},{"expression":{"arguments":[{"id":9130,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9124,"src":"15219:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":9129,"name":"_updateTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9388,"src":"15200:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (int256) returns (uint256,uint256)"}},"id":9131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15200:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9132,"nodeType":"ExpressionStatement","src":"15200:25:37"},{"expression":{"arguments":[{"id":9137,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9103,"src":"15294:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":9134,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9801,"src":"15251:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9133,"name":"IServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7319,"src":"15235:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IServiceManager_$7319_$","typeString":"type(contract IServiceManager)"}},"id":9135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15235:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IServiceManager_$7319","typeString":"contract IServiceManager"}},"id":9136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15268:25:37","memberName":"deregisterOperatorFromAVS","nodeType":"MemberAccess","referencedDeclaration":7345,"src":"15235:58:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":9138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15235:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9139,"nodeType":"ExpressionStatement","src":"15235:69:37"},{"eventCall":{"arguments":[{"id":9141,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9103,"src":"15340:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":9144,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9801,"src":"15359:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15351:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9142,"name":"address","nodeType":"ElementaryTypeName","src":"15351:7:37","typeDescriptions":{}}},"id":9145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15351:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9140,"name":"OperatorDeregistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"15319:20:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":9146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15319:57:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9147,"nodeType":"EmitStatement","src":"15314:62:37"}]},"documentation":{"id":9101,"nodeType":"StructuredDocumentation","src":"14782:114:37","text":"@dev Internal function to deregister an operator\n @param _operator The operator's address to deregister"},"implemented":true,"kind":"function","modifiers":[],"name":"_deregisterOperator","nameLocation":"14910:19:37","parameters":{"id":9104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9103,"mutability":"mutable","name":"_operator","nameLocation":"14938:9:37","nodeType":"VariableDeclaration","scope":9149,"src":"14930:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9102,"name":"address","nodeType":"ElementaryTypeName","src":"14930:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14929:19:37"},"returnParameters":{"id":9105,"nodeType":"ParameterList","parameters":[],"src":"14958:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9206,"nodeType":"FunctionDefinition","src":"15615:717:37","nodes":[],"body":{"id":9205,"nodeType":"Block","src":"15806:526:37","nodes":[],"statements":[{"condition":{"baseExpression":{"id":9160,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"15820:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":9162,"indexExpression":{"id":9161,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"15840:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15820:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9167,"nodeType":"IfStatement","src":"15816:95:37","trueBody":{"id":9166,"nodeType":"Block","src":"15852:59:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9163,"name":"OperatorAlreadyRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7268,"src":"15873:25:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15873:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9165,"nodeType":"RevertStatement","src":"15866:34:37"}]}},{"expression":{"id":9169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15920:17:37","subExpression":{"id":9168,"name":"_totalOperators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9791,"src":"15920:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9170,"nodeType":"ExpressionStatement","src":"15920:17:37"},{"expression":{"id":9175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":9171,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"15947:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":9173,"indexExpression":{"id":9172,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"15967:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15947:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":9174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15980:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"15947:37:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9176,"nodeType":"ExpressionStatement","src":"15947:37:37"},{"assignments":[9178],"declarations":[{"constant":false,"id":9178,"mutability":"mutable","name":"delta","nameLocation":"16001:5:37","nodeType":"VariableDeclaration","scope":9205,"src":"15994:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9177,"name":"int256","nodeType":"ElementaryTypeName","src":"15994:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9182,"initialValue":{"arguments":[{"id":9180,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"16031:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9179,"name":"_updateOperatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9344,"src":"16009:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_int256_$","typeString":"function (address) returns (int256)"}},"id":9181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16009:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"15994:47:37"},{"expression":{"arguments":[{"id":9184,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9178,"src":"16070:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":9183,"name":"_updateTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9388,"src":"16051:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_int256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (int256) returns (uint256,uint256)"}},"id":9185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16051:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9186,"nodeType":"ExpressionStatement","src":"16051:25:37"},{"expression":{"arguments":[{"id":9188,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"16112:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9189,"name":"_signingKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9157,"src":"16123:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9187,"name":"_updateOperatorSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9253,"src":"16086:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":9190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16086:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9191,"nodeType":"ExpressionStatement","src":"16086:49:37"},{"expression":{"arguments":[{"id":9196,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"16213:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9197,"name":"_operatorSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9155,"src":"16236:18:37","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry memory"}],"expression":{"arguments":[{"id":9193,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9801,"src":"16161:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9192,"name":"IServiceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7319,"src":"16145:15:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IServiceManager_$7319_$","typeString":"type(contract IServiceManager)"}},"id":9194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16145:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IServiceManager_$7319","typeString":"contract IServiceManager"}},"id":9195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16178:21:37","memberName":"registerOperatorToAVS","nodeType":"MemberAccess","referencedDeclaration":7339,"src":"16145:54:37","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr_$returns$__$","typeString":"function (address,struct ISignatureUtils.SignatureWithSaltAndExpiry memory) external"}},"id":9198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16145:119:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9199,"nodeType":"ExpressionStatement","src":"16145:119:37"},{"eventCall":{"arguments":[{"id":9201,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9152,"src":"16298:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9202,"name":"_serviceManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9801,"src":"16309:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9200,"name":"OperatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7170,"src":"16279:18:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":9203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16279:46:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9204,"nodeType":"EmitStatement","src":"16274:51:37"}]},"documentation":{"id":9150,"nodeType":"StructuredDocumentation","src":"15389:221:37","text":"@dev registers an operator through a provided signature\n @param _operatorSignature Contains the operator's signature, salt, and expiry\n @param _signingKey The signing key to add to the operator's history"},"implemented":true,"kind":"function","modifiers":[],"name":"_registerOperatorWithSig","nameLocation":"15624:24:37","parameters":{"id":9158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9152,"mutability":"mutable","name":"_operator","nameLocation":"15666:9:37","nodeType":"VariableDeclaration","scope":9206,"src":"15658:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9151,"name":"address","nodeType":"ElementaryTypeName","src":"15658:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9155,"mutability":"mutable","name":"_operatorSignature","nameLocation":"15735:18:37","nodeType":"VariableDeclaration","scope":9206,"src":"15685:68:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_memory_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"},"typeName":{"id":9154,"nodeType":"UserDefinedTypeName","pathNode":{"id":9153,"name":"ISignatureUtils.SignatureWithSaltAndExpiry","nameLocations":["15685:15:37","15701:26:37"],"nodeType":"IdentifierPath","referencedDeclaration":1889,"src":"15685:42:37"},"referencedDeclaration":1889,"src":"15685:42:37","typeDescriptions":{"typeIdentifier":"t_struct$_SignatureWithSaltAndExpiry_$1889_storage_ptr","typeString":"struct ISignatureUtils.SignatureWithSaltAndExpiry"}},"visibility":"internal"},{"constant":false,"id":9157,"mutability":"mutable","name":"_signingKey","nameLocation":"15771:11:37","nodeType":"VariableDeclaration","scope":9206,"src":"15763:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9156,"name":"address","nodeType":"ElementaryTypeName","src":"15763:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15648:140:37"},"returnParameters":{"id":9159,"nodeType":"ParameterList","parameters":[],"src":"15806:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":9253,"nodeType":"FunctionDefinition","src":"16562:535:37","nodes":[],"body":{"id":9252,"nodeType":"Block","src":"16671:426:37","nodes":[],"statements":[{"assignments":[9215],"declarations":[{"constant":false,"id":9215,"mutability":"mutable","name":"oldSigningKey","nameLocation":"16689:13:37","nodeType":"VariableDeclaration","scope":9252,"src":"16681:21:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9214,"name":"address","nodeType":"ElementaryTypeName","src":"16681:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9227,"initialValue":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":9220,"name":"_operatorSigningKeyHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9810,"src":"16734:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9222,"indexExpression":{"id":9221,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9209,"src":"16761:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16734:37:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16772:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"16734:44:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":9224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16734:46:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16726:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":9218,"name":"uint160","nodeType":"ElementaryTypeName","src":"16726:7:37","typeDescriptions":{}}},"id":9225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16726:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":9217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16705:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9216,"name":"address","nodeType":"ElementaryTypeName","src":"16705:7:37","typeDescriptions":{}}},"id":9226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16705:86:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16681:110:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9228,"name":"_newSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9211,"src":"16805:14:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":9229,"name":"oldSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9215,"src":"16823:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16805:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9233,"nodeType":"IfStatement","src":"16801:68:37","trueBody":{"id":9232,"nodeType":"Block","src":"16838:31:37","statements":[{"functionReturnParameters":9213,"id":9231,"nodeType":"Return","src":"16852:7:37"}]}},{"expression":{"arguments":[{"arguments":[{"id":9240,"name":"_newSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9211,"src":"16929:14:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16921:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":9238,"name":"uint160","nodeType":"ElementaryTypeName","src":"16921:7:37","typeDescriptions":{}}},"id":9241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16921:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"expression":{"baseExpression":{"id":9234,"name":"_operatorSigningKeyHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9810,"src":"16878:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9236,"indexExpression":{"id":9235,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9209,"src":"16905:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16878:37:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16916:4:37","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"16878:42:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":9242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16878:67:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9243,"nodeType":"ExpressionStatement","src":"16878:67:37"},{"eventCall":{"arguments":[{"id":9245,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9209,"src":"16990:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":9246,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"17013:5:37","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17019:6:37","memberName":"number","nodeType":"MemberAccess","src":"17013:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9248,"name":"_newSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9211,"src":"17039:14:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9249,"name":"oldSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9215,"src":"17067:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9244,"name":"SigningKeyUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7232,"src":"16960:16:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (address,uint256,address,address)"}},"id":9250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16960:130:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9251,"nodeType":"EmitStatement","src":"16955:135:37"}]},"documentation":{"id":9207,"nodeType":"StructuredDocumentation","src":"16338:219:37","text":"@dev Internal function to update an operator's signing key\n @param _operator The address of the operator to update the signing key for\n @param _newSigningKey The new signing key to set for the operator"},"implemented":true,"kind":"function","modifiers":[],"name":"_updateOperatorSigningKey","nameLocation":"16571:25:37","parameters":{"id":9212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9209,"mutability":"mutable","name":"_operator","nameLocation":"16614:9:37","nodeType":"VariableDeclaration","scope":9253,"src":"16606:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9208,"name":"address","nodeType":"ElementaryTypeName","src":"16606:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9211,"mutability":"mutable","name":"_newSigningKey","nameLocation":"16641:14:37","nodeType":"VariableDeclaration","scope":9253,"src":"16633:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9210,"name":"address","nodeType":"ElementaryTypeName","src":"16633:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16596:65:37"},"returnParameters":{"id":9213,"nodeType":"ParameterList","parameters":[],"src":"16671:0:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9344,"nodeType":"FunctionDefinition","src":"17277:810:37","nodes":[],"body":{"id":9343,"nodeType":"Block","src":"17375:712:37","nodes":[],"statements":[{"assignments":[9262],"declarations":[{"constant":false,"id":9262,"mutability":"mutable","name":"delta","nameLocation":"17392:5:37","nodeType":"VariableDeclaration","scope":9343,"src":"17385:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9261,"name":"int256","nodeType":"ElementaryTypeName","src":"17385:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9263,"nodeType":"VariableDeclarationStatement","src":"17385:12:37"},{"assignments":[9265],"declarations":[{"constant":false,"id":9265,"mutability":"mutable","name":"newWeight","nameLocation":"17415:9:37","nodeType":"VariableDeclaration","scope":9343,"src":"17407:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9264,"name":"uint256","nodeType":"ElementaryTypeName","src":"17407:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9266,"nodeType":"VariableDeclarationStatement","src":"17407:17:37"},{"assignments":[9268],"declarations":[{"constant":false,"id":9268,"mutability":"mutable","name":"oldWeight","nameLocation":"17442:9:37","nodeType":"VariableDeclaration","scope":9343,"src":"17434:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9267,"name":"uint256","nodeType":"ElementaryTypeName","src":"17434:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9274,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":9269,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"17454:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9271,"indexExpression":{"id":9270,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"17477:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17454:33:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17488:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"17454:40:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":9273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17454:42:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17434:62:37"},{"condition":{"id":9278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"17510:31:37","subExpression":{"baseExpression":{"id":9275,"name":"_operatorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9829,"src":"17511:19:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":9277,"indexExpression":{"id":9276,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"17531:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17511:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9333,"nodeType":"Block","src":"17729:261:37","statements":[{"expression":{"id":9305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9301,"name":"newWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9265,"src":"17743:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9303,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"17773:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":9302,"name":"getOperatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8907,"src":"17755:17:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":9304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17755:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17743:40:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9306,"nodeType":"ExpressionStatement","src":"17743:40:37"},{"expression":{"id":9317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9307,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17797:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":9310,"name":"newWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9265,"src":"17812:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17805:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9308,"name":"int256","nodeType":"ElementaryTypeName","src":"17805:6:37","typeDescriptions":{}}},"id":9311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17805:17:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":9314,"name":"oldWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9268,"src":"17832:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17825:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9312,"name":"int256","nodeType":"ElementaryTypeName","src":"17825:6:37","typeDescriptions":{}}},"id":9315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17825:17:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17805:37:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17797:45:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9318,"nodeType":"ExpressionStatement","src":"17797:45:37"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9319,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17860:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":9320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17869:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17860:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9325,"nodeType":"IfStatement","src":"17856:61:37","trueBody":{"id":9324,"nodeType":"Block","src":"17872:45:37","statements":[{"expression":{"id":9322,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17897:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":9260,"id":9323,"nodeType":"Return","src":"17890:12:37"}]}},{"expression":{"arguments":[{"id":9330,"name":"newWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9265,"src":"17969:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":9326,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"17930:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9328,"indexExpression":{"id":9327,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"17953:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17930:33:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17964:4:37","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"17930:38:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":9331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17930:49:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9332,"nodeType":"ExpressionStatement","src":"17930:49:37"}]},"id":9334,"nodeType":"IfStatement","src":"17506:484:37","trueBody":{"id":9300,"nodeType":"Block","src":"17543:180:37","statements":[{"expression":{"id":9284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9279,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17557:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"arguments":[{"id":9282,"name":"oldWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9268,"src":"17573:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17566:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9280,"name":"int256","nodeType":"ElementaryTypeName","src":"17566:6:37","typeDescriptions":{}}},"id":9283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17566:17:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17557:26:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":9285,"nodeType":"ExpressionStatement","src":"17557:26:37"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9286,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17601:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":9287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17610:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17601:10:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9292,"nodeType":"IfStatement","src":"17597:61:37","trueBody":{"id":9291,"nodeType":"Block","src":"17613:45:37","statements":[{"expression":{"id":9289,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"17638:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":9260,"id":9290,"nodeType":"Return","src":"17631:12:37"}]}},{"expression":{"arguments":[{"hexValue":"30","id":9297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17710:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"baseExpression":{"id":9293,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"17671:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9295,"indexExpression":{"id":9294,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"17694:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17671:33:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17705:4:37","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"17671:38:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":9298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17671:41:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9299,"nodeType":"ExpressionStatement","src":"17671:41:37"}]}},{"eventCall":{"arguments":[{"id":9336,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9256,"src":"18026:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9337,"name":"oldWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9268,"src":"18037:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9338,"name":"newWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9265,"src":"18048:9:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9335,"name":"OperatorWeightUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7209,"src":"18004:21:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":9339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18004:54:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9340,"nodeType":"EmitStatement","src":"17999:59:37"},{"expression":{"id":9341,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9262,"src":"18075:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":9260,"id":9342,"nodeType":"Return","src":"18068:12:37"}]},"documentation":{"id":9254,"nodeType":"StructuredDocumentation","src":"17103:169:37","text":"@notice Updates the weight of an operator and returns the previous and current weights.\n @param _operator The address of the operator to update the weight of."},"implemented":true,"kind":"function","modifiers":[],"name":"_updateOperatorWeight","nameLocation":"17286:21:37","parameters":{"id":9257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9256,"mutability":"mutable","name":"_operator","nameLocation":"17325:9:37","nodeType":"VariableDeclaration","scope":9344,"src":"17317:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9255,"name":"address","nodeType":"ElementaryTypeName","src":"17317:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17307:33:37"},"returnParameters":{"id":9260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9344,"src":"17367:6:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9258,"name":"int256","nodeType":"ElementaryTypeName","src":"17367:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17366:8:37"},"scope":9768,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":9388,"nodeType":"FunctionDefinition","src":"18366:403:37","nodes":[],"body":{"id":9387,"nodeType":"Block","src":"18488:281:37","nodes":[],"statements":[{"expression":{"id":9358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9354,"name":"oldTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9350,"src":"18498:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":9355,"name":"_totalWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9814,"src":"18515:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18535:6:37","memberName":"latest","nodeType":"MemberAccess","referencedDeclaration":2589,"src":"18515:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer) view returns (uint256)"}},"id":9357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18515:28:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18498:45:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9359,"nodeType":"ExpressionStatement","src":"18498:45:37"},{"assignments":[9361],"declarations":[{"constant":false,"id":9361,"mutability":"mutable","name":"newWeight","nameLocation":"18560:9:37","nodeType":"VariableDeclaration","scope":9387,"src":"18553:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9360,"name":"int256","nodeType":"ElementaryTypeName","src":"18553:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":9368,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":9367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":9364,"name":"oldTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9350,"src":"18579:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18572:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":9362,"name":"int256","nodeType":"ElementaryTypeName","src":"18572:6:37","typeDescriptions":{}}},"id":9365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18572:22:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":9366,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9347,"src":"18597:5:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18572:30:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"18553:49:37"},{"expression":{"id":9374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9369,"name":"newTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9352,"src":"18612:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9372,"name":"newWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9361,"src":"18637:9:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":9371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18629:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":9370,"name":"uint256","nodeType":"ElementaryTypeName","src":"18629:7:37","typeDescriptions":{}}},"id":9373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18629:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18612:35:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9375,"nodeType":"ExpressionStatement","src":"18612:35:37"},{"expression":{"arguments":[{"id":9379,"name":"newTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9352,"src":"18682:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":9376,"name":"_totalWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9814,"src":"18657:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18677:4:37","memberName":"push","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"18657:24:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) returns (uint256,uint256)"}},"id":9380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18657:40:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":9381,"nodeType":"ExpressionStatement","src":"18657:40:37"},{"eventCall":{"arguments":[{"id":9383,"name":"oldTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9350,"src":"18731:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9384,"name":"newTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9352,"src":"18747:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9382,"name":"TotalWeightUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7216,"src":"18712:18:37","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":9385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18712:50:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9386,"nodeType":"EmitStatement","src":"18707:55:37"}]},"documentation":{"id":9345,"nodeType":"StructuredDocumentation","src":"18093:268:37","text":"@dev Internal function to update the total weight of the stake\n @param delta The change in stake applied last total weight\n @return oldTotalWeight The weight before the update\n @return newTotalWeight The updated weight after applying the delta"},"implemented":true,"kind":"function","modifiers":[],"name":"_updateTotalWeight","nameLocation":"18375:18:37","parameters":{"id":9348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9347,"mutability":"mutable","name":"delta","nameLocation":"18410:5:37","nodeType":"VariableDeclaration","scope":9388,"src":"18403:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":9346,"name":"int256","nodeType":"ElementaryTypeName","src":"18403:6:37","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18393:28:37"},"returnParameters":{"id":9353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9350,"mutability":"mutable","name":"oldTotalWeight","nameLocation":"18448:14:37","nodeType":"VariableDeclaration","scope":9388,"src":"18440:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9349,"name":"uint256","nodeType":"ElementaryTypeName","src":"18440:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9352,"mutability":"mutable","name":"newTotalWeight","nameLocation":"18472:14:37","nodeType":"VariableDeclaration","scope":9388,"src":"18464:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9351,"name":"uint256","nodeType":"ElementaryTypeName","src":"18464:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18439:48:37"},"scope":9768,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9465,"nodeType":"FunctionDefinition","src":"19208:671:37","nodes":[],"body":{"id":9464,"nodeType":"Block","src":"19298:581:37","nodes":[],"statements":[{"assignments":[9401],"declarations":[{"constant":false,"id":9401,"mutability":"mutable","name":"strategies","nameLocation":"19332:10:37","nodeType":"VariableDeclaration","scope":9464,"src":"19308:34:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams[]"},"typeName":{"baseType":{"id":9399,"nodeType":"UserDefinedTypeName","pathNode":{"id":9398,"name":"StrategyParams","nameLocations":["19308:14:37"],"nodeType":"IdentifierPath","referencedDeclaration":7158,"src":"19308:14:37"},"referencedDeclaration":7158,"src":"19308:14:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_storage_ptr","typeString":"struct StrategyParams"}},"id":9400,"nodeType":"ArrayTypeName","src":"19308:16:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_storage_$dyn_storage_ptr","typeString":"struct StrategyParams[]"}},"visibility":"internal"}],"id":9404,"initialValue":{"expression":{"id":9402,"name":"_quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9392,"src":"19345:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum memory"}},"id":9403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19353:10:37","memberName":"strategies","nodeType":"MemberAccess","referencedDeclaration":7162,"src":"19345:18:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"19308:55:37"},{"assignments":[9406],"declarations":[{"constant":false,"id":9406,"mutability":"mutable","name":"lastStrategy","nameLocation":"19381:12:37","nodeType":"VariableDeclaration","scope":9464,"src":"19373:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9405,"name":"address","nodeType":"ElementaryTypeName","src":"19373:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9407,"nodeType":"VariableDeclarationStatement","src":"19373:20:37"},{"assignments":[9409],"declarations":[{"constant":false,"id":9409,"mutability":"mutable","name":"currentStrategy","nameLocation":"19411:15:37","nodeType":"VariableDeclaration","scope":9464,"src":"19403:23:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9408,"name":"address","nodeType":"ElementaryTypeName","src":"19403:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9410,"nodeType":"VariableDeclarationStatement","src":"19403:23:37"},{"assignments":[9412],"declarations":[{"constant":false,"id":9412,"mutability":"mutable","name":"totalMultiplier","nameLocation":"19444:15:37","nodeType":"VariableDeclaration","scope":9464,"src":"19436:23:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9411,"name":"uint256","nodeType":"ElementaryTypeName","src":"19436:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9413,"nodeType":"VariableDeclarationStatement","src":"19436:23:37"},{"body":{"id":9452,"nodeType":"Block","src":"19513:244:37","statements":[{"expression":{"id":9432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9424,"name":"currentStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9409,"src":"19527:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":9427,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9401,"src":"19553:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":9429,"indexExpression":{"id":9428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9415,"src":"19564:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19553:13:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":9430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19567:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":7155,"src":"19553:22:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$2005","typeString":"contract IStrategy"}],"id":9426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19545:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9425,"name":"address","nodeType":"ElementaryTypeName","src":"19545:7:37","typeDescriptions":{}}},"id":9431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19545:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19527:49:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9433,"nodeType":"ExpressionStatement","src":"19527:49:37"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9434,"name":"lastStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9406,"src":"19594:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":9435,"name":"currentStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9409,"src":"19610:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19594:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9440,"nodeType":"IfStatement","src":"19590:55:37","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9437,"name":"NotSorted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7265,"src":"19634:9:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19634:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9439,"nodeType":"RevertStatement","src":"19627:18:37"}},{"expression":{"id":9443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9441,"name":"lastStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9406,"src":"19659:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9442,"name":"currentStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9409,"src":"19674:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19659:30:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9444,"nodeType":"ExpressionStatement","src":"19659:30:37"},{"expression":{"id":9450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9445,"name":"totalMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9412,"src":"19703:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"id":9446,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9401,"src":"19722:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":9448,"indexExpression":{"id":9447,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9415,"src":"19733:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19722:13:37","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyParams_$7158_memory_ptr","typeString":"struct StrategyParams memory"}},"id":9449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19736:10:37","memberName":"multiplier","nodeType":"MemberAccess","referencedDeclaration":7157,"src":"19722:24:37","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"19703:43:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9451,"nodeType":"ExpressionStatement","src":"19703:43:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9415,"src":"19485:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":9418,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9401,"src":"19489:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StrategyParams_$7158_memory_ptr_$dyn_memory_ptr","typeString":"struct StrategyParams memory[] memory"}},"id":9419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19500:6:37","memberName":"length","nodeType":"MemberAccess","src":"19489:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19485:21:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9453,"initializationExpression":{"assignments":[9415],"declarations":[{"constant":false,"id":9415,"mutability":"mutable","name":"i","nameLocation":"19482:1:37","nodeType":"VariableDeclaration","scope":9453,"src":"19474:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9414,"name":"uint256","nodeType":"ElementaryTypeName","src":"19474:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9416,"nodeType":"VariableDeclarationStatement","src":"19474:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19508:3:37","subExpression":{"id":9421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9415,"src":"19508:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9423,"nodeType":"ExpressionStatement","src":"19508:3:37"},"nodeType":"ForStatement","src":"19469:288:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9454,"name":"totalMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9412,"src":"19770:15:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":9455,"name":"BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9788,"src":"19789:3:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19770:22:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":9462,"nodeType":"Block","src":"19837:36:37","statements":[{"expression":{"hexValue":"74727565","id":9460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19858:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":9396,"id":9461,"nodeType":"Return","src":"19851:11:37"}]},"id":9463,"nodeType":"IfStatement","src":"19766:107:37","trueBody":{"id":9459,"nodeType":"Block","src":"19794:37:37","statements":[{"expression":{"hexValue":"66616c7365","id":9457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19815:5:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":9396,"id":9458,"nodeType":"Return","src":"19808:12:37"}]}}]},"documentation":{"id":9389,"nodeType":"StructuredDocumentation","src":"18775:428:37","text":" @dev Verifies that a specified quorum configuration is valid. A valid quorum has:\n      1. Weights that sum to exactly 10,000 basis points, ensuring proportional representation.\n      2. Unique strategies without duplicates to maintain quorum integrity.\n @param _quorum The quorum configuration to be validated.\n @return bool True if the quorum configuration is valid, otherwise false."},"implemented":true,"kind":"function","modifiers":[],"name":"_isValidQuorum","nameLocation":"19217:14:37","parameters":{"id":9393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9392,"mutability":"mutable","name":"_quorum","nameLocation":"19255:7:37","nodeType":"VariableDeclaration","scope":9465,"src":"19241:21:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_memory_ptr","typeString":"struct Quorum"},"typeName":{"id":9391,"nodeType":"UserDefinedTypeName","pathNode":{"id":9390,"name":"Quorum","nameLocations":["19241:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"19241:6:37"},"referencedDeclaration":7163,"src":"19241:6:37","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"}],"src":"19231:37:37"},"returnParameters":{"id":9396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9465,"src":"19292:4:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":9394,"name":"bool","nodeType":"ElementaryTypeName","src":"19292:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19291:6:37"},"scope":9768,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":9560,"nodeType":"FunctionDefinition","src":"20370:1034:37","nodes":[],"body":{"id":9559,"nodeType":"Block","src":"20548:856:37","nodes":[],"statements":[{"assignments":[9480],"declarations":[{"constant":false,"id":9480,"mutability":"mutable","name":"signersLength","nameLocation":"20566:13:37","nodeType":"VariableDeclaration","scope":9559,"src":"20558:21:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9479,"name":"uint256","nodeType":"ElementaryTypeName","src":"20558:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9483,"initialValue":{"expression":{"id":9481,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9471,"src":"20582:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":9482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20593:6:37","memberName":"length","nodeType":"MemberAccess","src":"20582:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20558:41:37"},{"assignments":[9485],"declarations":[{"constant":false,"id":9485,"mutability":"mutable","name":"currentOperator","nameLocation":"20617:15:37","nodeType":"VariableDeclaration","scope":9559,"src":"20609:23:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9484,"name":"address","nodeType":"ElementaryTypeName","src":"20609:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9486,"nodeType":"VariableDeclarationStatement","src":"20609:23:37"},{"assignments":[9488],"declarations":[{"constant":false,"id":9488,"mutability":"mutable","name":"lastOperator","nameLocation":"20650:12:37","nodeType":"VariableDeclaration","scope":9559,"src":"20642:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9487,"name":"address","nodeType":"ElementaryTypeName","src":"20642:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9489,"nodeType":"VariableDeclarationStatement","src":"20642:20:37"},{"assignments":[9491],"declarations":[{"constant":false,"id":9491,"mutability":"mutable","name":"signer","nameLocation":"20680:6:37","nodeType":"VariableDeclaration","scope":9559,"src":"20672:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9490,"name":"address","nodeType":"ElementaryTypeName","src":"20672:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":9492,"nodeType":"VariableDeclarationStatement","src":"20672:14:37"},{"assignments":[9494],"declarations":[{"constant":false,"id":9494,"mutability":"mutable","name":"signedWeight","nameLocation":"20704:12:37","nodeType":"VariableDeclaration","scope":9559,"src":"20696:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9493,"name":"uint256","nodeType":"ElementaryTypeName","src":"20696:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9495,"nodeType":"VariableDeclarationStatement","src":"20696:20:37"},{"expression":{"arguments":[{"id":9497,"name":"signersLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9480,"src":"20753:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":9498,"name":"_signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9474,"src":"20768:11:37","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":9499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20780:6:37","memberName":"length","nodeType":"MemberAccess","src":"20768:18:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9496,"name":"_validateSignaturesLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9585,"src":"20727:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":9500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20727:60:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9501,"nodeType":"ExpressionStatement","src":"20727:60:37"},{"body":{"id":9552,"nodeType":"Block","src":"20837:496:37","statements":[{"expression":{"id":9515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9511,"name":"currentOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9485,"src":"20851:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":9512,"name":"_operators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9471,"src":"20869:10:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":9514,"indexExpression":{"id":9513,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"20880:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20869:13:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20851:31:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9516,"nodeType":"ExpressionStatement","src":"20851:31:37"},{"expression":{"id":9522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9517,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9491,"src":"20896:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":9519,"name":"currentOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9485,"src":"20928:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9520,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9476,"src":"20945:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9518,"name":"_getOperatorSigningKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9657,"src":"20905:22:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint32_$returns$_t_address_$","typeString":"function (address,uint32) view returns (address)"}},"id":9521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20905:56:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20896:65:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9523,"nodeType":"ExpressionStatement","src":"20896:65:37"},{"expression":{"arguments":[{"id":9525,"name":"lastOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9488,"src":"20999:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9526,"name":"currentOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9485,"src":"21013:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":9524,"name":"_validateSortedSigners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9602,"src":"20976:22:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":9527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20976:53:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9528,"nodeType":"ExpressionStatement","src":"20976:53:37"},{"expression":{"arguments":[{"id":9530,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9491,"src":"21062:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9531,"name":"_dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9468,"src":"21070:9:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":9532,"name":"_signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9474,"src":"21081:11:37","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":9534,"indexExpression":{"id":9533,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"21093:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21081:14:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":9529,"name":"_validateSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9624,"src":"21043:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory) view"}},"id":9535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21043:53:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9536,"nodeType":"ExpressionStatement","src":"21043:53:37"},{"expression":{"id":9539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9537,"name":"lastOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9488,"src":"21111:12:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9538,"name":"currentOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9485,"src":"21126:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21111:30:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9540,"nodeType":"ExpressionStatement","src":"21111:30:37"},{"assignments":[9542],"declarations":[{"constant":false,"id":9542,"mutability":"mutable","name":"operatorWeight","nameLocation":"21163:14:37","nodeType":"VariableDeclaration","scope":9552,"src":"21155:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9541,"name":"uint256","nodeType":"ElementaryTypeName","src":"21155:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9547,"initialValue":{"arguments":[{"id":9544,"name":"currentOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9485,"src":"21216:15:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":9545,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9476,"src":"21249:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9543,"name":"_getOperatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9684,"src":"21180:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint32_$returns$_t_uint256_$","typeString":"function (address,uint32) view returns (uint256)"}},"id":9546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21180:98:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21155:123:37"},{"expression":{"id":9550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9548,"name":"signedWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9494,"src":"21292:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":9549,"name":"operatorWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9542,"src":"21308:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21292:30:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9551,"nodeType":"ExpressionStatement","src":"21292:30:37"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9505,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"20813:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":9506,"name":"signersLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9480,"src":"20817:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20813:17:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9553,"initializationExpression":{"assignments":[9503],"declarations":[{"constant":false,"id":9503,"mutability":"mutable","name":"i","nameLocation":"20810:1:37","nodeType":"VariableDeclaration","scope":9553,"src":"20802:9:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9502,"name":"uint256","nodeType":"ElementaryTypeName","src":"20802:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9504,"nodeType":"VariableDeclarationStatement","src":"20802:9:37"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":9509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"20832:3:37","subExpression":{"id":9508,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9503,"src":"20832:1:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9510,"nodeType":"ExpressionStatement","src":"20832:3:37"},"nodeType":"ForStatement","src":"20797:536:37"},{"expression":{"arguments":[{"id":9555,"name":"signedWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9494,"src":"21367:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":9556,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9476,"src":"21381:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9554,"name":"_validateThresholdStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9767,"src":"21343:23:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint32_$returns$__$","typeString":"function (uint256,uint32) view"}},"id":9557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21343:54:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":9558,"nodeType":"ExpressionStatement","src":"21343:54:37"}]},"documentation":{"id":9466,"nodeType":"StructuredDocumentation","src":"19885:480:37","text":" @notice Common logic to verify a batch of ECDSA signatures against a hash, using either last stake weight or at a specific block.\n @param _dataHash The hash of the data the signers endorsed.\n @param _operators A collection of addresses that endorsed the data hash.\n @param _signatures A collection of signatures matching the signers.\n @param _referenceBlock The block number for evaluating stake weight; use max uint32 for latest weight."},"implemented":true,"kind":"function","modifiers":[],"name":"_checkSignatures","nameLocation":"20379:16:37","parameters":{"id":9477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9468,"mutability":"mutable","name":"_dataHash","nameLocation":"20413:9:37","nodeType":"VariableDeclaration","scope":9560,"src":"20405:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20405:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":9471,"mutability":"mutable","name":"_operators","nameLocation":"20449:10:37","nodeType":"VariableDeclaration","scope":9560,"src":"20432:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":9469,"name":"address","nodeType":"ElementaryTypeName","src":"20432:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9470,"nodeType":"ArrayTypeName","src":"20432:9:37","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":9474,"mutability":"mutable","name":"_signatures","nameLocation":"20484:11:37","nodeType":"VariableDeclaration","scope":9560,"src":"20469:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":9472,"name":"bytes","nodeType":"ElementaryTypeName","src":"20469:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":9473,"nodeType":"ArrayTypeName","src":"20469:7:37","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":9476,"mutability":"mutable","name":"_referenceBlock","nameLocation":"20512:15:37","nodeType":"VariableDeclaration","scope":9560,"src":"20505:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9475,"name":"uint32","nodeType":"ElementaryTypeName","src":"20505:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"20395:138:37"},"returnParameters":{"id":9478,"nodeType":"ParameterList","parameters":[],"src":"20548:0:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9585,"nodeType":"FunctionDefinition","src":"21629:308:37","nodes":[],"body":{"id":9584,"nodeType":"Block","src":"21751:186:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9568,"name":"_signersLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9563,"src":"21765:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":9569,"name":"_signaturesLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9565,"src":"21783:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21765:35:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9575,"nodeType":"IfStatement","src":"21761:89:37","trueBody":{"id":9574,"nodeType":"Block","src":"21802:48:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9571,"name":"LengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7235,"src":"21823:14:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21823:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9573,"nodeType":"RevertStatement","src":"21816:23:37"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9576,"name":"_signersLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9563,"src":"21863:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":9577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21881:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21863:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9583,"nodeType":"IfStatement","src":"21859:72:37","trueBody":{"id":9582,"nodeType":"Block","src":"21884:47:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9579,"name":"InvalidLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7238,"src":"21905:13:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21905:15:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9581,"nodeType":"RevertStatement","src":"21898:22:37"}]}}]},"documentation":{"id":9561,"nodeType":"StructuredDocumentation","src":"21410:214:37","text":"@notice Validates that the number of signers equals the number of signatures, and neither is zero.\n @param _signersLength The number of signers.\n @param _signaturesLength The number of signatures."},"implemented":true,"kind":"function","modifiers":[],"name":"_validateSignaturesLength","nameLocation":"21638:25:37","parameters":{"id":9566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9563,"mutability":"mutable","name":"_signersLength","nameLocation":"21681:14:37","nodeType":"VariableDeclaration","scope":9585,"src":"21673:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9562,"name":"uint256","nodeType":"ElementaryTypeName","src":"21673:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9565,"mutability":"mutable","name":"_signaturesLength","nameLocation":"21713:17:37","nodeType":"VariableDeclaration","scope":9585,"src":"21705:25:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9564,"name":"uint256","nodeType":"ElementaryTypeName","src":"21705:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21663:73:37"},"returnParameters":{"id":9567,"nodeType":"ParameterList","parameters":[],"src":"21751:0:37"},"scope":9768,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":9602,"nodeType":"FunctionDefinition","src":"22146:207:37","nodes":[],"body":{"id":9601,"nodeType":"Block","src":"22259:94:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":9595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9593,"name":"_lastSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9588,"src":"22273:11:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":9594,"name":"_currentSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9590,"src":"22288:14:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22273:29:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9600,"nodeType":"IfStatement","src":"22269:78:37","trueBody":{"id":9599,"nodeType":"Block","src":"22304:43:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9596,"name":"NotSorted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7265,"src":"22325:9:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22325:11:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9598,"nodeType":"RevertStatement","src":"22318:18:37"}]}}]},"documentation":{"id":9586,"nodeType":"StructuredDocumentation","src":"21943:198:37","text":"@notice Ensures that signers are sorted in ascending order by address.\n @param _lastSigner The address of the last signer.\n @param _currentSigner The address of the current signer."},"implemented":true,"kind":"function","modifiers":[],"name":"_validateSortedSigners","nameLocation":"22155:22:37","parameters":{"id":9591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9588,"mutability":"mutable","name":"_lastSigner","nameLocation":"22195:11:37","nodeType":"VariableDeclaration","scope":9602,"src":"22187:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9587,"name":"address","nodeType":"ElementaryTypeName","src":"22187:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9590,"mutability":"mutable","name":"_currentSigner","nameLocation":"22224:14:37","nodeType":"VariableDeclaration","scope":9602,"src":"22216:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9589,"name":"address","nodeType":"ElementaryTypeName","src":"22216:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22177:67:37"},"returnParameters":{"id":9592,"nodeType":"ParameterList","parameters":[],"src":"22259:0:37"},"scope":9768,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":9624,"nodeType":"FunctionDefinition","src":"22624:256:37","nodes":[],"body":{"id":9623,"nodeType":"Block","src":"22757:123:37","nodes":[],"statements":[{"condition":{"id":9617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"22771:51:37","subExpression":{"arguments":[{"id":9614,"name":"_dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9607,"src":"22800:9:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":9615,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9609,"src":"22811:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":9612,"name":"_signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9605,"src":"22772:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":9613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22780:19:37","memberName":"isValidSignatureNow","nodeType":"MemberAccess","referencedDeclaration":3533,"src":"22772:27:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address,bytes32,bytes memory) view returns (bool)"}},"id":9616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22772:50:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9622,"nodeType":"IfStatement","src":"22767:107:37","trueBody":{"id":9621,"nodeType":"Block","src":"22824:50:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9618,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7241,"src":"22845:16:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22845:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9620,"nodeType":"RevertStatement","src":"22838:25:37"}]}}]},"documentation":{"id":9603,"nodeType":"StructuredDocumentation","src":"22359:260:37","text":"@notice Validates a given signature against the signer's address and data hash.\n @param _signer The address of the signer to validate.\n @param _dataHash The hash of the data that is signed.\n @param _signature The signature to validate."},"implemented":true,"kind":"function","modifiers":[],"name":"_validateSignature","nameLocation":"22633:18:37","parameters":{"id":9610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9605,"mutability":"mutable","name":"_signer","nameLocation":"22669:7:37","nodeType":"VariableDeclaration","scope":9624,"src":"22661:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9604,"name":"address","nodeType":"ElementaryTypeName","src":"22661:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9607,"mutability":"mutable","name":"_dataHash","nameLocation":"22694:9:37","nodeType":"VariableDeclaration","scope":9624,"src":"22686:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22686:7:37","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":9609,"mutability":"mutable","name":"_signature","nameLocation":"22726:10:37","nodeType":"VariableDeclaration","scope":9624,"src":"22713:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":9608,"name":"bytes","nodeType":"ElementaryTypeName","src":"22713:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"22651:91:37"},"returnParameters":{"id":9611,"nodeType":"ParameterList","parameters":[],"src":"22757:0:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9657,"nodeType":"FunctionDefinition","src":"23255:463:37","nodes":[],"body":{"id":9656,"nodeType":"Block","src":"23384:334:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9634,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9629,"src":"23398:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":9635,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"23417:5:37","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23423:6:37","memberName":"number","nodeType":"MemberAccess","src":"23417:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23398:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9642,"nodeType":"IfStatement","src":"23394:92:37","trueBody":{"id":9641,"nodeType":"Block","src":"23431:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9638,"name":"InvalidReferenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7250,"src":"23452:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23452:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9640,"nodeType":"RevertStatement","src":"23445:30:37"}]}},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":9651,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9629,"src":"23642:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"baseExpression":{"id":9647,"name":"_operatorSigningKeyHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9810,"src":"23568:26:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9649,"indexExpression":{"id":9648,"name":"_operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9627,"src":"23595:9:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23568:37:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23606:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"23568:48:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":9652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23568:111:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":9646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23539:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":9645,"name":"uint160","nodeType":"ElementaryTypeName","src":"23539:7:37","typeDescriptions":{}}},"id":9653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23539:158:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":9644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23514:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9643,"name":"address","nodeType":"ElementaryTypeName","src":"23514:7:37","typeDescriptions":{}}},"id":9654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23514:197:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":9633,"id":9655,"nodeType":"Return","src":"23495:216:37"}]},"documentation":{"id":9625,"nodeType":"StructuredDocumentation","src":"22886:364:37","text":"@notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n @param _operator The operator to query their signing key history for\n @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n @return The weight of the operator."},"implemented":true,"kind":"function","modifiers":[],"name":"_getOperatorSigningKey","nameLocation":"23264:22:37","parameters":{"id":9630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9627,"mutability":"mutable","name":"_operator","nameLocation":"23304:9:37","nodeType":"VariableDeclaration","scope":9657,"src":"23296:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9626,"name":"address","nodeType":"ElementaryTypeName","src":"23296:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9629,"mutability":"mutable","name":"_referenceBlock","nameLocation":"23330:15:37","nodeType":"VariableDeclaration","scope":9657,"src":"23323:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9628,"name":"uint32","nodeType":"ElementaryTypeName","src":"23323:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"23286:65:37"},"returnParameters":{"id":9633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9657,"src":"23375:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9631,"name":"address","nodeType":"ElementaryTypeName","src":"23375:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23374:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9684,"nodeType":"FunctionDefinition","src":"24091:307:37","nodes":[],"body":{"id":9683,"nodeType":"Block","src":"24214:184:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9667,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9662,"src":"24228:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":9668,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"24247:5:37","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24253:6:37","memberName":"number","nodeType":"MemberAccess","src":"24247:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24228:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9675,"nodeType":"IfStatement","src":"24224:92:37","trueBody":{"id":9674,"nodeType":"Block","src":"24261:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9671,"name":"InvalidReferenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7250,"src":"24282:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24282:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9673,"nodeType":"RevertStatement","src":"24275:30:37"}]}},{"expression":{"arguments":[{"id":9680,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9662,"src":"24375:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"baseExpression":{"id":9676,"name":"_operatorWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9824,"src":"24332:22:37","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History storage ref)"}},"id":9678,"indexExpression":{"id":9677,"name":"_signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9660,"src":"24355:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24332:31:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9679,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24364:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"24332:42:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":9681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24332:59:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9666,"id":9682,"nodeType":"Return","src":"24325:66:37"}]},"documentation":{"id":9658,"nodeType":"StructuredDocumentation","src":"23724:362:37","text":"@notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n @param _signer The address of the signer whose weight is returned.\n @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n @return The weight of the operator."},"implemented":true,"kind":"function","modifiers":[],"name":"_getOperatorWeight","nameLocation":"24100:18:37","parameters":{"id":9663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9660,"mutability":"mutable","name":"_signer","nameLocation":"24136:7:37","nodeType":"VariableDeclaration","scope":9684,"src":"24128:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9659,"name":"address","nodeType":"ElementaryTypeName","src":"24128:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9662,"mutability":"mutable","name":"_referenceBlock","nameLocation":"24160:15:37","nodeType":"VariableDeclaration","scope":9684,"src":"24153:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9661,"name":"uint32","nodeType":"ElementaryTypeName","src":"24153:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"24118:63:37"},"returnParameters":{"id":9666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9684,"src":"24205:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9664,"name":"uint256","nodeType":"ElementaryTypeName","src":"24205:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24204:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9707,"nodeType":"FunctionDefinition","src":"24817:267:37","nodes":[],"body":{"id":9706,"nodeType":"Block","src":"24912:172:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9692,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9687,"src":"24926:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":9693,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"24945:5:37","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24951:6:37","memberName":"number","nodeType":"MemberAccess","src":"24945:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24926:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9700,"nodeType":"IfStatement","src":"24922:92:37","trueBody":{"id":9699,"nodeType":"Block","src":"24959:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9696,"name":"InvalidReferenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7250,"src":"24980:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24980:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9698,"nodeType":"RevertStatement","src":"24973:30:37"}]}},{"expression":{"arguments":[{"id":9703,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9687,"src":"25061:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":9701,"name":"_totalWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9814,"src":"25030:19:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25050:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"25030:30:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":9704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25030:47:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9691,"id":9705,"nodeType":"Return","src":"25023:54:37"}]},"documentation":{"id":9685,"nodeType":"StructuredDocumentation","src":"24404:408:37","text":"@notice Retrieve the total stake weight at a specific block or the latest if not specified.\n @dev If the `_referenceBlock` is the maximum value for uint32, the latest total weight is returned.\n @param _referenceBlock The block number to retrieve the total stake weight from.\n @return The total stake weight at the given block or the latest if the given block is the max uint32 value."},"implemented":true,"kind":"function","modifiers":[],"name":"_getTotalWeight","nameLocation":"24826:15:37","parameters":{"id":9688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9687,"mutability":"mutable","name":"_referenceBlock","nameLocation":"24858:15:37","nodeType":"VariableDeclaration","scope":9707,"src":"24851:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9686,"name":"uint32","nodeType":"ElementaryTypeName","src":"24851:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"24841:38:37"},"returnParameters":{"id":9691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9707,"src":"24903:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9689,"name":"uint256","nodeType":"ElementaryTypeName","src":"24903:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24902:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9730,"nodeType":"FunctionDefinition","src":"25409:274:37","nodes":[],"body":{"id":9729,"nodeType":"Block","src":"25507:176:37","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9715,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9710,"src":"25521:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":9716,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"25540:5:37","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":9717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25546:6:37","memberName":"number","nodeType":"MemberAccess","src":"25540:12:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25521:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9723,"nodeType":"IfStatement","src":"25517:92:37","trueBody":{"id":9722,"nodeType":"Block","src":"25554:55:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9719,"name":"InvalidReferenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7250,"src":"25575:21:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25575:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9721,"nodeType":"RevertStatement","src":"25568:30:37"}]}},{"expression":{"arguments":[{"id":9726,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9710,"src":"25660:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":9724,"name":"_thresholdWeightHistory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9818,"src":"25625:23:37","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History storage ref"}},"id":9725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25649:10:37","memberName":"getAtBlock","nodeType":"MemberAccess","referencedDeclaration":2665,"src":"25625:34:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_History_$2560_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_struct$_History_$2560_storage_ptr_$","typeString":"function (struct CheckpointsUpgradeable.History storage pointer,uint256) view returns (uint256)"}},"id":9727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25625:51:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":9714,"id":9728,"nodeType":"Return","src":"25618:58:37"}]},"documentation":{"id":9708,"nodeType":"StructuredDocumentation","src":"25090:314:37","text":"@notice Retrieves the threshold stake for a given reference block.\n @param _referenceBlock The block number to query the threshold stake for.\n If set to the maximum uint32 value, it retrieves the latest threshold stake.\n @return The threshold stake in basis points for the reference block."},"implemented":true,"kind":"function","modifiers":[],"name":"_getThresholdStake","nameLocation":"25418:18:37","parameters":{"id":9711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9710,"mutability":"mutable","name":"_referenceBlock","nameLocation":"25453:15:37","nodeType":"VariableDeclaration","scope":9730,"src":"25446:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9709,"name":"uint32","nodeType":"ElementaryTypeName","src":"25446:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"25436:38:37"},"returnParameters":{"id":9714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":9730,"src":"25498:7:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9712,"name":"uint256","nodeType":"ElementaryTypeName","src":"25498:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25497:9:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":9767,"nodeType":"FunctionDefinition","src":"25979:454:37","nodes":[],"body":{"id":9766,"nodeType":"Block","src":"26095:338:37","nodes":[],"statements":[{"assignments":[9739],"declarations":[{"constant":false,"id":9739,"mutability":"mutable","name":"totalWeight","nameLocation":"26113:11:37","nodeType":"VariableDeclaration","scope":9766,"src":"26105:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9738,"name":"uint256","nodeType":"ElementaryTypeName","src":"26105:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9743,"initialValue":{"arguments":[{"id":9741,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9735,"src":"26143:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9740,"name":"_getTotalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9707,"src":"26127:15:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_uint256_$","typeString":"function (uint32) view returns (uint256)"}},"id":9742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26127:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26105:54:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9744,"name":"_signedWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9733,"src":"26173:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":9745,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9739,"src":"26189:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26173:27:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9751,"nodeType":"IfStatement","src":"26169:86:37","trueBody":{"id":9750,"nodeType":"Block","src":"26202:53:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9747,"name":"InvalidSignedWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7253,"src":"26223:19:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26223:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9749,"nodeType":"RevertStatement","src":"26216:28:37"}]}},{"assignments":[9753],"declarations":[{"constant":false,"id":9753,"mutability":"mutable","name":"thresholdStake","nameLocation":"26272:14:37","nodeType":"VariableDeclaration","scope":9766,"src":"26264:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9752,"name":"uint256","nodeType":"ElementaryTypeName","src":"26264:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":9757,"initialValue":{"arguments":[{"id":9755,"name":"_referenceBlock","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9735,"src":"26308:15:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":9754,"name":"_getThresholdStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9730,"src":"26289:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_uint256_$","typeString":"function (uint32) view returns (uint256)"}},"id":9756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26289:35:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26264:60:37"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":9760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":9758,"name":"thresholdStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9753,"src":"26338:14:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":9759,"name":"_signedWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9733,"src":"26355:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26338:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":9765,"nodeType":"IfStatement","src":"26334:93:37","trueBody":{"id":9764,"nodeType":"Block","src":"26370:57:37","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":9761,"name":"InsufficientSignedStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7256,"src":"26391:23:37","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":9762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26391:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":9763,"nodeType":"RevertStatement","src":"26384:32:37"}]}}]},"documentation":{"id":9731,"nodeType":"StructuredDocumentation","src":"25689:285:37","text":"@notice Validates that the cumulative stake of signed messages meets or exceeds the required threshold.\n @param _signedWeight The cumulative weight of the signers that have signed the message.\n @param _referenceBlock The block number to verify the stake threshold for"},"implemented":true,"kind":"function","modifiers":[],"name":"_validateThresholdStake","nameLocation":"25988:23:37","parameters":{"id":9736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9733,"mutability":"mutable","name":"_signedWeight","nameLocation":"26029:13:37","nodeType":"VariableDeclaration","scope":9767,"src":"26021:21:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9732,"name":"uint256","nodeType":"ElementaryTypeName","src":"26021:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":9735,"mutability":"mutable","name":"_referenceBlock","nameLocation":"26059:15:37","nodeType":"VariableDeclaration","scope":9767,"src":"26052:22:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":9734,"name":"uint32","nodeType":"ElementaryTypeName","src":"26052:6:37","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"26011:69:37"},"returnParameters":{"id":9737,"nodeType":"ParameterList","parameters":[],"src":"26095:0:37"},"scope":9768,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":8439,"name":"IERC1271Upgradeable","nameLocations":["1157:19:37"],"nodeType":"IdentifierPath","referencedDeclaration":2151,"src":"1157:19:37"},"id":8440,"nodeType":"InheritanceSpecifier","src":"1157:19:37"},{"baseName":{"id":8441,"name":"OwnableUpgradeable","nameLocations":["1182:18:37"],"nodeType":"IdentifierPath","referencedDeclaration":2137,"src":"1182:18:37"},"id":8442,"nodeType":"InheritanceSpecifier","src":"1182:18:37"},{"baseName":{"id":8443,"name":"ECDSAStakeRegistryStorage","nameLocations":["1206:25:37"],"nodeType":"IdentifierPath","referencedDeclaration":9847,"src":"1206:25:37"},"id":8444,"nodeType":"InheritanceSpecifier","src":"1206:25:37"}],"canonicalName":"ECDSAStakeRegistry","contractDependencies":[],"contractKind":"contract","documentation":{"id":8438,"nodeType":"StructuredDocumentation","src":"956:166:37","text":"@title ECDSA Stake Registry\n @dev THIS CONTRACT IS NOT AUDITED\n @notice Manages operator registration and quorum updates for an AVS using ECDSA signatures."},"fullyImplemented":true,"linearizedBaseContracts":[9768,9847,7272,2137,2821,2302,2151],"name":"ECDSAStakeRegistry","nameLocation":"1131:18:37","scope":9769,"usedErrors":[7235,7238,7241,7244,7247,7250,7253,7256,7259,7262,7265,7268,7271],"usedEvents":[2022,2166,7170,7177,7186,7193,7200,7209,7216,7221,7232]}],"license":"MIT"}},"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol":{"id":38,"ast":{"absolutePath":"lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol","id":9848,"exportedSymbols":{"CheckpointsUpgradeable":[2779],"ECDSAStakeRegistryEventsAndErrors":[7272],"ECDSAStakeRegistryStorage":[9847],"IDelegationManager":[1347],"Quorum":[7163],"StrategyParams":[7158]},"nodeType":"SourceUnit","src":"32:2339:38","nodes":[{"id":9770,"nodeType":"PragmaDirective","src":"32:24:38","nodes":[],"literals":["solidity","^","0.8",".12"]},{"id":9772,"nodeType":"ImportDirective","src":"58:104:38","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","file":"eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol","nameLocation":"-1:-1:-1","scope":9848,"sourceUnit":1348,"symbolAliases":[{"foreign":{"id":9771,"name":"IDelegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"66:18:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":9774,"nodeType":"ImportDirective","src":"163:105:38","nodes":[],"absolutePath":"lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol","file":"@openzeppelin-upgrades/contracts/utils/CheckpointsUpgradeable.sol","nameLocation":"-1:-1:-1","scope":9848,"sourceUnit":2780,"symbolAliases":[{"foreign":{"id":9773,"name":"CheckpointsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"171:22:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":9778,"nodeType":"ImportDirective","src":"269:127:38","nodes":[],"absolutePath":"lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol","file":"../interfaces/IECDSAStakeRegistryEventsAndErrors.sol","nameLocation":"-1:-1:-1","scope":9848,"sourceUnit":7273,"symbolAliases":[{"foreign":{"id":9775,"name":"ECDSAStakeRegistryEventsAndErrors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7272,"src":"277:33:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":9776,"name":"Quorum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"312:6:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":9777,"name":"StrategyParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"320:14:38","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":9847,"nodeType":"ContractDefinition","src":"398:1972:38","nodes":[{"id":9784,"nodeType":"VariableDeclaration","src":"573:56:38","nodes":[],"constant":false,"documentation":{"id":9781,"nodeType":"StructuredDocumentation","src":"489:79:38","text":"@notice Manages staking delegations through the DelegationManager interface"},"mutability":"immutable","name":"DELEGATION_MANAGER","nameLocation":"611:18:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"},"typeName":{"id":9783,"nodeType":"UserDefinedTypeName","pathNode":{"id":9782,"name":"IDelegationManager","nameLocations":["573:18:38"],"nodeType":"IdentifierPath","referencedDeclaration":1347,"src":"573:18:38"},"referencedDeclaration":1347,"src":"573:18:38","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"visibility":"internal"},{"id":9788,"nodeType":"VariableDeclaration","src":"697:38:38","nodes":[],"constant":true,"documentation":{"id":9785,"nodeType":"StructuredDocumentation","src":"636:56:38","text":"@dev The total amount of multipliers to weigh stakes"},"mutability":"constant","name":"BPS","nameLocation":"723:3:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9786,"name":"uint256","nodeType":"ElementaryTypeName","src":"697:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":9787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"729:6:38","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"internal"},{"id":9791,"nodeType":"VariableDeclaration","src":"795:32:38","nodes":[],"constant":false,"documentation":{"id":9789,"nodeType":"StructuredDocumentation","src":"742:48:38","text":"@notice The size of the current operator set"},"mutability":"mutable","name":"_totalOperators","nameLocation":"812:15:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9790,"name":"uint256","nodeType":"ElementaryTypeName","src":"795:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":9795,"nodeType":"VariableDeclaration","src":"890:23:38","nodes":[],"constant":false,"documentation":{"id":9792,"nodeType":"StructuredDocumentation","src":"834:51:38","text":"@notice Stores the current quorum configuration"},"mutability":"mutable","name":"_quorum","nameLocation":"906:7:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage","typeString":"struct Quorum"},"typeName":{"id":9794,"nodeType":"UserDefinedTypeName","pathNode":{"id":9793,"name":"Quorum","nameLocations":["890:6:38"],"nodeType":"IdentifierPath","referencedDeclaration":7163,"src":"890:6:38"},"referencedDeclaration":7163,"src":"890:6:38","typeDescriptions":{"typeIdentifier":"t_struct$_Quorum_$7163_storage_ptr","typeString":"struct Quorum"}},"visibility":"internal"},{"id":9798,"nodeType":"VariableDeclaration","src":"988:31:38","nodes":[],"constant":false,"documentation":{"id":9796,"nodeType":"StructuredDocumentation","src":"920:63:38","text":"@notice Specifies the weight required to become an operator"},"mutability":"mutable","name":"_minimumWeight","nameLocation":"1005:14:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9797,"name":"uint256","nodeType":"ElementaryTypeName","src":"988:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":9801,"nodeType":"VariableDeclaration","src":"1083:32:38","nodes":[],"constant":false,"documentation":{"id":9799,"nodeType":"StructuredDocumentation","src":"1026:52:38","text":"@notice Holds the address of the service manager"},"mutability":"mutable","name":"_serviceManager","nameLocation":"1100:15:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9800,"name":"address","nodeType":"ElementaryTypeName","src":"1083:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"id":9804,"nodeType":"VariableDeclaration","src":"1199:29:38","nodes":[],"constant":false,"documentation":{"id":9802,"nodeType":"StructuredDocumentation","src":"1122:72:38","text":"@notice Defines the duration after which the stake's weight expires."},"mutability":"mutable","name":"_stakeExpiry","nameLocation":"1216:12:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":9810,"nodeType":"VariableDeclaration","src":"1315:94:38","nodes":[],"constant":false,"documentation":{"id":9805,"nodeType":"StructuredDocumentation","src":"1235:75:38","text":"@notice Maps an operator to their signing key history using checkpoints"},"mutability":"mutable","name":"_operatorSigningKeyHistory","nameLocation":"1383:26:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History)"},"typeName":{"id":9809,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":9806,"name":"address","nodeType":"ElementaryTypeName","src":"1323:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1315:50:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":9808,"nodeType":"UserDefinedTypeName","pathNode":{"id":9807,"name":"CheckpointsUpgradeable.History","nameLocations":["1334:22:38","1357:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1334:30:38"},"referencedDeclaration":2560,"src":"1334:30:38","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}}},"visibility":"internal"},{"id":9814,"nodeType":"VariableDeclaration","src":"1491:59:38","nodes":[],"constant":false,"documentation":{"id":9811,"nodeType":"StructuredDocumentation","src":"1416:70:38","text":"@notice Tracks the total stake history over time using checkpoints"},"mutability":"mutable","name":"_totalWeightHistory","nameLocation":"1531:19:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":9813,"nodeType":"UserDefinedTypeName","pathNode":{"id":9812,"name":"CheckpointsUpgradeable.History","nameLocations":["1491:22:38","1514:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1491:30:38"},"referencedDeclaration":2560,"src":"1491:30:38","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"},{"id":9818,"nodeType":"VariableDeclaration","src":"1624:63:38","nodes":[],"constant":false,"documentation":{"id":9815,"nodeType":"StructuredDocumentation","src":"1557:62:38","text":"@notice Tracks the threshold bps history using checkpoints"},"mutability":"mutable","name":"_thresholdWeightHistory","nameLocation":"1664:23:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage","typeString":"struct CheckpointsUpgradeable.History"},"typeName":{"id":9817,"nodeType":"UserDefinedTypeName","pathNode":{"id":9816,"name":"CheckpointsUpgradeable.History","nameLocations":["1624:22:38","1647:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1624:30:38"},"referencedDeclaration":2560,"src":"1624:30:38","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}},"visibility":"internal"},{"id":9824,"nodeType":"VariableDeclaration","src":"1788:90:38","nodes":[],"constant":false,"documentation":{"id":9819,"nodeType":"StructuredDocumentation","src":"1694:89:38","text":"@notice Maps operator addresses to their respective stake histories using checkpoints"},"mutability":"mutable","name":"_operatorWeightHistory","nameLocation":"1856:22:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History)"},"typeName":{"id":9823,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":9820,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1788:50:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_History_$2560_storage_$","typeString":"mapping(address => struct CheckpointsUpgradeable.History)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":9822,"nodeType":"UserDefinedTypeName","pathNode":{"id":9821,"name":"CheckpointsUpgradeable.History","nameLocations":["1807:22:38","1830:7:38"],"nodeType":"IdentifierPath","referencedDeclaration":2560,"src":"1807:30:38"},"referencedDeclaration":2560,"src":"1807:30:38","typeDescriptions":{"typeIdentifier":"t_struct$_History_$2560_storage_ptr","typeString":"struct CheckpointsUpgradeable.History"}}},"visibility":"internal"},{"id":9829,"nodeType":"VariableDeclaration","src":"1947:53:38","nodes":[],"constant":false,"documentation":{"id":9825,"nodeType":"StructuredDocumentation","src":"1885:57:38","text":"@notice Maps an operator to their registration status"},"mutability":"mutable","name":"_operatorRegistered","nameLocation":"1981:19:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":9828,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":9826,"name":"address","nodeType":"ElementaryTypeName","src":"1955:7:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1947:24:38","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":9827,"name":"bool","nodeType":"ElementaryTypeName","src":"1966:4:38","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"id":9841,"nodeType":"FunctionDefinition","src":"2091:107:38","nodes":[],"body":{"id":9840,"nodeType":"Block","src":"2142:56:38","nodes":[],"statements":[{"expression":{"id":9838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":9836,"name":"DELEGATION_MANAGER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9784,"src":"2152:18:38","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9837,"name":"_delegationManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9833,"src":"2173:18:38","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"src":"2152:39:38","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"id":9839,"nodeType":"ExpressionStatement","src":"2152:39:38"}]},"documentation":{"id":9830,"nodeType":"StructuredDocumentation","src":"2007:79:38","text":"@param _delegationManager Connects this registry with the DelegationManager"},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":9834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9833,"mutability":"mutable","name":"_delegationManager","nameLocation":"2122:18:38","nodeType":"VariableDeclaration","scope":9841,"src":"2103:37:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"},"typeName":{"id":9832,"nodeType":"UserDefinedTypeName","pathNode":{"id":9831,"name":"IDelegationManager","nameLocations":["2103:18:38"],"nodeType":"IdentifierPath","referencedDeclaration":1347,"src":"2103:18:38"},"referencedDeclaration":1347,"src":"2103:18:38","typeDescriptions":{"typeIdentifier":"t_contract$_IDelegationManager_$1347","typeString":"contract IDelegationManager"}},"visibility":"internal"}],"src":"2102:39:38"},"returnParameters":{"id":9835,"nodeType":"ParameterList","parameters":[],"src":"2142:0:38"},"scope":9847,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":9846,"nodeType":"VariableDeclaration","src":"2342:25:38","nodes":[],"constant":false,"documentation":{"id":9842,"nodeType":"StructuredDocumentation","src":"2253:51:38","text":"@dev Reserves storage slots for future upgrades"},"mutability":"mutable","name":"__gap","nameLocation":"2362:5:38","scope":9847,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$40_storage","typeString":"uint256[40]"},"typeName":{"baseType":{"id":9843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":9845,"length":{"hexValue":"3430","id":9844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2350:2:38","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"ArrayTypeName","src":"2342:11:38","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$40_storage_ptr","typeString":"uint256[40]"}},"visibility":"private"}],"abstract":true,"baseContracts":[{"baseName":{"id":9779,"name":"ECDSAStakeRegistryEventsAndErrors","nameLocations":["449:33:38"],"nodeType":"IdentifierPath","referencedDeclaration":7272,"src":"449:33:38"},"id":9780,"nodeType":"InheritanceSpecifier","src":"449:33:38"}],"canonicalName":"ECDSAStakeRegistryStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[9847,7272],"name":"ECDSAStakeRegistryStorage","nameLocation":"416:25:38","scope":9848,"usedErrors":[7235,7238,7241,7244,7247,7250,7253,7256,7259,7262,7265,7268,7271],"usedEvents":[7170,7177,7186,7193,7200,7209,7216,7221,7232]}],"license":"MIT"}}}},"solcLongVersion":"0.8.28","solcVersion":"0.8.28"}