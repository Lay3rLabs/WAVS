package lay3r:avs@0.3.0;

use wasi:io/poll@0.2.0;
use wasi:clocks/monotonic-clock@0.2.0;
use wasi:io/error@0.2.0;
use wasi:io/streams@0.2.0;
use wasi:http/types@0.2.0 as http-types;
use wasi:http/outgoing-handler@0.2.0 as http-outgoing-handler;

interface layer-types {
  record cosmos-addr {
    bech32-addr: string,
    // prefix is the first part of the bech32 address
    prefix-len: u32
  } 

  record cosmos-event {
    ty: string,
    attributes: list<tuple<string, string>>,
  }

  record cosmos-chain-config {
    chain-id: string,
    rpc-endpoint: option<string>,
    grpc-endpoint: option<string>,
    grpc-web-endpoint: option<string>,
    gas-price: f32,
    gas-denom: string,
    bech32-prefix: string,
  }

  record eth-addr {
    raw-bytes: list<u8>
  }

  record eth-event-log-data {
    // the raw log topics that can be decoded into an event
    topics: list<list<u8>>,
    // the raw log data that can be decoded into an event
    data: list<u8>,
  }

  record eth-chain-config {
    chain-id: string,
    ws-endpoint: option<string>,
    http-endpoint: string,
  }

  variant any-addr {
    eth(eth-addr),
    cosmos(cosmos-addr)
  }

  variant any-event {
    eth(eth-event-log-data),
    cosmos(cosmos-event)
  }

  record chain-configs {
    eth: list<tuple<string, eth-chain-config>>,
    cosmos: list<tuple<string, cosmos-chain-config>>,
  }
}

world layer-any-contract-event-world {
  use layer-types.{any-addr, any-event, chain-configs};

  record input {
    chain-name: string, 
    block-height: u64, 
    contract: any-addr, 
    event: any-event,
    chain-configs: chain-configs
  }

  export run: func(input: input) -> result<list<u8>, string>;
}

world layer-cosmos-contract-event-world {
  use layer-types.{cosmos-addr, cosmos-event, chain-configs};
  
  record input {
    chain-name: string, 
    block-height: u64, 
    contract: cosmos-addr, 
    event: cosmos-event,
    chain-configs: chain-configs
  }

  export run: func(input: input) -> result<list<u8>, string>;
}

world layer-eth-contract-event-world {
  use layer-types.{eth-addr, eth-event-log-data, chain-configs};

  record input {
    chain-name: string, 
    block-height: u64, 
    contract: eth-addr, 
    event-log-data: eth-event-log-data,
    chain-configs: chain-configs
  }

  export run: func(input: input) -> result<list<u8>, string>;
}

world layer-raw-world {
  export run: func(input: list<u8>) -> result<list<u8>, string>;
}

world layer-sdk-world {
  use layer-types.{
    cosmos-addr,
    cosmos-event,
    cosmos-chain-config,
    eth-addr,
    eth-event-log-data,
    eth-chain-config,
    any-addr,
    any-event,
    chain-configs
  };
}